
STM32H750B-DK_Buzzer_PWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d65c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf0  0800d8fc  0800d8fc  0001d8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e5ec  0800e5ec  0001e5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e5f4  0800e5f4  0001e5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e5f8  0800e5f8  0001e5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0800e5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000088  0800e684  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000e8  0800e6e4  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec8  24000148  0800e744  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001010  0800e744  00021010  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030729  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004649  00000000  00000000  000508e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002560  00000000  00000000  00054f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d46  00000000  00000000  00057490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00041e84  00000000  00000000  000591d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f21e  00000000  00000000  0009b05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a7272  00000000  00000000  000ca278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000abd4  00000000  00000000  002714ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0027c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d8e4 	.word	0x0800d8e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0800d8e4 	.word	0x0800d8e4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 800068c:	b084      	sub	sp, #16
 800068e:	b580      	push	{r7, lr}
 8000690:	b088      	sub	sp, #32
 8000692:	af00      	add	r7, sp, #0
 8000694:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000698:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800069c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800069e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006a2:	f009 ffcf 	bl	800a644 <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Period = period; // set the period duration
 80006a6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 80006ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006b0:	f009 fe58 	bl	800a364 <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b4:	2360      	movs	r3, #96	; 0x60
 80006b6:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80006b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80006bc:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006ca:	4619      	mov	r1, r3
 80006cc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006d0:	f00a f84e 	bl	800a770 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80006d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80006d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006da:	f009 fea5 	bl	800a428 <HAL_TIM_PWM_Start>
}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006e8:	b004      	add	sp, #16
 80006ea:	4770      	bx	lr

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	b099      	sub	sp, #100	; 0x64
 80006f0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f002 fac7 	bl	8002c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f8f5 	bl	80008e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fa:	f000 f97f 	bl	80009fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 ff59 	bl	80015b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000702:	f000 f9ab 	bl	8000a5c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000706:	f000 fa21 	bl	8000b4c <MX_ADC2_Init>
  MX_ADC3_Init();
 800070a:	f000 fa83 	bl	8000c14 <MX_ADC3_Init>
  MX_ETH_Init();
 800070e:	f000 fae3 	bl	8000cd8 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8000712:	f000 fb2d 	bl	8000d70 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000716:	f000 fb8f 	bl	8000e38 <MX_FDCAN2_Init>
  MX_FMC_Init();
 800071a:	f000 fefd 	bl	8001518 <MX_FMC_Init>
  MX_LTDC_Init();
 800071e:	f000 fbef 	bl	8000f00 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000722:	f000 fc9f 	bl	8001064 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000726:	f000 fcc9 	bl	80010bc <MX_RTC_Init>
  MX_SAI2_Init();
 800072a:	f000 fcef 	bl	800110c <MX_SAI2_Init>
  MX_SPI2_Init();
 800072e:	f000 fdab 	bl	8001288 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000732:	f000 fe73 	bl	800141c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000736:	f000 febd 	bl	80014b4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800073a:	f000 fdf9 	bl	8001330 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800073e:	210c      	movs	r1, #12
 8000740:	485b      	ldr	r0, [pc, #364]	; (80008b0 <main+0x1c4>)
 8000742:	f009 fe71 	bl	800a428 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  melodyCount = sizeof(melodySizes)/ sizeof(uint32_t);
 8000746:	2305      	movs	r3, #5
 8000748:	60bb      	str	r3, [r7, #8]

	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	e08f      	b.n	8000870 <main+0x184>
	  {
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	e071      	b.n	800083a <main+0x14e>
	  	  {
//		  	  buzzerSetNewFrequency(melody[melodyIndex][noteIndex]);
			  NoteFreq = melody[melodyIndex][noteIndex];
 8000756:	4a57      	ldr	r2, [pc, #348]	; (80008b4 <main+0x1c8>)
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	60fb      	str	r3, [r7, #12]
			  if (NoteFreq == 0) NoteFreq = 1;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <main+0x86>
 800076e:	2301      	movs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]

			  ARR_period = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 8000772:	4a51      	ldr	r2, [pc, #324]	; (80008b8 <main+0x1cc>)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	fb92 f3f3 	sdiv	r3, r2, r3
 800077a:	607b      	str	r3, [r7, #4]
    		  setPWM(htim2, TIM_CHANNEL_4, ARR_period, ARR_period/2);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	b29a      	uxth	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da00      	bge.n	8000788 <main+0x9c>
 8000786:	3301      	adds	r3, #1
 8000788:	105b      	asrs	r3, r3, #1
 800078a:	b29b      	uxth	r3, r3
 800078c:	4e48      	ldr	r6, [pc, #288]	; (80008b0 <main+0x1c4>)
 800078e:	9311      	str	r3, [sp, #68]	; 0x44
 8000790:	9210      	str	r2, [sp, #64]	; 0x40
 8000792:	230c      	movs	r3, #12
 8000794:	930f      	str	r3, [sp, #60]	; 0x3c
 8000796:	466d      	mov	r5, sp
 8000798:	f106 0410 	add.w	r4, r6, #16
 800079c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800079e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007b4:	f7ff ff6a 	bl	800068c <setPWM>

			  Delaymsecs = noteDurations[melodyIndex][noteIndex] * melodySlowfactor[melodyIndex];
 80007b8:	4a40      	ldr	r2, [pc, #256]	; (80008bc <main+0x1d0>)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	493d      	ldr	r1, [pc, #244]	; (80008c0 <main+0x1d4>)
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	603b      	str	r3, [r7, #0]

			  snprintf (SendBuffer,BUFSIZE,"Melody[%d],Note #%d F=%d Hz Duration:%d ms| ARR=%d CCR1=%d\r\n",melodyIndex,noteIndex,melody[melodyIndex][noteIndex],Delaymsecs,htim2.Instance->ARR,htim2.Instance->CCR1);
 80007d6:	4a37      	ldr	r2, [pc, #220]	; (80008b4 <main+0x1c8>)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <main+0x1c4>)
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80007ec:	4930      	ldr	r1, [pc, #192]	; (80008b0 <main+0x1c4>)
 80007ee:	6809      	ldr	r1, [r1, #0]
 80007f0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80007f2:	9104      	str	r1, [sp, #16]
 80007f4:	9203      	str	r2, [sp, #12]
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	9202      	str	r2, [sp, #8]
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	4a30      	ldr	r2, [pc, #192]	; (80008c4 <main+0x1d8>)
 8000804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000808:	482f      	ldr	r0, [pc, #188]	; (80008c8 <main+0x1dc>)
 800080a:	f00c fbb3 	bl	800cf74 <sniprintf>
			  HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 800080e:	482e      	ldr	r0, [pc, #184]	; (80008c8 <main+0x1dc>)
 8000810:	f7ff fd66 	bl	80002e0 <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	b29a      	uxth	r2, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	492b      	ldr	r1, [pc, #172]	; (80008c8 <main+0x1dc>)
 800081c:	482b      	ldr	r0, [pc, #172]	; (80008cc <main+0x1e0>)
 800081e:	f00a fec5 	bl	800b5ac <HAL_UART_Transmit>

			  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8000822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000826:	482a      	ldr	r0, [pc, #168]	; (80008d0 <main+0x1e4>)
 8000828:	f004 fddb 	bl	80053e2 <HAL_GPIO_TogglePin>
//			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
//			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
//			  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_10);
//			  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_12);

		  	  HAL_Delay(Delaymsecs);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f002 faba 	bl	8002da8 <HAL_Delay>
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	3301      	adds	r3, #1
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <main+0x1e8>)
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d886      	bhi.n	8000756 <main+0x6a>
	  	  }
		  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of Melody[%d]\r\n\r\n",melodyIndex);
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <main+0x1ec>)
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <main+0x1dc>)
 8000852:	f00c fb8f 	bl	800cf74 <sniprintf>
		  HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000856:	481c      	ldr	r0, [pc, #112]	; (80008c8 <main+0x1dc>)
 8000858:	f7ff fd42 	bl	80002e0 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	4919      	ldr	r1, [pc, #100]	; (80008c8 <main+0x1dc>)
 8000864:	4819      	ldr	r0, [pc, #100]	; (80008cc <main+0x1e0>)
 8000866:	f00a fea1 	bl	800b5ac <HAL_UART_Transmit>
	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3301      	adds	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	429a      	cmp	r2, r3
 8000876:	f6ff af6b 	blt.w	8000750 <main+0x64>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 800087a:	2104      	movs	r1, #4
 800087c:	4817      	ldr	r0, [pc, #92]	; (80008dc <main+0x1f0>)
 800087e:	f004 fdb0 	bl	80053e2 <HAL_GPIO_TogglePin>

	  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of All Melodies[%d]\r\n\r\n",melodyIndex);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <main+0x1f4>)
 8000886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <main+0x1dc>)
 800088c:	f00c fb72 	bl	800cf74 <sniprintf>
	  HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),1);
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <main+0x1dc>)
 8000892:	f7ff fd25 	bl	80002e0 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	2301      	movs	r3, #1
 800089c:	490a      	ldr	r1, [pc, #40]	; (80008c8 <main+0x1dc>)
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <main+0x1e0>)
 80008a0:	f00a fe84 	bl	800b5ac <HAL_UART_Transmit>

      HAL_Delay(2000);
 80008a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008a8:	f002 fa7e 	bl	8002da8 <HAL_Delay>
  {
 80008ac:	e74b      	b.n	8000746 <main+0x5a>
 80008ae:	bf00      	nop
 80008b0:	24000788 	.word	0x24000788
 80008b4:	24000000 	.word	0x24000000
 80008b8:	000f4240 	.word	0x000f4240
 80008bc:	24000014 	.word	0x24000014
 80008c0:	0800e560 	.word	0x0800e560
 80008c4:	0800d8fc 	.word	0x0800d8fc
 80008c8:	24000da8 	.word	0x24000da8
 80008cc:	240007d4 	.word	0x240007d4
 80008d0:	58022000 	.word	0x58022000
 80008d4:	0800e56c 	.word	0x0800e56c
 80008d8:	0800d93c 	.word	0x0800d93c
 80008dc:	58022400 	.word	0x58022400
 80008e0:	0800d958 	.word	0x0800d958

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b09c      	sub	sp, #112	; 0x70
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	224c      	movs	r2, #76	; 0x4c
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f00c fb72 	bl	800cfdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2220      	movs	r2, #32
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f00c fb6c 	bl	800cfdc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000904:	2002      	movs	r0, #2
 8000906:	f005 f977 	bl	8005bf8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <SystemClock_Config+0x10c>)
 8000910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000912:	4a37      	ldr	r2, [pc, #220]	; (80009f0 <SystemClock_Config+0x10c>)
 8000914:	f023 0301 	bic.w	r3, r3, #1
 8000918:	62d3      	str	r3, [r2, #44]	; 0x2c
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <SystemClock_Config+0x10c>)
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <SystemClock_Config+0x110>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800092c:	4a31      	ldr	r2, [pc, #196]	; (80009f4 <SystemClock_Config+0x110>)
 800092e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <SystemClock_Config+0x110>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000940:	bf00      	nop
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <SystemClock_Config+0x110>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800094e:	d1f8      	bne.n	8000942 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <SystemClock_Config+0x114>)
 8000952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000954:	f023 0303 	bic.w	r3, r3, #3
 8000958:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <SystemClock_Config+0x114>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000960:	230b      	movs	r3, #11
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000964:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800096a:	2301      	movs	r3, #1
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096e:	2340      	movs	r3, #64	; 0x40
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000972:	2301      	movs	r3, #1
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000976:	2302      	movs	r3, #2
 8000978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097a:	2302      	movs	r3, #2
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800097e:	2316      	movs	r3, #22
 8000980:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000982:	23a9      	movs	r3, #169	; 0xa9
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800098a:	2304      	movs	r3, #4
 800098c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098e:	2302      	movs	r3, #2
 8000990:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000992:	2300      	movs	r3, #0
 8000994:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000996:	2300      	movs	r3, #0
 8000998:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4618      	mov	r0, r3
 80009a4:	f005 fa2c 	bl	8005e00 <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009ae:	f000 ffd7 	bl	8001960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	233f      	movs	r3, #63	; 0x3f
 80009b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2101      	movs	r1, #1
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 fe6c 	bl	80066b4 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x102>
  {
    Error_Handler();
 80009e2:	f000 ffbd 	bl	8001960 <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3770      	adds	r7, #112	; 0x70
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58000400 	.word	0x58000400
 80009f4:	58024800 	.word	0x58024800
 80009f8:	58024400 	.word	0x58024400

080009fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0b0      	sub	sp, #192	; 0xc0
 8000a00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	22c0      	movs	r2, #192	; 0xc0
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f00c fae7 	bl	800cfdc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a12:	f04f 0300 	mov.w	r3, #0
 8000a16:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a1e:	230c      	movs	r3, #12
 8000a20:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a22:	2305      	movs	r3, #5
 8000a24:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a2e:	23c0      	movs	r3, #192	; 0xc0
 8000a30:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a32:	2320      	movs	r3, #32
 8000a34:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4618      	mov	r0, r3
 8000a44:	f006 f9c2 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a4e:	f000 ff87 	bl	8001960 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	37c0      	adds	r7, #192	; 0xc0
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
 8000a7c:	615a      	str	r2, [r3, #20]
 8000a7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a82:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <MX_ADC1_Init+0xec>)
 8000a84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa6:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ade:	4819      	ldr	r0, [pc, #100]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000ae0:	f002 fb48 	bl	8003174 <HAL_ADC_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000aea:	f000 ff39 	bl	8001960 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4812      	ldr	r0, [pc, #72]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000afa:	f003 f95f 	bl	8003dbc <HAL_ADCEx_MultiModeConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b04:	f000 ff2c 	bl	8001960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b14:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b26:	463b      	mov	r3, r7
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_ADC1_Init+0xe8>)
 8000b2c:	f002 fcc4 	bl	80034b8 <HAL_ADC_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b36:	f000 ff13 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2400019c 	.word	0x2400019c
 8000b48:	40022000 	.word	0x40022000

08000b4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b66:	4a2a      	ldr	r2, [pc, #168]	; (8000c10 <MX_ADC2_Init+0xc4>)
 8000b68:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b70:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b7e:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b80:	2204      	movs	r2, #4
 8000b82:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bc2:	4812      	ldr	r0, [pc, #72]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000bc4:	f002 fad6 	bl	8003174 <HAL_ADC_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bce:	f000 fec7 	bl	8001960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bde:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000be2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be4:	2304      	movs	r3, #4
 8000be6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_ADC2_Init+0xc0>)
 8000bf6:	f002 fc5f 	bl	80034b8 <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000c00:	f000 feae 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	24000200 	.word	0x24000200
 8000c10:	40022100 	.word	0x40022100

08000c14 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	615a      	str	r2, [r3, #20]
 8000c2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c2e:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <MX_ADC3_Init+0xbc>)
 8000c30:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c40:	2204      	movs	r2, #4
 8000c42:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c82:	4812      	ldr	r0, [pc, #72]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000c84:	f002 fa76 	bl	8003174 <HAL_ADC_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c8e:	f000 fe67 	bl	8001960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <MX_ADC3_Init+0xc0>)
 8000c94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c96:	2306      	movs	r3, #6
 8000c98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ca2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_ADC3_Init+0xb8>)
 8000cb6:	f002 fbff 	bl	80034b8 <HAL_ADC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000cc0:	f000 fe4e 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24000264 	.word	0x24000264
 8000cd0:	58026000 	.word	0x58026000
 8000cd4:	1d500080 	.word	0x1d500080

08000cd8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_ETH_Init+0x80>)
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <MX_ETH_Init+0x84>)
 8000ce0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_ETH_Init+0x88>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_ETH_Init+0x88>)
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_ETH_Init+0x88>)
 8000cf0:	22e1      	movs	r2, #225	; 0xe1
 8000cf2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_ETH_Init+0x88>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_ETH_Init+0x88>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_ETH_Init+0x88>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_ETH_Init+0x80>)
 8000d08:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <MX_ETH_Init+0x88>)
 8000d0a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_ETH_Init+0x80>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_ETH_Init+0x80>)
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <MX_ETH_Init+0x8c>)
 8000d16:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_ETH_Init+0x80>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_ETH_Init+0x90>)
 8000d1c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_ETH_Init+0x80>)
 8000d20:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d24:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <MX_ETH_Init+0x80>)
 8000d28:	f003 fa0a 	bl	8004140 <HAL_ETH_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d32:	f000 fe15 	bl	8001960 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d36:	2238      	movs	r2, #56	; 0x38
 8000d38:	2100      	movs	r1, #0
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_ETH_Init+0x94>)
 8000d3c:	f00c f94e 	bl	800cfdc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_ETH_Init+0x94>)
 8000d42:	2221      	movs	r2, #33	; 0x21
 8000d44:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_ETH_Init+0x94>)
 8000d48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d4c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_ETH_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	240002c8 	.word	0x240002c8
 8000d5c:	40028000 	.word	0x40028000
 8000d60:	24000ea8 	.word	0x24000ea8
 8000d64:	240000e8 	.word	0x240000e8
 8000d68:	24000088 	.word	0x24000088
 8000d6c:	24000164 	.word	0x24000164

08000d70 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000d76:	4a2f      	ldr	r2, [pc, #188]	; (8000e34 <MX_FDCAN1_Init+0xc4>)
 8000d78:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000d9a:	2210      	movs	r2, #16
 8000d9c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d9e:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000da6:	2202      	movs	r2, #2
 8000da8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000dee:	2204      	movs	r2, #4
 8000df0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000e18:	2204      	movs	r2, #4
 8000e1a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_FDCAN1_Init+0xc0>)
 8000e1e:	f003 fdb3 	bl	8004988 <HAL_FDCAN_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e28:	f000 fd9a 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	24000378 	.word	0x24000378
 8000e34:	4000a000 	.word	0x4000a000

08000e38 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e3e:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <MX_FDCAN2_Init+0xc4>)
 8000e40:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e54:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e62:	2210      	movs	r2, #16
 8000e64:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000eaa:	2204      	movs	r2, #4
 8000eac:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_FDCAN2_Init+0xc0>)
 8000ee6:	f003 fd4f 	bl	8004988 <HAL_FDCAN_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ef0:	f000 fd36 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	24000418 	.word	0x24000418
 8000efc:	4000a400 	.word	0x4000a400

08000f00 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b09a      	sub	sp, #104	; 0x68
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f0a:	2234      	movs	r2, #52	; 0x34
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f00c f864 	bl	800cfdc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2234      	movs	r2, #52	; 0x34
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00c f85e 	bl	800cfdc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f20:	4b4e      	ldr	r3, [pc, #312]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f22:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <MX_LTDC_Init+0x160>)
 8000f24:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f26:	4b4d      	ldr	r3, [pc, #308]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f2c:	4b4b      	ldr	r3, [pc, #300]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f32:	4b4a      	ldr	r3, [pc, #296]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f3e:	4b47      	ldr	r3, [pc, #284]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f44:	4b45      	ldr	r3, [pc, #276]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f46:	2203      	movs	r2, #3
 8000f48:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f4a:	4b44      	ldr	r3, [pc, #272]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f4c:	220e      	movs	r2, #14
 8000f4e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f50:	4b42      	ldr	r3, [pc, #264]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f52:	2205      	movs	r2, #5
 8000f54:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000f56:	4b41      	ldr	r3, [pc, #260]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f58:	f240 228e 	movw	r2, #654	; 0x28e
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f5e:	4b3f      	ldr	r3, [pc, #252]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f60:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f68:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f70:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000f74:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f8e:	4833      	ldr	r0, [pc, #204]	; (800105c <MX_LTDC_Init+0x15c>)
 8000f90:	f004 fa42 	bl	8005418 <HAL_LTDC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000f9a:	f000 fce1 	bl	8001960 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fbe:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fe2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481c      	ldr	r0, [pc, #112]	; (800105c <MX_LTDC_Init+0x15c>)
 8000fec:	f004 fae4 	bl	80055b8 <HAL_LTDC_ConfigLayer>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000ff6:	f000 fcb3 	bl	8001960 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800101c:	2305      	movs	r3, #5
 800101e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_LTDC_Init+0x15c>)
 8001046:	f004 fab7 	bl	80055b8 <HAL_LTDC_ConfigLayer>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001050:	f000 fc86 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3768      	adds	r7, #104	; 0x68
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	240004b8 	.word	0x240004b8
 8001060:	50001000 	.word	0x50001000

08001064 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <MX_QUADSPI_Init+0x54>)
 800106c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 8001070:	22ff      	movs	r2, #255	; 0xff
 8001072:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 8001076:	2201      	movs	r2, #1
 8001078:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 8001082:	2201      	movs	r2, #1
 8001084:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_QUADSPI_Init+0x50>)
 80010a0:	f004 fdf4 	bl	8005c8c <HAL_QSPI_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010aa:	f000 fc59 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000560 	.word	0x24000560
 80010b8:	52005000 	.word	0x52005000

080010bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_RTC_Init+0x48>)
 80010c2:	4a11      	ldr	r2, [pc, #68]	; (8001108 <MX_RTC_Init+0x4c>)
 80010c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_RTC_Init+0x48>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <MX_RTC_Init+0x48>)
 80010ce:	227f      	movs	r2, #127	; 0x7f
 80010d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_RTC_Init+0x48>)
 80010d4:	22ff      	movs	r2, #255	; 0xff
 80010d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <MX_RTC_Init+0x48>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_RTC_Init+0x48>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <MX_RTC_Init+0x48>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_RTC_Init+0x48>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_RTC_Init+0x48>)
 80010f2:	f008 fb69 	bl	80097c8 <HAL_RTC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80010fc:	f000 fc30 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	240005ac 	.word	0x240005ac
 8001108:	58004000 	.word	0x58004000

0800110c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001110:	4b58      	ldr	r3, [pc, #352]	; (8001274 <MX_SAI2_Init+0x168>)
 8001112:	4a59      	ldr	r2, [pc, #356]	; (8001278 <MX_SAI2_Init+0x16c>)
 8001114:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001116:	4b57      	ldr	r3, [pc, #348]	; (8001274 <MX_SAI2_Init+0x168>)
 8001118:	2200      	movs	r2, #0
 800111a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800111c:	4b55      	ldr	r3, [pc, #340]	; (8001274 <MX_SAI2_Init+0x168>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <MX_SAI2_Init+0x168>)
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001128:	4b52      	ldr	r3, [pc, #328]	; (8001274 <MX_SAI2_Init+0x168>)
 800112a:	2200      	movs	r2, #0
 800112c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800112e:	4b51      	ldr	r3, [pc, #324]	; (8001274 <MX_SAI2_Init+0x168>)
 8001130:	2200      	movs	r2, #0
 8001132:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001134:	4b4f      	ldr	r3, [pc, #316]	; (8001274 <MX_SAI2_Init+0x168>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800113a:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <MX_SAI2_Init+0x168>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001140:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <MX_SAI2_Init+0x168>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001146:	4b4b      	ldr	r3, [pc, #300]	; (8001274 <MX_SAI2_Init+0x168>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800114c:	4b49      	ldr	r3, [pc, #292]	; (8001274 <MX_SAI2_Init+0x168>)
 800114e:	4a4b      	ldr	r2, [pc, #300]	; (800127c <MX_SAI2_Init+0x170>)
 8001150:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001152:	4b48      	ldr	r3, [pc, #288]	; (8001274 <MX_SAI2_Init+0x168>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001158:	4b46      	ldr	r3, [pc, #280]	; (8001274 <MX_SAI2_Init+0x168>)
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800115e:	4b45      	ldr	r3, [pc, #276]	; (8001274 <MX_SAI2_Init+0x168>)
 8001160:	2200      	movs	r2, #0
 8001162:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001164:	4b43      	ldr	r3, [pc, #268]	; (8001274 <MX_SAI2_Init+0x168>)
 8001166:	2200      	movs	r2, #0
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800116a:	4b42      	ldr	r3, [pc, #264]	; (8001274 <MX_SAI2_Init+0x168>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001172:	4b40      	ldr	r3, [pc, #256]	; (8001274 <MX_SAI2_Init+0x168>)
 8001174:	2201      	movs	r2, #1
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001178:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <MX_SAI2_Init+0x168>)
 800117a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <MX_SAI2_Init+0x168>)
 8001182:	2208      	movs	r2, #8
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <MX_SAI2_Init+0x168>)
 8001188:	2201      	movs	r2, #1
 800118a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <MX_SAI2_Init+0x168>)
 800118e:	2200      	movs	r2, #0
 8001190:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <MX_SAI2_Init+0x168>)
 8001194:	2200      	movs	r2, #0
 8001196:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <MX_SAI2_Init+0x168>)
 800119a:	2200      	movs	r2, #0
 800119c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <MX_SAI2_Init+0x168>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <MX_SAI2_Init+0x168>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80011aa:	4b32      	ldr	r3, [pc, #200]	; (8001274 <MX_SAI2_Init+0x168>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <MX_SAI2_Init+0x168>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80011b6:	482f      	ldr	r0, [pc, #188]	; (8001274 <MX_SAI2_Init+0x168>)
 80011b8:	f008 fc1e 	bl	80099f8 <HAL_SAI_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 80011c2:	f000 fbcd 	bl	8001960 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <MX_SAI2_Init+0x174>)
 80011c8:	4a2e      	ldr	r2, [pc, #184]	; (8001284 <MX_SAI2_Init+0x178>)
 80011ca:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <MX_SAI2_Init+0x174>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <MX_SAI2_Init+0x174>)
 80011d4:	2203      	movs	r2, #3
 80011d6:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_SAI2_Init+0x174>)
 80011da:	2240      	movs	r2, #64	; 0x40
 80011dc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <MX_SAI2_Init+0x174>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_SAI2_Init+0x174>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <MX_SAI2_Init+0x174>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <MX_SAI2_Init+0x174>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_SAI2_Init+0x174>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_SAI2_Init+0x174>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_SAI2_Init+0x174>)
 8001204:	2200      	movs	r2, #0
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_SAI2_Init+0x174>)
 800120a:	2200      	movs	r2, #0
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_SAI2_Init+0x174>)
 8001210:	2200      	movs	r2, #0
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_SAI2_Init+0x174>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_SAI2_Init+0x174>)
 800121e:	2201      	movs	r2, #1
 8001220:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_SAI2_Init+0x174>)
 8001224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_SAI2_Init+0x174>)
 800122c:	2208      	movs	r2, #8
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_SAI2_Init+0x174>)
 8001232:	2201      	movs	r2, #1
 8001234:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_SAI2_Init+0x174>)
 8001238:	2200      	movs	r2, #0
 800123a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_SAI2_Init+0x174>)
 800123e:	2200      	movs	r2, #0
 8001240:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_SAI2_Init+0x174>)
 8001244:	2200      	movs	r2, #0
 8001246:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_SAI2_Init+0x174>)
 800124a:	2200      	movs	r2, #0
 800124c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_SAI2_Init+0x174>)
 8001250:	2200      	movs	r2, #0
 8001252:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_SAI2_Init+0x174>)
 8001256:	2201      	movs	r2, #1
 8001258:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_SAI2_Init+0x174>)
 800125c:	2200      	movs	r2, #0
 800125e:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001260:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_SAI2_Init+0x174>)
 8001262:	f008 fbc9 	bl	80099f8 <HAL_SAI_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 800126c:	f000 fb78 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	240005d0 	.word	0x240005d0
 8001278:	40015c04 	.word	0x40015c04
 800127c:	0002ee00 	.word	0x0002ee00
 8001280:	24000668 	.word	0x24000668
 8001284:	40015c24 	.word	0x40015c24

08001288 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_SPI2_Init+0xa0>)
 800128e:	4a27      	ldr	r2, [pc, #156]	; (800132c <MX_SPI2_Init+0xa4>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <MX_SPI2_Init+0xa0>)
 8001294:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001298:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MX_SPI2_Init+0xa0>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012a2:	2203      	movs	r2, #3
 80012a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <MX_SPI2_Init+0xa0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_SPI2_Init+0xa0>)
 8001304:	2200      	movs	r2, #0
 8001306:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <MX_SPI2_Init+0xa0>)
 800130a:	2200      	movs	r2, #0
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_SPI2_Init+0xa0>)
 8001310:	2200      	movs	r2, #0
 8001312:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_SPI2_Init+0xa0>)
 8001316:	f008 fe8f 	bl	800a038 <HAL_SPI_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001320:	f000 fb1e 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	24000700 	.word	0x24000700
 800132c:	40003800 	.word	0x40003800

08001330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <MX_TIM2_Init+0xe8>)
 8001364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001368:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <MX_TIM2_Init+0xe8>)
 800136c:	223f      	movs	r2, #63	; 0x3f
 800136e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <MX_TIM2_Init+0xe8>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MX_TIM2_Init+0xe8>)
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_TIM2_Init+0xe8>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <MX_TIM2_Init+0xe8>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138a:	4823      	ldr	r0, [pc, #140]	; (8001418 <MX_TIM2_Init+0xe8>)
 800138c:	f008 ff93 	bl	800a2b6 <HAL_TIM_Base_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001396:	f000 fae3 	bl	8001960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a4:	4619      	mov	r1, r3
 80013a6:	481c      	ldr	r0, [pc, #112]	; (8001418 <MX_TIM2_Init+0xe8>)
 80013a8:	f009 faf6 	bl	800a998 <HAL_TIM_ConfigClockSource>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013b2:	f000 fad5 	bl	8001960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013b6:	4818      	ldr	r0, [pc, #96]	; (8001418 <MX_TIM2_Init+0xe8>)
 80013b8:	f008 ffd4 	bl	800a364 <HAL_TIM_PWM_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013c2:	f000 facd 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4810      	ldr	r0, [pc, #64]	; (8001418 <MX_TIM2_Init+0xe8>)
 80013d6:	f00a f80b 	bl	800b3f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013e0:	f000 fabe 	bl	8001960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e4:	2360      	movs	r3, #96	; 0x60
 80013e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	220c      	movs	r2, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	4807      	ldr	r0, [pc, #28]	; (8001418 <MX_TIM2_Init+0xe8>)
 80013fc:	f009 f9b8 	bl	800a770 <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001406:	f000 faab 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800140a:	4803      	ldr	r0, [pc, #12]	; (8001418 <MX_TIM2_Init+0xe8>)
 800140c:	f001 f8a0 	bl	8002550 <HAL_TIM_MspPostInit>

}
 8001410:	bf00      	nop
 8001412:	3738      	adds	r7, #56	; 0x38
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	24000788 	.word	0x24000788

0800141c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001422:	4a23      	ldr	r2, [pc, #140]	; (80014b0 <MX_USART3_UART_Init+0x94>)
 8001424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001464:	4811      	ldr	r0, [pc, #68]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001466:	f00a f851 	bl	800b50c <HAL_UART_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001470:	f000 fa76 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001474:	2100      	movs	r1, #0
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001478:	f00b f8e1 	bl	800c63e <HAL_UARTEx_SetTxFifoThreshold>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001482:	f000 fa6d 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001486:	2100      	movs	r1, #0
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800148a:	f00b f916 	bl	800c6ba <HAL_UARTEx_SetRxFifoThreshold>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001494:	f000 fa64 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800149a:	f00b f897 	bl	800c5cc <HAL_UARTEx_DisableFifoMode>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014a4:	f000 fa5c 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	240007d4 	.word	0x240007d4
 80014b0:	40004800 	.word	0x40004800

080014b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80014bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014c0:	2209      	movs	r2, #9
 80014c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014d2:	2202      	movs	r2, #2
 80014d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014fc:	f004 fa34 	bl	8005968 <HAL_PCD_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001506:	f000 fa2b 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	24000868 	.word	0x24000868
 8001514:	40080000 	.word	0x40080000

08001518 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	615a      	str	r2, [r3, #20]
 800152e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_FMC_Init+0x94>)
 8001532:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <MX_FMC_Init+0x98>)
 8001534:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_FMC_Init+0x94>)
 8001538:	2201      	movs	r2, #1
 800153a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_FMC_Init+0x94>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_FMC_Init+0x94>)
 8001544:	2204      	movs	r2, #4
 8001546:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_FMC_Init+0x94>)
 800154a:	2210      	movs	r2, #16
 800154c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_FMC_Init+0x94>)
 8001550:	2240      	movs	r2, #64	; 0x40
 8001552:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_FMC_Init+0x94>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_FMC_Init+0x94>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_FMC_Init+0x94>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_FMC_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_FMC_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001572:	2310      	movs	r3, #16
 8001574:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001576:	2310      	movs	r3, #16
 8001578:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800157a:	2310      	movs	r3, #16
 800157c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800157e:	2310      	movs	r3, #16
 8001580:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001582:	2310      	movs	r3, #16
 8001584:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001586:	2310      	movs	r3, #16
 8001588:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800158a:	2310      	movs	r3, #16
 800158c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_FMC_Init+0x94>)
 8001594:	f008 fd14 	bl	8009fc0 <HAL_SDRAM_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800159e:	f000 f9df 	bl	8001960 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24000d74 	.word	0x24000d74
 80015b0:	52004140 	.word	0x52004140

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b090      	sub	sp, #64	; 0x40
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015ca:	4bc0      	ldr	r3, [pc, #768]	; (80018cc <MX_GPIO_Init+0x318>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	4abe      	ldr	r2, [pc, #760]	; (80018cc <MX_GPIO_Init+0x318>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015da:	4bbc      	ldr	r3, [pc, #752]	; (80018cc <MX_GPIO_Init+0x318>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4bb8      	ldr	r3, [pc, #736]	; (80018cc <MX_GPIO_Init+0x318>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	4ab7      	ldr	r2, [pc, #732]	; (80018cc <MX_GPIO_Init+0x318>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f8:	4bb4      	ldr	r3, [pc, #720]	; (80018cc <MX_GPIO_Init+0x318>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001606:	4bb1      	ldr	r3, [pc, #708]	; (80018cc <MX_GPIO_Init+0x318>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	4aaf      	ldr	r2, [pc, #700]	; (80018cc <MX_GPIO_Init+0x318>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001616:	4bad      	ldr	r3, [pc, #692]	; (80018cc <MX_GPIO_Init+0x318>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001624:	4ba9      	ldr	r3, [pc, #676]	; (80018cc <MX_GPIO_Init+0x318>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	4aa8      	ldr	r2, [pc, #672]	; (80018cc <MX_GPIO_Init+0x318>)
 800162c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001634:	4ba5      	ldr	r3, [pc, #660]	; (80018cc <MX_GPIO_Init+0x318>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	4ba2      	ldr	r3, [pc, #648]	; (80018cc <MX_GPIO_Init+0x318>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	4aa0      	ldr	r2, [pc, #640]	; (80018cc <MX_GPIO_Init+0x318>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001652:	4b9e      	ldr	r3, [pc, #632]	; (80018cc <MX_GPIO_Init+0x318>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b9a      	ldr	r3, [pc, #616]	; (80018cc <MX_GPIO_Init+0x318>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001666:	4a99      	ldr	r2, [pc, #612]	; (80018cc <MX_GPIO_Init+0x318>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001670:	4b96      	ldr	r3, [pc, #600]	; (80018cc <MX_GPIO_Init+0x318>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	4b93      	ldr	r3, [pc, #588]	; (80018cc <MX_GPIO_Init+0x318>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	4a91      	ldr	r2, [pc, #580]	; (80018cc <MX_GPIO_Init+0x318>)
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168e:	4b8f      	ldr	r3, [pc, #572]	; (80018cc <MX_GPIO_Init+0x318>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800169c:	4b8b      	ldr	r3, [pc, #556]	; (80018cc <MX_GPIO_Init+0x318>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a2:	4a8a      	ldr	r2, [pc, #552]	; (80018cc <MX_GPIO_Init+0x318>)
 80016a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ac:	4b87      	ldr	r3, [pc, #540]	; (80018cc <MX_GPIO_Init+0x318>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	4b84      	ldr	r3, [pc, #528]	; (80018cc <MX_GPIO_Init+0x318>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	4a82      	ldr	r2, [pc, #520]	; (80018cc <MX_GPIO_Init+0x318>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ca:	4b80      	ldr	r3, [pc, #512]	; (80018cc <MX_GPIO_Init+0x318>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d8:	4b7c      	ldr	r3, [pc, #496]	; (80018cc <MX_GPIO_Init+0x318>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	4a7b      	ldr	r2, [pc, #492]	; (80018cc <MX_GPIO_Init+0x318>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e8:	4b78      	ldr	r3, [pc, #480]	; (80018cc <MX_GPIO_Init+0x318>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f6:	4b75      	ldr	r3, [pc, #468]	; (80018cc <MX_GPIO_Init+0x318>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fc:	4a73      	ldr	r2, [pc, #460]	; (80018cc <MX_GPIO_Init+0x318>)
 80016fe:	f043 0320 	orr.w	r3, r3, #32
 8001702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001706:	4b71      	ldr	r3, [pc, #452]	; (80018cc <MX_GPIO_Init+0x318>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171a:	486d      	ldr	r0, [pc, #436]	; (80018d0 <MX_GPIO_Init+0x31c>)
 800171c:	f003 fe48 	bl	80053b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001726:	486b      	ldr	r0, [pc, #428]	; (80018d4 <MX_GPIO_Init+0x320>)
 8001728:	f003 fe42 	bl	80053b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	f241 0104 	movw	r1, #4100	; 0x1004
 8001732:	4869      	ldr	r0, [pc, #420]	; (80018d8 <MX_GPIO_Init+0x324>)
 8001734:	f003 fe3c 	bl	80053b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2104      	movs	r1, #4
 800173c:	4867      	ldr	r0, [pc, #412]	; (80018dc <MX_GPIO_Init+0x328>)
 800173e:	f003 fe37 	bl	80053b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2110      	movs	r1, #16
 8001746:	4866      	ldr	r0, [pc, #408]	; (80018e0 <MX_GPIO_Init+0x32c>)
 8001748:	f003 fe32 	bl	80053b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800174c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800175e:	2303      	movs	r3, #3
 8001760:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001766:	4619      	mov	r1, r3
 8001768:	485a      	ldr	r0, [pc, #360]	; (80018d4 <MX_GPIO_Init+0x320>)
 800176a:	f003 fc71 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177e:	4619      	mov	r1, r3
 8001780:	4858      	ldr	r0, [pc, #352]	; (80018e4 <MX_GPIO_Init+0x330>)
 8001782:	f003 fc65 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001786:	2330      	movs	r3, #48	; 0x30
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001796:	230a      	movs	r3, #10
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179e:	4619      	mov	r1, r3
 80017a0:	4851      	ldr	r0, [pc, #324]	; (80018e8 <MX_GPIO_Init+0x334>)
 80017a2:	f003 fc55 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80017a6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b8:	4619      	mov	r1, r3
 80017ba:	4849      	ldr	r0, [pc, #292]	; (80018e0 <MX_GPIO_Init+0x32c>)
 80017bc:	f003 fc48 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d2:	4619      	mov	r1, r3
 80017d4:	4845      	ldr	r0, [pc, #276]	; (80018ec <MX_GPIO_Init+0x338>)
 80017d6:	f003 fc3b 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f4:	4619      	mov	r1, r3
 80017f6:	483a      	ldr	r0, [pc, #232]	; (80018e0 <MX_GPIO_Init+0x32c>)
 80017f8:	f003 fc2a 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800180c:	2306      	movs	r3, #6
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	4836      	ldr	r0, [pc, #216]	; (80018f0 <MX_GPIO_Init+0x33c>)
 8001818:	f003 fc1a 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800181c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	4619      	mov	r1, r3
 8001834:	4826      	ldr	r0, [pc, #152]	; (80018d0 <MX_GPIO_Init+0x31c>)
 8001836:	f003 fc0b 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800183a:	2304      	movs	r3, #4
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800183e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184c:	4619      	mov	r1, r3
 800184e:	4828      	ldr	r0, [pc, #160]	; (80018f0 <MX_GPIO_Init+0x33c>)
 8001850:	f003 fbfe 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001854:	2301      	movs	r3, #1
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001864:	4619      	mov	r1, r3
 8001866:	4823      	ldr	r0, [pc, #140]	; (80018f4 <MX_GPIO_Init+0x340>)
 8001868:	f003 fbf2 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH10 PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800186c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800187e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001882:	4619      	mov	r1, r3
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <MX_GPIO_Init+0x320>)
 8001886:	f003 fbe3 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 800188a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001890:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189e:	4619      	mov	r1, r3
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <MX_GPIO_Init+0x320>)
 80018a2:	f003 fbd5 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018a6:	2340      	movs	r3, #64	; 0x40
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80018b6:	2309      	movs	r3, #9
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_GPIO_Init+0x32c>)
 80018c2:	f003 fbc5 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80018c6:	f241 0304 	movw	r3, #4100	; 0x1004
 80018ca:	e015      	b.n	80018f8 <MX_GPIO_Init+0x344>
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58022000 	.word	0x58022000
 80018d4:	58021c00 	.word	0x58021c00
 80018d8:	58020400 	.word	0x58020400
 80018dc:	58022400 	.word	0x58022400
 80018e0:	58020000 	.word	0x58020000
 80018e4:	58020c00 	.word	0x58020c00
 80018e8:	58021000 	.word	0x58021000
 80018ec:	58020800 	.word	0x58020800
 80018f0:	58021800 	.word	0x58021800
 80018f4:	58022800 	.word	0x58022800
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	4811      	ldr	r0, [pc, #68]	; (8001954 <MX_GPIO_Init+0x3a0>)
 800190e:	f003 fb9f 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001912:	2304      	movs	r3, #4
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001926:	4619      	mov	r1, r3
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <MX_GPIO_Init+0x3a4>)
 800192a:	f003 fb91 	bl	8005050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800192e:	2310      	movs	r3, #16
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_GPIO_Init+0x3a8>)
 8001946:	f003 fb83 	bl	8005050 <HAL_GPIO_Init>

}
 800194a:	bf00      	nop
 800194c:	3740      	adds	r7, #64	; 0x40
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	58020400 	.word	0x58020400
 8001958:	58022400 	.word	0x58022400
 800195c:	58020000 	.word	0x58020000

08001960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
}
 8001966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001968:	e7fe      	b.n	8001968 <Error_Handler+0x8>
	...

0800196c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_MspInit+0x30>)
 8001974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_MspInit+0x30>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_MspInit+0x30>)
 8001984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	58024400 	.word	0x58024400

080019a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b090      	sub	sp, #64	; 0x40
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a72      	ldr	r2, [pc, #456]	; (8001b88 <HAL_ADC_MspInit+0x1e8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d14e      	bne.n	8001a60 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019c2:	4b72      	ldr	r3, [pc, #456]	; (8001b8c <HAL_ADC_MspInit+0x1ec>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a70      	ldr	r2, [pc, #448]	; (8001b8c <HAL_ADC_MspInit+0x1ec>)
 80019ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <HAL_ADC_MspInit+0x1ec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d10e      	bne.n	80019f2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019d4:	4b6e      	ldr	r3, [pc, #440]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 80019d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019da:	4a6d      	ldr	r2, [pc, #436]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019e4:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 80019e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a02:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a16:	4a5e      	ldr	r2, [pc, #376]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a20:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a32:	2303      	movs	r3, #3
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4854      	ldr	r0, [pc, #336]	; (8001b94 <HAL_ADC_MspInit+0x1f4>)
 8001a42:	f003 fb05 	bl	8005050 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001a46:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001a4a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001a4e:	f001 f9ef 	bl	8002e30 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001a52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a56:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a5a:	f001 f9e9 	bl	8002e30 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a5e:	e08f      	b.n	8001b80 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a4c      	ldr	r2, [pc, #304]	; (8001b98 <HAL_ADC_MspInit+0x1f8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d133      	bne.n	8001ad2 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a6a:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <HAL_ADC_MspInit+0x1ec>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <HAL_ADC_MspInit+0x1ec>)
 8001a72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a74:	4b45      	ldr	r3, [pc, #276]	; (8001b8c <HAL_ADC_MspInit+0x1ec>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d10e      	bne.n	8001a9a <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a7c:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a82:	4a43      	ldr	r2, [pc, #268]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001a84:	f043 0320 	orr.w	r3, r3, #32
 8001a88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a8c:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa0:	4a3b      	ldr	r2, [pc, #236]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aaa:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001ab8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001abc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001ac0:	f001 f9b6 	bl	8002e30 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001ac4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ac8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001acc:	f001 f9b0 	bl	8002e30 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001ad0:	e056      	b.n	8001b80 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a31      	ldr	r2, [pc, #196]	; (8001b9c <HAL_ADC_MspInit+0x1fc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d151      	bne.n	8001b80 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001adc:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	4a2b      	ldr	r2, [pc, #172]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001ae4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b00:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_ADC_MspInit+0x1f0>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <HAL_ADC_MspInit+0x200>)
 8001b4c:	f003 fa80 	bl	8005050 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b54:	2303      	movs	r3, #3
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b60:	4619      	mov	r1, r3
 8001b62:	480c      	ldr	r0, [pc, #48]	; (8001b94 <HAL_ADC_MspInit+0x1f4>)
 8001b64:	f003 fa74 	bl	8005050 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001b68:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001b6c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001b70:	f001 f95e 	bl	8002e30 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001b74:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001b78:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001b7c:	f001 f958 	bl	8002e30 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001b80:	bf00      	nop
 8001b82:	3740      	adds	r7, #64	; 0x40
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	24000eb0 	.word	0x24000eb0
 8001b90:	58024400 	.word	0x58024400
 8001b94:	58020800 	.word	0x58020800
 8001b98:	40022100 	.word	0x40022100
 8001b9c:	58026000 	.word	0x58026000
 8001ba0:	58021400 	.word	0x58021400

08001ba4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b092      	sub	sp, #72	; 0x48
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a87      	ldr	r2, [pc, #540]	; (8001de0 <HAL_ETH_MspInit+0x23c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	f040 8108 	bne.w	8001dd8 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001bc8:	4b86      	ldr	r3, [pc, #536]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bce:	4a85      	ldr	r2, [pc, #532]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bd8:	4b82      	ldr	r3, [pc, #520]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001be6:	4b7f      	ldr	r3, [pc, #508]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001be8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bec:	4a7d      	ldr	r2, [pc, #500]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bf6:	4b7b      	ldr	r3, [pc, #492]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001c04:	4b77      	ldr	r3, [pc, #476]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c0a:	4a76      	ldr	r2, [pc, #472]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c14:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c22:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c28:	4a6e      	ldr	r2, [pc, #440]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c32:	4b6c      	ldr	r3, [pc, #432]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c46:	4a67      	ldr	r2, [pc, #412]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c50:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c5e:	4b61      	ldr	r3, [pc, #388]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c64:	4a5f      	ldr	r2, [pc, #380]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8c:	4b55      	ldr	r3, [pc, #340]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c9a:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca0:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001caa:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbe:	4a49      	ldr	r2, [pc, #292]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc8:	4b46      	ldr	r3, [pc, #280]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cdc:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce6:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <HAL_ETH_MspInit+0x240>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001cf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d06:	230b      	movs	r3, #11
 8001d08:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4835      	ldr	r0, [pc, #212]	; (8001de8 <HAL_ETH_MspInit+0x244>)
 8001d12:	f003 f99d 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001d16:	2304      	movs	r3, #4
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d26:	230b      	movs	r3, #11
 8001d28:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d2e:	4619      	mov	r1, r3
 8001d30:	482e      	ldr	r0, [pc, #184]	; (8001dec <HAL_ETH_MspInit+0x248>)
 8001d32:	f003 f98d 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d48:	230b      	movs	r3, #11
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d50:	4619      	mov	r1, r3
 8001d52:	4827      	ldr	r0, [pc, #156]	; (8001df0 <HAL_ETH_MspInit+0x24c>)
 8001d54:	f003 f97c 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001d58:	233e      	movs	r3, #62	; 0x3e
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d68:	230b      	movs	r3, #11
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d70:	4619      	mov	r1, r3
 8001d72:	4820      	ldr	r0, [pc, #128]	; (8001df4 <HAL_ETH_MspInit+0x250>)
 8001d74:	f003 f96c 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001d78:	230c      	movs	r3, #12
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d88:	230b      	movs	r3, #11
 8001d8a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d90:	4619      	mov	r1, r3
 8001d92:	4819      	ldr	r0, [pc, #100]	; (8001df8 <HAL_ETH_MspInit+0x254>)
 8001d94:	f003 f95c 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001d98:	2386      	movs	r3, #134	; 0x86
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001da8:	230b      	movs	r3, #11
 8001daa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001db0:	4619      	mov	r1, r3
 8001db2:	4812      	ldr	r0, [pc, #72]	; (8001dfc <HAL_ETH_MspInit+0x258>)
 8001db4:	f003 f94c 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001db8:	2303      	movs	r3, #3
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc8:	230b      	movs	r3, #11
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480b      	ldr	r0, [pc, #44]	; (8001e00 <HAL_ETH_MspInit+0x25c>)
 8001dd4:	f003 f93c 	bl	8005050 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001dd8:	bf00      	nop
 8001dda:	3748      	adds	r7, #72	; 0x48
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40028000 	.word	0x40028000
 8001de4:	58024400 	.word	0x58024400
 8001de8:	58021800 	.word	0x58021800
 8001dec:	58021000 	.word	0x58021000
 8001df0:	58022000 	.word	0x58022000
 8001df4:	58020800 	.word	0x58020800
 8001df8:	58021c00 	.word	0x58021c00
 8001dfc:	58020000 	.word	0x58020000
 8001e00:	58020400 	.word	0x58020400

08001e04 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0bc      	sub	sp, #240	; 0xf0
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	22c0      	movs	r2, #192	; 0xc0
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00b f8d9 	bl	800cfdc <memset>
  if(hfdcan->Instance==FDCAN1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a57      	ldr	r2, [pc, #348]	; (8001f8c <HAL_FDCAN_MspInit+0x188>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d151      	bne.n	8001ed8 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e48:	f107 0318 	add.w	r3, r7, #24
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 ffbd 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001e58:	f7ff fd82 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <HAL_FDCAN_MspInit+0x18c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <HAL_FDCAN_MspInit+0x18c>)
 8001e64:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_FDCAN_MspInit+0x18c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10e      	bne.n	8001e8c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e6e:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001e70:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e74:	4a47      	ldr	r2, [pc, #284]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e7e:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001e80:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8c:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	4a40      	ldr	r2, [pc, #256]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9c:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001eaa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ec4:	2309      	movs	r3, #9
 8001ec6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4831      	ldr	r0, [pc, #196]	; (8001f98 <HAL_FDCAN_MspInit+0x194>)
 8001ed2:	f003 f8bd 	bl	8005050 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001ed6:	e055      	b.n	8001f84 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <HAL_FDCAN_MspInit+0x198>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d150      	bne.n	8001f84 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ee2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001eee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef6:	f107 0318 	add.w	r3, r7, #24
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 ff66 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001f06:	f7ff fd2b 	bl	8001960 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_FDCAN_MspInit+0x18c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <HAL_FDCAN_MspInit+0x18c>)
 8001f12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_FDCAN_MspInit+0x18c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10e      	bne.n	8001f3a <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001f1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f22:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f28:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001f2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_FDCAN_MspInit+0x190>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001f58:	f242 0320 	movw	r3, #8224	; 0x2020
 8001f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f72:	2309      	movs	r3, #9
 8001f74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <HAL_FDCAN_MspInit+0x19c>)
 8001f80:	f003 f866 	bl	8005050 <HAL_GPIO_Init>
}
 8001f84:	bf00      	nop
 8001f86:	37f0      	adds	r7, #240	; 0xf0
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	4000a000 	.word	0x4000a000
 8001f90:	24000eb4 	.word	0x24000eb4
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58021c00 	.word	0x58021c00
 8001f9c:	4000a400 	.word	0x4000a400
 8001fa0:	58020400 	.word	0x58020400

08001fa4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0be      	sub	sp, #248	; 0xf8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	22c0      	movs	r2, #192	; 0xc0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00b f809 	bl	800cfdc <memset>
  if(hltdc->Instance==LTDC)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a66      	ldr	r2, [pc, #408]	; (8002168 <HAL_LTDC_MspInit+0x1c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	f040 80c4 	bne.w	800215e <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fd6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001fe6:	23c0      	movs	r3, #192	; 0xc0
 8001fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001fea:	2302      	movs	r3, #2
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001ff6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002000:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fede 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8002016:	f7ff fca3 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800201a:	4b54      	ldr	r3, [pc, #336]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 800201c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002020:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 8002022:	f043 0308 	orr.w	r3, r3, #8
 8002026:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 800202c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002038:	4b4c      	ldr	r3, [pc, #304]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 800203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203e:	4a4b      	ldr	r2, [pc, #300]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 8002040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002048:	4b48      	ldr	r3, [pc, #288]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002056:	4b45      	ldr	r3, [pc, #276]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205c:	4a43      	ldr	r2, [pc, #268]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002074:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	4a3c      	ldr	r2, [pc, #240]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 800207c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002092:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002098:	4a34      	ldr	r2, [pc, #208]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 800209a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a2:	4b32      	ldr	r3, [pc, #200]	; (800216c <HAL_LTDC_MspInit+0x1c8>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80020b0:	23fc      	movs	r3, #252	; 0xfc
 80020b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c8:	230e      	movs	r3, #14
 80020ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4826      	ldr	r0, [pc, #152]	; (8002170 <HAL_LTDC_MspInit+0x1cc>)
 80020d6:	f002 ffbb 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80020da:	f24d 2303 	movw	r3, #53763	; 0xd203
 80020de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f4:	230e      	movs	r3, #14
 80020f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020fe:	4619      	mov	r1, r3
 8002100:	481c      	ldr	r0, [pc, #112]	; (8002174 <HAL_LTDC_MspInit+0x1d0>)
 8002102:	f002 ffa5 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8002106:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800210a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002120:	230e      	movs	r3, #14
 8002122:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002126:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800212a:	4619      	mov	r1, r3
 800212c:	4812      	ldr	r0, [pc, #72]	; (8002178 <HAL_LTDC_MspInit+0x1d4>)
 800212e:	f002 ff8f 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800214c:	230e      	movs	r3, #14
 800214e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002152:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002156:	4619      	mov	r1, r3
 8002158:	4808      	ldr	r0, [pc, #32]	; (800217c <HAL_LTDC_MspInit+0x1d8>)
 800215a:	f002 ff79 	bl	8005050 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	37f8      	adds	r7, #248	; 0xf8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	50001000 	.word	0x50001000
 800216c:	58024400 	.word	0x58024400
 8002170:	58022800 	.word	0x58022800
 8002174:	58022000 	.word	0x58022000
 8002178:	58022400 	.word	0x58022400
 800217c:	58021c00 	.word	0x58021c00

08002180 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b0bc      	sub	sp, #240	; 0xf0
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	22c0      	movs	r2, #192	; 0xc0
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f00a ff1b 	bl	800cfdc <memset>
  if(hqspi->Instance==QUADSPI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_QSPI_MspInit+0x184>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	f040 80a5 	bne.w	80022fc <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80021b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80021be:	2300      	movs	r3, #0
 80021c0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c2:	f107 0318 	add.w	r3, r7, #24
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 fe00 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80021d2:	f7ff fbc5 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021d6:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 80021d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021dc:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 80021de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80021e6:	4b48      	ldr	r3, [pc, #288]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 80021e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b44      	ldr	r3, [pc, #272]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fa:	4a43      	ldr	r2, [pc, #268]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002212:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002218:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 800221a:	f043 0320 	orr.w	r3, r3, #32
 800221e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002222:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	4a34      	ldr	r2, [pc, #208]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002240:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_QSPI_MspInit+0x188>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800224e:	2340      	movs	r3, #64	; 0x40
 8002250:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002266:	230a      	movs	r3, #10
 8002268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002270:	4619      	mov	r1, r3
 8002272:	4826      	ldr	r0, [pc, #152]	; (800230c <HAL_QSPI_MspInit+0x18c>)
 8002274:	f002 feec 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002278:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800227c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002292:	2309      	movs	r3, #9
 8002294:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002298:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800229c:	4619      	mov	r1, r3
 800229e:	481c      	ldr	r0, [pc, #112]	; (8002310 <HAL_QSPI_MspInit+0x190>)
 80022a0:	f002 fed6 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80022be:	230a      	movs	r3, #10
 80022c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022c8:	4619      	mov	r1, r3
 80022ca:	4811      	ldr	r0, [pc, #68]	; (8002310 <HAL_QSPI_MspInit+0x190>)
 80022cc:	f002 fec0 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022ea:	2309      	movs	r3, #9
 80022ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022f4:	4619      	mov	r1, r3
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <HAL_QSPI_MspInit+0x194>)
 80022f8:	f002 feaa 	bl	8005050 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80022fc:	bf00      	nop
 80022fe:	37f0      	adds	r7, #240	; 0xf0
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	52005000 	.word	0x52005000
 8002308:	58024400 	.word	0x58024400
 800230c:	58020400 	.word	0x58020400
 8002310:	58021400 	.word	0x58021400
 8002314:	58020c00 	.word	0x58020c00

08002318 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0b2      	sub	sp, #200	; 0xc8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002320:	f107 0308 	add.w	r3, r7, #8
 8002324:	22c0      	movs	r2, #192	; 0xc0
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f00a fe57 	bl	800cfdc <memset>
  if(hrtc->Instance==RTC)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <HAL_RTC_MspInit+0x5c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d119      	bne.n	800236c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002338:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002348:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	4618      	mov	r0, r3
 8002352:	f004 fd3b 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800235c:	f7ff fb00 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RTC_MspInit+0x60>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_RTC_MspInit+0x60>)
 8002366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800236c:	bf00      	nop
 800236e:	37c8      	adds	r7, #200	; 0xc8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	58004000 	.word	0x58004000
 8002378:	58024400 	.word	0x58024400

0800237c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0bc      	sub	sp, #240	; 0xf0
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	22c0      	movs	r2, #192	; 0xc0
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f00a fe1d 	bl	800cfdc <memset>
  if(hspi->Instance==SPI2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a55      	ldr	r2, [pc, #340]	; (80024fc <HAL_SPI_MspInit+0x180>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	f040 80a3 	bne.w	80024f4 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80023ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023be:	f107 0318 	add.w	r3, r7, #24
 80023c2:	4618      	mov	r0, r3
 80023c4:	f004 fd02 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80023ce:	f7ff fac7 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023d2:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_SPI_MspInit+0x184>)
 80023d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d8:	4a49      	ldr	r2, [pc, #292]	; (8002500 <HAL_SPI_MspInit+0x184>)
 80023da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_SPI_MspInit+0x184>)
 80023e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_SPI_MspInit+0x184>)
 80023f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f6:	4a42      	ldr	r2, [pc, #264]	; (8002500 <HAL_SPI_MspInit+0x184>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002400:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_SPI_MspInit+0x184>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800240e:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <HAL_SPI_MspInit+0x184>)
 8002410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002414:	4a3a      	ldr	r2, [pc, #232]	; (8002500 <HAL_SPI_MspInit+0x184>)
 8002416:	f043 0308 	orr.w	r3, r3, #8
 800241a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_SPI_MspInit+0x184>)
 8002420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_SPI_MspInit+0x184>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002432:	4a33      	ldr	r2, [pc, #204]	; (8002500 <HAL_SPI_MspInit+0x184>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_SPI_MspInit+0x184>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800244a:	2310      	movs	r3, #16
 800244c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002462:	2307      	movs	r3, #7
 8002464:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002468:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800246c:	4619      	mov	r1, r3
 800246e:	4825      	ldr	r0, [pc, #148]	; (8002504 <HAL_SPI_MspInit+0x188>)
 8002470:	f002 fdee 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002474:	2308      	movs	r3, #8
 8002476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800248c:	2305      	movs	r3, #5
 800248e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002492:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002496:	4619      	mov	r1, r3
 8002498:	481b      	ldr	r0, [pc, #108]	; (8002508 <HAL_SPI_MspInit+0x18c>)
 800249a:	f002 fdd9 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800249e:	2304      	movs	r3, #4
 80024a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024b6:	2305      	movs	r3, #5
 80024b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024c0:	4619      	mov	r1, r3
 80024c2:	4812      	ldr	r0, [pc, #72]	; (800250c <HAL_SPI_MspInit+0x190>)
 80024c4:	f002 fdc4 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024e2:	2305      	movs	r3, #5
 80024e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024ec:	4619      	mov	r1, r3
 80024ee:	4805      	ldr	r0, [pc, #20]	; (8002504 <HAL_SPI_MspInit+0x188>)
 80024f0:	f002 fdae 	bl	8005050 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024f4:	bf00      	nop
 80024f6:	37f0      	adds	r7, #240	; 0xf0
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40003800 	.word	0x40003800
 8002500:	58024400 	.word	0x58024400
 8002504:	58020400 	.word	0x58020400
 8002508:	58020c00 	.word	0x58020c00
 800250c:	58022000 	.word	0x58022000

08002510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_TIM_Base_MspInit+0x3c>)
 8002524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002528:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_TIM_Base_MspInit+0x3c>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_TIM_Base_MspInit+0x3c>)
 8002534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	58024400 	.word	0x58024400

08002550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d11e      	bne.n	80025b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_TIM_MspPostInit+0x68>)
 8002574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002578:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <HAL_TIM_MspPostInit+0x68>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_TIM_MspPostInit+0x68>)
 8002584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002590:	2308      	movs	r3, #8
 8002592:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	4619      	mov	r1, r3
 80025aa:	4804      	ldr	r0, [pc, #16]	; (80025bc <HAL_TIM_MspPostInit+0x6c>)
 80025ac:	f002 fd50 	bl	8005050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025b0:	bf00      	nop
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	58024400 	.word	0x58024400
 80025bc:	58020000 	.word	0x58020000

080025c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0ba      	sub	sp, #232	; 0xe8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	22c0      	movs	r2, #192	; 0xc0
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00a fcfb 	bl	800cfdc <memset>
  if(huart->Instance==USART3)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a27      	ldr	r2, [pc, #156]	; (8002688 <HAL_UART_MspInit+0xc8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d146      	bne.n	800267e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025f0:	f04f 0202 	mov.w	r2, #2
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4618      	mov	r0, r3
 8002608:	f004 fbe0 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002612:	f7ff f9a5 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_UART_MspInit+0xcc>)
 8002618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800261c:	4a1b      	ldr	r2, [pc, #108]	; (800268c <HAL_UART_MspInit+0xcc>)
 800261e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002622:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_UART_MspInit+0xcc>)
 8002628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800262c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002634:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_UART_MspInit+0xcc>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_UART_MspInit+0xcc>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_UART_MspInit+0xcc>)
 8002646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002652:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800266c:	2307      	movs	r3, #7
 800266e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002676:	4619      	mov	r1, r3
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <HAL_UART_MspInit+0xd0>)
 800267a:	f002 fce9 	bl	8005050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800267e:	bf00      	nop
 8002680:	37e8      	adds	r7, #232	; 0xe8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40004800 	.word	0x40004800
 800268c:	58024400 	.word	0x58024400
 8002690:	58020400 	.word	0x58020400

08002694 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0ba      	sub	sp, #232	; 0xe8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	22c0      	movs	r2, #192	; 0xc0
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f00a fc91 	bl	800cfdc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a30      	ldr	r2, [pc, #192]	; (8002780 <HAL_PCD_MspInit+0xec>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d159      	bne.n	8002778 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80026d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fb75 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80026e8:	f7ff f93a 	bl	8001960 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80026ec:	f003 fabe 	bl	8005c6c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_PCD_MspInit+0xf0>)
 80026f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f6:	4a23      	ldr	r2, [pc, #140]	; (8002784 <HAL_PCD_MspInit+0xf0>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_PCD_MspInit+0xf0>)
 8002702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800270e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002726:	4619      	mov	r1, r3
 8002728:	4817      	ldr	r0, [pc, #92]	; (8002788 <HAL_PCD_MspInit+0xf4>)
 800272a:	f002 fc91 	bl	8005050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800272e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002748:	230a      	movs	r3, #10
 800274a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002752:	4619      	mov	r1, r3
 8002754:	480c      	ldr	r0, [pc, #48]	; (8002788 <HAL_PCD_MspInit+0xf4>)
 8002756:	f002 fc7b 	bl	8005050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_PCD_MspInit+0xf0>)
 800275c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002760:	4a08      	ldr	r2, [pc, #32]	; (8002784 <HAL_PCD_MspInit+0xf0>)
 8002762:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002766:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_PCD_MspInit+0xf0>)
 800276c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002778:	bf00      	nop
 800277a:	37e8      	adds	r7, #232	; 0xe8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40080000 	.word	0x40080000
 8002784:	58024400 	.word	0x58024400
 8002788:	58020000 	.word	0x58020000

0800278c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800278c:	b580      	push	{r7, lr}
 800278e:	b0b8      	sub	sp, #224	; 0xe0
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002792:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <HAL_FMC_MspInit+0x15c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 8099 	bne.w	80028de <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80027ac:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <HAL_FMC_MspInit+0x15c>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	22c0      	movs	r2, #192	; 0xc0
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f00a fc0e 	bl	800cfdc <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80027c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d0:	f107 0308 	add.w	r3, r7, #8
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 faf9 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80027e0:	f7ff f8be 	bl	8001960 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80027e4:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_FMC_MspInit+0x160>)
 80027e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027ea:	4a40      	ldr	r2, [pc, #256]	; (80028ec <HAL_FMC_MspInit+0x160>)
 80027ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80027f4:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_FMC_MspInit+0x160>)
 80027f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002802:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002806:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800281c:	230c      	movs	r3, #12
 800281e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002822:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002826:	4619      	mov	r1, r3
 8002828:	4831      	ldr	r0, [pc, #196]	; (80028f0 <HAL_FMC_MspInit+0x164>)
 800282a:	f002 fc11 	bl	8005050 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800282e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002832:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002848:	230c      	movs	r3, #12
 800284a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800284e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002852:	4619      	mov	r1, r3
 8002854:	4827      	ldr	r0, [pc, #156]	; (80028f4 <HAL_FMC_MspInit+0x168>)
 8002856:	f002 fbfb 	bl	8005050 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800285a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800285e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	2303      	movs	r3, #3
 8002870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002874:	230c      	movs	r3, #12
 8002876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800287a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800287e:	4619      	mov	r1, r3
 8002880:	481d      	ldr	r0, [pc, #116]	; (80028f8 <HAL_FMC_MspInit+0x16c>)
 8002882:	f002 fbe5 	bl	8005050 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002886:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800288a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028a0:	230c      	movs	r3, #12
 80028a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028aa:	4619      	mov	r1, r3
 80028ac:	4813      	ldr	r0, [pc, #76]	; (80028fc <HAL_FMC_MspInit+0x170>)
 80028ae:	f002 fbcf 	bl	8005050 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028b2:	23e0      	movs	r3, #224	; 0xe0
 80028b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028ca:	230c      	movs	r3, #12
 80028cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028d4:	4619      	mov	r1, r3
 80028d6:	480a      	ldr	r0, [pc, #40]	; (8002900 <HAL_FMC_MspInit+0x174>)
 80028d8:	f002 fbba 	bl	8005050 <HAL_GPIO_Init>
 80028dc:	e000      	b.n	80028e0 <HAL_FMC_MspInit+0x154>
    return;
 80028de:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80028e0:	37e0      	adds	r7, #224	; 0xe0
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	24000eb8 	.word	0x24000eb8
 80028ec:	58024400 	.word	0x58024400
 80028f0:	58021000 	.word	0x58021000
 80028f4:	58021800 	.word	0x58021800
 80028f8:	58020c00 	.word	0x58020c00
 80028fc:	58021400 	.word	0x58021400
 8002900:	58021c00 	.word	0x58021c00

08002904 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800290c:	f7ff ff3e 	bl	800278c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b0ba      	sub	sp, #232	; 0xe8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002920:	f107 0310 	add.w	r3, r7, #16
 8002924:	22c0      	movs	r2, #192	; 0xc0
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f00a fb57 	bl	800cfdc <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a45      	ldr	r2, [pc, #276]	; (8002a48 <HAL_SAI_MspInit+0x130>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d13e      	bne.n	80029b6 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002944:	2300      	movs	r3, #0
 8002946:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fa3d 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002958:	f7ff f802 	bl	8001960 <Error_Handler>
    }

    if (SAI2_client == 0)
 800295c:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_SAI_MspInit+0x134>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10e      	bne.n	8002982 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_SAI_MspInit+0x138>)
 8002966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800296a:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <HAL_SAI_MspInit+0x138>)
 800296c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002970:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_SAI_MspInit+0x138>)
 8002976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800297a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002982:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <HAL_SAI_MspInit+0x134>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	4a30      	ldr	r2, [pc, #192]	; (8002a4c <HAL_SAI_MspInit+0x134>)
 800298a:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 800298c:	23f0      	movs	r3, #240	; 0xf0
 800298e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80029a4:	230a      	movs	r3, #10
 80029a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4828      	ldr	r0, [pc, #160]	; (8002a54 <HAL_SAI_MspInit+0x13c>)
 80029b2:	f002 fb4d 	bl	8005050 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <HAL_SAI_MspInit+0x140>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d13f      	bne.n	8002a40 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80029c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	4618      	mov	r0, r3
 80029d6:	f004 f9f9 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80029e0:	f7fe ffbe 	bl	8001960 <Error_Handler>
    }

      if (SAI2_client == 0)
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_SAI_MspInit+0x134>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10e      	bne.n	8002a0a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_SAI_MspInit+0x138>)
 80029ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029f2:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <HAL_SAI_MspInit+0x138>)
 80029f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_SAI_MspInit+0x138>)
 80029fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_SAI_MspInit+0x134>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_SAI_MspInit+0x134>)
 8002a12:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a2e:	230a      	movs	r3, #10
 8002a30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4808      	ldr	r0, [pc, #32]	; (8002a5c <HAL_SAI_MspInit+0x144>)
 8002a3c:	f002 fb08 	bl	8005050 <HAL_GPIO_Init>

    }
}
 8002a40:	bf00      	nop
 8002a42:	37e8      	adds	r7, #232	; 0xe8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40015c04 	.word	0x40015c04
 8002a4c:	24000ebc 	.word	0x24000ebc
 8002a50:	58024400 	.word	0x58024400
 8002a54:	58022000 	.word	0x58022000
 8002a58:	40015c24 	.word	0x40015c24
 8002a5c:	58021800 	.word	0x58021800

08002a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <NMI_Handler+0x4>

08002a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6a:	e7fe      	b.n	8002a6a <HardFault_Handler+0x4>

08002a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <MemManage_Handler+0x4>

08002a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a76:	e7fe      	b.n	8002a76 <BusFault_Handler+0x4>

08002a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <UsageFault_Handler+0x4>

08002a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aac:	f000 f95c 	bl	8002d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002abc:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <_sbrk+0x5c>)
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <_sbrk+0x60>)
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <_sbrk+0x64>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <_sbrk+0x64>)
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <_sbrk+0x68>)
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <_sbrk+0x64>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d207      	bcs.n	8002af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae4:	f00a fa82 	bl	800cfec <__errno>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	220c      	movs	r2, #12
 8002aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	e009      	b.n	8002b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <_sbrk+0x64>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <_sbrk+0x64>)
 8002b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	24080000 	.word	0x24080000
 8002b14:	00000400 	.word	0x00000400
 8002b18:	24000ec0 	.word	0x24000ec0
 8002b1c:	24001010 	.word	0x24001010

08002b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b24:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <SystemInit+0xe4>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	4a36      	ldr	r2, [pc, #216]	; (8002c04 <SystemInit+0xe4>)
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b34:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <SystemInit+0xe8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	2b06      	cmp	r3, #6
 8002b3e:	d807      	bhi.n	8002b50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <SystemInit+0xe8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 030f 	bic.w	r3, r3, #15
 8002b48:	4a2f      	ldr	r2, [pc, #188]	; (8002c08 <SystemInit+0xe8>)
 8002b4a:	f043 0307 	orr.w	r3, r3, #7
 8002b4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <SystemInit+0xec>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a2d      	ldr	r2, [pc, #180]	; (8002c0c <SystemInit+0xec>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <SystemInit+0xec>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <SystemInit+0xec>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4929      	ldr	r1, [pc, #164]	; (8002c0c <SystemInit+0xec>)
 8002b68:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <SystemInit+0xf0>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <SystemInit+0xe8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b7a:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <SystemInit+0xe8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 030f 	bic.w	r3, r3, #15
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <SystemInit+0xe8>)
 8002b84:	f043 0307 	orr.w	r3, r3, #7
 8002b88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <SystemInit+0xec>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b90:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <SystemInit+0xec>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <SystemInit+0xec>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <SystemInit+0xec>)
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <SystemInit+0xf4>)
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ba2:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <SystemInit+0xec>)
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <SystemInit+0xf8>)
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ba8:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <SystemInit+0xec>)
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <SystemInit+0xfc>)
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <SystemInit+0xec>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002bb4:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <SystemInit+0xec>)
 8002bb6:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <SystemInit+0xfc>)
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <SystemInit+0xec>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <SystemInit+0xec>)
 8002bc2:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <SystemInit+0xfc>)
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <SystemInit+0xec>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <SystemInit+0xec>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <SystemInit+0xec>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <SystemInit+0xec>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <SystemInit+0x100>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <SystemInit+0x104>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bea:	d202      	bcs.n	8002bf2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <SystemInit+0x108>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <SystemInit+0x10c>)
 8002bf4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002bf8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00
 8002c08:	52002000 	.word	0x52002000
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c14:	02020200 	.word	0x02020200
 8002c18:	01ff0000 	.word	0x01ff0000
 8002c1c:	01010280 	.word	0x01010280
 8002c20:	5c001000 	.word	0x5c001000
 8002c24:	ffff0000 	.word	0xffff0000
 8002c28:	51008108 	.word	0x51008108
 8002c2c:	52004000 	.word	0x52004000

08002c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c34:	f7ff ff74 	bl	8002b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c38:	480c      	ldr	r0, [pc, #48]	; (8002c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c3a:	490d      	ldr	r1, [pc, #52]	; (8002c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c40:	e002      	b.n	8002c48 <LoopCopyDataInit>

08002c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c46:	3304      	adds	r3, #4

08002c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c4c:	d3f9      	bcc.n	8002c42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c50:	4c0a      	ldr	r4, [pc, #40]	; (8002c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c54:	e001      	b.n	8002c5a <LoopFillZerobss>

08002c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c58:	3204      	adds	r2, #4

08002c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c5c:	d3fb      	bcc.n	8002c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c5e:	f00a f9cb 	bl	800cff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c62:	f7fd fd43 	bl	80006ec <main>
  bx  lr
 8002c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002c6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c70:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8002c74:	0800e5fc 	.word	0x0800e5fc
  ldr r2, =_sbss
 8002c78:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8002c7c:	24001010 	.word	0x24001010

08002c80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c80:	e7fe      	b.n	8002c80 <ADC3_IRQHandler>
	...

08002c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c8a:	2003      	movs	r0, #3
 8002c8c:	f001 fa26 	bl	80040dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c90:	f003 fec6 	bl	8006a20 <HAL_RCC_GetSysClockFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_Init+0x68>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	4913      	ldr	r1, [pc, #76]	; (8002cf0 <HAL_Init+0x6c>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cae:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <HAL_Init+0x68>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <HAL_Init+0x6c>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <HAL_Init+0x70>)
 8002cc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cc8:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <HAL_Init+0x74>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f000 f814 	bl	8002cfc <HAL_InitTick>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e002      	b.n	8002ce4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cde:	f7fe fe45 	bl	800196c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	0800e580 	.word	0x0800e580
 8002cf4:	2400002c 	.word	0x2400002c
 8002cf8:	24000028 	.word	0x24000028

08002cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d04:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_InitTick+0x60>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e021      	b.n	8002d54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_InitTick+0x64>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_InitTick+0x60>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 f9fd 	bl	8004126 <HAL_SYSTICK_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00e      	b.n	8002d54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d80a      	bhi.n	8002d52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f001 f9d5 	bl	80040f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d48:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <HAL_InitTick+0x68>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	24000034 	.word	0x24000034
 8002d60:	24000028 	.word	0x24000028
 8002d64:	24000030 	.word	0x24000030

08002d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_IncTick+0x20>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x24>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_IncTick+0x24>)
 8002d7a:	6013      	str	r3, [r2, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	24000034 	.word	0x24000034
 8002d8c:	24000ec4 	.word	0x24000ec4

08002d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return uwTick;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_GetTick+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	24000ec4 	.word	0x24000ec4

08002da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff ffee 	bl	8002d90 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d005      	beq.n	8002dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_Delay+0x44>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dce:	bf00      	nop
 8002dd0:	f7ff ffde 	bl	8002d90 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d8f7      	bhi.n	8002dd0 <HAL_Delay+0x28>
  {
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	24000034 	.word	0x24000034

08002df0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_GetREVID+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0c1b      	lsrs	r3, r3, #16
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	5c001000 	.word	0x5c001000

08002e08 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e18:	4904      	ldr	r1, [pc, #16]	; (8002e2c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	58000400 	.word	0x58000400

08002e30 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	58000400 	.word	0x58000400

08002e5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3360      	adds	r3, #96	; 0x60
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	611a      	str	r2, [r3, #16]
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3360      	adds	r3, #96	; 0x60
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	601a      	str	r2, [r3, #0]
  }
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3330      	adds	r3, #48	; 0x30
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	4413      	add	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	211f      	movs	r1, #31
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	f003 011f 	and.w	r1, r3, #31
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	0e5b      	lsrs	r3, r3, #25
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	4413      	add	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	0d1b      	lsrs	r3, r3, #20
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2107      	movs	r1, #7
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	0d1b      	lsrs	r3, r3, #20
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	431a      	orrs	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003034:	43db      	mvns	r3, r3
 8003036:	401a      	ands	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0318 	and.w	r3, r3, #24
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003040:	40d9      	lsrs	r1, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	400b      	ands	r3, r1
 8003046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800304a:	431a      	orrs	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	000fffff 	.word	0x000fffff

08003064 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003072:	4013      	ands	r3, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6093      	str	r3, [r2, #8]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	5fffffc0 	.word	0x5fffffc0

08003088 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309c:	d101      	bne.n	80030a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80030be:	4013      	ands	r3, r2
 80030c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	6fffffc0 	.word	0x6fffffc0

080030d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ec:	d101      	bne.n	80030f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <LL_ADC_IsEnabled+0x18>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <LL_ADC_IsEnabled+0x1a>
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d101      	bne.n	800313e <LL_ADC_REG_IsConversionOngoing+0x18>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b08      	cmp	r3, #8
 800315e:	d101      	bne.n	8003164 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e18f      	b.n	80034ae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fe fbff 	bl	80019a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff67 	bl	8003088 <LL_ADC_IsDeepPowerDownEnabled>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff4d 	bl	8003064 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff82 	bl	80030d8 <LL_ADC_IsInternalRegulatorEnabled>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d114      	bne.n	8003204 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff66 	bl	80030b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e4:	4b87      	ldr	r3, [pc, #540]	; (8003404 <HAL_ADC_Init+0x290>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	4a87      	ldr	r2, [pc, #540]	; (8003408 <HAL_ADC_Init+0x294>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	3301      	adds	r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f6:	e002      	b.n	80031fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f9      	bne.n	80031f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff65 	bl	80030d8 <LL_ADC_IsInternalRegulatorEnabled>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	f043 0210 	orr.w	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff76 	bl	8003126 <LL_ADC_REG_IsConversionOngoing>
 800323a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 8129 	bne.w	800349c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 8125 	bne.w	800349c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800325a:	f043 0202 	orr.w	r2, r3, #2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff4a 	bl	8003100 <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d136      	bne.n	80032e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a65      	ldr	r2, [pc, #404]	; (800340c <HAL_ADC_Init+0x298>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_ADC_Init+0x112>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a63      	ldr	r2, [pc, #396]	; (8003410 <HAL_ADC_Init+0x29c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10e      	bne.n	80032a4 <HAL_ADC_Init+0x130>
 8003286:	4861      	ldr	r0, [pc, #388]	; (800340c <HAL_ADC_Init+0x298>)
 8003288:	f7ff ff3a 	bl	8003100 <LL_ADC_IsEnabled>
 800328c:	4604      	mov	r4, r0
 800328e:	4860      	ldr	r0, [pc, #384]	; (8003410 <HAL_ADC_Init+0x29c>)
 8003290:	f7ff ff36 	bl	8003100 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e008      	b.n	80032b6 <HAL_ADC_Init+0x142>
 80032a4:	485b      	ldr	r0, [pc, #364]	; (8003414 <HAL_ADC_Init+0x2a0>)
 80032a6:	f7ff ff2b 	bl	8003100 <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a53      	ldr	r2, [pc, #332]	; (800340c <HAL_ADC_Init+0x298>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_ADC_Init+0x15a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a51      	ldr	r2, [pc, #324]	; (8003410 <HAL_ADC_Init+0x29c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_Init+0x15e>
 80032ce:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_ADC_Init+0x2a4>)
 80032d0:	e000      	b.n	80032d4 <HAL_ADC_Init+0x160>
 80032d2:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_ADC_Init+0x2a8>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7ff fdbe 	bl	8002e5c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80032e0:	f7ff fd86 	bl	8002df0 <HAL_GetREVID>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d914      	bls.n	8003318 <HAL_ADC_Init+0x1a4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d110      	bne.n	8003318 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7d5b      	ldrb	r3, [r3, #21]
 80032fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003300:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003306:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7f1b      	ldrb	r3, [r3, #28]
 800330c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800330e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003310:	f043 030c 	orr.w	r3, r3, #12
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	e00d      	b.n	8003334 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	7d5b      	ldrb	r3, [r3, #21]
 800331c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003322:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003328:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7f1b      	ldrb	r3, [r3, #28]
 800332e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7f1b      	ldrb	r3, [r3, #28]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	3b01      	subs	r3, #1
 8003342:	045b      	lsls	r3, r3, #17
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_ADC_Init+0x2ac>)
 800336e:	4013      	ands	r3, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	69b9      	ldr	r1, [r7, #24]
 8003376:	430b      	orrs	r3, r1
 8003378:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fed1 	bl	8003126 <LL_ADC_REG_IsConversionOngoing>
 8003384:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fede 	bl	800314c <LL_ADC_INJ_IsConversionOngoing>
 8003390:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d15f      	bne.n	8003458 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d15c      	bne.n	8003458 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7d1b      	ldrb	r3, [r3, #20]
 80033a2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <HAL_ADC_Init+0x2b0>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	69b9      	ldr	r1, [r7, #24]
 80033bc:	430b      	orrs	r3, r1
 80033be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d130      	bne.n	800342c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <HAL_ADC_Init+0x2b4>)
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033de:	3a01      	subs	r2, #1
 80033e0:	0411      	lsls	r1, r2, #16
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033f2:	430a      	orrs	r2, r1
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	611a      	str	r2, [r3, #16]
 8003400:	e01c      	b.n	800343c <HAL_ADC_Init+0x2c8>
 8003402:	bf00      	nop
 8003404:	24000028 	.word	0x24000028
 8003408:	053e2d63 	.word	0x053e2d63
 800340c:	40022000 	.word	0x40022000
 8003410:	40022100 	.word	0x40022100
 8003414:	58026000 	.word	0x58026000
 8003418:	40022300 	.word	0x40022300
 800341c:	58026300 	.word	0x58026300
 8003420:	fff0c003 	.word	0xfff0c003
 8003424:	ffffbffc 	.word	0xffffbffc
 8003428:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fb80 	bl	8003b58 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10c      	bne.n	800347a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f023 010f 	bic.w	r1, r3, #15
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	1e5a      	subs	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
 8003478:	e007      	b.n	800348a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 020f 	bic.w	r2, r2, #15
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
 800349a:	e007      	b.n	80034ac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f043 0210 	orr.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	bf00      	nop

080034b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b0a1      	sub	sp, #132	; 0x84
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a9d      	ldr	r2, [pc, #628]	; (8003748 <HAL_ADC_ConfigChannel+0x290>)
 80034d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x2a>
 80034de:	2302      	movs	r3, #2
 80034e0:	e321      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x66e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fe19 	bl	8003126 <LL_ADC_REG_IsConversionOngoing>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 8306 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <HAL_ADC_ConfigChannel+0x62>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2201      	movs	r2, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	e016      	b.n	8003548 <HAL_ADC_ConfigChannel+0x90>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800352a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800352c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e003      	b.n	800353e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2201      	movs	r2, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	69d1      	ldr	r1, [r2, #28]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	430b      	orrs	r3, r1
 8003554:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	f7ff fd02 	bl	8002f6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fdda 	bl	8003126 <LL_ADC_REG_IsConversionOngoing>
 8003572:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fde7 	bl	800314c <LL_ADC_INJ_IsConversionOngoing>
 800357e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 80b3 	bne.w	80036ee <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 80af 	bne.w	80036ee <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6819      	ldr	r1, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	461a      	mov	r2, r3
 800359e:	f7ff fd11 	bl	8002fc4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035a2:	4b6a      	ldr	r3, [pc, #424]	; (800374c <HAL_ADC_ConfigChannel+0x294>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ae:	d10b      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x110>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	e01d      	b.n	8003604 <HAL_ADC_ConfigChannel+0x14c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x136>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	e00a      	b.n	8003604 <HAL_ADC_ConfigChannel+0x14c>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d027      	beq.n	800365e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6919      	ldr	r1, [r3, #16]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800361c:	f7ff fc52 	bl	8002ec4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6919      	ldr	r1, [r3, #16]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	7e5b      	ldrb	r3, [r3, #25]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d102      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x17e>
 8003630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003634:	e000      	b.n	8003638 <HAL_ADC_ConfigChannel+0x180>
 8003636:	2300      	movs	r3, #0
 8003638:	461a      	mov	r2, r3
 800363a:	f7ff fc7c 	bl	8002f36 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6919      	ldr	r1, [r3, #16]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	7e1b      	ldrb	r3, [r3, #24]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d102      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x19c>
 800364e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003652:	e000      	b.n	8003656 <HAL_ADC_ConfigChannel+0x19e>
 8003654:	2300      	movs	r3, #0
 8003656:	461a      	mov	r2, r3
 8003658:	f7ff fc54 	bl	8002f04 <LL_ADC_SetDataRightShift>
 800365c:	e047      	b.n	80036ee <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003664:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	069b      	lsls	r3, r3, #26
 800366e:	429a      	cmp	r2, r3
 8003670:	d107      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003680:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003688:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	069b      	lsls	r3, r3, #26
 8003692:	429a      	cmp	r2, r3
 8003694:	d107      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036a4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	069b      	lsls	r3, r3, #26
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d107      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036c8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	069b      	lsls	r3, r3, #26
 80036da:	429a      	cmp	r2, r3
 80036dc:	d107      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fd04 	bl	8003100 <LL_ADC_IsEnabled>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f040 820d 	bne.w	8003b1a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6819      	ldr	r1, [r3, #0]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	461a      	mov	r2, r3
 800370e:	f7ff fc85 	bl	800301c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <HAL_ADC_ConfigChannel+0x290>)
 8003718:	4293      	cmp	r3, r2
 800371a:	f040 8133 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800372a:	2b00      	cmp	r3, #0
 800372c:	d110      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x298>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	0e9b      	lsrs	r3, r3, #26
 8003734:	3301      	adds	r3, #1
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2b09      	cmp	r3, #9
 800373c:	bf94      	ite	ls
 800373e:	2301      	movls	r3, #1
 8003740:	2300      	movhi	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	e01e      	b.n	8003784 <HAL_ADC_ConfigChannel+0x2cc>
 8003746:	bf00      	nop
 8003748:	47ff0000 	.word	0x47ff0000
 800374c:	5c001000 	.word	0x5c001000
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800375e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003760:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003768:	2320      	movs	r3, #32
 800376a:	e003      	b.n	8003774 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800376c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2b09      	cmp	r3, #9
 800377c:	bf94      	ite	ls
 800377e:	2301      	movls	r3, #1
 8003780:	2300      	movhi	r3, #0
 8003782:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003784:	2b00      	cmp	r3, #0
 8003786:	d079      	beq.n	800387c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x2ec>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	3301      	adds	r3, #1
 800379c:	069b      	lsls	r3, r3, #26
 800379e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037a2:	e015      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x318>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80037b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80037b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e003      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80037c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	069b      	lsls	r3, r3, #26
 80037cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x338>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	3301      	adds	r3, #1
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2101      	movs	r1, #1
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	e017      	b.n	8003820 <HAL_ADC_ConfigChannel+0x368>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80037fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e003      	b.n	8003814 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800380c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	ea42 0103 	orr.w	r1, r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x38e>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	3301      	adds	r3, #1
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	051b      	lsls	r3, r3, #20
 8003844:	e018      	b.n	8003878 <HAL_ADC_ConfigChannel+0x3c0>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800385e:	2320      	movs	r3, #32
 8003860:	e003      	b.n	800386a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	3301      	adds	r3, #1
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003878:	430b      	orrs	r3, r1
 800387a:	e07e      	b.n	800397a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x3e0>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	3301      	adds	r3, #1
 8003890:	069b      	lsls	r3, r3, #26
 8003892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003896:	e015      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x40c>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80038b0:	2320      	movs	r3, #32
 80038b2:	e003      	b.n	80038bc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	069b      	lsls	r3, r3, #26
 80038c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x42c>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0e9b      	lsrs	r3, r3, #26
 80038d6:	3301      	adds	r3, #1
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	e017      	b.n	8003914 <HAL_ADC_ConfigChannel+0x45c>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	61bb      	str	r3, [r7, #24]
  return result;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80038fc:	2320      	movs	r3, #32
 80038fe:	e003      	b.n	8003908 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2101      	movs	r1, #1
 8003910:	fa01 f303 	lsl.w	r3, r1, r3
 8003914:	ea42 0103 	orr.w	r1, r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x488>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0e9b      	lsrs	r3, r3, #26
 800392a:	3301      	adds	r3, #1
 800392c:	f003 021f 	and.w	r2, r3, #31
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	3b1e      	subs	r3, #30
 8003938:	051b      	lsls	r3, r3, #20
 800393a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800393e:	e01b      	b.n	8003978 <HAL_ADC_ConfigChannel+0x4c0>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	60fb      	str	r3, [r7, #12]
  return result;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003958:	2320      	movs	r3, #32
 800395a:	e003      	b.n	8003964 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	3301      	adds	r3, #1
 8003966:	f003 021f 	and.w	r2, r3, #31
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	3b1e      	subs	r3, #30
 8003972:	051b      	lsls	r3, r3, #20
 8003974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003978:	430b      	orrs	r3, r1
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	6892      	ldr	r2, [r2, #8]
 800397e:	4619      	mov	r1, r3
 8003980:	f7ff fb20 	bl	8002fc4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f280 80c6 	bge.w	8003b1a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a67      	ldr	r2, [pc, #412]	; (8003b30 <HAL_ADC_ConfigChannel+0x678>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_ADC_ConfigChannel+0x4ea>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a65      	ldr	r2, [pc, #404]	; (8003b34 <HAL_ADC_ConfigChannel+0x67c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x4ee>
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <HAL_ADC_ConfigChannel+0x680>)
 80039a4:	e000      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x4f0>
 80039a6:	4b65      	ldr	r3, [pc, #404]	; (8003b3c <HAL_ADC_ConfigChannel+0x684>)
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fa7d 	bl	8002ea8 <LL_ADC_GetCommonPathInternalCh>
 80039ae:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5e      	ldr	r2, [pc, #376]	; (8003b30 <HAL_ADC_ConfigChannel+0x678>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_ADC_ConfigChannel+0x50c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5d      	ldr	r2, [pc, #372]	; (8003b34 <HAL_ADC_ConfigChannel+0x67c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d10e      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x52a>
 80039c4:	485a      	ldr	r0, [pc, #360]	; (8003b30 <HAL_ADC_ConfigChannel+0x678>)
 80039c6:	f7ff fb9b 	bl	8003100 <LL_ADC_IsEnabled>
 80039ca:	4604      	mov	r4, r0
 80039cc:	4859      	ldr	r0, [pc, #356]	; (8003b34 <HAL_ADC_ConfigChannel+0x67c>)
 80039ce:	f7ff fb97 	bl	8003100 <LL_ADC_IsEnabled>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4323      	orrs	r3, r4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	e008      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x53c>
 80039e2:	4857      	ldr	r0, [pc, #348]	; (8003b40 <HAL_ADC_ConfigChannel+0x688>)
 80039e4:	f7ff fb8c 	bl	8003100 <LL_ADC_IsEnabled>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d07d      	beq.n	8003af4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a51      	ldr	r2, [pc, #324]	; (8003b44 <HAL_ADC_ConfigChannel+0x68c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d130      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x5ac>
 8003a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d12b      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a4b      	ldr	r2, [pc, #300]	; (8003b40 <HAL_ADC_ConfigChannel+0x688>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	f040 8081 	bne.w	8003b1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a44      	ldr	r2, [pc, #272]	; (8003b30 <HAL_ADC_ConfigChannel+0x678>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_ADC_ConfigChannel+0x574>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a43      	ldr	r2, [pc, #268]	; (8003b34 <HAL_ADC_ConfigChannel+0x67c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x578>
 8003a2c:	4a42      	ldr	r2, [pc, #264]	; (8003b38 <HAL_ADC_ConfigChannel+0x680>)
 8003a2e:	e000      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x57a>
 8003a30:	4a42      	ldr	r2, [pc, #264]	; (8003b3c <HAL_ADC_ConfigChannel+0x684>)
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7ff fa21 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a40:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <HAL_ADC_ConfigChannel+0x690>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	4a41      	ldr	r2, [pc, #260]	; (8003b4c <HAL_ADC_ConfigChannel+0x694>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	3301      	adds	r3, #1
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a54:	e002      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f9      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a62:	e05a      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a39      	ldr	r2, [pc, #228]	; (8003b50 <HAL_ADC_ConfigChannel+0x698>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d11e      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x5f4>
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d119      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a30      	ldr	r2, [pc, #192]	; (8003b40 <HAL_ADC_ConfigChannel+0x688>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d14b      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <HAL_ADC_ConfigChannel+0x678>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d004      	beq.n	8003a96 <HAL_ADC_ConfigChannel+0x5de>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a28      	ldr	r2, [pc, #160]	; (8003b34 <HAL_ADC_ConfigChannel+0x67c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x5e2>
 8003a96:	4a28      	ldr	r2, [pc, #160]	; (8003b38 <HAL_ADC_ConfigChannel+0x680>)
 8003a98:	e000      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x5e4>
 8003a9a:	4a28      	ldr	r2, [pc, #160]	; (8003b3c <HAL_ADC_ConfigChannel+0x684>)
 8003a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7ff f9ec 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aaa:	e036      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <HAL_ADC_ConfigChannel+0x69c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d131      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x662>
 8003ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d12c      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1e      	ldr	r2, [pc, #120]	; (8003b40 <HAL_ADC_ConfigChannel+0x688>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d127      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a18      	ldr	r2, [pc, #96]	; (8003b30 <HAL_ADC_ConfigChannel+0x678>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d004      	beq.n	8003ade <HAL_ADC_ConfigChannel+0x626>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <HAL_ADC_ConfigChannel+0x67c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x62a>
 8003ade:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <HAL_ADC_ConfigChannel+0x680>)
 8003ae0:	e000      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x62c>
 8003ae2:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <HAL_ADC_ConfigChannel+0x684>)
 8003ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7ff f9c8 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
 8003af2:	e012      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b06:	e008      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3784      	adds	r7, #132	; 0x84
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd90      	pop	{r4, r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40022000 	.word	0x40022000
 8003b34:	40022100 	.word	0x40022100
 8003b38:	40022300 	.word	0x40022300
 8003b3c:	58026300 	.word	0x58026300
 8003b40:	58026000 	.word	0x58026000
 8003b44:	cb840000 	.word	0xcb840000
 8003b48:	24000028 	.word	0x24000028
 8003b4c:	053e2d63 	.word	0x053e2d63
 8003b50:	c7520000 	.word	0xc7520000
 8003b54:	cfb80000 	.word	0xcfb80000

08003b58 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a7a      	ldr	r2, [pc, #488]	; (8003d50 <ADC_ConfigureBoostMode+0x1f8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <ADC_ConfigureBoostMode+0x1c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a79      	ldr	r2, [pc, #484]	; (8003d54 <ADC_ConfigureBoostMode+0x1fc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d109      	bne.n	8003b88 <ADC_ConfigureBoostMode+0x30>
 8003b74:	4b78      	ldr	r3, [pc, #480]	; (8003d58 <ADC_ConfigureBoostMode+0x200>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e008      	b.n	8003b9a <ADC_ConfigureBoostMode+0x42>
 8003b88:	4b74      	ldr	r3, [pc, #464]	; (8003d5c <ADC_ConfigureBoostMode+0x204>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01c      	beq.n	8003bd8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b9e:	f003 f8b9 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8003ba2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bac:	d010      	beq.n	8003bd0 <ADC_ConfigureBoostMode+0x78>
 8003bae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bb2:	d873      	bhi.n	8003c9c <ADC_ConfigureBoostMode+0x144>
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d002      	beq.n	8003bc0 <ADC_ConfigureBoostMode+0x68>
 8003bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bbe:	d16d      	bne.n	8003c9c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	60fb      	str	r3, [r7, #12]
        break;
 8003bce:	e068      	b.n	8003ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	60fb      	str	r3, [r7, #12]
        break;
 8003bd6:	e064      	b.n	8003ca2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003bd8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	f004 fafe 	bl	80081e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003be4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003bee:	d051      	beq.n	8003c94 <ADC_ConfigureBoostMode+0x13c>
 8003bf0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003bf4:	d854      	bhi.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
 8003bf6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003bfa:	d047      	beq.n	8003c8c <ADC_ConfigureBoostMode+0x134>
 8003bfc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c00:	d84e      	bhi.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
 8003c02:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c06:	d03d      	beq.n	8003c84 <ADC_ConfigureBoostMode+0x12c>
 8003c08:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c0c:	d848      	bhi.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
 8003c0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c12:	d033      	beq.n	8003c7c <ADC_ConfigureBoostMode+0x124>
 8003c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c18:	d842      	bhi.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
 8003c1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c1e:	d029      	beq.n	8003c74 <ADC_ConfigureBoostMode+0x11c>
 8003c20:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c24:	d83c      	bhi.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
 8003c26:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c2a:	d01a      	beq.n	8003c62 <ADC_ConfigureBoostMode+0x10a>
 8003c2c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c30:	d836      	bhi.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
 8003c32:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c36:	d014      	beq.n	8003c62 <ADC_ConfigureBoostMode+0x10a>
 8003c38:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c3c:	d830      	bhi.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
 8003c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c42:	d00e      	beq.n	8003c62 <ADC_ConfigureBoostMode+0x10a>
 8003c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c48:	d82a      	bhi.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
 8003c4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c4e:	d008      	beq.n	8003c62 <ADC_ConfigureBoostMode+0x10a>
 8003c50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c54:	d824      	bhi.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
 8003c56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c5a:	d002      	beq.n	8003c62 <ADC_ConfigureBoostMode+0x10a>
 8003c5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c60:	d11e      	bne.n	8003ca0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	0c9b      	lsrs	r3, r3, #18
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	60fb      	str	r3, [r7, #12]
        break;
 8003c72:	e016      	b.n	8003ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	60fb      	str	r3, [r7, #12]
        break;
 8003c7a:	e012      	b.n	8003ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	60fb      	str	r3, [r7, #12]
        break;
 8003c82:	e00e      	b.n	8003ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	60fb      	str	r3, [r7, #12]
        break;
 8003c8a:	e00a      	b.n	8003ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	09db      	lsrs	r3, r3, #7
 8003c90:	60fb      	str	r3, [r7, #12]
        break;
 8003c92:	e006      	b.n	8003ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	60fb      	str	r3, [r7, #12]
        break;
 8003c9a:	e002      	b.n	8003ca2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c9c:	bf00      	nop
 8003c9e:	e000      	b.n	8003ca2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ca0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ca2:	f7ff f8a5 	bl	8002df0 <HAL_GetREVID>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d815      	bhi.n	8003cdc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a2b      	ldr	r2, [pc, #172]	; (8003d60 <ADC_ConfigureBoostMode+0x208>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d908      	bls.n	8003cca <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003cc8:	e03e      	b.n	8003d48 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd8:	609a      	str	r2, [r3, #8]
}
 8003cda:	e035      	b.n	8003d48 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <ADC_ConfigureBoostMode+0x20c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d808      	bhi.n	8003cfc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003cf8:	609a      	str	r2, [r3, #8]
}
 8003cfa:	e025      	b.n	8003d48 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a1a      	ldr	r2, [pc, #104]	; (8003d68 <ADC_ConfigureBoostMode+0x210>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d80a      	bhi.n	8003d1a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	e016      	b.n	8003d48 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <ADC_ConfigureBoostMode+0x214>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d80a      	bhi.n	8003d38 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d34:	609a      	str	r2, [r3, #8]
}
 8003d36:	e007      	b.n	8003d48 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40022100 	.word	0x40022100
 8003d58:	40022300 	.word	0x40022300
 8003d5c:	58026300 	.word	0x58026300
 8003d60:	01312d00 	.word	0x01312d00
 8003d64:	005f5e10 	.word	0x005f5e10
 8003d68:	00bebc20 	.word	0x00bebc20
 8003d6c:	017d7840 	.word	0x017d7840

08003d70 <LL_ADC_IsEnabled>:
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <LL_ADC_IsEnabled+0x18>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <LL_ADC_IsEnabled+0x1a>
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d101      	bne.n	8003dae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b09f      	sub	sp, #124	; 0x7c
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e0be      	b.n	8003f58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a5c      	ldr	r2, [pc, #368]	; (8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d102      	bne.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003df4:	4b5b      	ldr	r3, [pc, #364]	; (8003f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	e001      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	f043 0220 	orr.w	r2, r3, #32
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e09d      	b.n	8003f58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff ffb9 	bl	8003d96 <LL_ADC_REG_IsConversionOngoing>
 8003e24:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ffb3 	bl	8003d96 <LL_ADC_REG_IsConversionOngoing>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d17f      	bne.n	8003f36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d17c      	bne.n	8003f36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a47      	ldr	r2, [pc, #284]	; (8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a46      	ldr	r2, [pc, #280]	; (8003f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003e50:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e52:	e000      	b.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003e54:	4b45      	ldr	r3, [pc, #276]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e56:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d039      	beq.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3a      	ldr	r2, [pc, #232]	; (8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a38      	ldr	r2, [pc, #224]	; (8003f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10e      	bne.n	8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e86:	4836      	ldr	r0, [pc, #216]	; (8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e88:	f7ff ff72 	bl	8003d70 <LL_ADC_IsEnabled>
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	4835      	ldr	r0, [pc, #212]	; (8003f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e90:	f7ff ff6e 	bl	8003d70 <LL_ADC_IsEnabled>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4323      	orrs	r3, r4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e008      	b.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ea4:	4832      	ldr	r0, [pc, #200]	; (8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ea6:	f7ff ff63 	bl	8003d70 <LL_ADC_IsEnabled>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d047      	beq.n	8003f4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	6811      	ldr	r1, [r2, #0]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	6892      	ldr	r2, [r2, #8]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ed2:	e03a      	b.n	8003f4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1e      	ldr	r2, [pc, #120]	; (8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d10e      	bne.n	8003f12 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003ef4:	481a      	ldr	r0, [pc, #104]	; (8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ef6:	f7ff ff3b 	bl	8003d70 <LL_ADC_IsEnabled>
 8003efa:	4604      	mov	r4, r0
 8003efc:	4819      	ldr	r0, [pc, #100]	; (8003f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003efe:	f7ff ff37 	bl	8003d70 <LL_ADC_IsEnabled>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4323      	orrs	r3, r4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e008      	b.n	8003f24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003f12:	4817      	ldr	r0, [pc, #92]	; (8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f14:	f7ff ff2c 	bl	8003d70 <LL_ADC_IsEnabled>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf0c      	ite	eq
 8003f1e:	2301      	moveq	r3, #1
 8003f20:	2300      	movne	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d010      	beq.n	8003f4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f32:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f34:	e009      	b.n	8003f4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f48:	e000      	b.n	8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f4a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	377c      	adds	r7, #124	; 0x7c
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd90      	pop	{r4, r7, pc}
 8003f60:	40022000 	.word	0x40022000
 8003f64:	40022100 	.word	0x40022100
 8003f68:	40022300 	.word	0x40022300
 8003f6c:	58026300 	.word	0x58026300
 8003f70:	58026000 	.word	0x58026000
 8003f74:	fffff0e0 	.word	0xfffff0e0

08003f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f94:	4013      	ands	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <__NVIC_SetPriorityGrouping+0x44>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fa6:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	60d3      	str	r3, [r2, #12]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00
 8003fbc:	05fa0000 	.word	0x05fa0000

08003fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	f003 0307 	and.w	r3, r3, #7
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	6039      	str	r1, [r7, #0]
 8003fe6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	db0a      	blt.n	8004006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	490c      	ldr	r1, [pc, #48]	; (8004028 <__NVIC_SetPriority+0x4c>)
 8003ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ffa:	0112      	lsls	r2, r2, #4
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	440b      	add	r3, r1
 8004000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004004:	e00a      	b.n	800401c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	4908      	ldr	r1, [pc, #32]	; (800402c <__NVIC_SetPriority+0x50>)
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	3b04      	subs	r3, #4
 8004014:	0112      	lsls	r2, r2, #4
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	440b      	add	r3, r1
 800401a:	761a      	strb	r2, [r3, #24]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000e100 	.word	0xe000e100
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004030:	b480      	push	{r7}
 8004032:	b089      	sub	sp, #36	; 0x24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f1c3 0307 	rsb	r3, r3, #7
 800404a:	2b04      	cmp	r3, #4
 800404c:	bf28      	it	cs
 800404e:	2304      	movcs	r3, #4
 8004050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3304      	adds	r3, #4
 8004056:	2b06      	cmp	r3, #6
 8004058:	d902      	bls.n	8004060 <NVIC_EncodePriority+0x30>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3b03      	subs	r3, #3
 800405e:	e000      	b.n	8004062 <NVIC_EncodePriority+0x32>
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43da      	mvns	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	401a      	ands	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004078:	f04f 31ff 	mov.w	r1, #4294967295
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43d9      	mvns	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004088:	4313      	orrs	r3, r2
         );
}
 800408a:	4618      	mov	r0, r3
 800408c:	3724      	adds	r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a8:	d301      	bcc.n	80040ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040aa:	2301      	movs	r3, #1
 80040ac:	e00f      	b.n	80040ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <SysTick_Config+0x40>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040b6:	210f      	movs	r1, #15
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295
 80040bc:	f7ff ff8e 	bl	8003fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <SysTick_Config+0x40>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <SysTick_Config+0x40>)
 80040c8:	2207      	movs	r2, #7
 80040ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	e000e010 	.word	0xe000e010

080040dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff47 	bl	8003f78 <__NVIC_SetPriorityGrouping>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	4603      	mov	r3, r0
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004100:	f7ff ff5e 	bl	8003fc0 <__NVIC_GetPriorityGrouping>
 8004104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	6978      	ldr	r0, [r7, #20]
 800410c:	f7ff ff90 	bl	8004030 <NVIC_EncodePriority>
 8004110:	4602      	mov	r2, r0
 8004112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004116:	4611      	mov	r1, r2
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff5f 	bl	8003fdc <__NVIC_SetPriority>
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ffb2 	bl	8004098 <SysTick_Config>
 8004134:	4603      	mov	r3, r0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e0cf      	b.n	80042f2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2223      	movs	r2, #35	; 0x23
 8004160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fd fd1d 	bl	8001ba4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800416a:	4b64      	ldr	r3, [pc, #400]	; (80042fc <HAL_ETH_Init+0x1bc>)
 800416c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004170:	4a62      	ldr	r2, [pc, #392]	; (80042fc <HAL_ETH_Init+0x1bc>)
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800417a:	4b60      	ldr	r3, [pc, #384]	; (80042fc <HAL_ETH_Init+0x1bc>)
 800417c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	7a1b      	ldrb	r3, [r3, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004190:	2000      	movs	r0, #0
 8004192:	f7fe fe39 	bl	8002e08 <HAL_SYSCFG_ETHInterfaceSelect>
 8004196:	e003      	b.n	80041a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004198:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800419c:	f7fe fe34 	bl	8002e08 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80041a0:	4b57      	ldr	r3, [pc, #348]	; (8004300 <HAL_ETH_Init+0x1c0>)
 80041a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041bc:	f7fe fde8 	bl	8002d90 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80041c2:	e011      	b.n	80041e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80041c4:	f7fe fde4 	bl	8002d90 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041d2:	d909      	bls.n	80041e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2204      	movs	r2, #4
 80041d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	22e0      	movs	r2, #224	; 0xe0
 80041e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e084      	b.n	80042f2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e4      	bne.n	80041c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f886 	bl	800430c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004200:	f002 fd88 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8004204:	4603      	mov	r3, r0
 8004206:	4a3f      	ldr	r2, [pc, #252]	; (8004304 <HAL_ETH_Init+0x1c4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	0c9a      	lsrs	r2, r3, #18
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3a01      	subs	r2, #1
 8004214:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa71 	bl	8004700 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800422a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800423a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	22e0      	movs	r2, #224	; 0xe0
 8004256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e049      	b.n	80042f2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004266:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800426a:	4b27      	ldr	r3, [pc, #156]	; (8004308 <HAL_ETH_Init+0x1c8>)
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6952      	ldr	r2, [r2, #20]
 8004272:	0051      	lsls	r1, r2, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800427e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fad9 	bl	800483a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fb1f 	bl	80048cc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	3305      	adds	r3, #5
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	021a      	lsls	r2, r3, #8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	4619      	mov	r1, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	3303      	adds	r3, #3
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	061a      	lsls	r2, r3, #24
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	3302      	adds	r3, #2
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	3301      	adds	r3, #1
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80042da:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2210      	movs	r2, #16
 80042ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	58024400 	.word	0x58024400
 8004300:	58000400 	.word	0x58000400
 8004304:	431bde83 	.word	0x431bde83
 8004308:	ffff8001 	.word	0xffff8001

0800430c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800431c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004324:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004326:	f002 fcf5 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 800432a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d908      	bls.n	8004346 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d804      	bhi.n	8004346 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e027      	b.n	8004396 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a18      	ldr	r2, [pc, #96]	; (80043ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d908      	bls.n	8004360 <HAL_ETH_SetMDIOClockRange+0x54>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4a17      	ldr	r2, [pc, #92]	; (80043b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d204      	bcs.n	8004360 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	e01a      	b.n	8004396 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d303      	bcc.n	8004370 <HAL_ETH_SetMDIOClockRange+0x64>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d911      	bls.n	8004394 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d908      	bls.n	800438a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4a0f      	ldr	r2, [pc, #60]	; (80043b8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d804      	bhi.n	800438a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e005      	b.n	8004396 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	e000      	b.n	8004396 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004394:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	01312cff 	.word	0x01312cff
 80043ac:	02160ebf 	.word	0x02160ebf
 80043b0:	03938700 	.word	0x03938700
 80043b4:	05f5e0ff 	.word	0x05f5e0ff
 80043b8:	08f0d17f 	.word	0x08f0d17f

080043bc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80043ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	791b      	ldrb	r3, [r3, #4]
 80043d4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80043d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	7b1b      	ldrb	r3, [r3, #12]
 80043dc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80043de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	7b5b      	ldrb	r3, [r3, #13]
 80043e4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	7b9b      	ldrb	r3, [r3, #14]
 80043ec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80043ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	7bdb      	ldrb	r3, [r3, #15]
 80043f4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80043f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	7c12      	ldrb	r2, [r2, #16]
 80043fc:	2a00      	cmp	r2, #0
 80043fe:	d102      	bne.n	8004406 <ETH_SetMACConfig+0x4a>
 8004400:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004404:	e000      	b.n	8004408 <ETH_SetMACConfig+0x4c>
 8004406:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004408:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	7c52      	ldrb	r2, [r2, #17]
 800440e:	2a00      	cmp	r2, #0
 8004410:	d102      	bne.n	8004418 <ETH_SetMACConfig+0x5c>
 8004412:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004416:	e000      	b.n	800441a <ETH_SetMACConfig+0x5e>
 8004418:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800441a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	7c9b      	ldrb	r3, [r3, #18]
 8004420:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004422:	431a      	orrs	r2, r3
               macconf->Speed |
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004428:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800442e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	7f1b      	ldrb	r3, [r3, #28]
 8004434:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	7f5b      	ldrb	r3, [r3, #29]
 800443c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800443e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	7f92      	ldrb	r2, [r2, #30]
 8004444:	2a00      	cmp	r2, #0
 8004446:	d102      	bne.n	800444e <ETH_SetMACConfig+0x92>
 8004448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800444c:	e000      	b.n	8004450 <ETH_SetMACConfig+0x94>
 800444e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004450:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	7fdb      	ldrb	r3, [r3, #31]
 8004456:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004458:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004460:	2a00      	cmp	r2, #0
 8004462:	d102      	bne.n	800446a <ETH_SetMACConfig+0xae>
 8004464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004468:	e000      	b.n	800446c <ETH_SetMACConfig+0xb0>
 800446a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800446c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004472:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800447a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800447c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b56      	ldr	r3, [pc, #344]	; (80045e8 <ETH_SetMACConfig+0x22c>)
 800448e:	4013      	ands	r3, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	68f9      	ldr	r1, [r7, #12]
 8004496:	430b      	orrs	r3, r1
 8004498:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80044b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044ba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80044bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80044c4:	2a00      	cmp	r2, #0
 80044c6:	d102      	bne.n	80044ce <ETH_SetMACConfig+0x112>
 80044c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044cc:	e000      	b.n	80044d0 <ETH_SetMACConfig+0x114>
 80044ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80044d0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4b42      	ldr	r3, [pc, #264]	; (80045ec <ETH_SetMACConfig+0x230>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	68f9      	ldr	r1, [r7, #12]
 80044ea:	430b      	orrs	r3, r1
 80044ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	4b3a      	ldr	r3, [pc, #232]	; (80045f0 <ETH_SetMACConfig+0x234>)
 8004506:	4013      	ands	r3, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	68f9      	ldr	r1, [r7, #12]
 800450e:	430b      	orrs	r3, r1
 8004510:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004518:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800451e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004526:	2a00      	cmp	r2, #0
 8004528:	d101      	bne.n	800452e <ETH_SetMACConfig+0x172>
 800452a:	2280      	movs	r2, #128	; 0x80
 800452c:	e000      	b.n	8004530 <ETH_SetMACConfig+0x174>
 800452e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004530:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004536:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004542:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	68f9      	ldr	r1, [r7, #12]
 800454e:	430b      	orrs	r3, r1
 8004550:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004558:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004560:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f023 0103 	bic.w	r1, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	430a      	orrs	r2, r1
 800457a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004586:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80045a2:	2a00      	cmp	r2, #0
 80045a4:	d101      	bne.n	80045aa <ETH_SetMACConfig+0x1ee>
 80045a6:	2240      	movs	r2, #64	; 0x40
 80045a8:	e000      	b.n	80045ac <ETH_SetMACConfig+0x1f0>
 80045aa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80045ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80045b4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80045b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80045be:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80045cc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	00048083 	.word	0x00048083
 80045ec:	c0f88000 	.word	0xc0f88000
 80045f0:	fffffef0 	.word	0xfffffef0

080045f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4b38      	ldr	r3, [pc, #224]	; (80046ec <ETH_SetDMAConfig+0xf8>)
 800460a:	4013      	ands	r3, r2
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	6811      	ldr	r1, [r2, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800461a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	791b      	ldrb	r3, [r3, #4]
 8004620:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004626:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	7b1b      	ldrb	r3, [r3, #12]
 800462c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <ETH_SetDMAConfig+0xfc>)
 800463e:	4013      	ands	r3, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	68f9      	ldr	r1, [r7, #12]
 8004646:	430b      	orrs	r3, r1
 8004648:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800464c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	7b5b      	ldrb	r3, [r3, #13]
 8004652:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004664:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004668:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <ETH_SetDMAConfig+0x100>)
 800466a:	4013      	ands	r3, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	68f9      	ldr	r1, [r7, #12]
 8004672:	430b      	orrs	r3, r1
 8004674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004678:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	7d1b      	ldrb	r3, [r3, #20]
 8004684:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004686:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	7f5b      	ldrb	r3, [r3, #29]
 800468c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800469e:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <ETH_SetDMAConfig+0x104>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	68f9      	ldr	r1, [r7, #12]
 80046a8:	430b      	orrs	r3, r1
 80046aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	7f1b      	ldrb	r3, [r3, #28]
 80046b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <ETH_SetDMAConfig+0x108>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	68f9      	ldr	r1, [r7, #12]
 80046d6:	430b      	orrs	r3, r1
 80046d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046dc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	ffff87fd 	.word	0xffff87fd
 80046f0:	ffff2ffe 	.word	0xffff2ffe
 80046f4:	fffec000 	.word	0xfffec000
 80046f8:	ffc0efef 	.word	0xffc0efef
 80046fc:	7fc0ffff 	.word	0x7fc0ffff

08004700 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b0a4      	sub	sp, #144	; 0x90
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800470e:	2300      	movs	r3, #0
 8004710:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004712:	2300      	movs	r3, #0
 8004714:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004718:	2300      	movs	r3, #0
 800471a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004724:	2301      	movs	r3, #1
 8004726:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004730:	2300      	movs	r3, #0
 8004732:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800473c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004740:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004742:	2300      	movs	r3, #0
 8004744:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004748:	2300      	movs	r3, #0
 800474a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800474c:	2300      	movs	r3, #0
 800474e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004752:	2300      	movs	r3, #0
 8004754:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004758:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800475c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800475e:	2300      	movs	r3, #0
 8004760:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004764:	2300      	movs	r3, #0
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800476e:	2300      	movs	r3, #0
 8004770:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800477a:	2300      	movs	r3, #0
 800477c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800477e:	2300      	movs	r3, #0
 8004780:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004782:	2300      	movs	r3, #0
 8004784:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004786:	2300      	movs	r3, #0
 8004788:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800478c:	2300      	movs	r3, #0
 800478e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004798:	2320      	movs	r3, #32
 800479a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80047aa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80047b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047b4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80047bc:	2302      	movs	r3, #2
 80047be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80047da:	2300      	movs	r3, #0
 80047dc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80047e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff fde6 	bl	80043bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80047f4:	2301      	movs	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004802:	2300      	movs	r3, #0
 8004804:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004806:	2300      	movs	r3, #0
 8004808:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800480a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800480e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004810:	2300      	movs	r3, #0
 8004812:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004814:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004818:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004820:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff fee1 	bl	80045f4 <ETH_SetDMAConfig>
}
 8004832:	bf00      	nop
 8004834:	3790      	adds	r7, #144	; 0x90
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	e01d      	b.n	8004884 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68d9      	ldr	r1, [r3, #12]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4613      	mov	r3, r2
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	4413      	add	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	440b      	add	r3, r1
 8004858:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2200      	movs	r2, #0
 8004864:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2200      	movs	r2, #0
 800486a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2200      	movs	r2, #0
 8004870:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	3206      	adds	r2, #6
 800487a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3301      	adds	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d9de      	bls.n	8004848 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004898:	461a      	mov	r2, r3
 800489a:	2303      	movs	r3, #3
 800489c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048bc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e023      	b.n	8004922 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6919      	ldr	r1, [r3, #16]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4613      	mov	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	4413      	add	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	440b      	add	r3, r1
 80048ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2200      	movs	r2, #0
 80048f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2200      	movs	r2, #0
 8004902:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	3212      	adds	r2, #18
 8004918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3301      	adds	r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d9d8      	bls.n	80048da <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494e:	461a      	mov	r2, r3
 8004950:	2303      	movs	r3, #3
 8004952:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004962:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004976:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b098      	sub	sp, #96	; 0x60
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004990:	4a84      	ldr	r2, [pc, #528]	; (8004ba4 <HAL_FDCAN_Init+0x21c>)
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	4611      	mov	r1, r2
 8004998:	224c      	movs	r2, #76	; 0x4c
 800499a:	4618      	mov	r0, r3
 800499c:	f008 fb52 	bl	800d044 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e1c6      	b.n	8004d38 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a7e      	ldr	r2, [pc, #504]	; (8004ba8 <HAL_FDCAN_Init+0x220>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d106      	bne.n	80049c2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80049bc:	461a      	mov	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd fa14 	bl	8001e04 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0210 	bic.w	r2, r2, #16
 80049ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ec:	f7fe f9d0 	bl	8002d90 <HAL_GetTick>
 80049f0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80049f2:	e014      	b.n	8004a1e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80049f4:	f7fe f9cc 	bl	8002d90 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b0a      	cmp	r3, #10
 8004a00:	d90d      	bls.n	8004a1e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a08:	f043 0201 	orr.w	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2203      	movs	r2, #3
 8004a16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e18c      	b.n	8004d38 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d0e3      	beq.n	80049f4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a3c:	f7fe f9a8 	bl	8002d90 <HAL_GetTick>
 8004a40:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a42:	e014      	b.n	8004a6e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004a44:	f7fe f9a4 	bl	8002d90 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b0a      	cmp	r3, #10
 8004a50:	d90d      	bls.n	8004a6e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2203      	movs	r2, #3
 8004a66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e164      	b.n	8004d38 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0e3      	beq.n	8004a44 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0202 	orr.w	r2, r2, #2
 8004a8a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7c1b      	ldrb	r3, [r3, #16]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d108      	bne.n	8004aa6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa2:	619a      	str	r2, [r3, #24]
 8004aa4:	e007      	b.n	8004ab6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	7c5b      	ldrb	r3, [r3, #17]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d108      	bne.n	8004ad0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004acc:	619a      	str	r2, [r3, #24]
 8004ace:	e007      	b.n	8004ae0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ade:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	7c9b      	ldrb	r3, [r3, #18]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d108      	bne.n	8004afa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004af6:	619a      	str	r2, [r3, #24]
 8004af8:	e007      	b.n	8004b0a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699a      	ldr	r2, [r3, #24]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b08:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004b2e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0210 	bic.w	r2, r2, #16
 8004b3e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d108      	bne.n	8004b5a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0204 	orr.w	r2, r2, #4
 8004b56:	619a      	str	r2, [r3, #24]
 8004b58:	e030      	b.n	8004bbc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d02c      	beq.n	8004bbc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d020      	beq.n	8004bac <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b78:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0210 	orr.w	r2, r2, #16
 8004b88:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d114      	bne.n	8004bbc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0220 	orr.w	r2, r2, #32
 8004ba0:	619a      	str	r2, [r3, #24]
 8004ba2:	e00b      	b.n	8004bbc <HAL_FDCAN_Init+0x234>
 8004ba4:	0800d978 	.word	0x0800d978
 8004ba8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0220 	orr.w	r2, r2, #32
 8004bba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004bcc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004bd4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004be4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004be6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf0:	d115      	bne.n	8004c1e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004c00:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	3b01      	subs	r3, #1
 8004c08:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004c0a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	3b01      	subs	r3, #1
 8004c14:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004c1a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004c1c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c44:	4413      	add	r3, r2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d011      	beq.n	8004c6e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004c52:	f023 0107 	bic.w	r1, r3, #7
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	3360      	adds	r3, #96	; 0x60
 8004c5e:	443b      	add	r3, r7
 8004c60:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d011      	beq.n	8004c9a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c7e:	f023 0107 	bic.w	r1, r3, #7
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	3360      	adds	r3, #96	; 0x60
 8004c8a:	443b      	add	r3, r7
 8004c8c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d012      	beq.n	8004cc8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004caa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	3360      	adds	r3, #96	; 0x60
 8004cb6:	443b      	add	r3, r7
 8004cb8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004cbc:	011a      	lsls	r2, r3, #4
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d012      	beq.n	8004cf6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004cd8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	3360      	adds	r3, #96	; 0x60
 8004ce4:	443b      	add	r3, r7
 8004ce6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <HAL_FDCAN_Init+0x3b8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d107      	bne.n	8004d10 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f022 0203 	bic.w	r2, r2, #3
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f80b 	bl	8004d44 <FDCAN_CalcultateRamBlockAddresses>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004d34:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3760      	adds	r7, #96	; 0x60
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	4000a000 	.word	0x4000a000

08004d44 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d5a:	4ba7      	ldr	r3, [pc, #668]	; (8004ff8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	0091      	lsls	r1, r2, #2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	430b      	orrs	r3, r1
 8004d68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d74:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	041a      	lsls	r2, r3, #16
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	4413      	add	r3, r2
 8004d90:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d9a:	4b97      	ldr	r3, [pc, #604]	; (8004ff8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	0091      	lsls	r1, r2, #2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	430b      	orrs	r3, r1
 8004da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	041a      	lsls	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004ddc:	4b86      	ldr	r3, [pc, #536]	; (8004ff8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	0091      	lsls	r1, r2, #2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004df6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	041a      	lsls	r2, r3, #16
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4413      	add	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004e24:	4b74      	ldr	r3, [pc, #464]	; (8004ff8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	0091      	lsls	r1, r2, #2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	430b      	orrs	r3, r1
 8004e32:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e3e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e46:	041a      	lsls	r2, r3, #16
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	4413      	add	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004e6c:	4b62      	ldr	r3, [pc, #392]	; (8004ff8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	0091      	lsls	r1, r2, #2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004e98:	4b57      	ldr	r3, [pc, #348]	; (8004ff8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	0091      	lsls	r1, r2, #2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eb2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	041a      	lsls	r2, r3, #16
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	4413      	add	r3, r2
 8004ed0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004eda:	4b47      	ldr	r3, [pc, #284]	; (8004ff8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	0091      	lsls	r1, r2, #2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6812      	ldr	r2, [r2, #0]
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ef4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efc:	041a      	lsls	r2, r3, #16
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f10:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f18:	061a      	lsls	r2, r3, #24
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f28:	4b34      	ldr	r3, [pc, #208]	; (8004ffc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009a      	lsls	r2, r3, #2
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	441a      	add	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004f5e:	fb01 f303 	mul.w	r3, r1, r3
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	441a      	add	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	441a      	add	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	441a      	add	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	4a04      	ldr	r2, [pc, #16]	; (8005000 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d915      	bls.n	8005020 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004ff4:	e006      	b.n	8005004 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004ff6:	bf00      	nop
 8004ff8:	ffff0003 	.word	0xffff0003
 8004ffc:	10002b00 	.word	0x10002b00
 8005000:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2203      	movs	r2, #3
 8005018:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e010      	b.n	8005042 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e005      	b.n	8005034 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3304      	adds	r3, #4
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	429a      	cmp	r2, r3
 800503e:	d3f3      	bcc.n	8005028 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop

08005050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	; 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800505e:	4b89      	ldr	r3, [pc, #548]	; (8005284 <HAL_GPIO_Init+0x234>)
 8005060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005062:	e194      	b.n	800538e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	2101      	movs	r1, #1
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	4013      	ands	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 8186 	beq.w	8005388 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d005      	beq.n	8005094 <HAL_GPIO_Init+0x44>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d130      	bne.n	80050f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	2203      	movs	r2, #3
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ca:	2201      	movs	r2, #1
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	091b      	lsrs	r3, r3, #4
 80050e0:	f003 0201 	and.w	r2, r3, #1
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d017      	beq.n	8005132 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	2203      	movs	r2, #3
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d123      	bne.n	8005186 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	08da      	lsrs	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3208      	adds	r2, #8
 8005146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	220f      	movs	r2, #15
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	08da      	lsrs	r2, r3, #3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3208      	adds	r2, #8
 8005180:	69b9      	ldr	r1, [r7, #24]
 8005182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	2203      	movs	r2, #3
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 0203 	and.w	r2, r3, #3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 80e0 	beq.w	8005388 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051c8:	4b2f      	ldr	r3, [pc, #188]	; (8005288 <HAL_GPIO_Init+0x238>)
 80051ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051ce:	4a2e      	ldr	r2, [pc, #184]	; (8005288 <HAL_GPIO_Init+0x238>)
 80051d0:	f043 0302 	orr.w	r3, r3, #2
 80051d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051d8:	4b2b      	ldr	r3, [pc, #172]	; (8005288 <HAL_GPIO_Init+0x238>)
 80051da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051e6:	4a29      	ldr	r2, [pc, #164]	; (800528c <HAL_GPIO_Init+0x23c>)
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	089b      	lsrs	r3, r3, #2
 80051ec:	3302      	adds	r3, #2
 80051ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	220f      	movs	r2, #15
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a20      	ldr	r2, [pc, #128]	; (8005290 <HAL_GPIO_Init+0x240>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d052      	beq.n	80052b8 <HAL_GPIO_Init+0x268>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <HAL_GPIO_Init+0x244>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d031      	beq.n	800527e <HAL_GPIO_Init+0x22e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <HAL_GPIO_Init+0x248>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02b      	beq.n	800527a <HAL_GPIO_Init+0x22a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1d      	ldr	r2, [pc, #116]	; (800529c <HAL_GPIO_Init+0x24c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d025      	beq.n	8005276 <HAL_GPIO_Init+0x226>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <HAL_GPIO_Init+0x250>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01f      	beq.n	8005272 <HAL_GPIO_Init+0x222>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1b      	ldr	r2, [pc, #108]	; (80052a4 <HAL_GPIO_Init+0x254>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d019      	beq.n	800526e <HAL_GPIO_Init+0x21e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_GPIO_Init+0x258>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_GPIO_Init+0x21a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a19      	ldr	r2, [pc, #100]	; (80052ac <HAL_GPIO_Init+0x25c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00d      	beq.n	8005266 <HAL_GPIO_Init+0x216>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_GPIO_Init+0x260>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <HAL_GPIO_Init+0x212>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <HAL_GPIO_Init+0x264>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d101      	bne.n	800525e <HAL_GPIO_Init+0x20e>
 800525a:	2309      	movs	r3, #9
 800525c:	e02d      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 800525e:	230a      	movs	r3, #10
 8005260:	e02b      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 8005262:	2308      	movs	r3, #8
 8005264:	e029      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 8005266:	2307      	movs	r3, #7
 8005268:	e027      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 800526a:	2306      	movs	r3, #6
 800526c:	e025      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 800526e:	2305      	movs	r3, #5
 8005270:	e023      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 8005272:	2304      	movs	r3, #4
 8005274:	e021      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 8005276:	2303      	movs	r3, #3
 8005278:	e01f      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 800527a:	2302      	movs	r3, #2
 800527c:	e01d      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 800527e:	2301      	movs	r3, #1
 8005280:	e01b      	b.n	80052ba <HAL_GPIO_Init+0x26a>
 8005282:	bf00      	nop
 8005284:	58000080 	.word	0x58000080
 8005288:	58024400 	.word	0x58024400
 800528c:	58000400 	.word	0x58000400
 8005290:	58020000 	.word	0x58020000
 8005294:	58020400 	.word	0x58020400
 8005298:	58020800 	.word	0x58020800
 800529c:	58020c00 	.word	0x58020c00
 80052a0:	58021000 	.word	0x58021000
 80052a4:	58021400 	.word	0x58021400
 80052a8:	58021800 	.word	0x58021800
 80052ac:	58021c00 	.word	0x58021c00
 80052b0:	58022000 	.word	0x58022000
 80052b4:	58022400 	.word	0x58022400
 80052b8:	2300      	movs	r3, #0
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	f002 0203 	and.w	r2, r2, #3
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	4093      	lsls	r3, r2
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052ca:	4938      	ldr	r1, [pc, #224]	; (80053ac <HAL_GPIO_Init+0x35c>)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	089b      	lsrs	r3, r3, #2
 80052d0:	3302      	adds	r3, #2
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	43db      	mvns	r3, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4013      	ands	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80052fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800532c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	43db      	mvns	r3, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4013      	ands	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	3301      	adds	r3, #1
 800538c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	f47f ae63 	bne.w	8005064 <HAL_GPIO_Init+0x14>
  }
}
 800539e:	bf00      	nop
 80053a0:	bf00      	nop
 80053a2:	3724      	adds	r7, #36	; 0x24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	58000400 	.word	0x58000400

080053b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	807b      	strh	r3, [r7, #2]
 80053bc:	4613      	mov	r3, r2
 80053be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053c0:	787b      	ldrb	r3, [r7, #1]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053c6:	887a      	ldrh	r2, [r7, #2]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053cc:	e003      	b.n	80053d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053ce:	887b      	ldrh	r3, [r7, #2]
 80053d0:	041a      	lsls	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	619a      	str	r2, [r3, #24]
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053f4:	887a      	ldrh	r2, [r7, #2]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4013      	ands	r3, r2
 80053fa:	041a      	lsls	r2, r3, #16
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	43d9      	mvns	r1, r3
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	400b      	ands	r3, r1
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	619a      	str	r2, [r3, #24]
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e0bf      	b.n	80055aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc fdb0 	bl	8001fa4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800545a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6999      	ldr	r1, [r3, #24]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005470:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6899      	ldr	r1, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b4a      	ldr	r3, [pc, #296]	; (80055b4 <HAL_LTDC_Init+0x19c>)
 800548c:	400b      	ands	r3, r1
 800548e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68d9      	ldr	r1, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b3e      	ldr	r3, [pc, #248]	; (80055b4 <HAL_LTDC_Init+0x19c>)
 80054ba:	400b      	ands	r3, r1
 80054bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	041b      	lsls	r3, r3, #16
 80054c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68d9      	ldr	r1, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6919      	ldr	r1, [r3, #16]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b33      	ldr	r3, [pc, #204]	; (80055b4 <HAL_LTDC_Init+0x19c>)
 80054e8:	400b      	ands	r3, r1
 80054ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6919      	ldr	r1, [r3, #16]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6959      	ldr	r1, [r3, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b27      	ldr	r3, [pc, #156]	; (80055b4 <HAL_LTDC_Init+0x19c>)
 8005516:	400b      	ands	r3, r1
 8005518:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	041b      	lsls	r3, r3, #16
 8005520:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6959      	ldr	r1, [r3, #20]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800555a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0206 	orr.w	r2, r2, #6
 8005586:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	f000f800 	.word	0xf000f800

080055b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055b8:	b5b0      	push	{r4, r5, r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_LTDC_ConfigLayer+0x1a>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e02c      	b.n	800562c <HAL_LTDC_ConfigLayer+0x74>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2134      	movs	r1, #52	; 0x34
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	4413      	add	r3, r2
 80055ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4614      	mov	r4, r2
 80055f6:	461d      	mov	r5, r3
 80055f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f811 	bl	8005634 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2201      	movs	r2, #1
 8005618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bdb0      	pop	{r4, r5, r7, pc}

08005634 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005650:	4413      	add	r3, r2
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	01db      	lsls	r3, r3, #7
 8005660:	4413      	add	r3, r2
 8005662:	3384      	adds	r3, #132	; 0x84
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	4611      	mov	r1, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	01d2      	lsls	r2, r2, #7
 8005670:	440a      	add	r2, r1
 8005672:	3284      	adds	r2, #132	; 0x84
 8005674:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005678:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800568a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800568c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4619      	mov	r1, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	01db      	lsls	r3, r3, #7
 8005698:	440b      	add	r3, r1
 800569a:	3384      	adds	r3, #132	; 0x84
 800569c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056b2:	4413      	add	r3, r2
 80056b4:	041b      	lsls	r3, r3, #16
 80056b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	01db      	lsls	r3, r3, #7
 80056c2:	4413      	add	r3, r2
 80056c4:	3384      	adds	r3, #132	; 0x84
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	4611      	mov	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	01d2      	lsls	r2, r2, #7
 80056d2:	440a      	add	r2, r1
 80056d4:	3284      	adds	r2, #132	; 0x84
 80056d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80056da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ea:	4413      	add	r3, r2
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4619      	mov	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	01db      	lsls	r3, r3, #7
 80056f8:	440b      	add	r3, r1
 80056fa:	3384      	adds	r3, #132	; 0x84
 80056fc:	4619      	mov	r1, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4313      	orrs	r3, r2
 8005702:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	01db      	lsls	r3, r3, #7
 800570e:	4413      	add	r3, r2
 8005710:	3384      	adds	r3, #132	; 0x84
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	4611      	mov	r1, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	01d2      	lsls	r2, r2, #7
 800571e:	440a      	add	r2, r1
 8005720:	3284      	adds	r2, #132	; 0x84
 8005722:	f023 0307 	bic.w	r3, r3, #7
 8005726:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	01db      	lsls	r3, r3, #7
 8005732:	4413      	add	r3, r2
 8005734:	3384      	adds	r3, #132	; 0x84
 8005736:	461a      	mov	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	061b      	lsls	r3, r3, #24
 8005758:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	01db      	lsls	r3, r3, #7
 8005764:	4413      	add	r3, r2
 8005766:	3384      	adds	r3, #132	; 0x84
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	01db      	lsls	r3, r3, #7
 8005774:	4413      	add	r3, r2
 8005776:	3384      	adds	r3, #132	; 0x84
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005784:	461a      	mov	r2, r3
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	431a      	orrs	r2, r3
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4619      	mov	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	01db      	lsls	r3, r3, #7
 8005798:	440b      	add	r3, r1
 800579a:	3384      	adds	r3, #132	; 0x84
 800579c:	4619      	mov	r1, r3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	01db      	lsls	r3, r3, #7
 80057ae:	4413      	add	r3, r2
 80057b0:	3384      	adds	r3, #132	; 0x84
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	4611      	mov	r1, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	01d2      	lsls	r2, r2, #7
 80057be:	440a      	add	r2, r1
 80057c0:	3284      	adds	r2, #132	; 0x84
 80057c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	01db      	lsls	r3, r3, #7
 80057d2:	4413      	add	r3, r2
 80057d4:	3384      	adds	r3, #132	; 0x84
 80057d6:	461a      	mov	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	01db      	lsls	r3, r3, #7
 80057e8:	4413      	add	r3, r2
 80057ea:	3384      	adds	r3, #132	; 0x84
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4619      	mov	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	01db      	lsls	r3, r3, #7
 80057f8:	440b      	add	r3, r1
 80057fa:	3384      	adds	r3, #132	; 0x84
 80057fc:	4619      	mov	r1, r3
 80057fe:	4b58      	ldr	r3, [pc, #352]	; (8005960 <LTDC_SetConfig+0x32c>)
 8005800:	4013      	ands	r3, r2
 8005802:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	68f9      	ldr	r1, [r7, #12]
 800580e:	6809      	ldr	r1, [r1, #0]
 8005810:	4608      	mov	r0, r1
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	01c9      	lsls	r1, r1, #7
 8005816:	4401      	add	r1, r0
 8005818:	3184      	adds	r1, #132	; 0x84
 800581a:	4313      	orrs	r3, r2
 800581c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	01db      	lsls	r3, r3, #7
 8005828:	4413      	add	r3, r2
 800582a:	3384      	adds	r3, #132	; 0x84
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	01db      	lsls	r3, r3, #7
 8005838:	4413      	add	r3, r2
 800583a:	3384      	adds	r3, #132	; 0x84
 800583c:	461a      	mov	r2, r3
 800583e:	2300      	movs	r3, #0
 8005840:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	01db      	lsls	r3, r3, #7
 800584c:	4413      	add	r3, r2
 800584e:	3384      	adds	r3, #132	; 0x84
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005860:	2304      	movs	r3, #4
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	e01b      	b.n	800589e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d102      	bne.n	8005874 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800586e:	2303      	movs	r3, #3
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	e014      	b.n	800589e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b04      	cmp	r3, #4
 800587a:	d00b      	beq.n	8005894 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005880:	2b02      	cmp	r3, #2
 8005882:	d007      	beq.n	8005894 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005888:	2b03      	cmp	r3, #3
 800588a:	d003      	beq.n	8005894 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005890:	2b07      	cmp	r3, #7
 8005892:	d102      	bne.n	800589a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005894:	2302      	movs	r3, #2
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e001      	b.n	800589e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800589a:	2301      	movs	r3, #1
 800589c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	01db      	lsls	r3, r3, #7
 80058a8:	4413      	add	r3, r2
 80058aa:	3384      	adds	r3, #132	; 0x84
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	4611      	mov	r1, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	01d2      	lsls	r2, r2, #7
 80058b8:	440a      	add	r2, r1
 80058ba:	3284      	adds	r2, #132	; 0x84
 80058bc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80058c0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	fb02 f303 	mul.w	r3, r2, r3
 80058cc:	041a      	lsls	r2, r3, #16
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6859      	ldr	r1, [r3, #4]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1acb      	subs	r3, r1, r3
 80058d8:	69f9      	ldr	r1, [r7, #28]
 80058da:	fb01 f303 	mul.w	r3, r1, r3
 80058de:	3307      	adds	r3, #7
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	6809      	ldr	r1, [r1, #0]
 80058e4:	4608      	mov	r0, r1
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	01c9      	lsls	r1, r1, #7
 80058ea:	4401      	add	r1, r0
 80058ec:	3184      	adds	r1, #132	; 0x84
 80058ee:	4313      	orrs	r3, r2
 80058f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	01db      	lsls	r3, r3, #7
 80058fc:	4413      	add	r3, r2
 80058fe:	3384      	adds	r3, #132	; 0x84
 8005900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	01db      	lsls	r3, r3, #7
 800590c:	440b      	add	r3, r1
 800590e:	3384      	adds	r3, #132	; 0x84
 8005910:	4619      	mov	r1, r3
 8005912:	4b14      	ldr	r3, [pc, #80]	; (8005964 <LTDC_SetConfig+0x330>)
 8005914:	4013      	ands	r3, r2
 8005916:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	01db      	lsls	r3, r3, #7
 8005922:	4413      	add	r3, r2
 8005924:	3384      	adds	r3, #132	; 0x84
 8005926:	461a      	mov	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	01db      	lsls	r3, r3, #7
 8005938:	4413      	add	r3, r2
 800593a:	3384      	adds	r3, #132	; 0x84
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	4611      	mov	r1, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	01d2      	lsls	r2, r2, #7
 8005948:	440a      	add	r2, r1
 800594a:	3284      	adds	r2, #132	; 0x84
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	6013      	str	r3, [r2, #0]
}
 8005952:	bf00      	nop
 8005954:	3724      	adds	r7, #36	; 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	fffff8f8 	.word	0xfffff8f8
 8005964:	fffff800 	.word	0xfffff800

08005968 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800596a:	b08f      	sub	sp, #60	; 0x3c
 800596c:	af0a      	add	r7, sp, #40	; 0x28
 800596e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e116      	b.n	8005ba8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fc fe7d 	bl	8002694 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2203      	movs	r2, #3
 800599e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f007 f83f 	bl	800ca3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	687e      	ldr	r6, [r7, #4]
 80059c6:	466d      	mov	r5, sp
 80059c8:	f106 0410 	add.w	r4, r6, #16
 80059cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80059dc:	1d33      	adds	r3, r6, #4
 80059de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059e0:	6838      	ldr	r0, [r7, #0]
 80059e2:	f006 ffbd 	bl	800c960 <USB_CoreInit>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0d7      	b.n	8005ba8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2100      	movs	r1, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f007 f82d 	bl	800ca5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]
 8005a08:	e04a      	b.n	8005aa0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a0a:	7bfa      	ldrb	r2, [r7, #15]
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	333d      	adds	r3, #61	; 0x3d
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	333c      	adds	r3, #60	; 0x3c
 8005a2e:	7bfa      	ldrb	r2, [r7, #15]
 8005a30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	b298      	uxth	r0, r3
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	3356      	adds	r3, #86	; 0x56
 8005a46:	4602      	mov	r2, r0
 8005a48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a4a:	7bfa      	ldrb	r2, [r7, #15]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	3340      	adds	r3, #64	; 0x40
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a5e:	7bfa      	ldrb	r2, [r7, #15]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3344      	adds	r3, #68	; 0x44
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a72:	7bfa      	ldrb	r2, [r7, #15]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	3348      	adds	r3, #72	; 0x48
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a86:	7bfa      	ldrb	r2, [r7, #15]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	334c      	adds	r3, #76	; 0x4c
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3af      	bcc.n	8005a0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
 8005aae:	e044      	b.n	8005b3a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ab0:	7bfa      	ldrb	r2, [r7, #15]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ac6:	7bfa      	ldrb	r2, [r7, #15]
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ad8:	7bfa      	ldrb	r2, [r7, #15]
 8005ada:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b08:	7bfa      	ldrb	r2, [r7, #15]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b1e:	7bfa      	ldrb	r2, [r7, #15]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	3301      	adds	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
 8005b3a:	7bfa      	ldrb	r2, [r7, #15]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3b5      	bcc.n	8005ab0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	603b      	str	r3, [r7, #0]
 8005b4a:	687e      	ldr	r6, [r7, #4]
 8005b4c:	466d      	mov	r5, sp
 8005b4e:	f106 0410 	add.w	r4, r6, #16
 8005b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b62:	1d33      	adds	r3, r6, #4
 8005b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b66:	6838      	ldr	r0, [r7, #0]
 8005b68:	f006 ffc6 	bl	800caf8 <USB_DevInit>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e014      	b.n	8005ba8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d102      	bne.n	8005b9c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f80a 	bl	8005bb0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f007 f984 	bl	800ceae <USB_DevDisconnect>

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_PCDEx_ActivateLPM+0x44>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	10000003 	.word	0x10000003

08005bf8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d00a      	beq.n	8005c22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d001      	beq.n	8005c1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e01f      	b.n	8005c5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e01d      	b.n	8005c5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c22:	4b11      	ldr	r3, [pc, #68]	; (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f023 0207 	bic.w	r2, r3, #7
 8005c2a:	490f      	ldr	r1, [pc, #60]	; (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c32:	f7fd f8ad 	bl	8002d90 <HAL_GetTick>
 8005c36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c38:	e009      	b.n	8005c4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c3a:	f7fd f8a9 	bl	8002d90 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c48:	d901      	bls.n	8005c4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e007      	b.n	8005c5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c4e:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5a:	d1ee      	bne.n	8005c3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	58024800 	.word	0x58024800

08005c6c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c7a:	60d3      	str	r3, [r2, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	58024800 	.word	0x58024800

08005c8c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005c94:	f7fd f87c 	bl	8002d90 <HAL_GetTick>
 8005c98:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e05f      	b.n	8005d64 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7fc fa65 	bl	8002180 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005cb6:	f241 3188 	movw	r1, #5000	; 0x1388
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f85a 	bl	8005d74 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	021a      	lsls	r2, r3, #8
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2120      	movs	r1, #32
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f852 	bl	8005d90 <QSPI_WaitFlagStateUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005cf0:	7afb      	ldrb	r3, [r7, #11]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d135      	bne.n	8005d62 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <HAL_QSPI_Init+0xe0>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6852      	ldr	r2, [r2, #4]
 8005d04:	0611      	lsls	r1, r2, #24
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68d2      	ldr	r2, [r2, #12]
 8005d0a:	4311      	orrs	r1, r2
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	69d2      	ldr	r2, [r2, #28]
 8005d10:	4311      	orrs	r1, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6a12      	ldr	r2, [r2, #32]
 8005d16:	4311      	orrs	r1, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_QSPI_Init+0xe4>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6912      	ldr	r2, [r2, #16]
 8005d2e:	0411      	lsls	r1, r2, #16
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6952      	ldr	r2, [r2, #20]
 8005d34:	4311      	orrs	r1, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6992      	ldr	r2, [r2, #24]
 8005d3a:	4311      	orrs	r1, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005d62:	7afb      	ldrb	r3, [r7, #11]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	00ffff2f 	.word	0x00ffff2f
 8005d70:	ffe0f8fe 	.word	0xffe0f8fe

08005d74 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005da0:	e01a      	b.n	8005dd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d016      	beq.n	8005dd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005daa:	f7fc fff1 	bl	8002d90 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dcc:	f043 0201 	orr.w	r2, r3, #1
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e00e      	b.n	8005df6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bf14      	ite	ne
 8005de6:	2301      	movne	r3, #1
 8005de8:	2300      	moveq	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d1d6      	bne.n	8005da2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	; 0x30
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d102      	bne.n	8005e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f000 bc48 	b.w	80066a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 8088 	beq.w	8005f32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e22:	4b99      	ldr	r3, [pc, #612]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e2c:	4b96      	ldr	r3, [pc, #600]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d007      	beq.n	8005e48 <HAL_RCC_OscConfig+0x48>
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	2b18      	cmp	r3, #24
 8005e3c:	d111      	bne.n	8005e62 <HAL_RCC_OscConfig+0x62>
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d10c      	bne.n	8005e62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	4b8f      	ldr	r3, [pc, #572]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d06d      	beq.n	8005f30 <HAL_RCC_OscConfig+0x130>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d169      	bne.n	8005f30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f000 bc21 	b.w	80066a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6a:	d106      	bne.n	8005e7a <HAL_RCC_OscConfig+0x7a>
 8005e6c:	4b86      	ldr	r3, [pc, #536]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a85      	ldr	r2, [pc, #532]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e02e      	b.n	8005ed8 <HAL_RCC_OscConfig+0xd8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCC_OscConfig+0x9c>
 8005e82:	4b81      	ldr	r3, [pc, #516]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a80      	ldr	r2, [pc, #512]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b7e      	ldr	r3, [pc, #504]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a7d      	ldr	r2, [pc, #500]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e01d      	b.n	8005ed8 <HAL_RCC_OscConfig+0xd8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0xc0>
 8005ea6:	4b78      	ldr	r3, [pc, #480]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a77      	ldr	r2, [pc, #476]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b75      	ldr	r3, [pc, #468]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a74      	ldr	r2, [pc, #464]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCC_OscConfig+0xd8>
 8005ec0:	4b71      	ldr	r3, [pc, #452]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a70      	ldr	r2, [pc, #448]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4b6e      	ldr	r3, [pc, #440]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a6d      	ldr	r2, [pc, #436]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fc ff56 	bl	8002d90 <HAL_GetTick>
 8005ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7fc ff52 	bl	8002d90 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	; 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e3d4      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005efa:	4b63      	ldr	r3, [pc, #396]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0xe8>
 8005f06:	e014      	b.n	8005f32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fc ff42 	bl	8002d90 <HAL_GetTick>
 8005f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f10:	f7fc ff3e 	bl	8002d90 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e3c0      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f22:	4b59      	ldr	r3, [pc, #356]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x110>
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80ca 	beq.w	80060d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f40:	4b51      	ldr	r3, [pc, #324]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f4a:	4b4f      	ldr	r3, [pc, #316]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <HAL_RCC_OscConfig+0x166>
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	2b18      	cmp	r3, #24
 8005f5a:	d156      	bne.n	800600a <HAL_RCC_OscConfig+0x20a>
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d151      	bne.n	800600a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f66:	4b48      	ldr	r3, [pc, #288]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_RCC_OscConfig+0x17e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e392      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f7e:	4b42      	ldr	r3, [pc, #264]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f023 0219 	bic.w	r2, r3, #25
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	493f      	ldr	r1, [pc, #252]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f90:	f7fc fefe 	bl	8002d90 <HAL_GetTick>
 8005f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f98:	f7fc fefa 	bl	8002d90 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e37c      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005faa:	4b37      	ldr	r3, [pc, #220]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f0      	beq.n	8005f98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb6:	f7fc ff1b 	bl	8002df0 <HAL_GetREVID>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d817      	bhi.n	8005ff4 <HAL_RCC_OscConfig+0x1f4>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	d108      	bne.n	8005fde <HAL_RCC_OscConfig+0x1de>
 8005fcc:	4b2e      	ldr	r3, [pc, #184]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005fd4:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fdc:	e07a      	b.n	80060d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fde:	4b2a      	ldr	r3, [pc, #168]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	031b      	lsls	r3, r3, #12
 8005fec:	4926      	ldr	r1, [pc, #152]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ff2:	e06f      	b.n	80060d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff4:	4b24      	ldr	r3, [pc, #144]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	4921      	ldr	r1, [pc, #132]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8006004:	4313      	orrs	r3, r2
 8006006:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006008:	e064      	b.n	80060d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d047      	beq.n	80060a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006012:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f023 0219 	bic.w	r2, r3, #25
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	491a      	ldr	r1, [pc, #104]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8006020:	4313      	orrs	r3, r2
 8006022:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fc feb4 	bl	8002d90 <HAL_GetTick>
 8006028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602c:	f7fc feb0 	bl	8002d90 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e332      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604a:	f7fc fed1 	bl	8002df0 <HAL_GetREVID>
 800604e:	4603      	mov	r3, r0
 8006050:	f241 0203 	movw	r2, #4099	; 0x1003
 8006054:	4293      	cmp	r3, r2
 8006056:	d819      	bhi.n	800608c <HAL_RCC_OscConfig+0x28c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d108      	bne.n	8006072 <HAL_RCC_OscConfig+0x272>
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006068:	4a07      	ldr	r2, [pc, #28]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 800606a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606e:	6053      	str	r3, [r2, #4]
 8006070:	e030      	b.n	80060d4 <HAL_RCC_OscConfig+0x2d4>
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	031b      	lsls	r3, r3, #12
 8006080:	4901      	ldr	r1, [pc, #4]	; (8006088 <HAL_RCC_OscConfig+0x288>)
 8006082:	4313      	orrs	r3, r2
 8006084:	604b      	str	r3, [r1, #4]
 8006086:	e025      	b.n	80060d4 <HAL_RCC_OscConfig+0x2d4>
 8006088:	58024400 	.word	0x58024400
 800608c:	4b9a      	ldr	r3, [pc, #616]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	4997      	ldr	r1, [pc, #604]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
 80060a0:	e018      	b.n	80060d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060a2:	4b95      	ldr	r3, [pc, #596]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a94      	ldr	r2, [pc, #592]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ae:	f7fc fe6f 	bl	8002d90 <HAL_GetTick>
 80060b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b6:	f7fc fe6b 	bl	8002d90 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e2ed      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060c8:	4b8b      	ldr	r3, [pc, #556]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f0      	bne.n	80060b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80a9 	beq.w	8006234 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e2:	4b85      	ldr	r3, [pc, #532]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060ec:	4b82      	ldr	r3, [pc, #520]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d007      	beq.n	8006108 <HAL_RCC_OscConfig+0x308>
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b18      	cmp	r3, #24
 80060fc:	d13a      	bne.n	8006174 <HAL_RCC_OscConfig+0x374>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d135      	bne.n	8006174 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006108:	4b7b      	ldr	r3, [pc, #492]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_RCC_OscConfig+0x320>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d001      	beq.n	8006120 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e2c1      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006120:	f7fc fe66 	bl	8002df0 <HAL_GetREVID>
 8006124:	4603      	mov	r3, r0
 8006126:	f241 0203 	movw	r2, #4099	; 0x1003
 800612a:	4293      	cmp	r3, r2
 800612c:	d817      	bhi.n	800615e <HAL_RCC_OscConfig+0x35e>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	2b20      	cmp	r3, #32
 8006134:	d108      	bne.n	8006148 <HAL_RCC_OscConfig+0x348>
 8006136:	4b70      	ldr	r3, [pc, #448]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800613e:	4a6e      	ldr	r2, [pc, #440]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 8006140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006144:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006146:	e075      	b.n	8006234 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006148:	4b6b      	ldr	r3, [pc, #428]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	069b      	lsls	r3, r3, #26
 8006156:	4968      	ldr	r1, [pc, #416]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 8006158:	4313      	orrs	r3, r2
 800615a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800615c:	e06a      	b.n	8006234 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800615e:	4b66      	ldr	r3, [pc, #408]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	4962      	ldr	r1, [pc, #392]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800616e:	4313      	orrs	r3, r2
 8006170:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006172:	e05f      	b.n	8006234 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d042      	beq.n	8006202 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800617c:	4b5e      	ldr	r3, [pc, #376]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a5d      	ldr	r2, [pc, #372]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 8006182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fc fe02 	bl	8002d90 <HAL_GetTick>
 800618c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006190:	f7fc fdfe 	bl	8002d90 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e280      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061a2:	4b55      	ldr	r3, [pc, #340]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061ae:	f7fc fe1f 	bl	8002df0 <HAL_GetREVID>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d817      	bhi.n	80061ec <HAL_RCC_OscConfig+0x3ec>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d108      	bne.n	80061d6 <HAL_RCC_OscConfig+0x3d6>
 80061c4:	4b4c      	ldr	r3, [pc, #304]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061cc:	4a4a      	ldr	r2, [pc, #296]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80061ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061d2:	6053      	str	r3, [r2, #4]
 80061d4:	e02e      	b.n	8006234 <HAL_RCC_OscConfig+0x434>
 80061d6:	4b48      	ldr	r3, [pc, #288]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	069b      	lsls	r3, r3, #26
 80061e4:	4944      	ldr	r1, [pc, #272]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	604b      	str	r3, [r1, #4]
 80061ea:	e023      	b.n	8006234 <HAL_RCC_OscConfig+0x434>
 80061ec:	4b42      	ldr	r3, [pc, #264]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	061b      	lsls	r3, r3, #24
 80061fa:	493f      	ldr	r1, [pc, #252]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60cb      	str	r3, [r1, #12]
 8006200:	e018      	b.n	8006234 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006202:	4b3d      	ldr	r3, [pc, #244]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 8006208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620e:	f7fc fdbf 	bl	8002d90 <HAL_GetTick>
 8006212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006216:	f7fc fdbb 	bl	8002d90 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e23d      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006228:	4b33      	ldr	r3, [pc, #204]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f0      	bne.n	8006216 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d036      	beq.n	80062ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d019      	beq.n	800627c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006248:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800624a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800624c:	4a2a      	ldr	r2, [pc, #168]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006254:	f7fc fd9c 	bl	8002d90 <HAL_GetTick>
 8006258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800625c:	f7fc fd98 	bl	8002d90 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e21a      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800626e:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 8006270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f0      	beq.n	800625c <HAL_RCC_OscConfig+0x45c>
 800627a:	e018      	b.n	80062ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800627c:	4b1e      	ldr	r3, [pc, #120]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 800627e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006280:	4a1d      	ldr	r2, [pc, #116]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006288:	f7fc fd82 	bl	8002d90 <HAL_GetTick>
 800628c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006290:	f7fc fd7e 	bl	8002d90 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e200      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062a2:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80062a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d039      	beq.n	800632e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01c      	beq.n	80062fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062c2:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a0c      	ldr	r2, [pc, #48]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80062c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062ce:	f7fc fd5f 	bl	8002d90 <HAL_GetTick>
 80062d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062d4:	e008      	b.n	80062e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062d6:	f7fc fd5b 	bl	8002d90 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e1dd      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062e8:	4b03      	ldr	r3, [pc, #12]	; (80062f8 <HAL_RCC_OscConfig+0x4f8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <HAL_RCC_OscConfig+0x4d6>
 80062f4:	e01b      	b.n	800632e <HAL_RCC_OscConfig+0x52e>
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062fc:	4b9b      	ldr	r3, [pc, #620]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a9a      	ldr	r2, [pc, #616]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006306:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006308:	f7fc fd42 	bl	8002d90 <HAL_GetTick>
 800630c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006310:	f7fc fd3e 	bl	8002d90 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e1c0      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006322:	4b92      	ldr	r3, [pc, #584]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f0      	bne.n	8006310 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8081 	beq.w	800643e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800633c:	4b8c      	ldr	r3, [pc, #560]	; (8006570 <HAL_RCC_OscConfig+0x770>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a8b      	ldr	r2, [pc, #556]	; (8006570 <HAL_RCC_OscConfig+0x770>)
 8006342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006348:	f7fc fd22 	bl	8002d90 <HAL_GetTick>
 800634c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006350:	f7fc fd1e 	bl	8002d90 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b64      	cmp	r3, #100	; 0x64
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e1a0      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006362:	4b83      	ldr	r3, [pc, #524]	; (8006570 <HAL_RCC_OscConfig+0x770>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0f0      	beq.n	8006350 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d106      	bne.n	8006384 <HAL_RCC_OscConfig+0x584>
 8006376:	4b7d      	ldr	r3, [pc, #500]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	4a7c      	ldr	r2, [pc, #496]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 800637c:	f043 0301 	orr.w	r3, r3, #1
 8006380:	6713      	str	r3, [r2, #112]	; 0x70
 8006382:	e02d      	b.n	80063e0 <HAL_RCC_OscConfig+0x5e0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10c      	bne.n	80063a6 <HAL_RCC_OscConfig+0x5a6>
 800638c:	4b77      	ldr	r3, [pc, #476]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 800638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006390:	4a76      	ldr	r2, [pc, #472]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006392:	f023 0301 	bic.w	r3, r3, #1
 8006396:	6713      	str	r3, [r2, #112]	; 0x70
 8006398:	4b74      	ldr	r3, [pc, #464]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 800639a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639c:	4a73      	ldr	r2, [pc, #460]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 800639e:	f023 0304 	bic.w	r3, r3, #4
 80063a2:	6713      	str	r3, [r2, #112]	; 0x70
 80063a4:	e01c      	b.n	80063e0 <HAL_RCC_OscConfig+0x5e0>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCC_OscConfig+0x5c8>
 80063ae:	4b6f      	ldr	r3, [pc, #444]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	4a6e      	ldr	r2, [pc, #440]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80063b4:	f043 0304 	orr.w	r3, r3, #4
 80063b8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ba:	4b6c      	ldr	r3, [pc, #432]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	4a6b      	ldr	r2, [pc, #428]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	6713      	str	r3, [r2, #112]	; 0x70
 80063c6:	e00b      	b.n	80063e0 <HAL_RCC_OscConfig+0x5e0>
 80063c8:	4b68      	ldr	r3, [pc, #416]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	4a67      	ldr	r2, [pc, #412]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	6713      	str	r3, [r2, #112]	; 0x70
 80063d4:	4b65      	ldr	r3, [pc, #404]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	4a64      	ldr	r2, [pc, #400]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80063da:	f023 0304 	bic.w	r3, r3, #4
 80063de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d015      	beq.n	8006414 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fc fcd2 	bl	8002d90 <HAL_GetTick>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ee:	e00a      	b.n	8006406 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f0:	f7fc fcce 	bl	8002d90 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e14e      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006406:	4b59      	ldr	r3, [pc, #356]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ee      	beq.n	80063f0 <HAL_RCC_OscConfig+0x5f0>
 8006412:	e014      	b.n	800643e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006414:	f7fc fcbc 	bl	8002d90 <HAL_GetTick>
 8006418:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800641a:	e00a      	b.n	8006432 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641c:	f7fc fcb8 	bl	8002d90 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	; 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e138      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006432:	4b4e      	ldr	r3, [pc, #312]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1ee      	bne.n	800641c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 812d 	beq.w	80066a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006448:	4b48      	ldr	r3, [pc, #288]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006450:	2b18      	cmp	r3, #24
 8006452:	f000 80bd 	beq.w	80065d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b02      	cmp	r3, #2
 800645c:	f040 809e 	bne.w	800659c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006460:	4b42      	ldr	r3, [pc, #264]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a41      	ldr	r2, [pc, #260]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800646a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646c:	f7fc fc90 	bl	8002d90 <HAL_GetTick>
 8006470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006474:	f7fc fc8c 	bl	8002d90 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e10e      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006486:	4b39      	ldr	r3, [pc, #228]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f0      	bne.n	8006474 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006492:	4b36      	ldr	r3, [pc, #216]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006496:	4b37      	ldr	r3, [pc, #220]	; (8006574 <HAL_RCC_OscConfig+0x774>)
 8006498:	4013      	ands	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064a2:	0112      	lsls	r2, r2, #4
 80064a4:	430a      	orrs	r2, r1
 80064a6:	4931      	ldr	r1, [pc, #196]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	628b      	str	r3, [r1, #40]	; 0x28
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	3b01      	subs	r3, #1
 80064b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	3b01      	subs	r3, #1
 80064bc:	025b      	lsls	r3, r3, #9
 80064be:	b29b      	uxth	r3, r3
 80064c0:	431a      	orrs	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	3b01      	subs	r3, #1
 80064c8:	041b      	lsls	r3, r3, #16
 80064ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d4:	3b01      	subs	r3, #1
 80064d6:	061b      	lsls	r3, r3, #24
 80064d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064dc:	4923      	ldr	r1, [pc, #140]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80064e2:	4b22      	ldr	r3, [pc, #136]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	4a21      	ldr	r2, [pc, #132]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80064e8:	f023 0301 	bic.w	r3, r3, #1
 80064ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064ee:	4b1f      	ldr	r3, [pc, #124]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80064f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064f2:	4b21      	ldr	r3, [pc, #132]	; (8006578 <HAL_RCC_OscConfig+0x778>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064fa:	00d2      	lsls	r2, r2, #3
 80064fc:	491b      	ldr	r1, [pc, #108]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006502:	4b1a      	ldr	r3, [pc, #104]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	f023 020c 	bic.w	r2, r3, #12
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	4917      	ldr	r1, [pc, #92]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006510:	4313      	orrs	r3, r2
 8006512:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006514:	4b15      	ldr	r3, [pc, #84]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	f023 0202 	bic.w	r2, r3, #2
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006520:	4912      	ldr	r1, [pc, #72]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006522:	4313      	orrs	r3, r2
 8006524:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006526:	4b11      	ldr	r3, [pc, #68]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	4a10      	ldr	r2, [pc, #64]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 800652c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006530:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006532:	4b0e      	ldr	r3, [pc, #56]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	4a0d      	ldr	r2, [pc, #52]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	4a0a      	ldr	r2, [pc, #40]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800654a:	4b08      	ldr	r3, [pc, #32]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 800654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654e:	4a07      	ldr	r2, [pc, #28]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a04      	ldr	r2, [pc, #16]	; (800656c <HAL_RCC_OscConfig+0x76c>)
 800655c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006562:	f7fc fc15 	bl	8002d90 <HAL_GetTick>
 8006566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006568:	e011      	b.n	800658e <HAL_RCC_OscConfig+0x78e>
 800656a:	bf00      	nop
 800656c:	58024400 	.word	0x58024400
 8006570:	58024800 	.word	0x58024800
 8006574:	fffffc0c 	.word	0xfffffc0c
 8006578:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800657c:	f7fc fc08 	bl	8002d90 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e08a      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800658e:	4b47      	ldr	r3, [pc, #284]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f0      	beq.n	800657c <HAL_RCC_OscConfig+0x77c>
 800659a:	e082      	b.n	80066a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800659c:	4b43      	ldr	r3, [pc, #268]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a42      	ldr	r2, [pc, #264]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 80065a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fc fbf2 	bl	8002d90 <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b0:	f7fc fbee 	bl	8002d90 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e070      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065c2:	4b3a      	ldr	r3, [pc, #232]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f0      	bne.n	80065b0 <HAL_RCC_OscConfig+0x7b0>
 80065ce:	e068      	b.n	80066a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065d0:	4b36      	ldr	r3, [pc, #216]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065d6:	4b35      	ldr	r3, [pc, #212]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d031      	beq.n	8006648 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f003 0203 	and.w	r2, r3, #3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d12a      	bne.n	8006648 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fe:	429a      	cmp	r2, r3
 8006600:	d122      	bne.n	8006648 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800660e:	429a      	cmp	r2, r3
 8006610:	d11a      	bne.n	8006648 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	0a5b      	lsrs	r3, r3, #9
 8006616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006620:	429a      	cmp	r2, r3
 8006622:	d111      	bne.n	8006648 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	0c1b      	lsrs	r3, r3, #16
 8006628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006632:	429a      	cmp	r2, r3
 8006634:	d108      	bne.n	8006648 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	0e1b      	lsrs	r3, r3, #24
 800663a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006642:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d001      	beq.n	800664c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e02b      	b.n	80066a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800664c:	4b17      	ldr	r3, [pc, #92]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006656:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d01f      	beq.n	80066a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	4a11      	ldr	r2, [pc, #68]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 8006668:	f023 0301 	bic.w	r3, r3, #1
 800666c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800666e:	f7fc fb8f 	bl	8002d90 <HAL_GetTick>
 8006672:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006674:	bf00      	nop
 8006676:	f7fc fb8b 	bl	8002d90 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	4293      	cmp	r3, r2
 8006680:	d0f9      	beq.n	8006676 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 8006684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006686:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <HAL_RCC_OscConfig+0x8b0>)
 8006688:	4013      	ands	r3, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800668e:	00d2      	lsls	r2, r2, #3
 8006690:	4906      	ldr	r1, [pc, #24]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 8006692:	4313      	orrs	r3, r2
 8006694:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	4a04      	ldr	r2, [pc, #16]	; (80066ac <HAL_RCC_OscConfig+0x8ac>)
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3730      	adds	r7, #48	; 0x30
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	58024400 	.word	0x58024400
 80066b0:	ffff0007 	.word	0xffff0007

080066b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e19c      	b.n	8006a02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066c8:	4b8a      	ldr	r3, [pc, #552]	; (80068f4 <HAL_RCC_ClockConfig+0x240>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d910      	bls.n	80066f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d6:	4b87      	ldr	r3, [pc, #540]	; (80068f4 <HAL_RCC_ClockConfig+0x240>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 020f 	bic.w	r2, r3, #15
 80066de:	4985      	ldr	r1, [pc, #532]	; (80068f4 <HAL_RCC_ClockConfig+0x240>)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e6:	4b83      	ldr	r3, [pc, #524]	; (80068f4 <HAL_RCC_ClockConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e184      	b.n	8006a02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d010      	beq.n	8006726 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	4b7b      	ldr	r3, [pc, #492]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006710:	429a      	cmp	r2, r3
 8006712:	d908      	bls.n	8006726 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006714:	4b78      	ldr	r3, [pc, #480]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	4975      	ldr	r1, [pc, #468]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006722:	4313      	orrs	r3, r2
 8006724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d010      	beq.n	8006754 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695a      	ldr	r2, [r3, #20]
 8006736:	4b70      	ldr	r3, [pc, #448]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800673e:	429a      	cmp	r2, r3
 8006740:	d908      	bls.n	8006754 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006742:	4b6d      	ldr	r3, [pc, #436]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	496a      	ldr	r1, [pc, #424]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006750:	4313      	orrs	r3, r2
 8006752:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b00      	cmp	r3, #0
 800675e:	d010      	beq.n	8006782 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699a      	ldr	r2, [r3, #24]
 8006764:	4b64      	ldr	r3, [pc, #400]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800676c:	429a      	cmp	r2, r3
 800676e:	d908      	bls.n	8006782 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006770:	4b61      	ldr	r3, [pc, #388]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	495e      	ldr	r1, [pc, #376]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 800677e:	4313      	orrs	r3, r2
 8006780:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d010      	beq.n	80067b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69da      	ldr	r2, [r3, #28]
 8006792:	4b59      	ldr	r3, [pc, #356]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800679a:	429a      	cmp	r2, r3
 800679c:	d908      	bls.n	80067b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800679e:	4b56      	ldr	r3, [pc, #344]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	4953      	ldr	r1, [pc, #332]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d010      	beq.n	80067de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	4b4d      	ldr	r3, [pc, #308]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d908      	bls.n	80067de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067cc:	4b4a      	ldr	r3, [pc, #296]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	f023 020f 	bic.w	r2, r3, #15
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4947      	ldr	r1, [pc, #284]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d055      	beq.n	8006896 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067ea:	4b43      	ldr	r3, [pc, #268]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	4940      	ldr	r1, [pc, #256]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d107      	bne.n	8006814 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006804:	4b3c      	ldr	r3, [pc, #240]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d121      	bne.n	8006854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0f6      	b.n	8006a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d107      	bne.n	800682c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800681c:	4b36      	ldr	r3, [pc, #216]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d115      	bne.n	8006854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0ea      	b.n	8006a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d107      	bne.n	8006844 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006834:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e0de      	b.n	8006a02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006844:	4b2c      	ldr	r3, [pc, #176]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e0d6      	b.n	8006a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006854:	4b28      	ldr	r3, [pc, #160]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f023 0207 	bic.w	r2, r3, #7
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	4925      	ldr	r1, [pc, #148]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006862:	4313      	orrs	r3, r2
 8006864:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006866:	f7fc fa93 	bl	8002d90 <HAL_GetTick>
 800686a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686c:	e00a      	b.n	8006884 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800686e:	f7fc fa8f 	bl	8002d90 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f241 3288 	movw	r2, #5000	; 0x1388
 800687c:	4293      	cmp	r3, r2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e0be      	b.n	8006a02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006884:	4b1c      	ldr	r3, [pc, #112]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	429a      	cmp	r2, r3
 8006894:	d1eb      	bne.n	800686e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d010      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d208      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f023 020f 	bic.w	r2, r3, #15
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	490e      	ldr	r1, [pc, #56]	; (80068f8 <HAL_RCC_ClockConfig+0x244>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_RCC_ClockConfig+0x240>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d214      	bcs.n	80068fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d2:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <HAL_RCC_ClockConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f023 020f 	bic.w	r2, r3, #15
 80068da:	4906      	ldr	r1, [pc, #24]	; (80068f4 <HAL_RCC_ClockConfig+0x240>)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	4313      	orrs	r3, r2
 80068e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068e2:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <HAL_RCC_ClockConfig+0x240>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 030f 	and.w	r3, r3, #15
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e086      	b.n	8006a02 <HAL_RCC_ClockConfig+0x34e>
 80068f4:	52002000 	.word	0x52002000
 80068f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	4b3f      	ldr	r3, [pc, #252]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006914:	429a      	cmp	r2, r3
 8006916:	d208      	bcs.n	800692a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006918:	4b3c      	ldr	r3, [pc, #240]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	4939      	ldr	r1, [pc, #228]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 8006926:	4313      	orrs	r3, r2
 8006928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d010      	beq.n	8006958 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695a      	ldr	r2, [r3, #20]
 800693a:	4b34      	ldr	r3, [pc, #208]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006942:	429a      	cmp	r2, r3
 8006944:	d208      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006946:	4b31      	ldr	r3, [pc, #196]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	492e      	ldr	r1, [pc, #184]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 8006954:	4313      	orrs	r3, r2
 8006956:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d010      	beq.n	8006986 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006970:	429a      	cmp	r2, r3
 8006972:	d208      	bcs.n	8006986 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006974:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	4922      	ldr	r1, [pc, #136]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 8006982:	4313      	orrs	r3, r2
 8006984:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d010      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69da      	ldr	r2, [r3, #28]
 8006996:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800699e:	429a      	cmp	r2, r3
 80069a0:	d208      	bcs.n	80069b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069a2:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	4917      	ldr	r1, [pc, #92]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069b4:	f000 f834 	bl	8006a20 <HAL_RCC_GetSysClockFreq>
 80069b8:	4602      	mov	r2, r0
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	0a1b      	lsrs	r3, r3, #8
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	4912      	ldr	r1, [pc, #72]	; (8006a10 <HAL_RCC_ClockConfig+0x35c>)
 80069c6:	5ccb      	ldrb	r3, [r1, r3]
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
 80069d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069d2:	4b0e      	ldr	r3, [pc, #56]	; (8006a0c <HAL_RCC_ClockConfig+0x358>)
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	4a0d      	ldr	r2, [pc, #52]	; (8006a10 <HAL_RCC_ClockConfig+0x35c>)
 80069dc:	5cd3      	ldrb	r3, [r2, r3]
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	fa22 f303 	lsr.w	r3, r2, r3
 80069e8:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <HAL_RCC_ClockConfig+0x360>)
 80069ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069ec:	4a0a      	ldr	r2, [pc, #40]	; (8006a18 <HAL_RCC_ClockConfig+0x364>)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <HAL_RCC_ClockConfig+0x368>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fc f980 	bl	8002cfc <HAL_InitTick>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	0800e580 	.word	0x0800e580
 8006a14:	2400002c 	.word	0x2400002c
 8006a18:	24000028 	.word	0x24000028
 8006a1c:	24000030 	.word	0x24000030

08006a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b089      	sub	sp, #36	; 0x24
 8006a24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a26:	4bb3      	ldr	r3, [pc, #716]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a2e:	2b18      	cmp	r3, #24
 8006a30:	f200 8155 	bhi.w	8006cde <HAL_RCC_GetSysClockFreq+0x2be>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006aa1 	.word	0x08006aa1
 8006a40:	08006cdf 	.word	0x08006cdf
 8006a44:	08006cdf 	.word	0x08006cdf
 8006a48:	08006cdf 	.word	0x08006cdf
 8006a4c:	08006cdf 	.word	0x08006cdf
 8006a50:	08006cdf 	.word	0x08006cdf
 8006a54:	08006cdf 	.word	0x08006cdf
 8006a58:	08006cdf 	.word	0x08006cdf
 8006a5c:	08006ac7 	.word	0x08006ac7
 8006a60:	08006cdf 	.word	0x08006cdf
 8006a64:	08006cdf 	.word	0x08006cdf
 8006a68:	08006cdf 	.word	0x08006cdf
 8006a6c:	08006cdf 	.word	0x08006cdf
 8006a70:	08006cdf 	.word	0x08006cdf
 8006a74:	08006cdf 	.word	0x08006cdf
 8006a78:	08006cdf 	.word	0x08006cdf
 8006a7c:	08006acd 	.word	0x08006acd
 8006a80:	08006cdf 	.word	0x08006cdf
 8006a84:	08006cdf 	.word	0x08006cdf
 8006a88:	08006cdf 	.word	0x08006cdf
 8006a8c:	08006cdf 	.word	0x08006cdf
 8006a90:	08006cdf 	.word	0x08006cdf
 8006a94:	08006cdf 	.word	0x08006cdf
 8006a98:	08006cdf 	.word	0x08006cdf
 8006a9c:	08006ad3 	.word	0x08006ad3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aa0:	4b94      	ldr	r3, [pc, #592]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aac:	4b91      	ldr	r3, [pc, #580]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	08db      	lsrs	r3, r3, #3
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	4a90      	ldr	r2, [pc, #576]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8006abc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006abe:	e111      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ac0:	4b8d      	ldr	r3, [pc, #564]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ac2:	61bb      	str	r3, [r7, #24]
      break;
 8006ac4:	e10e      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ac6:	4b8d      	ldr	r3, [pc, #564]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ac8:	61bb      	str	r3, [r7, #24]
      break;
 8006aca:	e10b      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006acc:	4b8c      	ldr	r3, [pc, #560]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ace:	61bb      	str	r3, [r7, #24]
      break;
 8006ad0:	e108      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ad2:	4b88      	ldr	r3, [pc, #544]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006adc:	4b85      	ldr	r3, [pc, #532]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	091b      	lsrs	r3, r3, #4
 8006ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ae6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ae8:	4b82      	ldr	r3, [pc, #520]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006af2:	4b80      	ldr	r3, [pc, #512]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af6:	08db      	lsrs	r3, r3, #3
 8006af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80e1 	beq.w	8006cd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	f000 8083 	beq.w	8006c24 <HAL_RCC_GetSysClockFreq+0x204>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	f200 80a1 	bhi.w	8006c68 <HAL_RCC_GetSysClockFreq+0x248>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_RCC_GetSysClockFreq+0x114>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d056      	beq.n	8006be0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b32:	e099      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b34:	4b6f      	ldr	r3, [pc, #444]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d02d      	beq.n	8006b9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b40:	4b6c      	ldr	r3, [pc, #432]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	08db      	lsrs	r3, r3, #3
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	4a6b      	ldr	r2, [pc, #428]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	ee07 3a90 	vmov	s15, r3
 8006b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	4b62      	ldr	r3, [pc, #392]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006b9a:	e087      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bae:	4b51      	ldr	r3, [pc, #324]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bde:	e065      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf2:	4b40      	ldr	r3, [pc, #256]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c22:	e043      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c36:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c66:	e021      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006caa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006cac:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	0a5b      	lsrs	r3, r3, #9
 8006cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	ee07 3a90 	vmov	s15, r3
 8006cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd0:	ee17 3a90 	vmov	r3, s15
 8006cd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006cd6:	e005      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]
      break;
 8006cdc:	e002      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006cde:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ce0:	61bb      	str	r3, [r7, #24]
      break;
 8006ce2:	bf00      	nop
  }

  return sysclockfreq;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3724      	adds	r7, #36	; 0x24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	58024400 	.word	0x58024400
 8006cf8:	03d09000 	.word	0x03d09000
 8006cfc:	003d0900 	.word	0x003d0900
 8006d00:	017d7840 	.word	0x017d7840
 8006d04:	46000000 	.word	0x46000000
 8006d08:	4c742400 	.word	0x4c742400
 8006d0c:	4a742400 	.word	0x4a742400
 8006d10:	4bbebc20 	.word	0x4bbebc20

08006d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d1a:	f7ff fe81 	bl	8006a20 <HAL_RCC_GetSysClockFreq>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	490f      	ldr	r1, [pc, #60]	; (8006d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d2c:	5ccb      	ldrb	r3, [r1, r3]
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	fa22 f303 	lsr.w	r3, r2, r3
 8006d36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d38:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d42:	5cd3      	ldrb	r3, [r2, r3]
 8006d44:	f003 031f 	and.w	r3, r3, #31
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4e:	4a07      	ldr	r2, [pc, #28]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8006d50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d52:	4a07      	ldr	r2, [pc, #28]	; (8006d70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	58024400 	.word	0x58024400
 8006d68:	0800e580 	.word	0x0800e580
 8006d6c:	2400002c 	.word	0x2400002c
 8006d70:	24000028 	.word	0x24000028

08006d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d78:	f7ff ffcc 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	091b      	lsrs	r3, r3, #4
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	4904      	ldr	r1, [pc, #16]	; (8006d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	58024400 	.word	0x58024400
 8006d9c:	0800e580 	.word	0x0800e580

08006da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006da4:	f7ff ffb6 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8006da8:	4602      	mov	r2, r0
 8006daa:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	0a1b      	lsrs	r3, r3, #8
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	4904      	ldr	r1, [pc, #16]	; (8006dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006db6:	5ccb      	ldrb	r3, [r1, r3]
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	58024400 	.word	0x58024400
 8006dc8:	0800e580 	.word	0x0800e580

08006dcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dd0:	b0ca      	sub	sp, #296	; 0x128
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dde:	2300      	movs	r3, #0
 8006de0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006df0:	2500      	movs	r5, #0
 8006df2:	ea54 0305 	orrs.w	r3, r4, r5
 8006df6:	d049      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e02:	d02f      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e08:	d828      	bhi.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e0e:	d01a      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e14:	d822      	bhi.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1e:	d007      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e20:	e01c      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e22:	4bb8      	ldr	r3, [pc, #736]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	4ab7      	ldr	r2, [pc, #732]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e2e:	e01a      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e34:	3308      	adds	r3, #8
 8006e36:	2102      	movs	r1, #2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f002 fb61 	bl	8009500 <RCCEx_PLL2_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e44:	e00f      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e4a:	3328      	adds	r3, #40	; 0x28
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f002 fc08 	bl	8009664 <RCCEx_PLL3_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e5a:	e004      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e62:	e000      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e6e:	4ba5      	ldr	r3, [pc, #660]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e7c:	4aa1      	ldr	r2, [pc, #644]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	6513      	str	r3, [r2, #80]	; 0x50
 8006e82:	e003      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006e98:	f04f 0900 	mov.w	r9, #0
 8006e9c:	ea58 0309 	orrs.w	r3, r8, r9
 8006ea0:	d047      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d82a      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006eac:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb2:	bf00      	nop
 8006eb4:	08006ec9 	.word	0x08006ec9
 8006eb8:	08006ed7 	.word	0x08006ed7
 8006ebc:	08006eed 	.word	0x08006eed
 8006ec0:	08006f0b 	.word	0x08006f0b
 8006ec4:	08006f0b 	.word	0x08006f0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec8:	4b8e      	ldr	r3, [pc, #568]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	4a8d      	ldr	r2, [pc, #564]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ed4:	e01a      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eda:	3308      	adds	r3, #8
 8006edc:	2100      	movs	r1, #0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f002 fb0e 	bl	8009500 <RCCEx_PLL2_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006eea:	e00f      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef0:	3328      	adds	r3, #40	; 0x28
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f002 fbb5 	bl	8009664 <RCCEx_PLL3_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f00:	e004      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f08:	e000      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10a      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f14:	4b7b      	ldr	r3, [pc, #492]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f18:	f023 0107 	bic.w	r1, r3, #7
 8006f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f22:	4a78      	ldr	r2, [pc, #480]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f24:	430b      	orrs	r3, r1
 8006f26:	6513      	str	r3, [r2, #80]	; 0x50
 8006f28:	e003      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006f3e:	f04f 0b00 	mov.w	fp, #0
 8006f42:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f46:	d04c      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f52:	d030      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f58:	d829      	bhi.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f5c:	d02d      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f60:	d825      	bhi.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f62:	2b80      	cmp	r3, #128	; 0x80
 8006f64:	d018      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f66:	2b80      	cmp	r3, #128	; 0x80
 8006f68:	d821      	bhi.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006f6e:	2b40      	cmp	r3, #64	; 0x40
 8006f70:	d007      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006f72:	e01c      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f74:	4b63      	ldr	r3, [pc, #396]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	4a62      	ldr	r2, [pc, #392]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f80:	e01c      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f86:	3308      	adds	r3, #8
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f002 fab8 	bl	8009500 <RCCEx_PLL2_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f96:	e011      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f9c:	3328      	adds	r3, #40	; 0x28
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f002 fb5f 	bl	8009664 <RCCEx_PLL3_Config>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fac:	e006      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fb4:	e002      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fc4:	4b4f      	ldr	r3, [pc, #316]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd2:	4a4c      	ldr	r2, [pc, #304]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6513      	str	r3, [r2, #80]	; 0x50
 8006fd8:	e003      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006fee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ff8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4313      	orrs	r3, r2
 8007000:	d053      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800700a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800700e:	d035      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007010:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007014:	d82e      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007016:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800701a:	d031      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800701c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007020:	d828      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007026:	d01a      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800702c:	d822      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007036:	d007      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007038:	e01c      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703a:	4b32      	ldr	r3, [pc, #200]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	4a31      	ldr	r2, [pc, #196]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007046:	e01c      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704c:	3308      	adds	r3, #8
 800704e:	2100      	movs	r1, #0
 8007050:	4618      	mov	r0, r3
 8007052:	f002 fa55 	bl	8009500 <RCCEx_PLL2_Config>
 8007056:	4603      	mov	r3, r0
 8007058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800705c:	e011      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007062:	3328      	adds	r3, #40	; 0x28
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f002 fafc 	bl	8009664 <RCCEx_PLL3_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007072:	e006      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800707a:	e002      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800707c:	bf00      	nop
 800707e:	e000      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800708a:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800708c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007096:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800709c:	430b      	orrs	r3, r1
 800709e:	6593      	str	r3, [r2, #88]	; 0x58
 80070a0:	e003      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80070b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070ba:	2300      	movs	r3, #0
 80070bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80070c4:	460b      	mov	r3, r1
 80070c6:	4313      	orrs	r3, r2
 80070c8:	d056      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070d6:	d038      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80070d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070dc:	d831      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070e2:	d034      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80070e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070e8:	d82b      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ee:	d01d      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80070f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070f4:	d825      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d006      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80070fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070fe:	d00a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007100:	e01f      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007108:	4ba2      	ldr	r3, [pc, #648]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	4aa1      	ldr	r2, [pc, #644]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800710e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007112:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007114:	e01c      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800711a:	3308      	adds	r3, #8
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f002 f9ee 	bl	8009500 <RCCEx_PLL2_Config>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800712a:	e011      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007130:	3328      	adds	r3, #40	; 0x28
 8007132:	2100      	movs	r1, #0
 8007134:	4618      	mov	r0, r3
 8007136:	f002 fa95 	bl	8009664 <RCCEx_PLL3_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007140:	e006      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007148:	e002      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800714a:	bf00      	nop
 800714c:	e000      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800714e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10b      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007158:	4b8e      	ldr	r3, [pc, #568]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800715a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007164:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007168:	4a8a      	ldr	r2, [pc, #552]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800716a:	430b      	orrs	r3, r1
 800716c:	6593      	str	r3, [r2, #88]	; 0x58
 800716e:	e003      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007184:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007188:	2300      	movs	r3, #0
 800718a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800718e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007192:	460b      	mov	r3, r1
 8007194:	4313      	orrs	r3, r2
 8007196:	d03a      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719e:	2b30      	cmp	r3, #48	; 0x30
 80071a0:	d01f      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80071a2:	2b30      	cmp	r3, #48	; 0x30
 80071a4:	d819      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d00c      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d815      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d019      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071b2:	2b10      	cmp	r3, #16
 80071b4:	d111      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b6:	4b77      	ldr	r3, [pc, #476]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	4a76      	ldr	r2, [pc, #472]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071c2:	e011      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c8:	3308      	adds	r3, #8
 80071ca:	2102      	movs	r1, #2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f002 f997 	bl	8009500 <RCCEx_PLL2_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071d8:	e006      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80071e2:	bf00      	nop
 80071e4:	e000      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80071e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80071f0:	4b68      	ldr	r3, [pc, #416]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fe:	4a65      	ldr	r2, [pc, #404]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007200:	430b      	orrs	r3, r1
 8007202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007204:	e003      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800720a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800721a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800721e:	2300      	movs	r3, #0
 8007220:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007224:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007228:	460b      	mov	r3, r1
 800722a:	4313      	orrs	r3, r2
 800722c:	d051      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007238:	d035      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800723a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800723e:	d82e      	bhi.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007240:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007244:	d031      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800724a:	d828      	bhi.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800724c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007250:	d01a      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007256:	d822      	bhi.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800725c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007260:	d007      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007262:	e01c      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007264:	4b4b      	ldr	r3, [pc, #300]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	4a4a      	ldr	r2, [pc, #296]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800726a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800726e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007270:	e01c      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007276:	3308      	adds	r3, #8
 8007278:	2100      	movs	r1, #0
 800727a:	4618      	mov	r0, r3
 800727c:	f002 f940 	bl	8009500 <RCCEx_PLL2_Config>
 8007280:	4603      	mov	r3, r0
 8007282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007286:	e011      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728c:	3328      	adds	r3, #40	; 0x28
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f002 f9e7 	bl	8009664 <RCCEx_PLL3_Config>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800729c:	e006      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072b4:	4b37      	ldr	r3, [pc, #220]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c2:	4a34      	ldr	r2, [pc, #208]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6513      	str	r3, [r2, #80]	; 0x50
 80072c8:	e003      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80072de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072e2:	2300      	movs	r3, #0
 80072e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80072ec:	460b      	mov	r3, r1
 80072ee:	4313      	orrs	r3, r2
 80072f0:	d056      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80072f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072fc:	d033      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80072fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007302:	d82c      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007304:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007308:	d02f      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800730a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800730e:	d826      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007310:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007314:	d02b      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007316:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800731a:	d820      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800731c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007320:	d012      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007326:	d81a      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d022      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800732c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007330:	d115      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007336:	3308      	adds	r3, #8
 8007338:	2101      	movs	r1, #1
 800733a:	4618      	mov	r0, r3
 800733c:	f002 f8e0 	bl	8009500 <RCCEx_PLL2_Config>
 8007340:	4603      	mov	r3, r0
 8007342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007346:	e015      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734c:	3328      	adds	r3, #40	; 0x28
 800734e:	2101      	movs	r1, #1
 8007350:	4618      	mov	r0, r3
 8007352:	f002 f987 	bl	8009664 <RCCEx_PLL3_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800735c:	e00a      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007364:	e006      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007366:	bf00      	nop
 8007368:	e004      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800736a:	bf00      	nop
 800736c:	e002      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800736e:	bf00      	nop
 8007370:	e000      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10d      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800737c:	4b05      	ldr	r3, [pc, #20]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800738a:	4a02      	ldr	r2, [pc, #8]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800738c:	430b      	orrs	r3, r1
 800738e:	6513      	str	r3, [r2, #80]	; 0x50
 8007390:	e006      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007392:	bf00      	nop
 8007394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800739c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80073ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073b0:	2300      	movs	r3, #0
 80073b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4313      	orrs	r3, r2
 80073be:	d055      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073cc:	d033      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80073ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073d2:	d82c      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d02f      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80073da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073de:	d826      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073e4:	d02b      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80073e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073ea:	d820      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f0:	d012      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80073f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f6:	d81a      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d022      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80073fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007400:	d115      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007406:	3308      	adds	r3, #8
 8007408:	2101      	movs	r1, #1
 800740a:	4618      	mov	r0, r3
 800740c:	f002 f878 	bl	8009500 <RCCEx_PLL2_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007416:	e015      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741c:	3328      	adds	r3, #40	; 0x28
 800741e:	2101      	movs	r1, #1
 8007420:	4618      	mov	r0, r3
 8007422:	f002 f91f 	bl	8009664 <RCCEx_PLL3_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800742c:	e00a      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007434:	e006      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007436:	bf00      	nop
 8007438:	e004      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800743a:	bf00      	nop
 800743c:	e002      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800743e:	bf00      	nop
 8007440:	e000      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10b      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800744c:	4ba3      	ldr	r3, [pc, #652]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800744e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007450:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800745c:	4a9f      	ldr	r2, [pc, #636]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800745e:	430b      	orrs	r3, r1
 8007460:	6593      	str	r3, [r2, #88]	; 0x58
 8007462:	e003      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007468:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007486:	460b      	mov	r3, r1
 8007488:	4313      	orrs	r3, r2
 800748a:	d037      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007496:	d00e      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800749c:	d816      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d018      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80074a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074a6:	d111      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a8:	4b8c      	ldr	r3, [pc, #560]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	4a8b      	ldr	r2, [pc, #556]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074b4:	e00f      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ba:	3308      	adds	r3, #8
 80074bc:	2101      	movs	r1, #1
 80074be:	4618      	mov	r0, r3
 80074c0:	f002 f81e 	bl	8009500 <RCCEx_PLL2_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074ca:	e004      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074d2:	e000      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80074d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074de:	4b7f      	ldr	r3, [pc, #508]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ec:	4a7b      	ldr	r2, [pc, #492]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ee:	430b      	orrs	r3, r1
 80074f0:	6513      	str	r3, [r2, #80]	; 0x50
 80074f2:	e003      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800750c:	2300      	movs	r3, #0
 800750e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007512:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007516:	460b      	mov	r3, r1
 8007518:	4313      	orrs	r3, r2
 800751a:	d039      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007522:	2b03      	cmp	r3, #3
 8007524:	d81c      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007569 	.word	0x08007569
 8007530:	0800753d 	.word	0x0800753d
 8007534:	0800754b 	.word	0x0800754b
 8007538:	08007569 	.word	0x08007569
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753c:	4b67      	ldr	r3, [pc, #412]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	4a66      	ldr	r2, [pc, #408]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007548:	e00f      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800754a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800754e:	3308      	adds	r3, #8
 8007550:	2102      	movs	r1, #2
 8007552:	4618      	mov	r0, r3
 8007554:	f001 ffd4 	bl	8009500 <RCCEx_PLL2_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800755e:	e004      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007566:	e000      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007572:	4b5a      	ldr	r3, [pc, #360]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007576:	f023 0103 	bic.w	r1, r3, #3
 800757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800757e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007580:	4a56      	ldr	r2, [pc, #344]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007582:	430b      	orrs	r3, r1
 8007584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007586:	e003      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800758c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800759c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075a0:	2300      	movs	r3, #0
 80075a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80075aa:	460b      	mov	r3, r1
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f000 809f 	beq.w	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075b2:	4b4b      	ldr	r3, [pc, #300]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a4a      	ldr	r2, [pc, #296]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075be:	f7fb fbe7 	bl	8002d90 <HAL_GetTick>
 80075c2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075c6:	e00b      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075c8:	f7fb fbe2 	bl	8002d90 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b64      	cmp	r3, #100	; 0x64
 80075d6:	d903      	bls.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075de:	e005      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e0:	4b3f      	ldr	r3, [pc, #252]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0ed      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80075ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d179      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075f4:	4b39      	ldr	r3, [pc, #228]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007600:	4053      	eors	r3, r2
 8007602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007606:	2b00      	cmp	r3, #0
 8007608:	d015      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800760a:	4b34      	ldr	r3, [pc, #208]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007612:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007616:	4b31      	ldr	r3, [pc, #196]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761a:	4a30      	ldr	r2, [pc, #192]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800761c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007620:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007622:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007626:	4a2d      	ldr	r2, [pc, #180]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800762c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800762e:	4a2b      	ldr	r2, [pc, #172]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007630:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007634:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800763e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007642:	d118      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007644:	f7fb fba4 	bl	8002d90 <HAL_GetTick>
 8007648:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800764c:	e00d      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800764e:	f7fb fb9f 	bl	8002d90 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007658:	1ad2      	subs	r2, r2, r3
 800765a:	f241 3388 	movw	r3, #5000	; 0x1388
 800765e:	429a      	cmp	r2, r3
 8007660:	d903      	bls.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007668:	e005      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800766a:	4b1c      	ldr	r3, [pc, #112]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800766c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0eb      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800767a:	2b00      	cmp	r3, #0
 800767c:	d129      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007682:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800768a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800768e:	d10e      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076a0:	091a      	lsrs	r2, r3, #4
 80076a2:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	4a0d      	ldr	r2, [pc, #52]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a8:	430b      	orrs	r3, r1
 80076aa:	6113      	str	r3, [r2, #16]
 80076ac:	e005      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80076ae:	4b0b      	ldr	r3, [pc, #44]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076b8:	6113      	str	r3, [r2, #16]
 80076ba:	4b08      	ldr	r3, [pc, #32]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80076be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ca:	4a04      	ldr	r2, [pc, #16]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076cc:	430b      	orrs	r3, r1
 80076ce:	6713      	str	r3, [r2, #112]	; 0x70
 80076d0:	e00e      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80076da:	e009      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80076dc:	58024400 	.word	0x58024400
 80076e0:	58024800 	.word	0x58024800
 80076e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f002 0301 	and.w	r3, r2, #1
 80076fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007700:	2300      	movs	r3, #0
 8007702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007706:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800770a:	460b      	mov	r3, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	f000 8089 	beq.w	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007718:	2b28      	cmp	r3, #40	; 0x28
 800771a:	d86b      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	080077fd 	.word	0x080077fd
 8007728:	080077f5 	.word	0x080077f5
 800772c:	080077f5 	.word	0x080077f5
 8007730:	080077f5 	.word	0x080077f5
 8007734:	080077f5 	.word	0x080077f5
 8007738:	080077f5 	.word	0x080077f5
 800773c:	080077f5 	.word	0x080077f5
 8007740:	080077f5 	.word	0x080077f5
 8007744:	080077c9 	.word	0x080077c9
 8007748:	080077f5 	.word	0x080077f5
 800774c:	080077f5 	.word	0x080077f5
 8007750:	080077f5 	.word	0x080077f5
 8007754:	080077f5 	.word	0x080077f5
 8007758:	080077f5 	.word	0x080077f5
 800775c:	080077f5 	.word	0x080077f5
 8007760:	080077f5 	.word	0x080077f5
 8007764:	080077df 	.word	0x080077df
 8007768:	080077f5 	.word	0x080077f5
 800776c:	080077f5 	.word	0x080077f5
 8007770:	080077f5 	.word	0x080077f5
 8007774:	080077f5 	.word	0x080077f5
 8007778:	080077f5 	.word	0x080077f5
 800777c:	080077f5 	.word	0x080077f5
 8007780:	080077f5 	.word	0x080077f5
 8007784:	080077fd 	.word	0x080077fd
 8007788:	080077f5 	.word	0x080077f5
 800778c:	080077f5 	.word	0x080077f5
 8007790:	080077f5 	.word	0x080077f5
 8007794:	080077f5 	.word	0x080077f5
 8007798:	080077f5 	.word	0x080077f5
 800779c:	080077f5 	.word	0x080077f5
 80077a0:	080077f5 	.word	0x080077f5
 80077a4:	080077fd 	.word	0x080077fd
 80077a8:	080077f5 	.word	0x080077f5
 80077ac:	080077f5 	.word	0x080077f5
 80077b0:	080077f5 	.word	0x080077f5
 80077b4:	080077f5 	.word	0x080077f5
 80077b8:	080077f5 	.word	0x080077f5
 80077bc:	080077f5 	.word	0x080077f5
 80077c0:	080077f5 	.word	0x080077f5
 80077c4:	080077fd 	.word	0x080077fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077cc:	3308      	adds	r3, #8
 80077ce:	2101      	movs	r1, #1
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 fe95 	bl	8009500 <RCCEx_PLL2_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077dc:	e00f      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e2:	3328      	adds	r3, #40	; 0x28
 80077e4:	2101      	movs	r1, #1
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 ff3c 	bl	8009664 <RCCEx_PLL3_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077f2:	e004      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077fa:	e000      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80077fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007806:	4bbf      	ldr	r3, [pc, #764]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007814:	4abb      	ldr	r2, [pc, #748]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007816:	430b      	orrs	r3, r1
 8007818:	6553      	str	r3, [r2, #84]	; 0x54
 800781a:	e003      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f002 0302 	and.w	r3, r2, #2
 8007830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007834:	2300      	movs	r3, #0
 8007836:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800783a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800783e:	460b      	mov	r3, r1
 8007840:	4313      	orrs	r3, r2
 8007842:	d041      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784a:	2b05      	cmp	r3, #5
 800784c:	d824      	bhi.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	080078a1 	.word	0x080078a1
 8007858:	0800786d 	.word	0x0800786d
 800785c:	08007883 	.word	0x08007883
 8007860:	080078a1 	.word	0x080078a1
 8007864:	080078a1 	.word	0x080078a1
 8007868:	080078a1 	.word	0x080078a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800786c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007870:	3308      	adds	r3, #8
 8007872:	2101      	movs	r1, #1
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fe43 	bl	8009500 <RCCEx_PLL2_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007880:	e00f      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007886:	3328      	adds	r3, #40	; 0x28
 8007888:	2101      	movs	r1, #1
 800788a:	4618      	mov	r0, r3
 800788c:	f001 feea 	bl	8009664 <RCCEx_PLL3_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007896:	e004      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800789e:	e000      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80078a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078aa:	4b96      	ldr	r3, [pc, #600]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ae:	f023 0107 	bic.w	r1, r3, #7
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078b8:	4a92      	ldr	r2, [pc, #584]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6553      	str	r3, [r2, #84]	; 0x54
 80078be:	e003      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f002 0304 	and.w	r3, r2, #4
 80078d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078d8:	2300      	movs	r3, #0
 80078da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d044      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078f0:	2b05      	cmp	r3, #5
 80078f2:	d825      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80078f4:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007949 	.word	0x08007949
 8007900:	08007915 	.word	0x08007915
 8007904:	0800792b 	.word	0x0800792b
 8007908:	08007949 	.word	0x08007949
 800790c:	08007949 	.word	0x08007949
 8007910:	08007949 	.word	0x08007949
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007918:	3308      	adds	r3, #8
 800791a:	2101      	movs	r1, #1
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fdef 	bl	8009500 <RCCEx_PLL2_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007928:	e00f      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792e:	3328      	adds	r3, #40	; 0x28
 8007930:	2101      	movs	r1, #1
 8007932:	4618      	mov	r0, r3
 8007934:	f001 fe96 	bl	8009664 <RCCEx_PLL3_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800793e:	e004      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007946:	e000      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007952:	4b6c      	ldr	r3, [pc, #432]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007956:	f023 0107 	bic.w	r1, r3, #7
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007962:	4a68      	ldr	r2, [pc, #416]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007964:	430b      	orrs	r3, r1
 8007966:	6593      	str	r3, [r2, #88]	; 0x58
 8007968:	e003      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800796e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f002 0320 	and.w	r3, r2, #32
 800797e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007982:	2300      	movs	r3, #0
 8007984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007988:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800798c:	460b      	mov	r3, r1
 800798e:	4313      	orrs	r3, r2
 8007990:	d055      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800799e:	d033      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80079a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079a4:	d82c      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079aa:	d02f      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80079ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b0:	d826      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079b6:	d02b      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80079b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079bc:	d820      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c2:	d012      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80079c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c8:	d81a      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d022      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80079ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079d2:	d115      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d8:	3308      	adds	r3, #8
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 fd8f 	bl	8009500 <RCCEx_PLL2_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079e8:	e015      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ee:	3328      	adds	r3, #40	; 0x28
 80079f0:	2102      	movs	r1, #2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 fe36 	bl	8009664 <RCCEx_PLL3_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079fe:	e00a      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a06:	e006      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a08:	bf00      	nop
 8007a0a:	e004      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a0c:	bf00      	nop
 8007a0e:	e002      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a10:	bf00      	nop
 8007a12:	e000      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a1e:	4b39      	ldr	r3, [pc, #228]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a22:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2e:	4a35      	ldr	r2, [pc, #212]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a30:	430b      	orrs	r3, r1
 8007a32:	6553      	str	r3, [r2, #84]	; 0x54
 8007a34:	e003      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	d058      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a6a:	d033      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007a6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a70:	d82c      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a76:	d02f      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7c:	d826      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a82:	d02b      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007a84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a88:	d820      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8e:	d012      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a94:	d81a      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d022      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9e:	d115      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f001 fd29 	bl	8009500 <RCCEx_PLL2_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ab4:	e015      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aba:	3328      	adds	r3, #40	; 0x28
 8007abc:	2102      	movs	r1, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 fdd0 	bl	8009664 <RCCEx_PLL3_Config>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007aca:	e00a      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ad2:	e006      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ad4:	bf00      	nop
 8007ad6:	e004      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ad8:	bf00      	nop
 8007ada:	e002      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007adc:	bf00      	nop
 8007ade:	e000      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10e      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007aea:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007afa:	4a02      	ldr	r2, [pc, #8]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6593      	str	r3, [r2, #88]	; 0x58
 8007b00:	e006      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b02:	bf00      	nop
 8007b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b20:	2300      	movs	r3, #0
 8007b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	d055      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b3c:	d033      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007b3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b42:	d82c      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b48:	d02f      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4e:	d826      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b54:	d02b      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007b56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b5a:	d820      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b60:	d012      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b66:	d81a      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d022      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b70:	d115      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b76:	3308      	adds	r3, #8
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 fcc0 	bl	8009500 <RCCEx_PLL2_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b86:	e015      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8c:	3328      	adds	r3, #40	; 0x28
 8007b8e:	2102      	movs	r1, #2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 fd67 	bl	8009664 <RCCEx_PLL3_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b9c:	e00a      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ba4:	e006      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ba6:	bf00      	nop
 8007ba8:	e004      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007baa:	bf00      	nop
 8007bac:	e002      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bae:	bf00      	nop
 8007bb0:	e000      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10b      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bbc:	4ba1      	ldr	r3, [pc, #644]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bcc:	4a9d      	ldr	r2, [pc, #628]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8007bd2:	e003      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f002 0308 	and.w	r3, r2, #8
 8007be8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bec:	2300      	movs	r3, #0
 8007bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bf2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	d01e      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c08:	d10c      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0e:	3328      	adds	r3, #40	; 0x28
 8007c10:	2102      	movs	r1, #2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 fd26 	bl	8009664 <RCCEx_PLL3_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c24:	4b87      	ldr	r3, [pc, #540]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c34:	4a83      	ldr	r2, [pc, #524]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c36:	430b      	orrs	r3, r1
 8007c38:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f002 0310 	and.w	r3, r2, #16
 8007c46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d01e      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c66:	d10c      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6c:	3328      	adds	r3, #40	; 0x28
 8007c6e:	2102      	movs	r1, #2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fcf7 	bl	8009664 <RCCEx_PLL3_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c82:	4b70      	ldr	r3, [pc, #448]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c92:	4a6c      	ldr	r2, [pc, #432]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	d03e      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007cc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cc4:	d022      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cca:	d81b      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd4:	d00b      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007cd6:	e015      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cdc:	3308      	adds	r3, #8
 8007cde:	2100      	movs	r1, #0
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f001 fc0d 	bl	8009500 <RCCEx_PLL2_Config>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cec:	e00f      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf2:	3328      	adds	r3, #40	; 0x28
 8007cf4:	2102      	movs	r1, #2
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f001 fcb4 	bl	8009664 <RCCEx_PLL3_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d02:	e004      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d0a:	e000      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d16:	4b4b      	ldr	r3, [pc, #300]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d26:	4a47      	ldr	r2, [pc, #284]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d2c:	e003      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007d42:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d44:	2300      	movs	r3, #0
 8007d46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	d03b      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d5e:	d01f      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007d60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d64:	d818      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007d6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d70:	d007      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007d72:	e011      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d74:	4b33      	ldr	r3, [pc, #204]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	4a32      	ldr	r2, [pc, #200]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d80:	e00f      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d86:	3328      	adds	r3, #40	; 0x28
 8007d88:	2101      	movs	r1, #1
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f001 fc6a 	bl	8009664 <RCCEx_PLL3_Config>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d96:	e004      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d9e:	e000      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10b      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007daa:	4b26      	ldr	r3, [pc, #152]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dba:	4a22      	ldr	r2, [pc, #136]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6553      	str	r3, [r2, #84]	; 0x54
 8007dc0:	e003      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8007dd8:	2300      	movs	r3, #0
 8007dda:	677b      	str	r3, [r7, #116]	; 0x74
 8007ddc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007de0:	460b      	mov	r3, r1
 8007de2:	4313      	orrs	r3, r2
 8007de4:	d034      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df4:	d007      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007df6:	e011      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df8:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	4a11      	ldr	r2, [pc, #68]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e04:	e00e      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	2102      	movs	r1, #2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 fb76 	bl	8009500 <RCCEx_PLL2_Config>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e1a:	e003      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10d      	bne.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e2c:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3a:	4a02      	ldr	r2, [pc, #8]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e40:	e006      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007e42:	bf00      	nop
 8007e44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e5e:	2300      	movs	r3, #0
 8007e60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007e66:	460b      	mov	r3, r1
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	d00c      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e70:	3328      	adds	r3, #40	; 0x28
 8007e72:	2102      	movs	r1, #2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 fbf5 	bl	8009664 <RCCEx_PLL3_Config>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007e92:	663b      	str	r3, [r7, #96]	; 0x60
 8007e94:	2300      	movs	r3, #0
 8007e96:	667b      	str	r3, [r7, #100]	; 0x64
 8007e98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d038      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eae:	d018      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eb4:	d811      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eba:	d014      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec0:	d80b      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d011      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eca:	d106      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ecc:	4bc3      	ldr	r3, [pc, #780]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	4ac2      	ldr	r2, [pc, #776]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ed8:	e008      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ee0:	e004      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ee2:	bf00      	nop
 8007ee4:	e002      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ee6:	bf00      	nop
 8007ee8:	e000      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10b      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ef4:	4bb9      	ldr	r3, [pc, #740]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f04:	4ab5      	ldr	r2, [pc, #724]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f06:	430b      	orrs	r3, r1
 8007f08:	6553      	str	r3, [r2, #84]	; 0x54
 8007f0a:	e003      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007f20:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f22:	2300      	movs	r3, #0
 8007f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	d009      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f30:	4baa      	ldr	r3, [pc, #680]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3e:	4aa7      	ldr	r2, [pc, #668]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f40:	430b      	orrs	r3, r1
 8007f42:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007f50:	653b      	str	r3, [r7, #80]	; 0x50
 8007f52:	2300      	movs	r3, #0
 8007f54:	657b      	str	r3, [r7, #84]	; 0x54
 8007f56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	d00a      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f60:	4b9e      	ldr	r3, [pc, #632]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f70:	4a9a      	ldr	r2, [pc, #616]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f72:	430b      	orrs	r3, r1
 8007f74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f84:	2300      	movs	r3, #0
 8007f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	d009      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f92:	4b92      	ldr	r3, [pc, #584]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f96:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa0:	4a8e      	ldr	r2, [pc, #568]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	d00e      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fc2:	4b86      	ldr	r3, [pc, #536]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	4a85      	ldr	r2, [pc, #532]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fcc:	6113      	str	r3, [r2, #16]
 8007fce:	4b83      	ldr	r3, [pc, #524]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fd0:	6919      	ldr	r1, [r3, #16]
 8007fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007fda:	4a80      	ldr	r2, [pc, #512]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fee:	2300      	movs	r3, #0
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	d009      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ffc:	4b77      	ldr	r3, [pc, #476]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008000:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800a:	4a74      	ldr	r2, [pc, #464]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800800c:	430b      	orrs	r3, r1
 800800e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800801c:	633b      	str	r3, [r7, #48]	; 0x30
 800801e:	2300      	movs	r3, #0
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
 8008022:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008026:	460b      	mov	r3, r1
 8008028:	4313      	orrs	r3, r2
 800802a:	d00a      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800802c:	4b6b      	ldr	r3, [pc, #428]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800802e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008030:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803c:	4a67      	ldr	r2, [pc, #412]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800803e:	430b      	orrs	r3, r1
 8008040:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	2100      	movs	r1, #0
 800804c:	62b9      	str	r1, [r7, #40]	; 0x28
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008054:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008058:	460b      	mov	r3, r1
 800805a:	4313      	orrs	r3, r2
 800805c:	d011      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008062:	3308      	adds	r3, #8
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f001 fa4a 	bl	8009500 <RCCEx_PLL2_Config>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800807e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	2100      	movs	r1, #0
 800808c:	6239      	str	r1, [r7, #32]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	627b      	str	r3, [r7, #36]	; 0x24
 8008094:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008098:	460b      	mov	r3, r1
 800809a:	4313      	orrs	r3, r2
 800809c:	d011      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a2:	3308      	adds	r3, #8
 80080a4:	2101      	movs	r1, #1
 80080a6:	4618      	mov	r0, r3
 80080a8:	f001 fa2a 	bl	8009500 <RCCEx_PLL2_Config>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	2100      	movs	r1, #0
 80080cc:	61b9      	str	r1, [r7, #24]
 80080ce:	f003 0304 	and.w	r3, r3, #4
 80080d2:	61fb      	str	r3, [r7, #28]
 80080d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080d8:	460b      	mov	r3, r1
 80080da:	4313      	orrs	r3, r2
 80080dc:	d011      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e2:	3308      	adds	r3, #8
 80080e4:	2102      	movs	r1, #2
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 fa0a 	bl	8009500 <RCCEx_PLL2_Config>
 80080ec:	4603      	mov	r3, r0
 80080ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	2100      	movs	r1, #0
 800810c:	6139      	str	r1, [r7, #16]
 800810e:	f003 0308 	and.w	r3, r3, #8
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008118:	460b      	mov	r3, r1
 800811a:	4313      	orrs	r3, r2
 800811c:	d011      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800811e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008122:	3328      	adds	r3, #40	; 0x28
 8008124:	2100      	movs	r1, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f001 fa9c 	bl	8009664 <RCCEx_PLL3_Config>
 800812c:	4603      	mov	r3, r0
 800812e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800813a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800813e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	2100      	movs	r1, #0
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	f003 0310 	and.w	r3, r3, #16
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008158:	460b      	mov	r3, r1
 800815a:	4313      	orrs	r3, r2
 800815c:	d011      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008162:	3328      	adds	r3, #40	; 0x28
 8008164:	2101      	movs	r1, #1
 8008166:	4618      	mov	r0, r3
 8008168:	f001 fa7c 	bl	8009664 <RCCEx_PLL3_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800817a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800817e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	2100      	movs	r1, #0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	f003 0320 	and.w	r3, r3, #32
 8008192:	607b      	str	r3, [r7, #4]
 8008194:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008198:	460b      	mov	r3, r1
 800819a:	4313      	orrs	r3, r2
 800819c:	d011      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800819e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a2:	3328      	adds	r3, #40	; 0x28
 80081a4:	2102      	movs	r1, #2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 fa5c 	bl	8009664 <RCCEx_PLL3_Config>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80081b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80081c2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e000      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80081d6:	46bd      	mov	sp, r7
 80081d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081dc:	58024400 	.word	0x58024400

080081e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b090      	sub	sp, #64	; 0x40
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80081f2:	430b      	orrs	r3, r1
 80081f4:	f040 8094 	bne.w	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80081f8:	4b9e      	ldr	r3, [pc, #632]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	2b04      	cmp	r3, #4
 8008206:	f200 8087 	bhi.w	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008225 	.word	0x08008225
 8008214:	0800824d 	.word	0x0800824d
 8008218:	08008275 	.word	0x08008275
 800821c:	08008311 	.word	0x08008311
 8008220:	0800829d 	.word	0x0800829d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008224:	4b93      	ldr	r3, [pc, #588]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800822c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008230:	d108      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008236:	4618      	mov	r0, r3
 8008238:	f001 f810 	bl	800925c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008240:	f000 bd45 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008248:	f000 bd41 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800824c:	4b89      	ldr	r3, [pc, #548]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008258:	d108      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800825a:	f107 0318 	add.w	r3, r7, #24
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fd54 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008268:	f000 bd31 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008270:	f000 bd2d 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008274:	4b7f      	ldr	r3, [pc, #508]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800827c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008280:	d108      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008282:	f107 030c 	add.w	r3, r7, #12
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fe94 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008290:	f000 bd1d 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008298:	f000 bd19 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800829c:	4b75      	ldr	r3, [pc, #468]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800829e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082a6:	4b73      	ldr	r3, [pc, #460]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d10c      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d109      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082b8:	4b6e      	ldr	r3, [pc, #440]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	08db      	lsrs	r3, r3, #3
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	4a6d      	ldr	r2, [pc, #436]	; (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082c4:	fa22 f303 	lsr.w	r3, r2, r3
 80082c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ca:	e01f      	b.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082cc:	4b69      	ldr	r3, [pc, #420]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d8:	d106      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082e0:	d102      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082e2:	4b66      	ldr	r3, [pc, #408]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e6:	e011      	b.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082e8:	4b62      	ldr	r3, [pc, #392]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082f4:	d106      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80082f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fc:	d102      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082fe:	4b60      	ldr	r3, [pc, #384]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008302:	e003      	b.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008308:	f000 bce1 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800830c:	f000 bcdf 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008310:	4b5c      	ldr	r3, [pc, #368]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008314:	f000 bcdb 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800831c:	f000 bcd7 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008324:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008328:	430b      	orrs	r3, r1
 800832a:	f040 80ad 	bne.w	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800832e:	4b51      	ldr	r3, [pc, #324]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008332:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008336:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833e:	d056      	beq.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008346:	f200 8090 	bhi.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	2bc0      	cmp	r3, #192	; 0xc0
 800834e:	f000 8088 	beq.w	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	2bc0      	cmp	r3, #192	; 0xc0
 8008356:	f200 8088 	bhi.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	2b80      	cmp	r3, #128	; 0x80
 800835e:	d032      	beq.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	2b80      	cmp	r3, #128	; 0x80
 8008364:	f200 8081 	bhi.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	2b40      	cmp	r3, #64	; 0x40
 8008372:	d014      	beq.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008374:	e079      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008376:	4b3f      	ldr	r3, [pc, #252]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008382:	d108      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008388:	4618      	mov	r0, r3
 800838a:	f000 ff67 	bl	800925c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008392:	f000 bc9c 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800839a:	f000 bc98 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800839e:	4b35      	ldr	r3, [pc, #212]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083aa:	d108      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ac:	f107 0318 	add.w	r3, r7, #24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fcab 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ba:	f000 bc88 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c2:	f000 bc84 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083c6:	4b2b      	ldr	r3, [pc, #172]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d2:	d108      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083d4:	f107 030c 	add.w	r3, r7, #12
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fdeb 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e2:	f000 bc74 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ea:	f000 bc70 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083ee:	4b21      	ldr	r3, [pc, #132]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083f8:	4b1e      	ldr	r3, [pc, #120]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b04      	cmp	r3, #4
 8008402:	d10c      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800840a:	4b1a      	ldr	r3, [pc, #104]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	08db      	lsrs	r3, r3, #3
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	4a18      	ldr	r2, [pc, #96]	; (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800841c:	e01f      	b.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800841e:	4b15      	ldr	r3, [pc, #84]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842a:	d106      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800842c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008432:	d102      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008434:	4b11      	ldr	r3, [pc, #68]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008438:	e011      	b.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800843a:	4b0e      	ldr	r3, [pc, #56]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008446:	d106      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800844e:	d102      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008454:	e003      	b.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800845a:	f000 bc38 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800845e:	f000 bc36 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008462:	4b08      	ldr	r3, [pc, #32]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008466:	f000 bc32 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800846e:	f000 bc2e 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008472:	bf00      	nop
 8008474:	58024400 	.word	0x58024400
 8008478:	03d09000 	.word	0x03d09000
 800847c:	003d0900 	.word	0x003d0900
 8008480:	017d7840 	.word	0x017d7840
 8008484:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800848c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008490:	430b      	orrs	r3, r1
 8008492:	f040 809c 	bne.w	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008496:	4b9e      	ldr	r3, [pc, #632]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800849e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084a6:	d054      	beq.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084ae:	f200 808b 	bhi.w	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084b8:	f000 8083 	beq.w	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084c2:	f200 8081 	bhi.w	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084cc:	d02f      	beq.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084d4:	d878      	bhi.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084e2:	d012      	beq.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80084e4:	e070      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084e6:	4b8a      	ldr	r3, [pc, #552]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084f2:	d107      	bne.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 feaf 	bl	800925c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008502:	e3e4      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008508:	e3e1      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800850a:	4b81      	ldr	r3, [pc, #516]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008516:	d107      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008518:	f107 0318 	add.w	r3, r7, #24
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fbf5 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008526:	e3d2      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800852c:	e3cf      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800852e:	4b78      	ldr	r3, [pc, #480]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800853a:	d107      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800853c:	f107 030c 	add.w	r3, r7, #12
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fd37 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854a:	e3c0      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008550:	e3bd      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008552:	4b6f      	ldr	r3, [pc, #444]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008556:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800855a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800855c:	4b6c      	ldr	r3, [pc, #432]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b04      	cmp	r3, #4
 8008566:	d10c      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856a:	2b00      	cmp	r3, #0
 800856c:	d109      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800856e:	4b68      	ldr	r3, [pc, #416]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	08db      	lsrs	r3, r3, #3
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	4a66      	ldr	r2, [pc, #408]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800857a:	fa22 f303 	lsr.w	r3, r2, r3
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008580:	e01e      	b.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008582:	4b63      	ldr	r3, [pc, #396]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858e:	d106      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008596:	d102      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008598:	4b5f      	ldr	r3, [pc, #380]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800859c:	e010      	b.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800859e:	4b5c      	ldr	r3, [pc, #368]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085aa:	d106      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80085ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085b2:	d102      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085b4:	4b59      	ldr	r3, [pc, #356]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085b8:	e002      	b.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80085be:	e386      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085c0:	e385      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085c2:	4b57      	ldr	r3, [pc, #348]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c6:	e382      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085cc:	e37f      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80085d6:	430b      	orrs	r3, r1
 80085d8:	f040 80a7 	bne.w	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80085dc:	4b4c      	ldr	r3, [pc, #304]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80085e4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085ec:	d055      	beq.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085f4:	f200 8096 	bhi.w	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085fe:	f000 8084 	beq.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008608:	f200 808c 	bhi.w	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008612:	d030      	beq.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800861a:	f200 8083 	bhi.w	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	2b00      	cmp	r3, #0
 8008622:	d004      	beq.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800862a:	d012      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800862c:	e07a      	b.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800862e:	4b38      	ldr	r3, [pc, #224]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800863a:	d107      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800863c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fe0b 	bl	800925c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864a:	e340      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008650:	e33d      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008652:	4b2f      	ldr	r3, [pc, #188]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800865a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800865e:	d107      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008660:	f107 0318 	add.w	r3, r7, #24
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fb51 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866e:	e32e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008674:	e32b      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008676:	4b26      	ldr	r3, [pc, #152]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800867e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008682:	d107      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008684:	f107 030c 	add.w	r3, r7, #12
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fc93 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008692:	e31c      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008698:	e319      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800869a:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800869c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800869e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086a4:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d10c      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d109      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086b6:	4b16      	ldr	r3, [pc, #88]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	08db      	lsrs	r3, r3, #3
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	4a14      	ldr	r2, [pc, #80]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086c2:	fa22 f303 	lsr.w	r3, r2, r3
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086c8:	e01e      	b.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086ca:	4b11      	ldr	r3, [pc, #68]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d6:	d106      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086de:	d102      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086e0:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e4:	e010      	b.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086e6:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086f2:	d106      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80086f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086fa:	d102      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086fc:	4b07      	ldr	r3, [pc, #28]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008700:	e002      	b.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008706:	e2e2      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008708:	e2e1      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800870a:	4b05      	ldr	r3, [pc, #20]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800870c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800870e:	e2de      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008710:	58024400 	.word	0x58024400
 8008714:	03d09000 	.word	0x03d09000
 8008718:	003d0900 	.word	0x003d0900
 800871c:	017d7840 	.word	0x017d7840
 8008720:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008728:	e2d1      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800872a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008732:	430b      	orrs	r3, r1
 8008734:	f040 809c 	bne.w	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008738:	4b93      	ldr	r3, [pc, #588]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800873a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008740:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008748:	d054      	beq.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008750:	f200 808b 	bhi.w	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800875a:	f000 8083 	beq.w	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008760:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008764:	f200 8081 	bhi.w	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876e:	d02f      	beq.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008776:	d878      	bhi.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008784:	d012      	beq.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008786:	e070      	b.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008788:	4b7f      	ldr	r3, [pc, #508]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008790:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008794:	d107      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fd5e 	bl	800925c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a4:	e293      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087aa:	e290      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087ac:	4b76      	ldr	r3, [pc, #472]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087b8:	d107      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ba:	f107 0318 	add.w	r3, r7, #24
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 faa4 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c8:	e281      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ce:	e27e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087d0:	4b6d      	ldr	r3, [pc, #436]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087dc:	d107      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087de:	f107 030c 	add.w	r3, r7, #12
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fbe6 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ec:	e26f      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f2:	e26c      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087f4:	4b64      	ldr	r3, [pc, #400]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087fe:	4b62      	ldr	r3, [pc, #392]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0304 	and.w	r3, r3, #4
 8008806:	2b04      	cmp	r3, #4
 8008808:	d10c      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	2b00      	cmp	r3, #0
 800880e:	d109      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008810:	4b5d      	ldr	r3, [pc, #372]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	08db      	lsrs	r3, r3, #3
 8008816:	f003 0303 	and.w	r3, r3, #3
 800881a:	4a5c      	ldr	r2, [pc, #368]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800881c:	fa22 f303 	lsr.w	r3, r2, r3
 8008820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008822:	e01e      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008824:	4b58      	ldr	r3, [pc, #352]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008830:	d106      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008838:	d102      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800883a:	4b55      	ldr	r3, [pc, #340]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800883e:	e010      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008840:	4b51      	ldr	r3, [pc, #324]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800884c:	d106      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800884e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008854:	d102      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008856:	4b4f      	ldr	r3, [pc, #316]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800885a:	e002      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008860:	e235      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008862:	e234      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008864:	4b4c      	ldr	r3, [pc, #304]	; (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008868:	e231      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800886e:	e22e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008874:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008878:	430b      	orrs	r3, r1
 800887a:	f040 808f 	bne.w	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800887e:	4b42      	ldr	r3, [pc, #264]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008882:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008886:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800888e:	d06b      	beq.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008896:	d874      	bhi.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800889e:	d056      	beq.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088a6:	d86c      	bhi.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088ae:	d03b      	beq.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088b6:	d864      	bhi.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088be:	d021      	beq.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088c6:	d85c      	bhi.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d4:	d004      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80088d6:	e054      	b.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80088d8:	f7fe fa4c 	bl	8006d74 <HAL_RCC_GetPCLK1Freq>
 80088dc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088de:	e1f6      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e0:	4b29      	ldr	r3, [pc, #164]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088ec:	d107      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ee:	f107 0318 	add.w	r3, r7, #24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fa0a 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088fc:	e1e7      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008902:	e1e4      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008904:	4b20      	ldr	r3, [pc, #128]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800890c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008910:	d107      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008912:	f107 030c 	add.w	r3, r7, #12
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fb4c 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008920:	e1d5      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008926:	e1d2      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008928:	4b17      	ldr	r3, [pc, #92]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0304 	and.w	r3, r3, #4
 8008930:	2b04      	cmp	r3, #4
 8008932:	d109      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008934:	4b14      	ldr	r3, [pc, #80]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	08db      	lsrs	r3, r3, #3
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	4a13      	ldr	r2, [pc, #76]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008946:	e1c2      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800894c:	e1bf      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800894e:	4b0e      	ldr	r3, [pc, #56]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800895a:	d102      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800895c:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008960:	e1b5      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008966:	e1b2      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008968:	4b07      	ldr	r3, [pc, #28]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008974:	d102      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008976:	4b07      	ldr	r3, [pc, #28]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008978:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800897a:	e1a8      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008980:	e1a5      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008986:	e1a2      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	003d0900 	.word	0x003d0900
 8008994:	017d7840 	.word	0x017d7840
 8008998:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800899c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80089a4:	430b      	orrs	r3, r1
 80089a6:	d173      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80089a8:	4b9c      	ldr	r3, [pc, #624]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80089b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089b8:	d02f      	beq.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089c0:	d863      	bhi.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ce:	d012      	beq.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80089d0:	e05b      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089d2:	4b92      	ldr	r3, [pc, #584]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089de:	d107      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e0:	f107 0318 	add.w	r3, r7, #24
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 f991 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ee:	e16e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089f4:	e16b      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089f6:	4b89      	ldr	r3, [pc, #548]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a02:	d107      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a04:	f107 030c 	add.w	r3, r7, #12
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 fad3 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a12:	e15c      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a18:	e159      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a1a:	4b80      	ldr	r3, [pc, #512]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a24:	4b7d      	ldr	r3, [pc, #500]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d10c      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d109      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a36:	4b79      	ldr	r3, [pc, #484]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	08db      	lsrs	r3, r3, #3
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	4a77      	ldr	r2, [pc, #476]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008a42:	fa22 f303 	lsr.w	r3, r2, r3
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a48:	e01e      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a4a:	4b74      	ldr	r3, [pc, #464]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a56:	d106      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a5e:	d102      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a60:	4b70      	ldr	r3, [pc, #448]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a64:	e010      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a66:	4b6d      	ldr	r3, [pc, #436]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a72:	d106      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a7a:	d102      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a7c:	4b6a      	ldr	r3, [pc, #424]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a80:	e002      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008a86:	e122      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a88:	e121      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a8e:	e11e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a94:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	d133      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008a9c:	4b5f      	ldr	r3, [pc, #380]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008aa4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d004      	beq.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab2:	d012      	beq.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008ab4:	e023      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ab6:	4b59      	ldr	r3, [pc, #356]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ac2:	d107      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fbc7 	bl	800925c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad2:	e0fc      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad8:	e0f9      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ada:	4b50      	ldr	r3, [pc, #320]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ae6:	d107      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae8:	f107 0318 	add.w	r3, r7, #24
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f90d 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008af6:	e0ea      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008afc:	e0e7      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b02:	e0e4      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b08:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	f040 808d 	bne.w	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b12:	4b42      	ldr	r3, [pc, #264]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b16:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008b1a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b22:	d06b      	beq.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b2a:	d874      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b32:	d056      	beq.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3a:	d86c      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b42:	d03b      	beq.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b4a:	d864      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b52:	d021      	beq.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b5a:	d85c      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d004      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b68:	d004      	beq.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008b6a:	e054      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b6c:	f000 f8b8 	bl	8008ce0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b70:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b72:	e0ac      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b74:	4b29      	ldr	r3, [pc, #164]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b80:	d107      	bne.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b82:	f107 0318 	add.w	r3, r7, #24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f8c0 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b90:	e09d      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b96:	e09a      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b98:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba4:	d107      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba6:	f107 030c 	add.w	r3, r7, #12
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fa02 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb4:	e08b      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bba:	e088      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bbc:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d109      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	08db      	lsrs	r3, r3, #3
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	4a13      	ldr	r2, [pc, #76]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bda:	e078      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be0:	e075      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008be2:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bee:	d102      	bne.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008bf0:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf4:	e06b      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bfa:	e068      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bfc:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c08:	d102      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c0e:	e05e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c14:	e05b      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c1a:	e058      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	03d09000 	.word	0x03d09000
 8008c24:	003d0900 	.word	0x003d0900
 8008c28:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c30:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008c34:	430b      	orrs	r3, r1
 8008c36:	d148      	bne.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c38:	4b27      	ldr	r3, [pc, #156]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c40:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c48:	d02a      	beq.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c50:	d838      	bhi.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d004      	beq.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c5e:	d00d      	beq.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008c60:	e030      	b.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c62:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c6e:	d102      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008c70:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c74:	e02b      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c7a:	e028      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c7c:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c88:	d107      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fae4 	bl	800925c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c98:	e019      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c9e:	e016      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cac:	d107      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cae:	f107 0318 	add.w	r3, r7, #24
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 f82a 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cbc:	e007      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cc2:	e004      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cc8:	e001      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3740      	adds	r7, #64	; 0x40
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	017d7840 	.word	0x017d7840

08008ce0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008ce4:	f7fe f816 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	091b      	lsrs	r3, r3, #4
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	4904      	ldr	r1, [pc, #16]	; (8008d08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cf6:	5ccb      	ldrb	r3, [r1, r3]
 8008cf8:	f003 031f 	and.w	r3, r3, #31
 8008cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	58024400 	.word	0x58024400
 8008d08:	0800e580 	.word	0x0800e580

08008d0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b089      	sub	sp, #36	; 0x24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d14:	4ba1      	ldr	r3, [pc, #644]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d18:	f003 0303 	and.w	r3, r3, #3
 8008d1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008d1e:	4b9f      	ldr	r3, [pc, #636]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d22:	0b1b      	lsrs	r3, r3, #12
 8008d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d2a:	4b9c      	ldr	r3, [pc, #624]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	091b      	lsrs	r3, r3, #4
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008d36:	4b99      	ldr	r3, [pc, #612]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3a:	08db      	lsrs	r3, r3, #3
 8008d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	fb02 f303 	mul.w	r3, r2, r3
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 8111 	beq.w	8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	f000 8083 	beq.w	8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	f200 80a1 	bhi.w	8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d056      	beq.n	8008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d76:	e099      	b.n	8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d78:	4b88      	ldr	r3, [pc, #544]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0320 	and.w	r3, r3, #32
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d02d      	beq.n	8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d84:	4b85      	ldr	r3, [pc, #532]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	08db      	lsrs	r3, r3, #3
 8008d8a:	f003 0303 	and.w	r3, r3, #3
 8008d8e:	4a84      	ldr	r2, [pc, #528]	; (8008fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
 8008d94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	ee07 3a90 	vmov	s15, r3
 8008d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dae:	4b7b      	ldr	r3, [pc, #492]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008dde:	e087      	b.n	8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df2:	4b6a      	ldr	r3, [pc, #424]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e22:	e065      	b.n	8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e36:	4b59      	ldr	r3, [pc, #356]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e66:	e043      	b.n	8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e7a:	4b48      	ldr	r3, [pc, #288]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eaa:	e021      	b.n	8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ebe:	4b37      	ldr	r3, [pc, #220]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ed2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ef0:	4b2a      	ldr	r3, [pc, #168]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	0a5b      	lsrs	r3, r3, #9
 8008ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f16:	ee17 2a90 	vmov	r2, s15
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008f1e:	4b1f      	ldr	r3, [pc, #124]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	0c1b      	lsrs	r3, r3, #16
 8008f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f28:	ee07 3a90 	vmov	s15, r3
 8008f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f44:	ee17 2a90 	vmov	r2, s15
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f4c:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f50:	0e1b      	lsrs	r3, r3, #24
 8008f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f72:	ee17 2a90 	vmov	r2, s15
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f7a:	e008      	b.n	8008f8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	609a      	str	r2, [r3, #8]
}
 8008f8e:	bf00      	nop
 8008f90:	3724      	adds	r7, #36	; 0x24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	58024400 	.word	0x58024400
 8008fa0:	03d09000 	.word	0x03d09000
 8008fa4:	46000000 	.word	0x46000000
 8008fa8:	4c742400 	.word	0x4c742400
 8008fac:	4a742400 	.word	0x4a742400
 8008fb0:	4bbebc20 	.word	0x4bbebc20

08008fb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b089      	sub	sp, #36	; 0x24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fbc:	4ba1      	ldr	r3, [pc, #644]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008fc6:	4b9f      	ldr	r3, [pc, #636]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	0d1b      	lsrs	r3, r3, #20
 8008fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008fd2:	4b9c      	ldr	r3, [pc, #624]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	0a1b      	lsrs	r3, r3, #8
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008fde:	4b99      	ldr	r3, [pc, #612]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	08db      	lsrs	r3, r3, #3
 8008fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	fb02 f303 	mul.w	r3, r2, r3
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 8111 	beq.w	8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b02      	cmp	r3, #2
 8009006:	f000 8083 	beq.w	8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b02      	cmp	r3, #2
 800900e:	f200 80a1 	bhi.w	8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d056      	beq.n	80090cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800901e:	e099      	b.n	8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009020:	4b88      	ldr	r3, [pc, #544]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b00      	cmp	r3, #0
 800902a:	d02d      	beq.n	8009088 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800902c:	4b85      	ldr	r3, [pc, #532]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	08db      	lsrs	r3, r3, #3
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	4a84      	ldr	r2, [pc, #528]	; (8009248 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
 800903c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	ee07 3a90 	vmov	s15, r3
 8009044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009056:	4b7b      	ldr	r3, [pc, #492]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009066:	ed97 6a03 	vldr	s12, [r7, #12]
 800906a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800924c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800906e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800907a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009086:	e087      	b.n	8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009092:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009250 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800909a:	4b6a      	ldr	r3, [pc, #424]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800924c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ca:	e065      	b.n	8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090de:	4b59      	ldr	r3, [pc, #356]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80090f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800924c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800910a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800910e:	e043      	b.n	8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800911e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009122:	4b48      	ldr	r3, [pc, #288]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009132:	ed97 6a03 	vldr	s12, [r7, #12]
 8009136:	eddf 5a45 	vldr	s11, [pc, #276]	; 800924c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800913a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800914a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009152:	e021      	b.n	8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009166:	4b37      	ldr	r3, [pc, #220]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009176:	ed97 6a03 	vldr	s12, [r7, #12]
 800917a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800924c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800917e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800918a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009196:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009198:	4b2a      	ldr	r3, [pc, #168]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	0a5b      	lsrs	r3, r3, #9
 800919e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091be:	ee17 2a90 	vmov	r2, s15
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80091c6:	4b1f      	ldr	r3, [pc, #124]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	0c1b      	lsrs	r3, r3, #16
 80091cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d0:	ee07 3a90 	vmov	s15, r3
 80091d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ec:	ee17 2a90 	vmov	r2, s15
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80091f4:	4b13      	ldr	r3, [pc, #76]	; (8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f8:	0e1b      	lsrs	r3, r3, #24
 80091fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091fe:	ee07 3a90 	vmov	s15, r3
 8009202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800920a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800920e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800921a:	ee17 2a90 	vmov	r2, s15
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009222:	e008      	b.n	8009236 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	609a      	str	r2, [r3, #8]
}
 8009236:	bf00      	nop
 8009238:	3724      	adds	r7, #36	; 0x24
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	58024400 	.word	0x58024400
 8009248:	03d09000 	.word	0x03d09000
 800924c:	46000000 	.word	0x46000000
 8009250:	4c742400 	.word	0x4c742400
 8009254:	4a742400 	.word	0x4a742400
 8009258:	4bbebc20 	.word	0x4bbebc20

0800925c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800925c:	b480      	push	{r7}
 800925e:	b089      	sub	sp, #36	; 0x24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009264:	4ba0      	ldr	r3, [pc, #640]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009268:	f003 0303 	and.w	r3, r3, #3
 800926c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800926e:	4b9e      	ldr	r3, [pc, #632]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	091b      	lsrs	r3, r3, #4
 8009274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009278:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800927a:	4b9b      	ldr	r3, [pc, #620]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800927c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009284:	4b98      	ldr	r3, [pc, #608]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009288:	08db      	lsrs	r3, r3, #3
 800928a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	fb02 f303 	mul.w	r3, r2, r3
 8009294:	ee07 3a90 	vmov	s15, r3
 8009298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 8111 	beq.w	80094ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	f000 8083 	beq.w	80093b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	f200 80a1 	bhi.w	80093fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d003      	beq.n	80092c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d056      	beq.n	8009372 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092c4:	e099      	b.n	80093fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092c6:	4b88      	ldr	r3, [pc, #544]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0320 	and.w	r3, r3, #32
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d02d      	beq.n	800932e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092d2:	4b85      	ldr	r3, [pc, #532]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	08db      	lsrs	r3, r3, #3
 80092d8:	f003 0303 	and.w	r3, r3, #3
 80092dc:	4a83      	ldr	r2, [pc, #524]	; (80094ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092de:	fa22 f303 	lsr.w	r3, r2, r3
 80092e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	ee07 3a90 	vmov	s15, r3
 80092ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	ee07 3a90 	vmov	s15, r3
 80092f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fc:	4b7a      	ldr	r3, [pc, #488]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009304:	ee07 3a90 	vmov	s15, r3
 8009308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009310:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009328:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800932c:	e087      	b.n	800943e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	ee07 3a90 	vmov	s15, r3
 8009334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009338:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800933c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009340:	4b69      	ldr	r3, [pc, #420]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009348:	ee07 3a90 	vmov	s15, r3
 800934c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009350:	ed97 6a03 	vldr	s12, [r7, #12]
 8009354:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009370:	e065      	b.n	800943e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	ee07 3a90 	vmov	s15, r3
 8009378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009384:	4b58      	ldr	r3, [pc, #352]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938c:	ee07 3a90 	vmov	s15, r3
 8009390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009394:	ed97 6a03 	vldr	s12, [r7, #12]
 8009398:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800939c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093b4:	e043      	b.n	800943e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	ee07 3a90 	vmov	s15, r3
 80093bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c8:	4b47      	ldr	r3, [pc, #284]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d0:	ee07 3a90 	vmov	s15, r3
 80093d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80093dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f8:	e021      	b.n	800943e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009404:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80094f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940c:	4b36      	ldr	r3, [pc, #216]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009414:	ee07 3a90 	vmov	s15, r3
 8009418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009420:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009438:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800943e:	4b2a      	ldr	r3, [pc, #168]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009442:	0a5b      	lsrs	r3, r3, #9
 8009444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009448:	ee07 3a90 	vmov	s15, r3
 800944c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009450:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009454:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009458:	edd7 6a07 	vldr	s13, [r7, #28]
 800945c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009464:	ee17 2a90 	vmov	r2, s15
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800946c:	4b1e      	ldr	r3, [pc, #120]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800946e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009470:	0c1b      	lsrs	r3, r3, #16
 8009472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009486:	edd7 6a07 	vldr	s13, [r7, #28]
 800948a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009492:	ee17 2a90 	vmov	r2, s15
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800949a:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800949c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949e:	0e1b      	lsrs	r3, r3, #24
 80094a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094a4:	ee07 3a90 	vmov	s15, r3
 80094a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c0:	ee17 2a90 	vmov	r2, s15
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094c8:	e008      	b.n	80094dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	609a      	str	r2, [r3, #8]
}
 80094dc:	bf00      	nop
 80094de:	3724      	adds	r7, #36	; 0x24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	58024400 	.word	0x58024400
 80094ec:	03d09000 	.word	0x03d09000
 80094f0:	46000000 	.word	0x46000000
 80094f4:	4c742400 	.word	0x4c742400
 80094f8:	4a742400 	.word	0x4a742400
 80094fc:	4bbebc20 	.word	0x4bbebc20

08009500 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800950e:	4b53      	ldr	r3, [pc, #332]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009512:	f003 0303 	and.w	r3, r3, #3
 8009516:	2b03      	cmp	r3, #3
 8009518:	d101      	bne.n	800951e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e099      	b.n	8009652 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800951e:	4b4f      	ldr	r3, [pc, #316]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a4e      	ldr	r2, [pc, #312]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009524:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800952a:	f7f9 fc31 	bl	8002d90 <HAL_GetTick>
 800952e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009530:	e008      	b.n	8009544 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009532:	f7f9 fc2d 	bl	8002d90 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	2b02      	cmp	r3, #2
 800953e:	d901      	bls.n	8009544 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	e086      	b.n	8009652 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009544:	4b45      	ldr	r3, [pc, #276]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1f0      	bne.n	8009532 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009550:	4b42      	ldr	r3, [pc, #264]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	031b      	lsls	r3, r3, #12
 800955e:	493f      	ldr	r1, [pc, #252]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009560:	4313      	orrs	r3, r2
 8009562:	628b      	str	r3, [r1, #40]	; 0x28
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	3b01      	subs	r3, #1
 800956a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	3b01      	subs	r3, #1
 8009574:	025b      	lsls	r3, r3, #9
 8009576:	b29b      	uxth	r3, r3
 8009578:	431a      	orrs	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	3b01      	subs	r3, #1
 8009580:	041b      	lsls	r3, r3, #16
 8009582:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009586:	431a      	orrs	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	3b01      	subs	r3, #1
 800958e:	061b      	lsls	r3, r3, #24
 8009590:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009594:	4931      	ldr	r1, [pc, #196]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009596:	4313      	orrs	r3, r2
 8009598:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800959a:	4b30      	ldr	r3, [pc, #192]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 800959c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	492d      	ldr	r1, [pc, #180]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095a8:	4313      	orrs	r3, r2
 80095aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095ac:	4b2b      	ldr	r3, [pc, #172]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	f023 0220 	bic.w	r2, r3, #32
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	4928      	ldr	r1, [pc, #160]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095be:	4b27      	ldr	r3, [pc, #156]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	4a26      	ldr	r2, [pc, #152]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095c4:	f023 0310 	bic.w	r3, r3, #16
 80095c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095ca:	4b24      	ldr	r3, [pc, #144]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095ce:	4b24      	ldr	r3, [pc, #144]	; (8009660 <RCCEx_PLL2_Config+0x160>)
 80095d0:	4013      	ands	r3, r2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	69d2      	ldr	r2, [r2, #28]
 80095d6:	00d2      	lsls	r2, r2, #3
 80095d8:	4920      	ldr	r1, [pc, #128]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095de:	4b1f      	ldr	r3, [pc, #124]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	4a1e      	ldr	r2, [pc, #120]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095e4:	f043 0310 	orr.w	r3, r3, #16
 80095e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d106      	bne.n	80095fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095f0:	4b1a      	ldr	r3, [pc, #104]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	4a19      	ldr	r2, [pc, #100]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 80095f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095fc:	e00f      	b.n	800961e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d106      	bne.n	8009612 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009604:	4b15      	ldr	r3, [pc, #84]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a14      	ldr	r2, [pc, #80]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 800960a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800960e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009610:	e005      	b.n	800961e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009612:	4b12      	ldr	r3, [pc, #72]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	4a11      	ldr	r2, [pc, #68]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800961c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800961e:	4b0f      	ldr	r3, [pc, #60]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a0e      	ldr	r2, [pc, #56]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800962a:	f7f9 fbb1 	bl	8002d90 <HAL_GetTick>
 800962e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009630:	e008      	b.n	8009644 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009632:	f7f9 fbad 	bl	8002d90 <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b02      	cmp	r3, #2
 800963e:	d901      	bls.n	8009644 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e006      	b.n	8009652 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009644:	4b05      	ldr	r3, [pc, #20]	; (800965c <RCCEx_PLL2_Config+0x15c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0f0      	beq.n	8009632 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009650:	7bfb      	ldrb	r3, [r7, #15]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	58024400 	.word	0x58024400
 8009660:	ffff0007 	.word	0xffff0007

08009664 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009672:	4b53      	ldr	r3, [pc, #332]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	2b03      	cmp	r3, #3
 800967c:	d101      	bne.n	8009682 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e099      	b.n	80097b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009682:	4b4f      	ldr	r3, [pc, #316]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a4e      	ldr	r2, [pc, #312]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800968c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800968e:	f7f9 fb7f 	bl	8002d90 <HAL_GetTick>
 8009692:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009694:	e008      	b.n	80096a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009696:	f7f9 fb7b 	bl	8002d90 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d901      	bls.n	80096a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e086      	b.n	80097b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096a8:	4b45      	ldr	r3, [pc, #276]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1f0      	bne.n	8009696 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096b4:	4b42      	ldr	r3, [pc, #264]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	051b      	lsls	r3, r3, #20
 80096c2:	493f      	ldr	r1, [pc, #252]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	628b      	str	r3, [r1, #40]	; 0x28
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	025b      	lsls	r3, r3, #9
 80096da:	b29b      	uxth	r3, r3
 80096dc:	431a      	orrs	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	041b      	lsls	r3, r3, #16
 80096e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	061b      	lsls	r3, r3, #24
 80096f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80096f8:	4931      	ldr	r1, [pc, #196]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096fe:	4b30      	ldr	r3, [pc, #192]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009702:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	492d      	ldr	r1, [pc, #180]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 800970c:	4313      	orrs	r3, r2
 800970e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009710:	4b2b      	ldr	r3, [pc, #172]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009714:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	4928      	ldr	r1, [pc, #160]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 800971e:	4313      	orrs	r3, r2
 8009720:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009722:	4b27      	ldr	r3, [pc, #156]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009726:	4a26      	ldr	r2, [pc, #152]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800972c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800972e:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009732:	4b24      	ldr	r3, [pc, #144]	; (80097c4 <RCCEx_PLL3_Config+0x160>)
 8009734:	4013      	ands	r3, r2
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	69d2      	ldr	r2, [r2, #28]
 800973a:	00d2      	lsls	r2, r2, #3
 800973c:	4920      	ldr	r1, [pc, #128]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 800973e:	4313      	orrs	r3, r2
 8009740:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009742:	4b1f      	ldr	r3, [pc, #124]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	4a1e      	ldr	r2, [pc, #120]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800974c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d106      	bne.n	8009762 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009754:	4b1a      	ldr	r3, [pc, #104]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	4a19      	ldr	r2, [pc, #100]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 800975a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800975e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009760:	e00f      	b.n	8009782 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d106      	bne.n	8009776 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009768:	4b15      	ldr	r3, [pc, #84]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	4a14      	ldr	r2, [pc, #80]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 800976e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009772:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009774:	e005      	b.n	8009782 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009776:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977a:	4a11      	ldr	r2, [pc, #68]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 800977c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009780:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009782:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a0e      	ldr	r2, [pc, #56]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 8009788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800978c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800978e:	f7f9 faff 	bl	8002d90 <HAL_GetTick>
 8009792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009794:	e008      	b.n	80097a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009796:	f7f9 fafb 	bl	8002d90 <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d901      	bls.n	80097a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e006      	b.n	80097b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097a8:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <RCCEx_PLL3_Config+0x15c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0f0      	beq.n	8009796 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	58024400 	.word	0x58024400
 80097c4:	ffff0007 	.word	0xffff0007

080097c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d071      	beq.n	80098be <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d106      	bne.n	80097f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7f8 fd92 	bl	8002318 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f003 0310 	and.w	r3, r3, #16
 8009806:	2b10      	cmp	r3, #16
 8009808:	d050      	beq.n	80098ac <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	22ca      	movs	r2, #202	; 0xca
 8009810:	625a      	str	r2, [r3, #36]	; 0x24
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2253      	movs	r2, #83	; 0x53
 8009818:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f87a 	bl	8009914 <RTC_EnterInitMode>
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009824:	7bfb      	ldrb	r3, [r7, #15]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d124      	bne.n	8009874 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6899      	ldr	r1, [r3, #8]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	4b24      	ldr	r3, [pc, #144]	; (80098c8 <HAL_RTC_Init+0x100>)
 8009836:	400b      	ands	r3, r1
 8009838:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6899      	ldr	r1, [r3, #8]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	431a      	orrs	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	0419      	lsls	r1, r3, #16
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f886 	bl	800997c <RTC_ExitInitMode>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d113      	bne.n	80098a2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 0203 	bic.w	r2, r2, #3
 8009888:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	69da      	ldr	r2, [r3, #28]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	431a      	orrs	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	22ff      	movs	r2, #255	; 0xff
 80098a8:	625a      	str	r2, [r3, #36]	; 0x24
 80098aa:	e001      	b.n	80098b0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d103      	bne.n	80098be <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80098be:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	ff8fffbf 	.word	0xff8fffbf

080098cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a0d      	ldr	r2, [pc, #52]	; (8009910 <HAL_RTC_WaitForSynchro+0x44>)
 80098da:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80098dc:	f7f9 fa58 	bl	8002d90 <HAL_GetTick>
 80098e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80098e2:	e009      	b.n	80098f8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80098e4:	f7f9 fa54 	bl	8002d90 <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098f2:	d901      	bls.n	80098f8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80098f4:	2303      	movs	r3, #3
 80098f6:	e007      	b.n	8009908 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	f003 0320 	and.w	r3, r3, #32
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0ee      	beq.n	80098e4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	0003ff5f 	.word	0x0003ff5f

08009914 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	d120      	bne.n	8009970 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f04f 32ff 	mov.w	r2, #4294967295
 8009936:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009938:	f7f9 fa2a 	bl	8002d90 <HAL_GetTick>
 800993c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800993e:	e00d      	b.n	800995c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009940:	f7f9 fa26 	bl	8002d90 <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800994e:	d905      	bls.n	800995c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2203      	movs	r2, #3
 8009958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009966:	2b00      	cmp	r3, #0
 8009968:	d102      	bne.n	8009970 <RTC_EnterInitMode+0x5c>
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d1e7      	bne.n	8009940 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009970:	7bfb      	ldrb	r3, [r7, #15]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009988:	4b1a      	ldr	r3, [pc, #104]	; (80099f4 <RTC_ExitInitMode+0x78>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	4a19      	ldr	r2, [pc, #100]	; (80099f4 <RTC_ExitInitMode+0x78>)
 800998e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009992:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009994:	4b17      	ldr	r3, [pc, #92]	; (80099f4 <RTC_ExitInitMode+0x78>)
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10c      	bne.n	80099ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ff93 	bl	80098cc <HAL_RTC_WaitForSynchro>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01e      	beq.n	80099ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2203      	movs	r2, #3
 80099b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	73fb      	strb	r3, [r7, #15]
 80099b8:	e017      	b.n	80099ea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80099ba:	4b0e      	ldr	r3, [pc, #56]	; (80099f4 <RTC_ExitInitMode+0x78>)
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	4a0d      	ldr	r2, [pc, #52]	; (80099f4 <RTC_ExitInitMode+0x78>)
 80099c0:	f023 0320 	bic.w	r3, r3, #32
 80099c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff ff80 	bl	80098cc <HAL_RTC_WaitForSynchro>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2203      	movs	r2, #3
 80099d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80099de:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <RTC_ExitInitMode+0x78>)
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	4a04      	ldr	r2, [pc, #16]	; (80099f4 <RTC_ExitInitMode+0x78>)
 80099e4:	f043 0320 	orr.w	r3, r3, #32
 80099e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	58004000 	.word	0x58004000

080099f8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08a      	sub	sp, #40	; 0x28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e28e      	b.n	8009f28 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009a0a:	f7f9 f9f1 	bl	8002df0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d113      	bne.n	8009a40 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a96      	ldr	r2, [pc, #600]	; (8009c78 <HAL_SAI_Init+0x280>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d004      	beq.n	8009a2c <HAL_SAI_Init+0x34>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a95      	ldr	r2, [pc, #596]	; (8009c7c <HAL_SAI_Init+0x284>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d107      	bne.n	8009a3c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d103      	bne.n	8009a3c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e273      	b.n	8009f28 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a8c      	ldr	r2, [pc, #560]	; (8009c78 <HAL_SAI_Init+0x280>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d004      	beq.n	8009a54 <HAL_SAI_Init+0x5c>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a8c      	ldr	r2, [pc, #560]	; (8009c80 <HAL_SAI_Init+0x288>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d102      	bne.n	8009a5a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009a54:	4b8b      	ldr	r3, [pc, #556]	; (8009c84 <HAL_SAI_Init+0x28c>)
 8009a56:	61bb      	str	r3, [r7, #24]
 8009a58:	e028      	b.n	8009aac <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a8a      	ldr	r2, [pc, #552]	; (8009c88 <HAL_SAI_Init+0x290>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d004      	beq.n	8009a6e <HAL_SAI_Init+0x76>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a88      	ldr	r2, [pc, #544]	; (8009c8c <HAL_SAI_Init+0x294>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d102      	bne.n	8009a74 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009a6e:	4b88      	ldr	r3, [pc, #544]	; (8009c90 <HAL_SAI_Init+0x298>)
 8009a70:	61bb      	str	r3, [r7, #24]
 8009a72:	e01b      	b.n	8009aac <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a86      	ldr	r2, [pc, #536]	; (8009c94 <HAL_SAI_Init+0x29c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d004      	beq.n	8009a88 <HAL_SAI_Init+0x90>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a85      	ldr	r2, [pc, #532]	; (8009c98 <HAL_SAI_Init+0x2a0>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d102      	bne.n	8009a8e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009a88:	4b84      	ldr	r3, [pc, #528]	; (8009c9c <HAL_SAI_Init+0x2a4>)
 8009a8a:	61bb      	str	r3, [r7, #24]
 8009a8c:	e00e      	b.n	8009aac <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a7a      	ldr	r2, [pc, #488]	; (8009c7c <HAL_SAI_Init+0x284>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d004      	beq.n	8009aa2 <HAL_SAI_Init+0xaa>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a80      	ldr	r2, [pc, #512]	; (8009ca0 <HAL_SAI_Init+0x2a8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d102      	bne.n	8009aa8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8009aa2:	4b80      	ldr	r3, [pc, #512]	; (8009ca4 <HAL_SAI_Init+0x2ac>)
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	e001      	b.n	8009aac <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e23d      	b.n	8009f28 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d106      	bne.n	8009ac6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7f8 ff29 	bl	8002918 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa40 	bl	8009f4c <SAI_Disable>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e228      	b.n	8009f28 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2202      	movs	r2, #2
 8009ada:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d00c      	beq.n	8009b00 <HAL_SAI_Init+0x108>
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d80d      	bhi.n	8009b06 <HAL_SAI_Init+0x10e>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <HAL_SAI_Init+0xfc>
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d003      	beq.n	8009afa <HAL_SAI_Init+0x102>
 8009af2:	e008      	b.n	8009b06 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009af8:	e008      	b.n	8009b0c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009afa:	2310      	movs	r3, #16
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009afe:	e005      	b.n	8009b0c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009b00:	2320      	movs	r3, #32
 8009b02:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b04:	e002      	b.n	8009b0c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b0a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	2b05      	cmp	r3, #5
 8009b12:	d832      	bhi.n	8009b7a <HAL_SAI_Init+0x182>
 8009b14:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <HAL_SAI_Init+0x124>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b35 	.word	0x08009b35
 8009b20:	08009b3b 	.word	0x08009b3b
 8009b24:	08009b43 	.word	0x08009b43
 8009b28:	08009b4b 	.word	0x08009b4b
 8009b2c:	08009b5b 	.word	0x08009b5b
 8009b30:	08009b6b 	.word	0x08009b6b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	61fb      	str	r3, [r7, #28]
      break;
 8009b38:	e022      	b.n	8009b80 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b3e:	61fb      	str	r3, [r7, #28]
      break;
 8009b40:	e01e      	b.n	8009b80 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b46:	61fb      	str	r3, [r7, #28]
      break;
 8009b48:	e01a      	b.n	8009b80 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b4e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	f043 0301 	orr.w	r3, r3, #1
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b58:	e012      	b.n	8009b80 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b5e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	f043 0302 	orr.w	r3, r3, #2
 8009b66:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b68:	e00a      	b.n	8009b80 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b6e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	f043 0303 	orr.w	r3, r3, #3
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b78:	e002      	b.n	8009b80 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	61fb      	str	r3, [r7, #28]
      break;
 8009b7e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b84:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80c5 	beq.w	8009d1a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a37      	ldr	r2, [pc, #220]	; (8009c78 <HAL_SAI_Init+0x280>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d004      	beq.n	8009ba8 <HAL_SAI_Init+0x1b0>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a37      	ldr	r2, [pc, #220]	; (8009c80 <HAL_SAI_Init+0x288>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d106      	bne.n	8009bb6 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009ba8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009bac:	f04f 0100 	mov.w	r1, #0
 8009bb0:	f7fe fb16 	bl	80081e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009bb4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a33      	ldr	r2, [pc, #204]	; (8009c88 <HAL_SAI_Init+0x290>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d004      	beq.n	8009bca <HAL_SAI_Init+0x1d2>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a31      	ldr	r2, [pc, #196]	; (8009c8c <HAL_SAI_Init+0x294>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d106      	bne.n	8009bd8 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009bca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009bce:	f04f 0100 	mov.w	r1, #0
 8009bd2:	f7fe fb05 	bl	80081e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009bd6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a2d      	ldr	r2, [pc, #180]	; (8009c94 <HAL_SAI_Init+0x29c>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d004      	beq.n	8009bec <HAL_SAI_Init+0x1f4>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a2c      	ldr	r2, [pc, #176]	; (8009c98 <HAL_SAI_Init+0x2a0>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d106      	bne.n	8009bfa <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009bec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009bf0:	f04f 0100 	mov.w	r1, #0
 8009bf4:	f7fe faf4 	bl	80081e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009bf8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a1f      	ldr	r2, [pc, #124]	; (8009c7c <HAL_SAI_Init+0x284>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d106      	bne.n	8009c12 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009c04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009c08:	f04f 0100 	mov.w	r1, #0
 8009c0c:	f7fe fae8 	bl	80081e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c10:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a22      	ldr	r2, [pc, #136]	; (8009ca0 <HAL_SAI_Init+0x2a8>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d106      	bne.n	8009c2a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009c1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009c20:	f04f 0100 	mov.w	r1, #0
 8009c24:	f7fe fadc 	bl	80081e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c28:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c32:	d139      	bne.n	8009ca8 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d102      	bne.n	8009c42 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009c3c:	2340      	movs	r3, #64	; 0x40
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e00a      	b.n	8009c58 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c46:	2b08      	cmp	r3, #8
 8009c48:	d103      	bne.n	8009c52 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	e002      	b.n	8009c58 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c56:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	4619      	mov	r1, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	fb02 f303 	mul.w	r3, r2, r3
 8009c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c72:	613b      	str	r3, [r7, #16]
 8009c74:	e030      	b.n	8009cd8 <HAL_SAI_Init+0x2e0>
 8009c76:	bf00      	nop
 8009c78:	40015804 	.word	0x40015804
 8009c7c:	58005404 	.word	0x58005404
 8009c80:	40015824 	.word	0x40015824
 8009c84:	40015800 	.word	0x40015800
 8009c88:	40015c04 	.word	0x40015c04
 8009c8c:	40015c24 	.word	0x40015c24
 8009c90:	40015c00 	.word	0x40015c00
 8009c94:	40016004 	.word	0x40016004
 8009c98:	40016024 	.word	0x40016024
 8009c9c:	40016000 	.word	0x40016000
 8009ca0:	58005424 	.word	0x58005424
 8009ca4:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cb0:	d101      	bne.n	8009cb6 <HAL_SAI_Init+0x2be>
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e000      	b.n	8009cb8 <HAL_SAI_Init+0x2c0>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	fb02 f303 	mul.w	r3, r2, r3
 8009cd0:	021b      	lsls	r3, r3, #8
 8009cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009cd6:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	4a95      	ldr	r2, [pc, #596]	; (8009f30 <HAL_SAI_Init+0x538>)
 8009cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce0:	08da      	lsrs	r2, r3, #3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009ce6:	6939      	ldr	r1, [r7, #16]
 8009ce8:	4b91      	ldr	r3, [pc, #580]	; (8009f30 <HAL_SAI_Init+0x538>)
 8009cea:	fba3 2301 	umull	r2, r3, r3, r1
 8009cee:	08da      	lsrs	r2, r3, #3
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	005b      	lsls	r3, r3, #1
 8009cf8:	1aca      	subs	r2, r1, r3
 8009cfa:	2a08      	cmp	r2, #8
 8009cfc:	d904      	bls.n	8009d08 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d104      	bne.n	8009d1a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	085a      	lsrs	r2, r3, #1
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_SAI_Init+0x332>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d109      	bne.n	8009d3e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <HAL_SAI_Init+0x33e>
 8009d32:	2300      	movs	r3, #0
 8009d34:	e001      	b.n	8009d3a <HAL_SAI_Init+0x342>
 8009d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d3a:	623b      	str	r3, [r7, #32]
 8009d3c:	e008      	b.n	8009d50 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d102      	bne.n	8009d4c <HAL_SAI_Init+0x354>
 8009d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d4a:	e000      	b.n	8009d4e <HAL_SAI_Init+0x356>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009d50:	f7f9 f84e 	bl	8002df0 <HAL_GetREVID>
 8009d54:	4603      	mov	r3, r0
 8009d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d5a:	d331      	bcc.n	8009dc0 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6819      	ldr	r1, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	4b73      	ldr	r3, [pc, #460]	; (8009f34 <HAL_SAI_Init+0x53c>)
 8009d68:	400b      	ands	r3, r1
 8009d6a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6819      	ldr	r1, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d80:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d86:	431a      	orrs	r2, r3
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009d94:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009da0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	051b      	lsls	r3, r3, #20
 8009da8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009dae:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	e02d      	b.n	8009e1c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6819      	ldr	r1, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	4b5b      	ldr	r3, [pc, #364]	; (8009f38 <HAL_SAI_Init+0x540>)
 8009dcc:	400b      	ands	r3, r1
 8009dce:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6819      	ldr	r1, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dde:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009de4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dea:	431a      	orrs	r2, r3
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009df8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e04:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	051b      	lsls	r3, r3, #20
 8009e0c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e12:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6859      	ldr	r1, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	4b45      	ldr	r3, [pc, #276]	; (8009f3c <HAL_SAI_Init+0x544>)
 8009e28:	400b      	ands	r3, r1
 8009e2a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6859      	ldr	r1, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	69da      	ldr	r2, [r3, #28]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e40:	431a      	orrs	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6899      	ldr	r1, [r3, #8]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	4b3a      	ldr	r3, [pc, #232]	; (8009f40 <HAL_SAI_Init+0x548>)
 8009e56:	400b      	ands	r3, r1
 8009e58:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6899      	ldr	r1, [r3, #8]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e64:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009e6a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009e70:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009e76:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009e80:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68d9      	ldr	r1, [r3, #12]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009e98:	400b      	ands	r3, r1
 8009e9a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68d9      	ldr	r1, [r3, #12]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eaa:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009eb2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	021b      	lsls	r3, r3, #8
 8009ebc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a1e      	ldr	r2, [pc, #120]	; (8009f44 <HAL_SAI_Init+0x54c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d004      	beq.n	8009eda <HAL_SAI_Init+0x4e2>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a1c      	ldr	r2, [pc, #112]	; (8009f48 <HAL_SAI_Init+0x550>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d119      	bne.n	8009f0e <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ede:	f023 0201 	bic.w	r2, r3, #1
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d10e      	bne.n	8009f0e <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009efc:	431a      	orrs	r2, r3
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f06:	f043 0201 	orr.w	r2, r3, #1
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3728      	adds	r7, #40	; 0x28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	cccccccd 	.word	0xcccccccd
 8009f34:	f005c010 	.word	0xf005c010
 8009f38:	f805c010 	.word	0xf805c010
 8009f3c:	ffff1ff0 	.word	0xffff1ff0
 8009f40:	fff88000 	.word	0xfff88000
 8009f44:	40015804 	.word	0x40015804
 8009f48:	58005404 	.word	0x58005404

08009f4c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009f54:	4b18      	ldr	r3, [pc, #96]	; (8009fb8 <SAI_Disable+0x6c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a18      	ldr	r2, [pc, #96]	; (8009fbc <SAI_Disable+0x70>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	0b1b      	lsrs	r3, r3, #12
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009f76:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10a      	bne.n	8009f94 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	72fb      	strb	r3, [r7, #11]
      break;
 8009f92:	e009      	b.n	8009fa8 <SAI_Disable+0x5c>
    }
    count--;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e7      	bne.n	8009f78 <SAI_Disable+0x2c>

  return status;
 8009fa8:	7afb      	ldrb	r3, [r7, #11]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	24000028 	.word	0x24000028
 8009fbc:	95cbec1b 	.word	0x95cbec1b

08009fc0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e02b      	b.n	800a02c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d106      	bne.n	8009fee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7f8 fc8b 	bl	8002904 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	4619      	mov	r1, r3
 800a000:	4610      	mov	r0, r2
 800a002:	f002 fbe7 	bl	800c7d4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	461a      	mov	r2, r3
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	f002 fc3b 	bl	800c88c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a016:	4b07      	ldr	r3, [pc, #28]	; (800a034 <HAL_SDRAM_Init+0x74>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a06      	ldr	r2, [pc, #24]	; (800a034 <HAL_SDRAM_Init+0x74>)
 800a01c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a020:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	52004000 	.word	0x52004000

0800a038 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e10f      	b.n	800a26a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a87      	ldr	r2, [pc, #540]	; (800a274 <HAL_SPI_Init+0x23c>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d00f      	beq.n	800a07a <HAL_SPI_Init+0x42>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a86      	ldr	r2, [pc, #536]	; (800a278 <HAL_SPI_Init+0x240>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d00a      	beq.n	800a07a <HAL_SPI_Init+0x42>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a84      	ldr	r2, [pc, #528]	; (800a27c <HAL_SPI_Init+0x244>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d005      	beq.n	800a07a <HAL_SPI_Init+0x42>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	2b0f      	cmp	r3, #15
 800a074:	d901      	bls.n	800a07a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e0f7      	b.n	800a26a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f900 	bl	800a280 <SPI_GetPacketSize>
 800a080:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a7b      	ldr	r2, [pc, #492]	; (800a274 <HAL_SPI_Init+0x23c>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d00c      	beq.n	800a0a6 <HAL_SPI_Init+0x6e>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a79      	ldr	r2, [pc, #484]	; (800a278 <HAL_SPI_Init+0x240>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d007      	beq.n	800a0a6 <HAL_SPI_Init+0x6e>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a78      	ldr	r2, [pc, #480]	; (800a27c <HAL_SPI_Init+0x244>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d002      	beq.n	800a0a6 <HAL_SPI_Init+0x6e>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	d811      	bhi.n	800a0ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0aa:	4a72      	ldr	r2, [pc, #456]	; (800a274 <HAL_SPI_Init+0x23c>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d009      	beq.n	800a0c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a70      	ldr	r2, [pc, #448]	; (800a278 <HAL_SPI_Init+0x240>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d004      	beq.n	800a0c4 <HAL_SPI_Init+0x8c>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a6f      	ldr	r2, [pc, #444]	; (800a27c <HAL_SPI_Init+0x244>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d104      	bne.n	800a0ce <HAL_SPI_Init+0x96>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b10      	cmp	r3, #16
 800a0c8:	d901      	bls.n	800a0ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e0cd      	b.n	800a26a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7f8 f94a 	bl	800237c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f022 0201 	bic.w	r2, r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a10a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a114:	d119      	bne.n	800a14a <HAL_SPI_Init+0x112>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a11e:	d103      	bne.n	800a128 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a124:	2b00      	cmp	r3, #0
 800a126:	d008      	beq.n	800a13a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10c      	bne.n	800a14a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a138:	d107      	bne.n	800a14a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a148:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00f      	beq.n	800a176 <HAL_SPI_Init+0x13e>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2b06      	cmp	r3, #6
 800a15c:	d90b      	bls.n	800a176 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	430a      	orrs	r2, r1
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	e007      	b.n	800a186 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a184:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	69da      	ldr	r2, [r3, #28]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18e:	431a      	orrs	r2, r3
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	431a      	orrs	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a198:	ea42 0103 	orr.w	r1, r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68da      	ldr	r2, [r3, #12]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	431a      	orrs	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e6:	ea42 0103 	orr.w	r1, r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d113      	bne.n	800a226 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a210:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a224:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 0201 	bic.w	r2, r2, #1
 800a234:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00a      	beq.n	800a258 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	40013000 	.word	0x40013000
 800a278:	40003800 	.word	0x40003800
 800a27c:	40003c00 	.word	0x40003c00

0800a280 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28c:	095b      	lsrs	r3, r3, #5
 800a28e:	3301      	adds	r3, #1
 800a290:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	3301      	adds	r3, #1
 800a298:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	3307      	adds	r3, #7
 800a29e:	08db      	lsrs	r3, r3, #3
 800a2a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	fb02 f303 	mul.w	r3, r2, r3
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e049      	b.n	800a35c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d106      	bne.n	800a2e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7f8 f917 	bl	8002510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2202      	movs	r2, #2
 800a2e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	f000 fc47 	bl	800ab88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d101      	bne.n	800a376 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e049      	b.n	800a40a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d106      	bne.n	800a390 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f841 	bl	800a412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2202      	movs	r2, #2
 800a394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3304      	adds	r3, #4
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	f000 fbf0 	bl	800ab88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a412:	b480      	push	{r7}
 800a414:	b083      	sub	sp, #12
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a41a:	bf00      	nop
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
	...

0800a428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d109      	bne.n	800a44c <HAL_TIM_PWM_Start+0x24>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	2b01      	cmp	r3, #1
 800a442:	bf14      	ite	ne
 800a444:	2301      	movne	r3, #1
 800a446:	2300      	moveq	r3, #0
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	e03c      	b.n	800a4c6 <HAL_TIM_PWM_Start+0x9e>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2b04      	cmp	r3, #4
 800a450:	d109      	bne.n	800a466 <HAL_TIM_PWM_Start+0x3e>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	bf14      	ite	ne
 800a45e:	2301      	movne	r3, #1
 800a460:	2300      	moveq	r3, #0
 800a462:	b2db      	uxtb	r3, r3
 800a464:	e02f      	b.n	800a4c6 <HAL_TIM_PWM_Start+0x9e>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b08      	cmp	r3, #8
 800a46a:	d109      	bne.n	800a480 <HAL_TIM_PWM_Start+0x58>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b01      	cmp	r3, #1
 800a476:	bf14      	ite	ne
 800a478:	2301      	movne	r3, #1
 800a47a:	2300      	moveq	r3, #0
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	e022      	b.n	800a4c6 <HAL_TIM_PWM_Start+0x9e>
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	2b0c      	cmp	r3, #12
 800a484:	d109      	bne.n	800a49a <HAL_TIM_PWM_Start+0x72>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b01      	cmp	r3, #1
 800a490:	bf14      	ite	ne
 800a492:	2301      	movne	r3, #1
 800a494:	2300      	moveq	r3, #0
 800a496:	b2db      	uxtb	r3, r3
 800a498:	e015      	b.n	800a4c6 <HAL_TIM_PWM_Start+0x9e>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b10      	cmp	r3, #16
 800a49e:	d109      	bne.n	800a4b4 <HAL_TIM_PWM_Start+0x8c>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	bf14      	ite	ne
 800a4ac:	2301      	movne	r3, #1
 800a4ae:	2300      	moveq	r3, #0
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	e008      	b.n	800a4c6 <HAL_TIM_PWM_Start+0x9e>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	bf14      	ite	ne
 800a4c0:	2301      	movne	r3, #1
 800a4c2:	2300      	moveq	r3, #0
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e0a1      	b.n	800a612 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d104      	bne.n	800a4de <HAL_TIM_PWM_Start+0xb6>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4dc:	e023      	b.n	800a526 <HAL_TIM_PWM_Start+0xfe>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d104      	bne.n	800a4ee <HAL_TIM_PWM_Start+0xc6>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4ec:	e01b      	b.n	800a526 <HAL_TIM_PWM_Start+0xfe>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d104      	bne.n	800a4fe <HAL_TIM_PWM_Start+0xd6>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4fc:	e013      	b.n	800a526 <HAL_TIM_PWM_Start+0xfe>
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b0c      	cmp	r3, #12
 800a502:	d104      	bne.n	800a50e <HAL_TIM_PWM_Start+0xe6>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a50c:	e00b      	b.n	800a526 <HAL_TIM_PWM_Start+0xfe>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b10      	cmp	r3, #16
 800a512:	d104      	bne.n	800a51e <HAL_TIM_PWM_Start+0xf6>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a51c:	e003      	b.n	800a526 <HAL_TIM_PWM_Start+0xfe>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2202      	movs	r2, #2
 800a522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2201      	movs	r2, #1
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 ff38 	bl	800b3a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a38      	ldr	r2, [pc, #224]	; (800a61c <HAL_TIM_PWM_Start+0x1f4>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d013      	beq.n	800a566 <HAL_TIM_PWM_Start+0x13e>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a37      	ldr	r2, [pc, #220]	; (800a620 <HAL_TIM_PWM_Start+0x1f8>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d00e      	beq.n	800a566 <HAL_TIM_PWM_Start+0x13e>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a35      	ldr	r2, [pc, #212]	; (800a624 <HAL_TIM_PWM_Start+0x1fc>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d009      	beq.n	800a566 <HAL_TIM_PWM_Start+0x13e>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a34      	ldr	r2, [pc, #208]	; (800a628 <HAL_TIM_PWM_Start+0x200>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d004      	beq.n	800a566 <HAL_TIM_PWM_Start+0x13e>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a32      	ldr	r2, [pc, #200]	; (800a62c <HAL_TIM_PWM_Start+0x204>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d101      	bne.n	800a56a <HAL_TIM_PWM_Start+0x142>
 800a566:	2301      	movs	r3, #1
 800a568:	e000      	b.n	800a56c <HAL_TIM_PWM_Start+0x144>
 800a56a:	2300      	movs	r3, #0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d007      	beq.n	800a580 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a57e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a25      	ldr	r2, [pc, #148]	; (800a61c <HAL_TIM_PWM_Start+0x1f4>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d022      	beq.n	800a5d0 <HAL_TIM_PWM_Start+0x1a8>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a592:	d01d      	beq.n	800a5d0 <HAL_TIM_PWM_Start+0x1a8>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a25      	ldr	r2, [pc, #148]	; (800a630 <HAL_TIM_PWM_Start+0x208>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d018      	beq.n	800a5d0 <HAL_TIM_PWM_Start+0x1a8>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a24      	ldr	r2, [pc, #144]	; (800a634 <HAL_TIM_PWM_Start+0x20c>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d013      	beq.n	800a5d0 <HAL_TIM_PWM_Start+0x1a8>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a22      	ldr	r2, [pc, #136]	; (800a638 <HAL_TIM_PWM_Start+0x210>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d00e      	beq.n	800a5d0 <HAL_TIM_PWM_Start+0x1a8>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a1a      	ldr	r2, [pc, #104]	; (800a620 <HAL_TIM_PWM_Start+0x1f8>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d009      	beq.n	800a5d0 <HAL_TIM_PWM_Start+0x1a8>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a1e      	ldr	r2, [pc, #120]	; (800a63c <HAL_TIM_PWM_Start+0x214>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d004      	beq.n	800a5d0 <HAL_TIM_PWM_Start+0x1a8>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a16      	ldr	r2, [pc, #88]	; (800a624 <HAL_TIM_PWM_Start+0x1fc>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d115      	bne.n	800a5fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689a      	ldr	r2, [r3, #8]
 800a5d6:	4b1a      	ldr	r3, [pc, #104]	; (800a640 <HAL_TIM_PWM_Start+0x218>)
 800a5d8:	4013      	ands	r3, r2
 800a5da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b06      	cmp	r3, #6
 800a5e0:	d015      	beq.n	800a60e <HAL_TIM_PWM_Start+0x1e6>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5e8:	d011      	beq.n	800a60e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0201 	orr.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5fa:	e008      	b.n	800a60e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0201 	orr.w	r2, r2, #1
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	e000      	b.n	800a610 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a60e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	40010000 	.word	0x40010000
 800a620:	40010400 	.word	0x40010400
 800a624:	40014000 	.word	0x40014000
 800a628:	40014400 	.word	0x40014400
 800a62c:	40014800 	.word	0x40014800
 800a630:	40000400 	.word	0x40000400
 800a634:	40000800 	.word	0x40000800
 800a638:	40000c00 	.word	0x40000c00
 800a63c:	40001800 	.word	0x40001800
 800a640:	00010007 	.word	0x00010007

0800a644 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2200      	movs	r2, #0
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f000 fea4 	bl	800b3a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a3e      	ldr	r2, [pc, #248]	; (800a75c <HAL_TIM_PWM_Stop+0x118>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d013      	beq.n	800a68e <HAL_TIM_PWM_Stop+0x4a>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a3d      	ldr	r2, [pc, #244]	; (800a760 <HAL_TIM_PWM_Stop+0x11c>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00e      	beq.n	800a68e <HAL_TIM_PWM_Stop+0x4a>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a3b      	ldr	r2, [pc, #236]	; (800a764 <HAL_TIM_PWM_Stop+0x120>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d009      	beq.n	800a68e <HAL_TIM_PWM_Stop+0x4a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a3a      	ldr	r2, [pc, #232]	; (800a768 <HAL_TIM_PWM_Stop+0x124>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d004      	beq.n	800a68e <HAL_TIM_PWM_Stop+0x4a>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a38      	ldr	r2, [pc, #224]	; (800a76c <HAL_TIM_PWM_Stop+0x128>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d101      	bne.n	800a692 <HAL_TIM_PWM_Stop+0x4e>
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <HAL_TIM_PWM_Stop+0x50>
 800a692:	2300      	movs	r3, #0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d017      	beq.n	800a6c8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6a1a      	ldr	r2, [r3, #32]
 800a69e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10f      	bne.n	800a6c8 <HAL_TIM_PWM_Stop+0x84>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6a1a      	ldr	r2, [r3, #32]
 800a6ae:	f240 4344 	movw	r3, #1092	; 0x444
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d107      	bne.n	800a6c8 <HAL_TIM_PWM_Stop+0x84>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6a1a      	ldr	r2, [r3, #32]
 800a6ce:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10f      	bne.n	800a6f8 <HAL_TIM_PWM_Stop+0xb4>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6a1a      	ldr	r2, [r3, #32]
 800a6de:	f240 4344 	movw	r3, #1092	; 0x444
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d107      	bne.n	800a6f8 <HAL_TIM_PWM_Stop+0xb4>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f022 0201 	bic.w	r2, r2, #1
 800a6f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d104      	bne.n	800a708 <HAL_TIM_PWM_Stop+0xc4>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a706:	e023      	b.n	800a750 <HAL_TIM_PWM_Stop+0x10c>
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	d104      	bne.n	800a718 <HAL_TIM_PWM_Stop+0xd4>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a716:	e01b      	b.n	800a750 <HAL_TIM_PWM_Stop+0x10c>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b08      	cmp	r3, #8
 800a71c:	d104      	bne.n	800a728 <HAL_TIM_PWM_Stop+0xe4>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a726:	e013      	b.n	800a750 <HAL_TIM_PWM_Stop+0x10c>
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	2b0c      	cmp	r3, #12
 800a72c:	d104      	bne.n	800a738 <HAL_TIM_PWM_Stop+0xf4>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a736:	e00b      	b.n	800a750 <HAL_TIM_PWM_Stop+0x10c>
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2b10      	cmp	r3, #16
 800a73c:	d104      	bne.n	800a748 <HAL_TIM_PWM_Stop+0x104>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a746:	e003      	b.n	800a750 <HAL_TIM_PWM_Stop+0x10c>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	40010000 	.word	0x40010000
 800a760:	40010400 	.word	0x40010400
 800a764:	40014000 	.word	0x40014000
 800a768:	40014400 	.word	0x40014400
 800a76c:	40014800 	.word	0x40014800

0800a770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a786:	2b01      	cmp	r3, #1
 800a788:	d101      	bne.n	800a78e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a78a:	2302      	movs	r3, #2
 800a78c:	e0ff      	b.n	800a98e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b14      	cmp	r3, #20
 800a79a:	f200 80f0 	bhi.w	800a97e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a79e:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7f9 	.word	0x0800a7f9
 800a7a8:	0800a97f 	.word	0x0800a97f
 800a7ac:	0800a97f 	.word	0x0800a97f
 800a7b0:	0800a97f 	.word	0x0800a97f
 800a7b4:	0800a839 	.word	0x0800a839
 800a7b8:	0800a97f 	.word	0x0800a97f
 800a7bc:	0800a97f 	.word	0x0800a97f
 800a7c0:	0800a97f 	.word	0x0800a97f
 800a7c4:	0800a87b 	.word	0x0800a87b
 800a7c8:	0800a97f 	.word	0x0800a97f
 800a7cc:	0800a97f 	.word	0x0800a97f
 800a7d0:	0800a97f 	.word	0x0800a97f
 800a7d4:	0800a8bb 	.word	0x0800a8bb
 800a7d8:	0800a97f 	.word	0x0800a97f
 800a7dc:	0800a97f 	.word	0x0800a97f
 800a7e0:	0800a97f 	.word	0x0800a97f
 800a7e4:	0800a8fd 	.word	0x0800a8fd
 800a7e8:	0800a97f 	.word	0x0800a97f
 800a7ec:	0800a97f 	.word	0x0800a97f
 800a7f0:	0800a97f 	.word	0x0800a97f
 800a7f4:	0800a93d 	.word	0x0800a93d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68b9      	ldr	r1, [r7, #8]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fa5c 	bl	800acbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699a      	ldr	r2, [r3, #24]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0208 	orr.w	r2, r2, #8
 800a812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	699a      	ldr	r2, [r3, #24]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0204 	bic.w	r2, r2, #4
 800a822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6999      	ldr	r1, [r3, #24]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	619a      	str	r2, [r3, #24]
      break;
 800a836:	e0a5      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 facc 	bl	800addc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	699a      	ldr	r2, [r3, #24]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	699a      	ldr	r2, [r3, #24]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6999      	ldr	r1, [r3, #24]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	021a      	lsls	r2, r3, #8
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	619a      	str	r2, [r3, #24]
      break;
 800a878:	e084      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	4618      	mov	r0, r3
 800a882:	f000 fb35 	bl	800aef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	69da      	ldr	r2, [r3, #28]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f042 0208 	orr.w	r2, r2, #8
 800a894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	69da      	ldr	r2, [r3, #28]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0204 	bic.w	r2, r2, #4
 800a8a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69d9      	ldr	r1, [r3, #28]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	691a      	ldr	r2, [r3, #16]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	61da      	str	r2, [r3, #28]
      break;
 800a8b8:	e064      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68b9      	ldr	r1, [r7, #8]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 fb9d 	bl	800b000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	69da      	ldr	r2, [r3, #28]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	69da      	ldr	r2, [r3, #28]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	69d9      	ldr	r1, [r3, #28]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	021a      	lsls	r2, r3, #8
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	61da      	str	r2, [r3, #28]
      break;
 800a8fa:	e043      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68b9      	ldr	r1, [r7, #8]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fbe6 	bl	800b0d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0208 	orr.w	r2, r2, #8
 800a916:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f022 0204 	bic.w	r2, r2, #4
 800a926:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	691a      	ldr	r2, [r3, #16]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a93a:	e023      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fc2a 	bl	800b19c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a966:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	021a      	lsls	r2, r3, #8
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	430a      	orrs	r2, r1
 800a97a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a97c:	e002      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	75fb      	strb	r3, [r7, #23]
      break;
 800a982:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop

0800a998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d101      	bne.n	800a9b4 <HAL_TIM_ConfigClockSource+0x1c>
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	e0dc      	b.n	800ab6e <HAL_TIM_ConfigClockSource+0x1d6>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	4b6a      	ldr	r3, [pc, #424]	; (800ab78 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a64      	ldr	r2, [pc, #400]	; (800ab7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	f000 80a9 	beq.w	800ab42 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f0:	4a62      	ldr	r2, [pc, #392]	; (800ab7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	f200 80ae 	bhi.w	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f8:	4a61      	ldr	r2, [pc, #388]	; (800ab80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	f000 80a1 	beq.w	800ab42 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa00:	4a5f      	ldr	r2, [pc, #380]	; (800ab80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	f200 80a6 	bhi.w	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa08:	4a5e      	ldr	r2, [pc, #376]	; (800ab84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	f000 8099 	beq.w	800ab42 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa10:	4a5c      	ldr	r2, [pc, #368]	; (800ab84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	f200 809e 	bhi.w	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa1c:	f000 8091 	beq.w	800ab42 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa24:	f200 8096 	bhi.w	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa2c:	f000 8089 	beq.w	800ab42 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa34:	f200 808e 	bhi.w	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa3c:	d03e      	beq.n	800aabc <HAL_TIM_ConfigClockSource+0x124>
 800aa3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa42:	f200 8087 	bhi.w	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa4a:	f000 8086 	beq.w	800ab5a <HAL_TIM_ConfigClockSource+0x1c2>
 800aa4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa52:	d87f      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa54:	2b70      	cmp	r3, #112	; 0x70
 800aa56:	d01a      	beq.n	800aa8e <HAL_TIM_ConfigClockSource+0xf6>
 800aa58:	2b70      	cmp	r3, #112	; 0x70
 800aa5a:	d87b      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa5c:	2b60      	cmp	r3, #96	; 0x60
 800aa5e:	d050      	beq.n	800ab02 <HAL_TIM_ConfigClockSource+0x16a>
 800aa60:	2b60      	cmp	r3, #96	; 0x60
 800aa62:	d877      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa64:	2b50      	cmp	r3, #80	; 0x50
 800aa66:	d03c      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x14a>
 800aa68:	2b50      	cmp	r3, #80	; 0x50
 800aa6a:	d873      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa6c:	2b40      	cmp	r3, #64	; 0x40
 800aa6e:	d058      	beq.n	800ab22 <HAL_TIM_ConfigClockSource+0x18a>
 800aa70:	2b40      	cmp	r3, #64	; 0x40
 800aa72:	d86f      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa74:	2b30      	cmp	r3, #48	; 0x30
 800aa76:	d064      	beq.n	800ab42 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa78:	2b30      	cmp	r3, #48	; 0x30
 800aa7a:	d86b      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa7c:	2b20      	cmp	r3, #32
 800aa7e:	d060      	beq.n	800ab42 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa80:	2b20      	cmp	r3, #32
 800aa82:	d867      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d05c      	beq.n	800ab42 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa88:	2b10      	cmp	r3, #16
 800aa8a:	d05a      	beq.n	800ab42 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa8c:	e062      	b.n	800ab54 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa9e:	f000 fc61 	bl	800b364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aab0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	609a      	str	r2, [r3, #8]
      break;
 800aaba:	e04f      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aacc:	f000 fc4a 	bl	800b364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689a      	ldr	r2, [r3, #8]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aade:	609a      	str	r2, [r3, #8]
      break;
 800aae0:	e03c      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f000 fbba 	bl	800b268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2150      	movs	r1, #80	; 0x50
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 fc14 	bl	800b328 <TIM_ITRx_SetConfig>
      break;
 800ab00:	e02c      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f000 fbd9 	bl	800b2c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2160      	movs	r1, #96	; 0x60
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fc04 	bl	800b328 <TIM_ITRx_SetConfig>
      break;
 800ab20:	e01c      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f000 fb9a 	bl	800b268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2140      	movs	r1, #64	; 0x40
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 fbf4 	bl	800b328 <TIM_ITRx_SetConfig>
      break;
 800ab40:	e00c      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	f000 fbeb 	bl	800b328 <TIM_ITRx_SetConfig>
      break;
 800ab52:	e003      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	73fb      	strb	r3, [r7, #15]
      break;
 800ab58:	e000      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ab5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	ffceff88 	.word	0xffceff88
 800ab7c:	00100040 	.word	0x00100040
 800ab80:	00100030 	.word	0x00100030
 800ab84:	00100020 	.word	0x00100020

0800ab88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a40      	ldr	r2, [pc, #256]	; (800ac9c <TIM_Base_SetConfig+0x114>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d013      	beq.n	800abc8 <TIM_Base_SetConfig+0x40>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aba6:	d00f      	beq.n	800abc8 <TIM_Base_SetConfig+0x40>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a3d      	ldr	r2, [pc, #244]	; (800aca0 <TIM_Base_SetConfig+0x118>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d00b      	beq.n	800abc8 <TIM_Base_SetConfig+0x40>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a3c      	ldr	r2, [pc, #240]	; (800aca4 <TIM_Base_SetConfig+0x11c>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d007      	beq.n	800abc8 <TIM_Base_SetConfig+0x40>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a3b      	ldr	r2, [pc, #236]	; (800aca8 <TIM_Base_SetConfig+0x120>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d003      	beq.n	800abc8 <TIM_Base_SetConfig+0x40>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a3a      	ldr	r2, [pc, #232]	; (800acac <TIM_Base_SetConfig+0x124>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d108      	bne.n	800abda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a2f      	ldr	r2, [pc, #188]	; (800ac9c <TIM_Base_SetConfig+0x114>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d01f      	beq.n	800ac22 <TIM_Base_SetConfig+0x9a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe8:	d01b      	beq.n	800ac22 <TIM_Base_SetConfig+0x9a>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a2c      	ldr	r2, [pc, #176]	; (800aca0 <TIM_Base_SetConfig+0x118>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d017      	beq.n	800ac22 <TIM_Base_SetConfig+0x9a>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a2b      	ldr	r2, [pc, #172]	; (800aca4 <TIM_Base_SetConfig+0x11c>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d013      	beq.n	800ac22 <TIM_Base_SetConfig+0x9a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a2a      	ldr	r2, [pc, #168]	; (800aca8 <TIM_Base_SetConfig+0x120>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d00f      	beq.n	800ac22 <TIM_Base_SetConfig+0x9a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a29      	ldr	r2, [pc, #164]	; (800acac <TIM_Base_SetConfig+0x124>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00b      	beq.n	800ac22 <TIM_Base_SetConfig+0x9a>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a28      	ldr	r2, [pc, #160]	; (800acb0 <TIM_Base_SetConfig+0x128>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d007      	beq.n	800ac22 <TIM_Base_SetConfig+0x9a>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a27      	ldr	r2, [pc, #156]	; (800acb4 <TIM_Base_SetConfig+0x12c>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d003      	beq.n	800ac22 <TIM_Base_SetConfig+0x9a>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a26      	ldr	r2, [pc, #152]	; (800acb8 <TIM_Base_SetConfig+0x130>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d108      	bne.n	800ac34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	689a      	ldr	r2, [r3, #8]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a10      	ldr	r2, [pc, #64]	; (800ac9c <TIM_Base_SetConfig+0x114>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d00f      	beq.n	800ac80 <TIM_Base_SetConfig+0xf8>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a12      	ldr	r2, [pc, #72]	; (800acac <TIM_Base_SetConfig+0x124>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d00b      	beq.n	800ac80 <TIM_Base_SetConfig+0xf8>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a11      	ldr	r2, [pc, #68]	; (800acb0 <TIM_Base_SetConfig+0x128>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d007      	beq.n	800ac80 <TIM_Base_SetConfig+0xf8>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a10      	ldr	r2, [pc, #64]	; (800acb4 <TIM_Base_SetConfig+0x12c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d003      	beq.n	800ac80 <TIM_Base_SetConfig+0xf8>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a0f      	ldr	r2, [pc, #60]	; (800acb8 <TIM_Base_SetConfig+0x130>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d103      	bne.n	800ac88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	691a      	ldr	r2, [r3, #16]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	615a      	str	r2, [r3, #20]
}
 800ac8e:	bf00      	nop
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	40010000 	.word	0x40010000
 800aca0:	40000400 	.word	0x40000400
 800aca4:	40000800 	.word	0x40000800
 800aca8:	40000c00 	.word	0x40000c00
 800acac:	40010400 	.word	0x40010400
 800acb0:	40014000 	.word	0x40014000
 800acb4:	40014400 	.word	0x40014400
 800acb8:	40014800 	.word	0x40014800

0800acbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b087      	sub	sp, #28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	f023 0201 	bic.w	r2, r3, #1
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	4b37      	ldr	r3, [pc, #220]	; (800adc4 <TIM_OC1_SetConfig+0x108>)
 800ace8:	4013      	ands	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f023 0303 	bic.w	r3, r3, #3
 800acf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f023 0302 	bic.w	r3, r3, #2
 800ad04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a2d      	ldr	r2, [pc, #180]	; (800adc8 <TIM_OC1_SetConfig+0x10c>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d00f      	beq.n	800ad38 <TIM_OC1_SetConfig+0x7c>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a2c      	ldr	r2, [pc, #176]	; (800adcc <TIM_OC1_SetConfig+0x110>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00b      	beq.n	800ad38 <TIM_OC1_SetConfig+0x7c>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a2b      	ldr	r2, [pc, #172]	; (800add0 <TIM_OC1_SetConfig+0x114>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d007      	beq.n	800ad38 <TIM_OC1_SetConfig+0x7c>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a2a      	ldr	r2, [pc, #168]	; (800add4 <TIM_OC1_SetConfig+0x118>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d003      	beq.n	800ad38 <TIM_OC1_SetConfig+0x7c>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a29      	ldr	r2, [pc, #164]	; (800add8 <TIM_OC1_SetConfig+0x11c>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d10c      	bne.n	800ad52 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f023 0308 	bic.w	r3, r3, #8
 800ad3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f023 0304 	bic.w	r3, r3, #4
 800ad50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a1c      	ldr	r2, [pc, #112]	; (800adc8 <TIM_OC1_SetConfig+0x10c>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d00f      	beq.n	800ad7a <TIM_OC1_SetConfig+0xbe>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a1b      	ldr	r2, [pc, #108]	; (800adcc <TIM_OC1_SetConfig+0x110>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d00b      	beq.n	800ad7a <TIM_OC1_SetConfig+0xbe>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a1a      	ldr	r2, [pc, #104]	; (800add0 <TIM_OC1_SetConfig+0x114>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d007      	beq.n	800ad7a <TIM_OC1_SetConfig+0xbe>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a19      	ldr	r2, [pc, #100]	; (800add4 <TIM_OC1_SetConfig+0x118>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d003      	beq.n	800ad7a <TIM_OC1_SetConfig+0xbe>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a18      	ldr	r2, [pc, #96]	; (800add8 <TIM_OC1_SetConfig+0x11c>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d111      	bne.n	800ad9e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	621a      	str	r2, [r3, #32]
}
 800adb8:	bf00      	nop
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	fffeff8f 	.word	0xfffeff8f
 800adc8:	40010000 	.word	0x40010000
 800adcc:	40010400 	.word	0x40010400
 800add0:	40014000 	.word	0x40014000
 800add4:	40014400 	.word	0x40014400
 800add8:	40014800 	.word	0x40014800

0800addc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800addc:	b480      	push	{r7}
 800adde:	b087      	sub	sp, #28
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	f023 0210 	bic.w	r2, r3, #16
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4b34      	ldr	r3, [pc, #208]	; (800aed8 <TIM_OC2_SetConfig+0xfc>)
 800ae08:	4013      	ands	r3, r2
 800ae0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f023 0320 	bic.w	r3, r3, #32
 800ae26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	011b      	lsls	r3, r3, #4
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a29      	ldr	r2, [pc, #164]	; (800aedc <TIM_OC2_SetConfig+0x100>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d003      	beq.n	800ae44 <TIM_OC2_SetConfig+0x68>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a28      	ldr	r2, [pc, #160]	; (800aee0 <TIM_OC2_SetConfig+0x104>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d10d      	bne.n	800ae60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	011b      	lsls	r3, r3, #4
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a1e      	ldr	r2, [pc, #120]	; (800aedc <TIM_OC2_SetConfig+0x100>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d00f      	beq.n	800ae88 <TIM_OC2_SetConfig+0xac>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a1d      	ldr	r2, [pc, #116]	; (800aee0 <TIM_OC2_SetConfig+0x104>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d00b      	beq.n	800ae88 <TIM_OC2_SetConfig+0xac>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a1c      	ldr	r2, [pc, #112]	; (800aee4 <TIM_OC2_SetConfig+0x108>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d007      	beq.n	800ae88 <TIM_OC2_SetConfig+0xac>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a1b      	ldr	r2, [pc, #108]	; (800aee8 <TIM_OC2_SetConfig+0x10c>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d003      	beq.n	800ae88 <TIM_OC2_SetConfig+0xac>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a1a      	ldr	r2, [pc, #104]	; (800aeec <TIM_OC2_SetConfig+0x110>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d113      	bne.n	800aeb0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	621a      	str	r2, [r3, #32]
}
 800aeca:	bf00      	nop
 800aecc:	371c      	adds	r7, #28
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	feff8fff 	.word	0xfeff8fff
 800aedc:	40010000 	.word	0x40010000
 800aee0:	40010400 	.word	0x40010400
 800aee4:	40014000 	.word	0x40014000
 800aee8:	40014400 	.word	0x40014400
 800aeec:	40014800 	.word	0x40014800

0800aef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b087      	sub	sp, #28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	4b33      	ldr	r3, [pc, #204]	; (800afe8 <TIM_OC3_SetConfig+0xf8>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f023 0303 	bic.w	r3, r3, #3
 800af26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	021b      	lsls	r3, r3, #8
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	4313      	orrs	r3, r2
 800af44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a28      	ldr	r2, [pc, #160]	; (800afec <TIM_OC3_SetConfig+0xfc>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d003      	beq.n	800af56 <TIM_OC3_SetConfig+0x66>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a27      	ldr	r2, [pc, #156]	; (800aff0 <TIM_OC3_SetConfig+0x100>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d10d      	bne.n	800af72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	021b      	lsls	r3, r3, #8
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	4313      	orrs	r3, r2
 800af68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a1d      	ldr	r2, [pc, #116]	; (800afec <TIM_OC3_SetConfig+0xfc>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d00f      	beq.n	800af9a <TIM_OC3_SetConfig+0xaa>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a1c      	ldr	r2, [pc, #112]	; (800aff0 <TIM_OC3_SetConfig+0x100>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d00b      	beq.n	800af9a <TIM_OC3_SetConfig+0xaa>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a1b      	ldr	r2, [pc, #108]	; (800aff4 <TIM_OC3_SetConfig+0x104>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d007      	beq.n	800af9a <TIM_OC3_SetConfig+0xaa>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a1a      	ldr	r2, [pc, #104]	; (800aff8 <TIM_OC3_SetConfig+0x108>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d003      	beq.n	800af9a <TIM_OC3_SetConfig+0xaa>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a19      	ldr	r2, [pc, #100]	; (800affc <TIM_OC3_SetConfig+0x10c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d113      	bne.n	800afc2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	621a      	str	r2, [r3, #32]
}
 800afdc:	bf00      	nop
 800afde:	371c      	adds	r7, #28
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	fffeff8f 	.word	0xfffeff8f
 800afec:	40010000 	.word	0x40010000
 800aff0:	40010400 	.word	0x40010400
 800aff4:	40014000 	.word	0x40014000
 800aff8:	40014400 	.word	0x40014400
 800affc:	40014800 	.word	0x40014800

0800b000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b000:	b480      	push	{r7}
 800b002:	b087      	sub	sp, #28
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	4b24      	ldr	r3, [pc, #144]	; (800b0bc <TIM_OC4_SetConfig+0xbc>)
 800b02c:	4013      	ands	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4313      	orrs	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b04a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	031b      	lsls	r3, r3, #12
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	4313      	orrs	r3, r2
 800b056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a19      	ldr	r2, [pc, #100]	; (800b0c0 <TIM_OC4_SetConfig+0xc0>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d00f      	beq.n	800b080 <TIM_OC4_SetConfig+0x80>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a18      	ldr	r2, [pc, #96]	; (800b0c4 <TIM_OC4_SetConfig+0xc4>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00b      	beq.n	800b080 <TIM_OC4_SetConfig+0x80>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a17      	ldr	r2, [pc, #92]	; (800b0c8 <TIM_OC4_SetConfig+0xc8>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d007      	beq.n	800b080 <TIM_OC4_SetConfig+0x80>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a16      	ldr	r2, [pc, #88]	; (800b0cc <TIM_OC4_SetConfig+0xcc>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d003      	beq.n	800b080 <TIM_OC4_SetConfig+0x80>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a15      	ldr	r2, [pc, #84]	; (800b0d0 <TIM_OC4_SetConfig+0xd0>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d109      	bne.n	800b094 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	695b      	ldr	r3, [r3, #20]
 800b08c:	019b      	lsls	r3, r3, #6
 800b08e:	697a      	ldr	r2, [r7, #20]
 800b090:	4313      	orrs	r3, r2
 800b092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	685a      	ldr	r2, [r3, #4]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	621a      	str	r2, [r3, #32]
}
 800b0ae:	bf00      	nop
 800b0b0:	371c      	adds	r7, #28
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	feff8fff 	.word	0xfeff8fff
 800b0c0:	40010000 	.word	0x40010000
 800b0c4:	40010400 	.word	0x40010400
 800b0c8:	40014000 	.word	0x40014000
 800b0cc:	40014400 	.word	0x40014400
 800b0d0:	40014800 	.word	0x40014800

0800b0d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4b21      	ldr	r3, [pc, #132]	; (800b184 <TIM_OC5_SetConfig+0xb0>)
 800b100:	4013      	ands	r3, r2
 800b102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b114:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	041b      	lsls	r3, r3, #16
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	4313      	orrs	r3, r2
 800b120:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a18      	ldr	r2, [pc, #96]	; (800b188 <TIM_OC5_SetConfig+0xb4>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d00f      	beq.n	800b14a <TIM_OC5_SetConfig+0x76>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a17      	ldr	r2, [pc, #92]	; (800b18c <TIM_OC5_SetConfig+0xb8>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00b      	beq.n	800b14a <TIM_OC5_SetConfig+0x76>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a16      	ldr	r2, [pc, #88]	; (800b190 <TIM_OC5_SetConfig+0xbc>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d007      	beq.n	800b14a <TIM_OC5_SetConfig+0x76>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a15      	ldr	r2, [pc, #84]	; (800b194 <TIM_OC5_SetConfig+0xc0>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d003      	beq.n	800b14a <TIM_OC5_SetConfig+0x76>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a14      	ldr	r2, [pc, #80]	; (800b198 <TIM_OC5_SetConfig+0xc4>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d109      	bne.n	800b15e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b150:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	695b      	ldr	r3, [r3, #20]
 800b156:	021b      	lsls	r3, r3, #8
 800b158:	697a      	ldr	r2, [r7, #20]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	697a      	ldr	r2, [r7, #20]
 800b162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	621a      	str	r2, [r3, #32]
}
 800b178:	bf00      	nop
 800b17a:	371c      	adds	r7, #28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	fffeff8f 	.word	0xfffeff8f
 800b188:	40010000 	.word	0x40010000
 800b18c:	40010400 	.word	0x40010400
 800b190:	40014000 	.word	0x40014000
 800b194:	40014400 	.word	0x40014400
 800b198:	40014800 	.word	0x40014800

0800b19c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	4b22      	ldr	r3, [pc, #136]	; (800b250 <TIM_OC6_SetConfig+0xb4>)
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	021b      	lsls	r3, r3, #8
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	051b      	lsls	r3, r3, #20
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a19      	ldr	r2, [pc, #100]	; (800b254 <TIM_OC6_SetConfig+0xb8>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d00f      	beq.n	800b214 <TIM_OC6_SetConfig+0x78>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a18      	ldr	r2, [pc, #96]	; (800b258 <TIM_OC6_SetConfig+0xbc>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d00b      	beq.n	800b214 <TIM_OC6_SetConfig+0x78>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a17      	ldr	r2, [pc, #92]	; (800b25c <TIM_OC6_SetConfig+0xc0>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d007      	beq.n	800b214 <TIM_OC6_SetConfig+0x78>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a16      	ldr	r2, [pc, #88]	; (800b260 <TIM_OC6_SetConfig+0xc4>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d003      	beq.n	800b214 <TIM_OC6_SetConfig+0x78>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a15      	ldr	r2, [pc, #84]	; (800b264 <TIM_OC6_SetConfig+0xc8>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d109      	bne.n	800b228 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b21a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	029b      	lsls	r3, r3, #10
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	4313      	orrs	r3, r2
 800b226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	621a      	str	r2, [r3, #32]
}
 800b242:	bf00      	nop
 800b244:	371c      	adds	r7, #28
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	feff8fff 	.word	0xfeff8fff
 800b254:	40010000 	.word	0x40010000
 800b258:	40010400 	.word	0x40010400
 800b25c:	40014000 	.word	0x40014000
 800b260:	40014400 	.word	0x40014400
 800b264:	40014800 	.word	0x40014800

0800b268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b268:	b480      	push	{r7}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	f023 0201 	bic.w	r2, r3, #1
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	011b      	lsls	r3, r3, #4
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f023 030a 	bic.w	r3, r3, #10
 800b2a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	621a      	str	r2, [r3, #32]
}
 800b2ba:	bf00      	nop
 800b2bc:	371c      	adds	r7, #28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b087      	sub	sp, #28
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	60b9      	str	r1, [r7, #8]
 800b2d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	f023 0210 	bic.w	r2, r3, #16
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	031b      	lsls	r3, r3, #12
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	621a      	str	r2, [r3, #32]
}
 800b31a:	bf00      	nop
 800b31c:	371c      	adds	r7, #28
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
	...

0800b328 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	4b09      	ldr	r3, [pc, #36]	; (800b360 <TIM_ITRx_SetConfig+0x38>)
 800b33c:	4013      	ands	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4313      	orrs	r3, r2
 800b346:	f043 0307 	orr.w	r3, r3, #7
 800b34a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	609a      	str	r2, [r3, #8]
}
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	ffcfff8f 	.word	0xffcfff8f

0800b364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b37e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	021a      	lsls	r2, r3, #8
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	431a      	orrs	r2, r3
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	4313      	orrs	r3, r2
 800b390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	609a      	str	r2, [r3, #8]
}
 800b398:	bf00      	nop
 800b39a:	371c      	adds	r7, #28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	f003 031f 	and.w	r3, r3, #31
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6a1a      	ldr	r2, [r3, #32]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	43db      	mvns	r3, r3
 800b3c6:	401a      	ands	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6a1a      	ldr	r2, [r3, #32]
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f003 031f 	and.w	r3, r3, #31
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	621a      	str	r2, [r3, #32]
}
 800b3e2:	bf00      	nop
 800b3e4:	371c      	adds	r7, #28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
	...

0800b3f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b400:	2b01      	cmp	r3, #1
 800b402:	d101      	bne.n	800b408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b404:	2302      	movs	r3, #2
 800b406:	e06d      	b.n	800b4e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2202      	movs	r2, #2
 800b414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a30      	ldr	r2, [pc, #192]	; (800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d004      	beq.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a2f      	ldr	r2, [pc, #188]	; (800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d108      	bne.n	800b44e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b442:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b454:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a20      	ldr	r2, [pc, #128]	; (800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d022      	beq.n	800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b47a:	d01d      	beq.n	800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a1d      	ldr	r2, [pc, #116]	; (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d018      	beq.n	800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a1c      	ldr	r2, [pc, #112]	; (800b4fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d013      	beq.n	800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a1a      	ldr	r2, [pc, #104]	; (800b500 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d00e      	beq.n	800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a15      	ldr	r2, [pc, #84]	; (800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d009      	beq.n	800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a16      	ldr	r2, [pc, #88]	; (800b504 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d004      	beq.n	800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a15      	ldr	r2, [pc, #84]	; (800b508 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d10c      	bne.n	800b4d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	40010000 	.word	0x40010000
 800b4f4:	40010400 	.word	0x40010400
 800b4f8:	40000400 	.word	0x40000400
 800b4fc:	40000800 	.word	0x40000800
 800b500:	40000c00 	.word	0x40000c00
 800b504:	40001800 	.word	0x40001800
 800b508:	40014000 	.word	0x40014000

0800b50c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d101      	bne.n	800b51e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e042      	b.n	800b5a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b524:	2b00      	cmp	r3, #0
 800b526:	d106      	bne.n	800b536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7f7 f845 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2224      	movs	r2, #36	; 0x24
 800b53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f022 0201 	bic.w	r2, r2, #1
 800b54c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f8ba 	bl	800b6c8 <UART_SetConfig>
 800b554:	4603      	mov	r3, r0
 800b556:	2b01      	cmp	r3, #1
 800b558:	d101      	bne.n	800b55e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e022      	b.n	800b5a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fe16 	bl	800c198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b57a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689a      	ldr	r2, [r3, #8]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b58a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f042 0201 	orr.w	r2, r2, #1
 800b59a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fe9d 	bl	800c2dc <UART_CheckIdleState>
 800b5a2:	4603      	mov	r3, r0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08a      	sub	sp, #40	; 0x28
 800b5b0:	af02      	add	r7, sp, #8
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	603b      	str	r3, [r7, #0]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c2:	2b20      	cmp	r3, #32
 800b5c4:	d17b      	bne.n	800b6be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <HAL_UART_Transmit+0x26>
 800b5cc:	88fb      	ldrh	r3, [r7, #6]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d101      	bne.n	800b5d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e074      	b.n	800b6c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2221      	movs	r2, #33	; 0x21
 800b5e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5e6:	f7f7 fbd3 	bl	8002d90 <HAL_GetTick>
 800b5ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	88fa      	ldrh	r2, [r7, #6]
 800b5f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	88fa      	ldrh	r2, [r7, #6]
 800b5f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b604:	d108      	bne.n	800b618 <HAL_UART_Transmit+0x6c>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d104      	bne.n	800b618 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b60e:	2300      	movs	r3, #0
 800b610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	61bb      	str	r3, [r7, #24]
 800b616:	e003      	b.n	800b620 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b620:	e030      	b.n	800b684 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2200      	movs	r2, #0
 800b62a:	2180      	movs	r1, #128	; 0x80
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f000 feff 	bl	800c430 <UART_WaitOnFlagUntilTimeout>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d005      	beq.n	800b644 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2220      	movs	r2, #32
 800b63c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b640:	2303      	movs	r3, #3
 800b642:	e03d      	b.n	800b6c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10b      	bne.n	800b662 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	461a      	mov	r2, r3
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	3302      	adds	r3, #2
 800b65e:	61bb      	str	r3, [r7, #24]
 800b660:	e007      	b.n	800b672 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	781a      	ldrb	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	3301      	adds	r3, #1
 800b670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b678:	b29b      	uxth	r3, r3
 800b67a:	3b01      	subs	r3, #1
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1c8      	bne.n	800b622 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	2200      	movs	r2, #0
 800b698:	2140      	movs	r1, #64	; 0x40
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 fec8 	bl	800c430 <UART_WaitOnFlagUntilTimeout>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e006      	b.n	800b6c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2220      	movs	r2, #32
 800b6b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e000      	b.n	800b6c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b6be:	2302      	movs	r3, #2
  }
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3720      	adds	r7, #32
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6cc:	b092      	sub	sp, #72	; 0x48
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	689a      	ldr	r2, [r3, #8]
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	431a      	orrs	r2, r3
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	431a      	orrs	r2, r3
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	69db      	ldr	r3, [r3, #28]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	4bbe      	ldr	r3, [pc, #760]	; (800b9f0 <UART_SetConfig+0x328>)
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	6812      	ldr	r2, [r2, #0]
 800b6fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b700:	430b      	orrs	r3, r1
 800b702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	68da      	ldr	r2, [r3, #12]
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	430a      	orrs	r2, r1
 800b718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4ab3      	ldr	r2, [pc, #716]	; (800b9f4 <UART_SetConfig+0x32c>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d004      	beq.n	800b734 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b730:	4313      	orrs	r3, r2
 800b732:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	689a      	ldr	r2, [r3, #8]
 800b73a:	4baf      	ldr	r3, [pc, #700]	; (800b9f8 <UART_SetConfig+0x330>)
 800b73c:	4013      	ands	r3, r2
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	6812      	ldr	r2, [r2, #0]
 800b742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b744:	430b      	orrs	r3, r1
 800b746:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74e:	f023 010f 	bic.w	r1, r3, #15
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	430a      	orrs	r2, r1
 800b75c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4aa6      	ldr	r2, [pc, #664]	; (800b9fc <UART_SetConfig+0x334>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d177      	bne.n	800b858 <UART_SetConfig+0x190>
 800b768:	4ba5      	ldr	r3, [pc, #660]	; (800ba00 <UART_SetConfig+0x338>)
 800b76a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b76c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b770:	2b28      	cmp	r3, #40	; 0x28
 800b772:	d86d      	bhi.n	800b850 <UART_SetConfig+0x188>
 800b774:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <UART_SetConfig+0xb4>)
 800b776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77a:	bf00      	nop
 800b77c:	0800b821 	.word	0x0800b821
 800b780:	0800b851 	.word	0x0800b851
 800b784:	0800b851 	.word	0x0800b851
 800b788:	0800b851 	.word	0x0800b851
 800b78c:	0800b851 	.word	0x0800b851
 800b790:	0800b851 	.word	0x0800b851
 800b794:	0800b851 	.word	0x0800b851
 800b798:	0800b851 	.word	0x0800b851
 800b79c:	0800b829 	.word	0x0800b829
 800b7a0:	0800b851 	.word	0x0800b851
 800b7a4:	0800b851 	.word	0x0800b851
 800b7a8:	0800b851 	.word	0x0800b851
 800b7ac:	0800b851 	.word	0x0800b851
 800b7b0:	0800b851 	.word	0x0800b851
 800b7b4:	0800b851 	.word	0x0800b851
 800b7b8:	0800b851 	.word	0x0800b851
 800b7bc:	0800b831 	.word	0x0800b831
 800b7c0:	0800b851 	.word	0x0800b851
 800b7c4:	0800b851 	.word	0x0800b851
 800b7c8:	0800b851 	.word	0x0800b851
 800b7cc:	0800b851 	.word	0x0800b851
 800b7d0:	0800b851 	.word	0x0800b851
 800b7d4:	0800b851 	.word	0x0800b851
 800b7d8:	0800b851 	.word	0x0800b851
 800b7dc:	0800b839 	.word	0x0800b839
 800b7e0:	0800b851 	.word	0x0800b851
 800b7e4:	0800b851 	.word	0x0800b851
 800b7e8:	0800b851 	.word	0x0800b851
 800b7ec:	0800b851 	.word	0x0800b851
 800b7f0:	0800b851 	.word	0x0800b851
 800b7f4:	0800b851 	.word	0x0800b851
 800b7f8:	0800b851 	.word	0x0800b851
 800b7fc:	0800b841 	.word	0x0800b841
 800b800:	0800b851 	.word	0x0800b851
 800b804:	0800b851 	.word	0x0800b851
 800b808:	0800b851 	.word	0x0800b851
 800b80c:	0800b851 	.word	0x0800b851
 800b810:	0800b851 	.word	0x0800b851
 800b814:	0800b851 	.word	0x0800b851
 800b818:	0800b851 	.word	0x0800b851
 800b81c:	0800b849 	.word	0x0800b849
 800b820:	2301      	movs	r3, #1
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b826:	e222      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b828:	2304      	movs	r3, #4
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b82e:	e21e      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b830:	2308      	movs	r3, #8
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b836:	e21a      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b838:	2310      	movs	r3, #16
 800b83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b83e:	e216      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b840:	2320      	movs	r3, #32
 800b842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b846:	e212      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b848:	2340      	movs	r3, #64	; 0x40
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b84e:	e20e      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b850:	2380      	movs	r3, #128	; 0x80
 800b852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b856:	e20a      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a69      	ldr	r2, [pc, #420]	; (800ba04 <UART_SetConfig+0x33c>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d130      	bne.n	800b8c4 <UART_SetConfig+0x1fc>
 800b862:	4b67      	ldr	r3, [pc, #412]	; (800ba00 <UART_SetConfig+0x338>)
 800b864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	2b05      	cmp	r3, #5
 800b86c:	d826      	bhi.n	800b8bc <UART_SetConfig+0x1f4>
 800b86e:	a201      	add	r2, pc, #4	; (adr r2, 800b874 <UART_SetConfig+0x1ac>)
 800b870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b874:	0800b88d 	.word	0x0800b88d
 800b878:	0800b895 	.word	0x0800b895
 800b87c:	0800b89d 	.word	0x0800b89d
 800b880:	0800b8a5 	.word	0x0800b8a5
 800b884:	0800b8ad 	.word	0x0800b8ad
 800b888:	0800b8b5 	.word	0x0800b8b5
 800b88c:	2300      	movs	r3, #0
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b892:	e1ec      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b894:	2304      	movs	r3, #4
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b89a:	e1e8      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b89c:	2308      	movs	r3, #8
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8a2:	e1e4      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8aa:	e1e0      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b8ac:	2320      	movs	r3, #32
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8b2:	e1dc      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b8b4:	2340      	movs	r3, #64	; 0x40
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ba:	e1d8      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b8bc:	2380      	movs	r3, #128	; 0x80
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8c2:	e1d4      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a4f      	ldr	r2, [pc, #316]	; (800ba08 <UART_SetConfig+0x340>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d130      	bne.n	800b930 <UART_SetConfig+0x268>
 800b8ce:	4b4c      	ldr	r3, [pc, #304]	; (800ba00 <UART_SetConfig+0x338>)
 800b8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	2b05      	cmp	r3, #5
 800b8d8:	d826      	bhi.n	800b928 <UART_SetConfig+0x260>
 800b8da:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <UART_SetConfig+0x218>)
 800b8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e0:	0800b8f9 	.word	0x0800b8f9
 800b8e4:	0800b901 	.word	0x0800b901
 800b8e8:	0800b909 	.word	0x0800b909
 800b8ec:	0800b911 	.word	0x0800b911
 800b8f0:	0800b919 	.word	0x0800b919
 800b8f4:	0800b921 	.word	0x0800b921
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8fe:	e1b6      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b900:	2304      	movs	r3, #4
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b906:	e1b2      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b908:	2308      	movs	r3, #8
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b90e:	e1ae      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b910:	2310      	movs	r3, #16
 800b912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b916:	e1aa      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b918:	2320      	movs	r3, #32
 800b91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b91e:	e1a6      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b920:	2340      	movs	r3, #64	; 0x40
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b926:	e1a2      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b928:	2380      	movs	r3, #128	; 0x80
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92e:	e19e      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a35      	ldr	r2, [pc, #212]	; (800ba0c <UART_SetConfig+0x344>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d130      	bne.n	800b99c <UART_SetConfig+0x2d4>
 800b93a:	4b31      	ldr	r3, [pc, #196]	; (800ba00 <UART_SetConfig+0x338>)
 800b93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93e:	f003 0307 	and.w	r3, r3, #7
 800b942:	2b05      	cmp	r3, #5
 800b944:	d826      	bhi.n	800b994 <UART_SetConfig+0x2cc>
 800b946:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <UART_SetConfig+0x284>)
 800b948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94c:	0800b965 	.word	0x0800b965
 800b950:	0800b96d 	.word	0x0800b96d
 800b954:	0800b975 	.word	0x0800b975
 800b958:	0800b97d 	.word	0x0800b97d
 800b95c:	0800b985 	.word	0x0800b985
 800b960:	0800b98d 	.word	0x0800b98d
 800b964:	2300      	movs	r3, #0
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b96a:	e180      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b96c:	2304      	movs	r3, #4
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b972:	e17c      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b974:	2308      	movs	r3, #8
 800b976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b97a:	e178      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b97c:	2310      	movs	r3, #16
 800b97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b982:	e174      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b984:	2320      	movs	r3, #32
 800b986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b98a:	e170      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b98c:	2340      	movs	r3, #64	; 0x40
 800b98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b992:	e16c      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b994:	2380      	movs	r3, #128	; 0x80
 800b996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b99a:	e168      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a1b      	ldr	r2, [pc, #108]	; (800ba10 <UART_SetConfig+0x348>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d142      	bne.n	800ba2c <UART_SetConfig+0x364>
 800b9a6:	4b16      	ldr	r3, [pc, #88]	; (800ba00 <UART_SetConfig+0x338>)
 800b9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9aa:	f003 0307 	and.w	r3, r3, #7
 800b9ae:	2b05      	cmp	r3, #5
 800b9b0:	d838      	bhi.n	800ba24 <UART_SetConfig+0x35c>
 800b9b2:	a201      	add	r2, pc, #4	; (adr r2, 800b9b8 <UART_SetConfig+0x2f0>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800b9d1 	.word	0x0800b9d1
 800b9bc:	0800b9d9 	.word	0x0800b9d9
 800b9c0:	0800b9e1 	.word	0x0800b9e1
 800b9c4:	0800b9e9 	.word	0x0800b9e9
 800b9c8:	0800ba15 	.word	0x0800ba15
 800b9cc:	0800ba1d 	.word	0x0800ba1d
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9d6:	e14a      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b9d8:	2304      	movs	r3, #4
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9de:	e146      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b9e0:	2308      	movs	r3, #8
 800b9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9e6:	e142      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ee:	e13e      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800b9f0:	cfff69f3 	.word	0xcfff69f3
 800b9f4:	58000c00 	.word	0x58000c00
 800b9f8:	11fff4ff 	.word	0x11fff4ff
 800b9fc:	40011000 	.word	0x40011000
 800ba00:	58024400 	.word	0x58024400
 800ba04:	40004400 	.word	0x40004400
 800ba08:	40004800 	.word	0x40004800
 800ba0c:	40004c00 	.word	0x40004c00
 800ba10:	40005000 	.word	0x40005000
 800ba14:	2320      	movs	r3, #32
 800ba16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba1a:	e128      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800ba1c:	2340      	movs	r3, #64	; 0x40
 800ba1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba22:	e124      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800ba24:	2380      	movs	r3, #128	; 0x80
 800ba26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba2a:	e120      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4acb      	ldr	r2, [pc, #812]	; (800bd60 <UART_SetConfig+0x698>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d176      	bne.n	800bb24 <UART_SetConfig+0x45c>
 800ba36:	4bcb      	ldr	r3, [pc, #812]	; (800bd64 <UART_SetConfig+0x69c>)
 800ba38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba3e:	2b28      	cmp	r3, #40	; 0x28
 800ba40:	d86c      	bhi.n	800bb1c <UART_SetConfig+0x454>
 800ba42:	a201      	add	r2, pc, #4	; (adr r2, 800ba48 <UART_SetConfig+0x380>)
 800ba44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba48:	0800baed 	.word	0x0800baed
 800ba4c:	0800bb1d 	.word	0x0800bb1d
 800ba50:	0800bb1d 	.word	0x0800bb1d
 800ba54:	0800bb1d 	.word	0x0800bb1d
 800ba58:	0800bb1d 	.word	0x0800bb1d
 800ba5c:	0800bb1d 	.word	0x0800bb1d
 800ba60:	0800bb1d 	.word	0x0800bb1d
 800ba64:	0800bb1d 	.word	0x0800bb1d
 800ba68:	0800baf5 	.word	0x0800baf5
 800ba6c:	0800bb1d 	.word	0x0800bb1d
 800ba70:	0800bb1d 	.word	0x0800bb1d
 800ba74:	0800bb1d 	.word	0x0800bb1d
 800ba78:	0800bb1d 	.word	0x0800bb1d
 800ba7c:	0800bb1d 	.word	0x0800bb1d
 800ba80:	0800bb1d 	.word	0x0800bb1d
 800ba84:	0800bb1d 	.word	0x0800bb1d
 800ba88:	0800bafd 	.word	0x0800bafd
 800ba8c:	0800bb1d 	.word	0x0800bb1d
 800ba90:	0800bb1d 	.word	0x0800bb1d
 800ba94:	0800bb1d 	.word	0x0800bb1d
 800ba98:	0800bb1d 	.word	0x0800bb1d
 800ba9c:	0800bb1d 	.word	0x0800bb1d
 800baa0:	0800bb1d 	.word	0x0800bb1d
 800baa4:	0800bb1d 	.word	0x0800bb1d
 800baa8:	0800bb05 	.word	0x0800bb05
 800baac:	0800bb1d 	.word	0x0800bb1d
 800bab0:	0800bb1d 	.word	0x0800bb1d
 800bab4:	0800bb1d 	.word	0x0800bb1d
 800bab8:	0800bb1d 	.word	0x0800bb1d
 800babc:	0800bb1d 	.word	0x0800bb1d
 800bac0:	0800bb1d 	.word	0x0800bb1d
 800bac4:	0800bb1d 	.word	0x0800bb1d
 800bac8:	0800bb0d 	.word	0x0800bb0d
 800bacc:	0800bb1d 	.word	0x0800bb1d
 800bad0:	0800bb1d 	.word	0x0800bb1d
 800bad4:	0800bb1d 	.word	0x0800bb1d
 800bad8:	0800bb1d 	.word	0x0800bb1d
 800badc:	0800bb1d 	.word	0x0800bb1d
 800bae0:	0800bb1d 	.word	0x0800bb1d
 800bae4:	0800bb1d 	.word	0x0800bb1d
 800bae8:	0800bb15 	.word	0x0800bb15
 800baec:	2301      	movs	r3, #1
 800baee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baf2:	e0bc      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800baf4:	2304      	movs	r3, #4
 800baf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bafa:	e0b8      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bafc:	2308      	movs	r3, #8
 800bafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb02:	e0b4      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb04:	2310      	movs	r3, #16
 800bb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb0a:	e0b0      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb0c:	2320      	movs	r3, #32
 800bb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb12:	e0ac      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb14:	2340      	movs	r3, #64	; 0x40
 800bb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb1a:	e0a8      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb1c:	2380      	movs	r3, #128	; 0x80
 800bb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb22:	e0a4      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a8f      	ldr	r2, [pc, #572]	; (800bd68 <UART_SetConfig+0x6a0>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d130      	bne.n	800bb90 <UART_SetConfig+0x4c8>
 800bb2e:	4b8d      	ldr	r3, [pc, #564]	; (800bd64 <UART_SetConfig+0x69c>)
 800bb30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb32:	f003 0307 	and.w	r3, r3, #7
 800bb36:	2b05      	cmp	r3, #5
 800bb38:	d826      	bhi.n	800bb88 <UART_SetConfig+0x4c0>
 800bb3a:	a201      	add	r2, pc, #4	; (adr r2, 800bb40 <UART_SetConfig+0x478>)
 800bb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb40:	0800bb59 	.word	0x0800bb59
 800bb44:	0800bb61 	.word	0x0800bb61
 800bb48:	0800bb69 	.word	0x0800bb69
 800bb4c:	0800bb71 	.word	0x0800bb71
 800bb50:	0800bb79 	.word	0x0800bb79
 800bb54:	0800bb81 	.word	0x0800bb81
 800bb58:	2300      	movs	r3, #0
 800bb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb5e:	e086      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb60:	2304      	movs	r3, #4
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb66:	e082      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb68:	2308      	movs	r3, #8
 800bb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb6e:	e07e      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb70:	2310      	movs	r3, #16
 800bb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb76:	e07a      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb78:	2320      	movs	r3, #32
 800bb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb7e:	e076      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb80:	2340      	movs	r3, #64	; 0x40
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb86:	e072      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb88:	2380      	movs	r3, #128	; 0x80
 800bb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb8e:	e06e      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a75      	ldr	r2, [pc, #468]	; (800bd6c <UART_SetConfig+0x6a4>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d130      	bne.n	800bbfc <UART_SetConfig+0x534>
 800bb9a:	4b72      	ldr	r3, [pc, #456]	; (800bd64 <UART_SetConfig+0x69c>)
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9e:	f003 0307 	and.w	r3, r3, #7
 800bba2:	2b05      	cmp	r3, #5
 800bba4:	d826      	bhi.n	800bbf4 <UART_SetConfig+0x52c>
 800bba6:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <UART_SetConfig+0x4e4>)
 800bba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbac:	0800bbc5 	.word	0x0800bbc5
 800bbb0:	0800bbcd 	.word	0x0800bbcd
 800bbb4:	0800bbd5 	.word	0x0800bbd5
 800bbb8:	0800bbdd 	.word	0x0800bbdd
 800bbbc:	0800bbe5 	.word	0x0800bbe5
 800bbc0:	0800bbed 	.word	0x0800bbed
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbca:	e050      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bbcc:	2304      	movs	r3, #4
 800bbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbd2:	e04c      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bbd4:	2308      	movs	r3, #8
 800bbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbda:	e048      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bbdc:	2310      	movs	r3, #16
 800bbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbe2:	e044      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bbe4:	2320      	movs	r3, #32
 800bbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbea:	e040      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bbec:	2340      	movs	r3, #64	; 0x40
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbf2:	e03c      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bbf4:	2380      	movs	r3, #128	; 0x80
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbfa:	e038      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a5b      	ldr	r2, [pc, #364]	; (800bd70 <UART_SetConfig+0x6a8>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d130      	bne.n	800bc68 <UART_SetConfig+0x5a0>
 800bc06:	4b57      	ldr	r3, [pc, #348]	; (800bd64 <UART_SetConfig+0x69c>)
 800bc08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0a:	f003 0307 	and.w	r3, r3, #7
 800bc0e:	2b05      	cmp	r3, #5
 800bc10:	d826      	bhi.n	800bc60 <UART_SetConfig+0x598>
 800bc12:	a201      	add	r2, pc, #4	; (adr r2, 800bc18 <UART_SetConfig+0x550>)
 800bc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc18:	0800bc31 	.word	0x0800bc31
 800bc1c:	0800bc39 	.word	0x0800bc39
 800bc20:	0800bc41 	.word	0x0800bc41
 800bc24:	0800bc49 	.word	0x0800bc49
 800bc28:	0800bc51 	.word	0x0800bc51
 800bc2c:	0800bc59 	.word	0x0800bc59
 800bc30:	2302      	movs	r3, #2
 800bc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc36:	e01a      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bc38:	2304      	movs	r3, #4
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc3e:	e016      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bc40:	2308      	movs	r3, #8
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc46:	e012      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bc48:	2310      	movs	r3, #16
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc4e:	e00e      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bc50:	2320      	movs	r3, #32
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc56:	e00a      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bc58:	2340      	movs	r3, #64	; 0x40
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc5e:	e006      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bc60:	2380      	movs	r3, #128	; 0x80
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc66:	e002      	b.n	800bc6e <UART_SetConfig+0x5a6>
 800bc68:	2380      	movs	r3, #128	; 0x80
 800bc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a3f      	ldr	r2, [pc, #252]	; (800bd70 <UART_SetConfig+0x6a8>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	f040 80f8 	bne.w	800be6a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bc7e:	2b20      	cmp	r3, #32
 800bc80:	dc46      	bgt.n	800bd10 <UART_SetConfig+0x648>
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	f2c0 8082 	blt.w	800bd8c <UART_SetConfig+0x6c4>
 800bc88:	3b02      	subs	r3, #2
 800bc8a:	2b1e      	cmp	r3, #30
 800bc8c:	d87e      	bhi.n	800bd8c <UART_SetConfig+0x6c4>
 800bc8e:	a201      	add	r2, pc, #4	; (adr r2, 800bc94 <UART_SetConfig+0x5cc>)
 800bc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc94:	0800bd17 	.word	0x0800bd17
 800bc98:	0800bd8d 	.word	0x0800bd8d
 800bc9c:	0800bd1f 	.word	0x0800bd1f
 800bca0:	0800bd8d 	.word	0x0800bd8d
 800bca4:	0800bd8d 	.word	0x0800bd8d
 800bca8:	0800bd8d 	.word	0x0800bd8d
 800bcac:	0800bd2f 	.word	0x0800bd2f
 800bcb0:	0800bd8d 	.word	0x0800bd8d
 800bcb4:	0800bd8d 	.word	0x0800bd8d
 800bcb8:	0800bd8d 	.word	0x0800bd8d
 800bcbc:	0800bd8d 	.word	0x0800bd8d
 800bcc0:	0800bd8d 	.word	0x0800bd8d
 800bcc4:	0800bd8d 	.word	0x0800bd8d
 800bcc8:	0800bd8d 	.word	0x0800bd8d
 800bccc:	0800bd3f 	.word	0x0800bd3f
 800bcd0:	0800bd8d 	.word	0x0800bd8d
 800bcd4:	0800bd8d 	.word	0x0800bd8d
 800bcd8:	0800bd8d 	.word	0x0800bd8d
 800bcdc:	0800bd8d 	.word	0x0800bd8d
 800bce0:	0800bd8d 	.word	0x0800bd8d
 800bce4:	0800bd8d 	.word	0x0800bd8d
 800bce8:	0800bd8d 	.word	0x0800bd8d
 800bcec:	0800bd8d 	.word	0x0800bd8d
 800bcf0:	0800bd8d 	.word	0x0800bd8d
 800bcf4:	0800bd8d 	.word	0x0800bd8d
 800bcf8:	0800bd8d 	.word	0x0800bd8d
 800bcfc:	0800bd8d 	.word	0x0800bd8d
 800bd00:	0800bd8d 	.word	0x0800bd8d
 800bd04:	0800bd8d 	.word	0x0800bd8d
 800bd08:	0800bd8d 	.word	0x0800bd8d
 800bd0c:	0800bd7f 	.word	0x0800bd7f
 800bd10:	2b40      	cmp	r3, #64	; 0x40
 800bd12:	d037      	beq.n	800bd84 <UART_SetConfig+0x6bc>
 800bd14:	e03a      	b.n	800bd8c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bd16:	f7fc ffe3 	bl	8008ce0 <HAL_RCCEx_GetD3PCLK1Freq>
 800bd1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd1c:	e03c      	b.n	800bd98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fc fff2 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd2c:	e034      	b.n	800bd98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd2e:	f107 0318 	add.w	r3, r7, #24
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fd f93e 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd3c:	e02c      	b.n	800bd98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd3e:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <UART_SetConfig+0x69c>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0320 	and.w	r3, r3, #32
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d016      	beq.n	800bd78 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd4a:	4b06      	ldr	r3, [pc, #24]	; (800bd64 <UART_SetConfig+0x69c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	08db      	lsrs	r3, r3, #3
 800bd50:	f003 0303 	and.w	r3, r3, #3
 800bd54:	4a07      	ldr	r2, [pc, #28]	; (800bd74 <UART_SetConfig+0x6ac>)
 800bd56:	fa22 f303 	lsr.w	r3, r2, r3
 800bd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd5c:	e01c      	b.n	800bd98 <UART_SetConfig+0x6d0>
 800bd5e:	bf00      	nop
 800bd60:	40011400 	.word	0x40011400
 800bd64:	58024400 	.word	0x58024400
 800bd68:	40007800 	.word	0x40007800
 800bd6c:	40007c00 	.word	0x40007c00
 800bd70:	58000c00 	.word	0x58000c00
 800bd74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bd78:	4b9d      	ldr	r3, [pc, #628]	; (800bff0 <UART_SetConfig+0x928>)
 800bd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd7c:	e00c      	b.n	800bd98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd7e:	4b9d      	ldr	r3, [pc, #628]	; (800bff4 <UART_SetConfig+0x92c>)
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd82:	e009      	b.n	800bd98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd8a:	e005      	b.n	800bd98 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bd96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 81de 	beq.w	800c15c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	4a94      	ldr	r2, [pc, #592]	; (800bff8 <UART_SetConfig+0x930>)
 800bda6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdae:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdb2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	005b      	lsls	r3, r3, #1
 800bdbc:	4413      	add	r3, r2
 800bdbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d305      	bcc.n	800bdd0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d903      	bls.n	800bdd8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bdd6:	e1c1      	b.n	800c15c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdda:	2200      	movs	r2, #0
 800bddc:	60bb      	str	r3, [r7, #8]
 800bdde:	60fa      	str	r2, [r7, #12]
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	4a84      	ldr	r2, [pc, #528]	; (800bff8 <UART_SetConfig+0x930>)
 800bde6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	2200      	movs	r2, #0
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	607a      	str	r2, [r7, #4]
 800bdf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bdfa:	f7f4 fac9 	bl	8000390 <__aeabi_uldivmod>
 800bdfe:	4602      	mov	r2, r0
 800be00:	460b      	mov	r3, r1
 800be02:	4610      	mov	r0, r2
 800be04:	4619      	mov	r1, r3
 800be06:	f04f 0200 	mov.w	r2, #0
 800be0a:	f04f 0300 	mov.w	r3, #0
 800be0e:	020b      	lsls	r3, r1, #8
 800be10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be14:	0202      	lsls	r2, r0, #8
 800be16:	6979      	ldr	r1, [r7, #20]
 800be18:	6849      	ldr	r1, [r1, #4]
 800be1a:	0849      	lsrs	r1, r1, #1
 800be1c:	2000      	movs	r0, #0
 800be1e:	460c      	mov	r4, r1
 800be20:	4605      	mov	r5, r0
 800be22:	eb12 0804 	adds.w	r8, r2, r4
 800be26:	eb43 0905 	adc.w	r9, r3, r5
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	469a      	mov	sl, r3
 800be32:	4693      	mov	fp, r2
 800be34:	4652      	mov	r2, sl
 800be36:	465b      	mov	r3, fp
 800be38:	4640      	mov	r0, r8
 800be3a:	4649      	mov	r1, r9
 800be3c:	f7f4 faa8 	bl	8000390 <__aeabi_uldivmod>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4613      	mov	r3, r2
 800be46:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be4e:	d308      	bcc.n	800be62 <UART_SetConfig+0x79a>
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be56:	d204      	bcs.n	800be62 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be5e:	60da      	str	r2, [r3, #12]
 800be60:	e17c      	b.n	800c15c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800be68:	e178      	b.n	800c15c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be72:	f040 80c5 	bne.w	800c000 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800be76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800be7a:	2b20      	cmp	r3, #32
 800be7c:	dc48      	bgt.n	800bf10 <UART_SetConfig+0x848>
 800be7e:	2b00      	cmp	r3, #0
 800be80:	db7b      	blt.n	800bf7a <UART_SetConfig+0x8b2>
 800be82:	2b20      	cmp	r3, #32
 800be84:	d879      	bhi.n	800bf7a <UART_SetConfig+0x8b2>
 800be86:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <UART_SetConfig+0x7c4>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800bf17 	.word	0x0800bf17
 800be90:	0800bf1f 	.word	0x0800bf1f
 800be94:	0800bf7b 	.word	0x0800bf7b
 800be98:	0800bf7b 	.word	0x0800bf7b
 800be9c:	0800bf27 	.word	0x0800bf27
 800bea0:	0800bf7b 	.word	0x0800bf7b
 800bea4:	0800bf7b 	.word	0x0800bf7b
 800bea8:	0800bf7b 	.word	0x0800bf7b
 800beac:	0800bf37 	.word	0x0800bf37
 800beb0:	0800bf7b 	.word	0x0800bf7b
 800beb4:	0800bf7b 	.word	0x0800bf7b
 800beb8:	0800bf7b 	.word	0x0800bf7b
 800bebc:	0800bf7b 	.word	0x0800bf7b
 800bec0:	0800bf7b 	.word	0x0800bf7b
 800bec4:	0800bf7b 	.word	0x0800bf7b
 800bec8:	0800bf7b 	.word	0x0800bf7b
 800becc:	0800bf47 	.word	0x0800bf47
 800bed0:	0800bf7b 	.word	0x0800bf7b
 800bed4:	0800bf7b 	.word	0x0800bf7b
 800bed8:	0800bf7b 	.word	0x0800bf7b
 800bedc:	0800bf7b 	.word	0x0800bf7b
 800bee0:	0800bf7b 	.word	0x0800bf7b
 800bee4:	0800bf7b 	.word	0x0800bf7b
 800bee8:	0800bf7b 	.word	0x0800bf7b
 800beec:	0800bf7b 	.word	0x0800bf7b
 800bef0:	0800bf7b 	.word	0x0800bf7b
 800bef4:	0800bf7b 	.word	0x0800bf7b
 800bef8:	0800bf7b 	.word	0x0800bf7b
 800befc:	0800bf7b 	.word	0x0800bf7b
 800bf00:	0800bf7b 	.word	0x0800bf7b
 800bf04:	0800bf7b 	.word	0x0800bf7b
 800bf08:	0800bf7b 	.word	0x0800bf7b
 800bf0c:	0800bf6d 	.word	0x0800bf6d
 800bf10:	2b40      	cmp	r3, #64	; 0x40
 800bf12:	d02e      	beq.n	800bf72 <UART_SetConfig+0x8aa>
 800bf14:	e031      	b.n	800bf7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf16:	f7fa ff2d 	bl	8006d74 <HAL_RCC_GetPCLK1Freq>
 800bf1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf1c:	e033      	b.n	800bf86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf1e:	f7fa ff3f 	bl	8006da0 <HAL_RCC_GetPCLK2Freq>
 800bf22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf24:	e02f      	b.n	800bf86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fc feee 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf34:	e027      	b.n	800bf86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf36:	f107 0318 	add.w	r3, r7, #24
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fd f83a 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf44:	e01f      	b.n	800bf86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf46:	4b2d      	ldr	r3, [pc, #180]	; (800bffc <UART_SetConfig+0x934>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0320 	and.w	r3, r3, #32
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d009      	beq.n	800bf66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf52:	4b2a      	ldr	r3, [pc, #168]	; (800bffc <UART_SetConfig+0x934>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	08db      	lsrs	r3, r3, #3
 800bf58:	f003 0303 	and.w	r3, r3, #3
 800bf5c:	4a24      	ldr	r2, [pc, #144]	; (800bff0 <UART_SetConfig+0x928>)
 800bf5e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf64:	e00f      	b.n	800bf86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bf66:	4b22      	ldr	r3, [pc, #136]	; (800bff0 <UART_SetConfig+0x928>)
 800bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf6a:	e00c      	b.n	800bf86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf6c:	4b21      	ldr	r3, [pc, #132]	; (800bff4 <UART_SetConfig+0x92c>)
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf70:	e009      	b.n	800bf86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf78:	e005      	b.n	800bf86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bf84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 80e7 	beq.w	800c15c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf92:	4a19      	ldr	r2, [pc, #100]	; (800bff8 <UART_SetConfig+0x930>)
 800bf94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfa0:	005a      	lsls	r2, r3, #1
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	085b      	lsrs	r3, r3, #1
 800bfa8:	441a      	add	r2, r3
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfb2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	2b0f      	cmp	r3, #15
 800bfb8:	d916      	bls.n	800bfe8 <UART_SetConfig+0x920>
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc0:	d212      	bcs.n	800bfe8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	f023 030f 	bic.w	r3, r3, #15
 800bfca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	085b      	lsrs	r3, r3, #1
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	f003 0307 	and.w	r3, r3, #7
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bfe4:	60da      	str	r2, [r3, #12]
 800bfe6:	e0b9      	b.n	800c15c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bfee:	e0b5      	b.n	800c15c <UART_SetConfig+0xa94>
 800bff0:	03d09000 	.word	0x03d09000
 800bff4:	003d0900 	.word	0x003d0900
 800bff8:	0800e590 	.word	0x0800e590
 800bffc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c000:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c004:	2b20      	cmp	r3, #32
 800c006:	dc49      	bgt.n	800c09c <UART_SetConfig+0x9d4>
 800c008:	2b00      	cmp	r3, #0
 800c00a:	db7c      	blt.n	800c106 <UART_SetConfig+0xa3e>
 800c00c:	2b20      	cmp	r3, #32
 800c00e:	d87a      	bhi.n	800c106 <UART_SetConfig+0xa3e>
 800c010:	a201      	add	r2, pc, #4	; (adr r2, 800c018 <UART_SetConfig+0x950>)
 800c012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c016:	bf00      	nop
 800c018:	0800c0a3 	.word	0x0800c0a3
 800c01c:	0800c0ab 	.word	0x0800c0ab
 800c020:	0800c107 	.word	0x0800c107
 800c024:	0800c107 	.word	0x0800c107
 800c028:	0800c0b3 	.word	0x0800c0b3
 800c02c:	0800c107 	.word	0x0800c107
 800c030:	0800c107 	.word	0x0800c107
 800c034:	0800c107 	.word	0x0800c107
 800c038:	0800c0c3 	.word	0x0800c0c3
 800c03c:	0800c107 	.word	0x0800c107
 800c040:	0800c107 	.word	0x0800c107
 800c044:	0800c107 	.word	0x0800c107
 800c048:	0800c107 	.word	0x0800c107
 800c04c:	0800c107 	.word	0x0800c107
 800c050:	0800c107 	.word	0x0800c107
 800c054:	0800c107 	.word	0x0800c107
 800c058:	0800c0d3 	.word	0x0800c0d3
 800c05c:	0800c107 	.word	0x0800c107
 800c060:	0800c107 	.word	0x0800c107
 800c064:	0800c107 	.word	0x0800c107
 800c068:	0800c107 	.word	0x0800c107
 800c06c:	0800c107 	.word	0x0800c107
 800c070:	0800c107 	.word	0x0800c107
 800c074:	0800c107 	.word	0x0800c107
 800c078:	0800c107 	.word	0x0800c107
 800c07c:	0800c107 	.word	0x0800c107
 800c080:	0800c107 	.word	0x0800c107
 800c084:	0800c107 	.word	0x0800c107
 800c088:	0800c107 	.word	0x0800c107
 800c08c:	0800c107 	.word	0x0800c107
 800c090:	0800c107 	.word	0x0800c107
 800c094:	0800c107 	.word	0x0800c107
 800c098:	0800c0f9 	.word	0x0800c0f9
 800c09c:	2b40      	cmp	r3, #64	; 0x40
 800c09e:	d02e      	beq.n	800c0fe <UART_SetConfig+0xa36>
 800c0a0:	e031      	b.n	800c106 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0a2:	f7fa fe67 	bl	8006d74 <HAL_RCC_GetPCLK1Freq>
 800c0a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0a8:	e033      	b.n	800c112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0aa:	f7fa fe79 	bl	8006da0 <HAL_RCC_GetPCLK2Freq>
 800c0ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0b0:	e02f      	b.n	800c112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fc fe28 	bl	8008d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c0:	e027      	b.n	800c112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0c2:	f107 0318 	add.w	r3, r7, #24
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fc ff74 	bl	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d0:	e01f      	b.n	800c112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0d2:	4b2d      	ldr	r3, [pc, #180]	; (800c188 <UART_SetConfig+0xac0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 0320 	and.w	r3, r3, #32
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d009      	beq.n	800c0f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0de:	4b2a      	ldr	r3, [pc, #168]	; (800c188 <UART_SetConfig+0xac0>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	08db      	lsrs	r3, r3, #3
 800c0e4:	f003 0303 	and.w	r3, r3, #3
 800c0e8:	4a28      	ldr	r2, [pc, #160]	; (800c18c <UART_SetConfig+0xac4>)
 800c0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0f0:	e00f      	b.n	800c112 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c0f2:	4b26      	ldr	r3, [pc, #152]	; (800c18c <UART_SetConfig+0xac4>)
 800c0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f6:	e00c      	b.n	800c112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0f8:	4b25      	ldr	r3, [pc, #148]	; (800c190 <UART_SetConfig+0xac8>)
 800c0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0fc:	e009      	b.n	800c112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c104:	e005      	b.n	800c112 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c106:	2300      	movs	r3, #0
 800c108:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c110:	bf00      	nop
    }

    if (pclk != 0U)
 800c112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c114:	2b00      	cmp	r3, #0
 800c116:	d021      	beq.n	800c15c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11c:	4a1d      	ldr	r2, [pc, #116]	; (800c194 <UART_SetConfig+0xacc>)
 800c11e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c122:	461a      	mov	r2, r3
 800c124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c126:	fbb3 f2f2 	udiv	r2, r3, r2
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	085b      	lsrs	r3, r3, #1
 800c130:	441a      	add	r2, r3
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	fbb2 f3f3 	udiv	r3, r2, r3
 800c13a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13e:	2b0f      	cmp	r3, #15
 800c140:	d909      	bls.n	800c156 <UART_SetConfig+0xa8e>
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c148:	d205      	bcs.n	800c156 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	60da      	str	r2, [r3, #12]
 800c154:	e002      	b.n	800c15c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	2201      	movs	r2, #1
 800c160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2201      	movs	r2, #1
 800c168:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2200      	movs	r2, #0
 800c170:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2200      	movs	r2, #0
 800c176:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c178:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3748      	adds	r7, #72	; 0x48
 800c180:	46bd      	mov	sp, r7
 800c182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c186:	bf00      	nop
 800c188:	58024400 	.word	0x58024400
 800c18c:	03d09000 	.word	0x03d09000
 800c190:	003d0900 	.word	0x003d0900
 800c194:	0800e590 	.word	0x0800e590

0800c198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00a      	beq.n	800c1c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00a      	beq.n	800c1e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e8:	f003 0304 	and.w	r3, r3, #4
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00a      	beq.n	800c206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	430a      	orrs	r2, r1
 800c204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20a:	f003 0308 	and.w	r3, r3, #8
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00a      	beq.n	800c228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	430a      	orrs	r2, r1
 800c226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22c:	f003 0310 	and.w	r3, r3, #16
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00a      	beq.n	800c24a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24e:	f003 0320 	and.w	r3, r3, #32
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00a      	beq.n	800c26c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	430a      	orrs	r2, r1
 800c26a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01a      	beq.n	800c2ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	430a      	orrs	r2, r1
 800c28c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c296:	d10a      	bne.n	800c2ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	430a      	orrs	r2, r1
 800c2ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	430a      	orrs	r2, r1
 800c2ce:	605a      	str	r2, [r3, #4]
  }
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b098      	sub	sp, #96	; 0x60
 800c2e0:	af02      	add	r7, sp, #8
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2ec:	f7f6 fd50 	bl	8002d90 <HAL_GetTick>
 800c2f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 0308 	and.w	r3, r3, #8
 800c2fc:	2b08      	cmp	r3, #8
 800c2fe:	d12f      	bne.n	800c360 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c308:	2200      	movs	r2, #0
 800c30a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f88e 	bl	800c430 <UART_WaitOnFlagUntilTimeout>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d022      	beq.n	800c360 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c322:	e853 3f00 	ldrex	r3, [r3]
 800c326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c32e:	653b      	str	r3, [r7, #80]	; 0x50
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c338:	647b      	str	r3, [r7, #68]	; 0x44
 800c33a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c33e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c340:	e841 2300 	strex	r3, r2, [r1]
 800c344:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1e6      	bne.n	800c31a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2220      	movs	r2, #32
 800c350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c35c:	2303      	movs	r3, #3
 800c35e:	e063      	b.n	800c428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 0304 	and.w	r3, r3, #4
 800c36a:	2b04      	cmp	r3, #4
 800c36c:	d149      	bne.n	800c402 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c36e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c376:	2200      	movs	r2, #0
 800c378:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f857 	bl	800c430 <UART_WaitOnFlagUntilTimeout>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d03c      	beq.n	800c402 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c390:	e853 3f00 	ldrex	r3, [r3]
 800c394:	623b      	str	r3, [r7, #32]
   return(result);
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c39c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c3a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ae:	e841 2300 	strex	r3, r2, [r1]
 800c3b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1e6      	bne.n	800c388 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3308      	adds	r3, #8
 800c3c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	e853 3f00 	ldrex	r3, [r3]
 800c3c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f023 0301 	bic.w	r3, r3, #1
 800c3d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3da:	61fa      	str	r2, [r7, #28]
 800c3dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3de:	69b9      	ldr	r1, [r7, #24]
 800c3e0:	69fa      	ldr	r2, [r7, #28]
 800c3e2:	e841 2300 	strex	r3, r2, [r1]
 800c3e6:	617b      	str	r3, [r7, #20]
   return(result);
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1e5      	bne.n	800c3ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2220      	movs	r2, #32
 800c3f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	e012      	b.n	800c428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2220      	movs	r2, #32
 800c406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2220      	movs	r2, #32
 800c40e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3758      	adds	r7, #88	; 0x58
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	4613      	mov	r3, r2
 800c43e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c440:	e049      	b.n	800c4d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c448:	d045      	beq.n	800c4d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c44a:	f7f6 fca1 	bl	8002d90 <HAL_GetTick>
 800c44e:	4602      	mov	r2, r0
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	69ba      	ldr	r2, [r7, #24]
 800c456:	429a      	cmp	r2, r3
 800c458:	d302      	bcc.n	800c460 <UART_WaitOnFlagUntilTimeout+0x30>
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c460:	2303      	movs	r3, #3
 800c462:	e048      	b.n	800c4f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 0304 	and.w	r3, r3, #4
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d031      	beq.n	800c4d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	69db      	ldr	r3, [r3, #28]
 800c478:	f003 0308 	and.w	r3, r3, #8
 800c47c:	2b08      	cmp	r3, #8
 800c47e:	d110      	bne.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2208      	movs	r2, #8
 800c486:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f000 f839 	bl	800c500 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2208      	movs	r2, #8
 800c492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e029      	b.n	800c4f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	69db      	ldr	r3, [r3, #28]
 800c4a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4b0:	d111      	bne.n	800c4d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f000 f81f 	bl	800c500 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2220      	movs	r2, #32
 800c4c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c4d2:	2303      	movs	r3, #3
 800c4d4:	e00f      	b.n	800c4f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	69da      	ldr	r2, [r3, #28]
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	4013      	ands	r3, r2
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	bf0c      	ite	eq
 800c4e6:	2301      	moveq	r3, #1
 800c4e8:	2300      	movne	r3, #0
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d0a6      	beq.n	800c442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
	...

0800c500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c500:	b480      	push	{r7}
 800c502:	b095      	sub	sp, #84	; 0x54
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c51c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	461a      	mov	r2, r3
 800c524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c526:	643b      	str	r3, [r7, #64]	; 0x40
 800c528:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c52c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c52e:	e841 2300 	strex	r3, r2, [r1]
 800c532:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e6      	bne.n	800c508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3308      	adds	r3, #8
 800c540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	61fb      	str	r3, [r7, #28]
   return(result);
 800c54a:	69fa      	ldr	r2, [r7, #28]
 800c54c:	4b1e      	ldr	r3, [pc, #120]	; (800c5c8 <UART_EndRxTransfer+0xc8>)
 800c54e:	4013      	ands	r3, r2
 800c550:	64bb      	str	r3, [r7, #72]	; 0x48
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	3308      	adds	r3, #8
 800c558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c55a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c55c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e5      	bne.n	800c53a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c572:	2b01      	cmp	r3, #1
 800c574:	d118      	bne.n	800c5a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	e853 3f00 	ldrex	r3, [r3]
 800c582:	60bb      	str	r3, [r7, #8]
   return(result);
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	f023 0310 	bic.w	r3, r3, #16
 800c58a:	647b      	str	r3, [r7, #68]	; 0x44
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	461a      	mov	r2, r3
 800c592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c594:	61bb      	str	r3, [r7, #24]
 800c596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c598:	6979      	ldr	r1, [r7, #20]
 800c59a:	69ba      	ldr	r2, [r7, #24]
 800c59c:	e841 2300 	strex	r3, r2, [r1]
 800c5a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1e6      	bne.n	800c576 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2220      	movs	r2, #32
 800c5ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c5bc:	bf00      	nop
 800c5be:	3754      	adds	r7, #84	; 0x54
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr
 800c5c8:	effffffe 	.word	0xeffffffe

0800c5cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d101      	bne.n	800c5e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c5de:	2302      	movs	r3, #2
 800c5e0:	e027      	b.n	800c632 <HAL_UARTEx_DisableFifoMode+0x66>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2224      	movs	r2, #36	; 0x24
 800c5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0201 	bic.w	r2, r2, #1
 800c608:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c610:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2220      	movs	r2, #32
 800c624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d101      	bne.n	800c656 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c652:	2302      	movs	r3, #2
 800c654:	e02d      	b.n	800c6b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2224      	movs	r2, #36	; 0x24
 800c662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f022 0201 	bic.w	r2, r2, #1
 800c67c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	430a      	orrs	r2, r1
 800c690:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f850 	bl	800c738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2220      	movs	r2, #32
 800c6a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b084      	sub	sp, #16
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d101      	bne.n	800c6d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	e02d      	b.n	800c72e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2224      	movs	r2, #36	; 0x24
 800c6de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f022 0201 	bic.w	r2, r2, #1
 800c6f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	430a      	orrs	r2, r1
 800c70c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f812 	bl	800c738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2220      	movs	r2, #32
 800c720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
	...

0800c738 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c744:	2b00      	cmp	r3, #0
 800c746:	d108      	bne.n	800c75a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c758:	e031      	b.n	800c7be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c75a:	2310      	movs	r3, #16
 800c75c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c75e:	2310      	movs	r3, #16
 800c760:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	0e5b      	lsrs	r3, r3, #25
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	f003 0307 	and.w	r3, r3, #7
 800c770:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	0f5b      	lsrs	r3, r3, #29
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	f003 0307 	and.w	r3, r3, #7
 800c780:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c782:	7bbb      	ldrb	r3, [r7, #14]
 800c784:	7b3a      	ldrb	r2, [r7, #12]
 800c786:	4911      	ldr	r1, [pc, #68]	; (800c7cc <UARTEx_SetNbDataToProcess+0x94>)
 800c788:	5c8a      	ldrb	r2, [r1, r2]
 800c78a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c78e:	7b3a      	ldrb	r2, [r7, #12]
 800c790:	490f      	ldr	r1, [pc, #60]	; (800c7d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c792:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c794:	fb93 f3f2 	sdiv	r3, r3, r2
 800c798:	b29a      	uxth	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
 800c7a2:	7b7a      	ldrb	r2, [r7, #13]
 800c7a4:	4909      	ldr	r1, [pc, #36]	; (800c7cc <UARTEx_SetNbDataToProcess+0x94>)
 800c7a6:	5c8a      	ldrb	r2, [r1, r2]
 800c7a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c7ac:	7b7a      	ldrb	r2, [r7, #13]
 800c7ae:	4908      	ldr	r1, [pc, #32]	; (800c7d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c7b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c7be:	bf00      	nop
 800c7c0:	3714      	adds	r7, #20
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	0800e5a8 	.word	0x0800e5a8
 800c7d0:	0800e5b0 	.word	0x0800e5b0

0800c7d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d121      	bne.n	800c82a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	4b27      	ldr	r3, [pc, #156]	; (800c888 <FMC_SDRAM_Init+0xb4>)
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	6851      	ldr	r1, [r2, #4]
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	6892      	ldr	r2, [r2, #8]
 800c7f6:	4311      	orrs	r1, r2
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	68d2      	ldr	r2, [r2, #12]
 800c7fc:	4311      	orrs	r1, r2
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	6912      	ldr	r2, [r2, #16]
 800c802:	4311      	orrs	r1, r2
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	6952      	ldr	r2, [r2, #20]
 800c808:	4311      	orrs	r1, r2
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	6992      	ldr	r2, [r2, #24]
 800c80e:	4311      	orrs	r1, r2
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	69d2      	ldr	r2, [r2, #28]
 800c814:	4311      	orrs	r1, r2
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	6a12      	ldr	r2, [r2, #32]
 800c81a:	4311      	orrs	r1, r2
 800c81c:	683a      	ldr	r2, [r7, #0]
 800c81e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c820:	430a      	orrs	r2, r1
 800c822:	431a      	orrs	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	601a      	str	r2, [r3, #0]
 800c828:	e026      	b.n	800c878 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	69d9      	ldr	r1, [r3, #28]
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	4319      	orrs	r1, r3
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c840:	430b      	orrs	r3, r1
 800c842:	431a      	orrs	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	4b0e      	ldr	r3, [pc, #56]	; (800c888 <FMC_SDRAM_Init+0xb4>)
 800c84e:	4013      	ands	r3, r2
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	6851      	ldr	r1, [r2, #4]
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	6892      	ldr	r2, [r2, #8]
 800c858:	4311      	orrs	r1, r2
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	68d2      	ldr	r2, [r2, #12]
 800c85e:	4311      	orrs	r1, r2
 800c860:	683a      	ldr	r2, [r7, #0]
 800c862:	6912      	ldr	r2, [r2, #16]
 800c864:	4311      	orrs	r1, r2
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	6952      	ldr	r2, [r2, #20]
 800c86a:	4311      	orrs	r1, r2
 800c86c:	683a      	ldr	r2, [r7, #0]
 800c86e:	6992      	ldr	r2, [r2, #24]
 800c870:	430a      	orrs	r2, r1
 800c872:	431a      	orrs	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	370c      	adds	r7, #12
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	ffff8000 	.word	0xffff8000

0800c88c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d128      	bne.n	800c8f0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	1e59      	subs	r1, r3, #1
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	011b      	lsls	r3, r3, #4
 800c8b4:	4319      	orrs	r1, r3
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	021b      	lsls	r3, r3, #8
 800c8be:	4319      	orrs	r1, r3
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	031b      	lsls	r3, r3, #12
 800c8c8:	4319      	orrs	r1, r3
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	041b      	lsls	r3, r3, #16
 800c8d2:	4319      	orrs	r1, r3
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	695b      	ldr	r3, [r3, #20]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	051b      	lsls	r3, r3, #20
 800c8dc:	4319      	orrs	r1, r3
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	061b      	lsls	r3, r3, #24
 800c8e6:	430b      	orrs	r3, r1
 800c8e8:	431a      	orrs	r2, r3
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	609a      	str	r2, [r3, #8]
 800c8ee:	e02d      	b.n	800c94c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	689a      	ldr	r2, [r3, #8]
 800c8f4:	4b19      	ldr	r3, [pc, #100]	; (800c95c <FMC_SDRAM_Timing_Init+0xd0>)
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	68d2      	ldr	r2, [r2, #12]
 800c8fc:	3a01      	subs	r2, #1
 800c8fe:	0311      	lsls	r1, r2, #12
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	6952      	ldr	r2, [r2, #20]
 800c904:	3a01      	subs	r2, #1
 800c906:	0512      	lsls	r2, r2, #20
 800c908:	430a      	orrs	r2, r1
 800c90a:	431a      	orrs	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	1e59      	subs	r1, r3, #1
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	3b01      	subs	r3, #1
 800c924:	011b      	lsls	r3, r3, #4
 800c926:	4319      	orrs	r1, r3
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	3b01      	subs	r3, #1
 800c92e:	021b      	lsls	r3, r3, #8
 800c930:	4319      	orrs	r1, r3
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	3b01      	subs	r3, #1
 800c938:	041b      	lsls	r3, r3, #16
 800c93a:	4319      	orrs	r1, r3
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	699b      	ldr	r3, [r3, #24]
 800c940:	3b01      	subs	r3, #1
 800c942:	061b      	lsls	r3, r3, #24
 800c944:	430b      	orrs	r3, r1
 800c946:	431a      	orrs	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	ff0f0fff 	.word	0xff0f0fff

0800c960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c960:	b084      	sub	sp, #16
 800c962:	b580      	push	{r7, lr}
 800c964:	b084      	sub	sp, #16
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	f107 001c 	add.w	r0, r7, #28
 800c96e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	2b01      	cmp	r3, #1
 800c976:	d120      	bne.n	800c9ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	4b2a      	ldr	r3, [pc, #168]	; (800ca34 <USB_CoreInit+0xd4>)
 800c98a:	4013      	ands	r3, r2
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d105      	bne.n	800c9ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 faac 	bl	800cf0c <USB_CoreReset>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	73fb      	strb	r3, [r7, #15]
 800c9b8:	e01a      	b.n	800c9f0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 faa0 	bl	800cf0c <USB_CoreReset>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c9d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d106      	bne.n	800c9e4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	639a      	str	r2, [r3, #56]	; 0x38
 800c9e2:	e005      	b.n	800c9f0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d116      	bne.n	800ca24 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca04:	4b0c      	ldr	r3, [pc, #48]	; (800ca38 <USB_CoreInit+0xd8>)
 800ca06:	4313      	orrs	r3, r2
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	f043 0206 	orr.w	r2, r3, #6
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	f043 0220 	orr.w	r2, r3, #32
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca30:	b004      	add	sp, #16
 800ca32:	4770      	bx	lr
 800ca34:	ffbdffbf 	.word	0xffbdffbf
 800ca38:	03ee0000 	.word	0x03ee0000

0800ca3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	f023 0201 	bic.w	r2, r3, #1
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b084      	sub	sp, #16
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	460b      	mov	r3, r1
 800ca68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca7a:	78fb      	ldrb	r3, [r7, #3]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d115      	bne.n	800caac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ca8c:	2001      	movs	r0, #1
 800ca8e:	f7f6 f98b 	bl	8002da8 <HAL_Delay>
      ms++;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	3301      	adds	r3, #1
 800ca96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fa29 	bl	800cef0 <USB_GetMode>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d01e      	beq.n	800cae2 <USB_SetCurrentMode+0x84>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2b31      	cmp	r3, #49	; 0x31
 800caa8:	d9f0      	bls.n	800ca8c <USB_SetCurrentMode+0x2e>
 800caaa:	e01a      	b.n	800cae2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800caac:	78fb      	ldrb	r3, [r7, #3]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d115      	bne.n	800cade <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cabe:	2001      	movs	r0, #1
 800cac0:	f7f6 f972 	bl	8002da8 <HAL_Delay>
      ms++;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	3301      	adds	r3, #1
 800cac8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fa10 	bl	800cef0 <USB_GetMode>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d005      	beq.n	800cae2 <USB_SetCurrentMode+0x84>
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b31      	cmp	r3, #49	; 0x31
 800cada:	d9f0      	bls.n	800cabe <USB_SetCurrentMode+0x60>
 800cadc:	e001      	b.n	800cae2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	e005      	b.n	800caee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2b32      	cmp	r3, #50	; 0x32
 800cae6:	d101      	bne.n	800caec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cae8:	2301      	movs	r3, #1
 800caea:	e000      	b.n	800caee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800caf8:	b084      	sub	sp, #16
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b086      	sub	sp, #24
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cb12:	2300      	movs	r3, #0
 800cb14:	613b      	str	r3, [r7, #16]
 800cb16:	e009      	b.n	800cb2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3340      	adds	r3, #64	; 0x40
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	2200      	movs	r2, #0
 800cb24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	613b      	str	r3, [r7, #16]
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	2b0e      	cmp	r3, #14
 800cb30:	d9f2      	bls.n	800cb18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d11c      	bne.n	800cb72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb46:	f043 0302 	orr.w	r3, r3, #2
 800cb4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	601a      	str	r2, [r3, #0]
 800cb70:	e005      	b.n	800cb7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb84:	461a      	mov	r2, r3
 800cb86:	2300      	movs	r3, #0
 800cb88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb90:	4619      	mov	r1, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb98:	461a      	mov	r2, r3
 800cb9a:	680b      	ldr	r3, [r1, #0]
 800cb9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d10c      	bne.n	800cbbe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d104      	bne.n	800cbb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cbaa:	2100      	movs	r1, #0
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f965 	bl	800ce7c <USB_SetDevSpeed>
 800cbb2:	e008      	b.n	800cbc6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f960 	bl	800ce7c <USB_SetDevSpeed>
 800cbbc:	e003      	b.n	800cbc6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cbbe:	2103      	movs	r1, #3
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 f95b 	bl	800ce7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cbc6:	2110      	movs	r1, #16
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f8f3 	bl	800cdb4 <USB_FlushTxFifo>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f91f 	bl	800ce1c <USB_FlushRxFifo>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbee:	461a      	mov	r2, r3
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc06:	461a      	mov	r2, r3
 800cc08:	2300      	movs	r3, #0
 800cc0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	613b      	str	r3, [r7, #16]
 800cc10:	e043      	b.n	800cc9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	015a      	lsls	r2, r3, #5
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc28:	d118      	bne.n	800cc5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10a      	bne.n	800cc46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	015a      	lsls	r2, r3, #5
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	4413      	add	r3, r2
 800cc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc42:	6013      	str	r3, [r2, #0]
 800cc44:	e013      	b.n	800cc6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	015a      	lsls	r2, r3, #5
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc52:	461a      	mov	r2, r3
 800cc54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc58:	6013      	str	r3, [r2, #0]
 800cc5a:	e008      	b.n	800cc6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc68:	461a      	mov	r2, r3
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	015a      	lsls	r2, r3, #5
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	4413      	add	r3, r2
 800cc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	015a      	lsls	r2, r3, #5
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	4413      	add	r3, r2
 800cc88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	3301      	adds	r3, #1
 800cc98:	613b      	str	r3, [r7, #16]
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	693a      	ldr	r2, [r7, #16]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d3b7      	bcc.n	800cc12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cca2:	2300      	movs	r3, #0
 800cca4:	613b      	str	r3, [r7, #16]
 800cca6:	e043      	b.n	800cd30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	015a      	lsls	r2, r3, #5
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	4413      	add	r3, r2
 800ccb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccbe:	d118      	bne.n	800ccf2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10a      	bne.n	800ccdc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	015a      	lsls	r2, r3, #5
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	4413      	add	r3, r2
 800ccce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ccd8:	6013      	str	r3, [r2, #0]
 800ccda:	e013      	b.n	800cd04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	015a      	lsls	r2, r3, #5
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	4413      	add	r3, r2
 800cce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cce8:	461a      	mov	r2, r3
 800ccea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	e008      	b.n	800cd04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	015a      	lsls	r2, r3, #5
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccfe:	461a      	mov	r2, r3
 800cd00:	2300      	movs	r3, #0
 800cd02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd10:	461a      	mov	r2, r3
 800cd12:	2300      	movs	r3, #0
 800cd14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	015a      	lsls	r2, r3, #5
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd22:	461a      	mov	r2, r3
 800cd24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	613b      	str	r3, [r7, #16]
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	693a      	ldr	r2, [r7, #16]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d3b7      	bcc.n	800cca8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cd58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d105      	bne.n	800cd6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	699b      	ldr	r3, [r3, #24]
 800cd64:	f043 0210 	orr.w	r2, r3, #16
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	699a      	ldr	r2, [r3, #24]
 800cd70:	4b0e      	ldr	r3, [pc, #56]	; (800cdac <USB_DevInit+0x2b4>)
 800cd72:	4313      	orrs	r3, r2
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d005      	beq.n	800cd8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	f043 0208 	orr.w	r2, r3, #8
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d105      	bne.n	800cd9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	699a      	ldr	r2, [r3, #24]
 800cd94:	4b06      	ldr	r3, [pc, #24]	; (800cdb0 <USB_DevInit+0x2b8>)
 800cd96:	4313      	orrs	r3, r2
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3718      	adds	r7, #24
 800cda2:	46bd      	mov	sp, r7
 800cda4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cda8:	b004      	add	sp, #16
 800cdaa:	4770      	bx	lr
 800cdac:	803c3800 	.word	0x803c3800
 800cdb0:	40000004 	.word	0x40000004

0800cdb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4a13      	ldr	r2, [pc, #76]	; (800ce18 <USB_FlushTxFifo+0x64>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d901      	bls.n	800cdd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e01b      	b.n	800ce0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	daf2      	bge.n	800cdc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cddc:	2300      	movs	r3, #0
 800cdde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	019b      	lsls	r3, r3, #6
 800cde4:	f043 0220 	orr.w	r2, r3, #32
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	4a08      	ldr	r2, [pc, #32]	; (800ce18 <USB_FlushTxFifo+0x64>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d901      	bls.n	800cdfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cdfa:	2303      	movs	r3, #3
 800cdfc:	e006      	b.n	800ce0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	f003 0320 	and.w	r3, r3, #32
 800ce06:	2b20      	cmp	r3, #32
 800ce08:	d0f0      	beq.n	800cdec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3714      	adds	r7, #20
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	00030d40 	.word	0x00030d40

0800ce1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	4a11      	ldr	r2, [pc, #68]	; (800ce78 <USB_FlushRxFifo+0x5c>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d901      	bls.n	800ce3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e018      	b.n	800ce6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	daf2      	bge.n	800ce28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2210      	movs	r2, #16
 800ce4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	4a08      	ldr	r2, [pc, #32]	; (800ce78 <USB_FlushRxFifo+0x5c>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d901      	bls.n	800ce5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	e006      	b.n	800ce6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	f003 0310 	and.w	r3, r3, #16
 800ce66:	2b10      	cmp	r3, #16
 800ce68:	d0f0      	beq.n	800ce4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	00030d40 	.word	0x00030d40

0800ce7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	78fb      	ldrb	r3, [r7, #3]
 800ce96:	68f9      	ldr	r1, [r7, #12]
 800ce98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3714      	adds	r7, #20
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ceae:	b480      	push	{r7}
 800ceb0:	b085      	sub	sp, #20
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cec8:	f023 0303 	bic.w	r3, r3, #3
 800cecc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cedc:	f043 0302 	orr.w	r3, r3, #2
 800cee0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3714      	adds	r7, #20
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	695b      	ldr	r3, [r3, #20]
 800cefc:	f003 0301 	and.w	r3, r3, #1
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf14:	2300      	movs	r3, #0
 800cf16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	4a13      	ldr	r2, [pc, #76]	; (800cf70 <USB_CoreReset+0x64>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d901      	bls.n	800cf2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf26:	2303      	movs	r3, #3
 800cf28:	e01b      	b.n	800cf62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	daf2      	bge.n	800cf18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	f043 0201 	orr.w	r2, r3, #1
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	3301      	adds	r3, #1
 800cf46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	4a09      	ldr	r2, [pc, #36]	; (800cf70 <USB_CoreReset+0x64>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d901      	bls.n	800cf54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf50:	2303      	movs	r3, #3
 800cf52:	e006      	b.n	800cf62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	f003 0301 	and.w	r3, r3, #1
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d0f0      	beq.n	800cf42 <USB_CoreReset+0x36>

  return HAL_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3714      	adds	r7, #20
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	00030d40 	.word	0x00030d40

0800cf74 <sniprintf>:
 800cf74:	b40c      	push	{r2, r3}
 800cf76:	b530      	push	{r4, r5, lr}
 800cf78:	4b17      	ldr	r3, [pc, #92]	; (800cfd8 <sniprintf+0x64>)
 800cf7a:	1e0c      	subs	r4, r1, #0
 800cf7c:	681d      	ldr	r5, [r3, #0]
 800cf7e:	b09d      	sub	sp, #116	; 0x74
 800cf80:	da08      	bge.n	800cf94 <sniprintf+0x20>
 800cf82:	238b      	movs	r3, #139	; 0x8b
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8a:	b01d      	add	sp, #116	; 0x74
 800cf8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf90:	b002      	add	sp, #8
 800cf92:	4770      	bx	lr
 800cf94:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cf9c:	bf14      	ite	ne
 800cf9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cfa2:	4623      	moveq	r3, r4
 800cfa4:	9304      	str	r3, [sp, #16]
 800cfa6:	9307      	str	r3, [sp, #28]
 800cfa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfac:	9002      	str	r0, [sp, #8]
 800cfae:	9006      	str	r0, [sp, #24]
 800cfb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cfb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cfb6:	ab21      	add	r3, sp, #132	; 0x84
 800cfb8:	a902      	add	r1, sp, #8
 800cfba:	4628      	mov	r0, r5
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	f000 f9a1 	bl	800d304 <_svfiprintf_r>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	bfbc      	itt	lt
 800cfc6:	238b      	movlt	r3, #139	; 0x8b
 800cfc8:	602b      	strlt	r3, [r5, #0]
 800cfca:	2c00      	cmp	r4, #0
 800cfcc:	d0dd      	beq.n	800cf8a <sniprintf+0x16>
 800cfce:	9b02      	ldr	r3, [sp, #8]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	701a      	strb	r2, [r3, #0]
 800cfd4:	e7d9      	b.n	800cf8a <sniprintf+0x16>
 800cfd6:	bf00      	nop
 800cfd8:	24000084 	.word	0x24000084

0800cfdc <memset>:
 800cfdc:	4402      	add	r2, r0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d100      	bne.n	800cfe6 <memset+0xa>
 800cfe4:	4770      	bx	lr
 800cfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfea:	e7f9      	b.n	800cfe0 <memset+0x4>

0800cfec <__errno>:
 800cfec:	4b01      	ldr	r3, [pc, #4]	; (800cff4 <__errno+0x8>)
 800cfee:	6818      	ldr	r0, [r3, #0]
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	24000084 	.word	0x24000084

0800cff8 <__libc_init_array>:
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	4d0d      	ldr	r5, [pc, #52]	; (800d030 <__libc_init_array+0x38>)
 800cffc:	4c0d      	ldr	r4, [pc, #52]	; (800d034 <__libc_init_array+0x3c>)
 800cffe:	1b64      	subs	r4, r4, r5
 800d000:	10a4      	asrs	r4, r4, #2
 800d002:	2600      	movs	r6, #0
 800d004:	42a6      	cmp	r6, r4
 800d006:	d109      	bne.n	800d01c <__libc_init_array+0x24>
 800d008:	4d0b      	ldr	r5, [pc, #44]	; (800d038 <__libc_init_array+0x40>)
 800d00a:	4c0c      	ldr	r4, [pc, #48]	; (800d03c <__libc_init_array+0x44>)
 800d00c:	f000 fc6a 	bl	800d8e4 <_init>
 800d010:	1b64      	subs	r4, r4, r5
 800d012:	10a4      	asrs	r4, r4, #2
 800d014:	2600      	movs	r6, #0
 800d016:	42a6      	cmp	r6, r4
 800d018:	d105      	bne.n	800d026 <__libc_init_array+0x2e>
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d020:	4798      	blx	r3
 800d022:	3601      	adds	r6, #1
 800d024:	e7ee      	b.n	800d004 <__libc_init_array+0xc>
 800d026:	f855 3b04 	ldr.w	r3, [r5], #4
 800d02a:	4798      	blx	r3
 800d02c:	3601      	adds	r6, #1
 800d02e:	e7f2      	b.n	800d016 <__libc_init_array+0x1e>
 800d030:	0800e5f4 	.word	0x0800e5f4
 800d034:	0800e5f4 	.word	0x0800e5f4
 800d038:	0800e5f4 	.word	0x0800e5f4
 800d03c:	0800e5f8 	.word	0x0800e5f8

0800d040 <__retarget_lock_acquire_recursive>:
 800d040:	4770      	bx	lr

0800d042 <__retarget_lock_release_recursive>:
 800d042:	4770      	bx	lr

0800d044 <memcpy>:
 800d044:	440a      	add	r2, r1
 800d046:	4291      	cmp	r1, r2
 800d048:	f100 33ff 	add.w	r3, r0, #4294967295
 800d04c:	d100      	bne.n	800d050 <memcpy+0xc>
 800d04e:	4770      	bx	lr
 800d050:	b510      	push	{r4, lr}
 800d052:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d05a:	4291      	cmp	r1, r2
 800d05c:	d1f9      	bne.n	800d052 <memcpy+0xe>
 800d05e:	bd10      	pop	{r4, pc}

0800d060 <_free_r>:
 800d060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d062:	2900      	cmp	r1, #0
 800d064:	d044      	beq.n	800d0f0 <_free_r+0x90>
 800d066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d06a:	9001      	str	r0, [sp, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f1a1 0404 	sub.w	r4, r1, #4
 800d072:	bfb8      	it	lt
 800d074:	18e4      	addlt	r4, r4, r3
 800d076:	f000 f8df 	bl	800d238 <__malloc_lock>
 800d07a:	4a1e      	ldr	r2, [pc, #120]	; (800d0f4 <_free_r+0x94>)
 800d07c:	9801      	ldr	r0, [sp, #4]
 800d07e:	6813      	ldr	r3, [r2, #0]
 800d080:	b933      	cbnz	r3, 800d090 <_free_r+0x30>
 800d082:	6063      	str	r3, [r4, #4]
 800d084:	6014      	str	r4, [r2, #0]
 800d086:	b003      	add	sp, #12
 800d088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d08c:	f000 b8da 	b.w	800d244 <__malloc_unlock>
 800d090:	42a3      	cmp	r3, r4
 800d092:	d908      	bls.n	800d0a6 <_free_r+0x46>
 800d094:	6825      	ldr	r5, [r4, #0]
 800d096:	1961      	adds	r1, r4, r5
 800d098:	428b      	cmp	r3, r1
 800d09a:	bf01      	itttt	eq
 800d09c:	6819      	ldreq	r1, [r3, #0]
 800d09e:	685b      	ldreq	r3, [r3, #4]
 800d0a0:	1949      	addeq	r1, r1, r5
 800d0a2:	6021      	streq	r1, [r4, #0]
 800d0a4:	e7ed      	b.n	800d082 <_free_r+0x22>
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	b10b      	cbz	r3, 800d0b0 <_free_r+0x50>
 800d0ac:	42a3      	cmp	r3, r4
 800d0ae:	d9fa      	bls.n	800d0a6 <_free_r+0x46>
 800d0b0:	6811      	ldr	r1, [r2, #0]
 800d0b2:	1855      	adds	r5, r2, r1
 800d0b4:	42a5      	cmp	r5, r4
 800d0b6:	d10b      	bne.n	800d0d0 <_free_r+0x70>
 800d0b8:	6824      	ldr	r4, [r4, #0]
 800d0ba:	4421      	add	r1, r4
 800d0bc:	1854      	adds	r4, r2, r1
 800d0be:	42a3      	cmp	r3, r4
 800d0c0:	6011      	str	r1, [r2, #0]
 800d0c2:	d1e0      	bne.n	800d086 <_free_r+0x26>
 800d0c4:	681c      	ldr	r4, [r3, #0]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	6053      	str	r3, [r2, #4]
 800d0ca:	440c      	add	r4, r1
 800d0cc:	6014      	str	r4, [r2, #0]
 800d0ce:	e7da      	b.n	800d086 <_free_r+0x26>
 800d0d0:	d902      	bls.n	800d0d8 <_free_r+0x78>
 800d0d2:	230c      	movs	r3, #12
 800d0d4:	6003      	str	r3, [r0, #0]
 800d0d6:	e7d6      	b.n	800d086 <_free_r+0x26>
 800d0d8:	6825      	ldr	r5, [r4, #0]
 800d0da:	1961      	adds	r1, r4, r5
 800d0dc:	428b      	cmp	r3, r1
 800d0de:	bf04      	itt	eq
 800d0e0:	6819      	ldreq	r1, [r3, #0]
 800d0e2:	685b      	ldreq	r3, [r3, #4]
 800d0e4:	6063      	str	r3, [r4, #4]
 800d0e6:	bf04      	itt	eq
 800d0e8:	1949      	addeq	r1, r1, r5
 800d0ea:	6021      	streq	r1, [r4, #0]
 800d0ec:	6054      	str	r4, [r2, #4]
 800d0ee:	e7ca      	b.n	800d086 <_free_r+0x26>
 800d0f0:	b003      	add	sp, #12
 800d0f2:	bd30      	pop	{r4, r5, pc}
 800d0f4:	24001008 	.word	0x24001008

0800d0f8 <sbrk_aligned>:
 800d0f8:	b570      	push	{r4, r5, r6, lr}
 800d0fa:	4e0e      	ldr	r6, [pc, #56]	; (800d134 <sbrk_aligned+0x3c>)
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	6831      	ldr	r1, [r6, #0]
 800d100:	4605      	mov	r5, r0
 800d102:	b911      	cbnz	r1, 800d10a <sbrk_aligned+0x12>
 800d104:	f000 fba6 	bl	800d854 <_sbrk_r>
 800d108:	6030      	str	r0, [r6, #0]
 800d10a:	4621      	mov	r1, r4
 800d10c:	4628      	mov	r0, r5
 800d10e:	f000 fba1 	bl	800d854 <_sbrk_r>
 800d112:	1c43      	adds	r3, r0, #1
 800d114:	d00a      	beq.n	800d12c <sbrk_aligned+0x34>
 800d116:	1cc4      	adds	r4, r0, #3
 800d118:	f024 0403 	bic.w	r4, r4, #3
 800d11c:	42a0      	cmp	r0, r4
 800d11e:	d007      	beq.n	800d130 <sbrk_aligned+0x38>
 800d120:	1a21      	subs	r1, r4, r0
 800d122:	4628      	mov	r0, r5
 800d124:	f000 fb96 	bl	800d854 <_sbrk_r>
 800d128:	3001      	adds	r0, #1
 800d12a:	d101      	bne.n	800d130 <sbrk_aligned+0x38>
 800d12c:	f04f 34ff 	mov.w	r4, #4294967295
 800d130:	4620      	mov	r0, r4
 800d132:	bd70      	pop	{r4, r5, r6, pc}
 800d134:	2400100c 	.word	0x2400100c

0800d138 <_malloc_r>:
 800d138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d13c:	1ccd      	adds	r5, r1, #3
 800d13e:	f025 0503 	bic.w	r5, r5, #3
 800d142:	3508      	adds	r5, #8
 800d144:	2d0c      	cmp	r5, #12
 800d146:	bf38      	it	cc
 800d148:	250c      	movcc	r5, #12
 800d14a:	2d00      	cmp	r5, #0
 800d14c:	4607      	mov	r7, r0
 800d14e:	db01      	blt.n	800d154 <_malloc_r+0x1c>
 800d150:	42a9      	cmp	r1, r5
 800d152:	d905      	bls.n	800d160 <_malloc_r+0x28>
 800d154:	230c      	movs	r3, #12
 800d156:	603b      	str	r3, [r7, #0]
 800d158:	2600      	movs	r6, #0
 800d15a:	4630      	mov	r0, r6
 800d15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d160:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d234 <_malloc_r+0xfc>
 800d164:	f000 f868 	bl	800d238 <__malloc_lock>
 800d168:	f8d8 3000 	ldr.w	r3, [r8]
 800d16c:	461c      	mov	r4, r3
 800d16e:	bb5c      	cbnz	r4, 800d1c8 <_malloc_r+0x90>
 800d170:	4629      	mov	r1, r5
 800d172:	4638      	mov	r0, r7
 800d174:	f7ff ffc0 	bl	800d0f8 <sbrk_aligned>
 800d178:	1c43      	adds	r3, r0, #1
 800d17a:	4604      	mov	r4, r0
 800d17c:	d155      	bne.n	800d22a <_malloc_r+0xf2>
 800d17e:	f8d8 4000 	ldr.w	r4, [r8]
 800d182:	4626      	mov	r6, r4
 800d184:	2e00      	cmp	r6, #0
 800d186:	d145      	bne.n	800d214 <_malloc_r+0xdc>
 800d188:	2c00      	cmp	r4, #0
 800d18a:	d048      	beq.n	800d21e <_malloc_r+0xe6>
 800d18c:	6823      	ldr	r3, [r4, #0]
 800d18e:	4631      	mov	r1, r6
 800d190:	4638      	mov	r0, r7
 800d192:	eb04 0903 	add.w	r9, r4, r3
 800d196:	f000 fb5d 	bl	800d854 <_sbrk_r>
 800d19a:	4581      	cmp	r9, r0
 800d19c:	d13f      	bne.n	800d21e <_malloc_r+0xe6>
 800d19e:	6821      	ldr	r1, [r4, #0]
 800d1a0:	1a6d      	subs	r5, r5, r1
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	4638      	mov	r0, r7
 800d1a6:	f7ff ffa7 	bl	800d0f8 <sbrk_aligned>
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	d037      	beq.n	800d21e <_malloc_r+0xe6>
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	442b      	add	r3, r5
 800d1b2:	6023      	str	r3, [r4, #0]
 800d1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d038      	beq.n	800d22e <_malloc_r+0xf6>
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	42a2      	cmp	r2, r4
 800d1c0:	d12b      	bne.n	800d21a <_malloc_r+0xe2>
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	605a      	str	r2, [r3, #4]
 800d1c6:	e00f      	b.n	800d1e8 <_malloc_r+0xb0>
 800d1c8:	6822      	ldr	r2, [r4, #0]
 800d1ca:	1b52      	subs	r2, r2, r5
 800d1cc:	d41f      	bmi.n	800d20e <_malloc_r+0xd6>
 800d1ce:	2a0b      	cmp	r2, #11
 800d1d0:	d917      	bls.n	800d202 <_malloc_r+0xca>
 800d1d2:	1961      	adds	r1, r4, r5
 800d1d4:	42a3      	cmp	r3, r4
 800d1d6:	6025      	str	r5, [r4, #0]
 800d1d8:	bf18      	it	ne
 800d1da:	6059      	strne	r1, [r3, #4]
 800d1dc:	6863      	ldr	r3, [r4, #4]
 800d1de:	bf08      	it	eq
 800d1e0:	f8c8 1000 	streq.w	r1, [r8]
 800d1e4:	5162      	str	r2, [r4, r5]
 800d1e6:	604b      	str	r3, [r1, #4]
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	f104 060b 	add.w	r6, r4, #11
 800d1ee:	f000 f829 	bl	800d244 <__malloc_unlock>
 800d1f2:	f026 0607 	bic.w	r6, r6, #7
 800d1f6:	1d23      	adds	r3, r4, #4
 800d1f8:	1af2      	subs	r2, r6, r3
 800d1fa:	d0ae      	beq.n	800d15a <_malloc_r+0x22>
 800d1fc:	1b9b      	subs	r3, r3, r6
 800d1fe:	50a3      	str	r3, [r4, r2]
 800d200:	e7ab      	b.n	800d15a <_malloc_r+0x22>
 800d202:	42a3      	cmp	r3, r4
 800d204:	6862      	ldr	r2, [r4, #4]
 800d206:	d1dd      	bne.n	800d1c4 <_malloc_r+0x8c>
 800d208:	f8c8 2000 	str.w	r2, [r8]
 800d20c:	e7ec      	b.n	800d1e8 <_malloc_r+0xb0>
 800d20e:	4623      	mov	r3, r4
 800d210:	6864      	ldr	r4, [r4, #4]
 800d212:	e7ac      	b.n	800d16e <_malloc_r+0x36>
 800d214:	4634      	mov	r4, r6
 800d216:	6876      	ldr	r6, [r6, #4]
 800d218:	e7b4      	b.n	800d184 <_malloc_r+0x4c>
 800d21a:	4613      	mov	r3, r2
 800d21c:	e7cc      	b.n	800d1b8 <_malloc_r+0x80>
 800d21e:	230c      	movs	r3, #12
 800d220:	603b      	str	r3, [r7, #0]
 800d222:	4638      	mov	r0, r7
 800d224:	f000 f80e 	bl	800d244 <__malloc_unlock>
 800d228:	e797      	b.n	800d15a <_malloc_r+0x22>
 800d22a:	6025      	str	r5, [r4, #0]
 800d22c:	e7dc      	b.n	800d1e8 <_malloc_r+0xb0>
 800d22e:	605b      	str	r3, [r3, #4]
 800d230:	deff      	udf	#255	; 0xff
 800d232:	bf00      	nop
 800d234:	24001008 	.word	0x24001008

0800d238 <__malloc_lock>:
 800d238:	4801      	ldr	r0, [pc, #4]	; (800d240 <__malloc_lock+0x8>)
 800d23a:	f7ff bf01 	b.w	800d040 <__retarget_lock_acquire_recursive>
 800d23e:	bf00      	nop
 800d240:	24001004 	.word	0x24001004

0800d244 <__malloc_unlock>:
 800d244:	4801      	ldr	r0, [pc, #4]	; (800d24c <__malloc_unlock+0x8>)
 800d246:	f7ff befc 	b.w	800d042 <__retarget_lock_release_recursive>
 800d24a:	bf00      	nop
 800d24c:	24001004 	.word	0x24001004

0800d250 <__ssputs_r>:
 800d250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d254:	688e      	ldr	r6, [r1, #8]
 800d256:	461f      	mov	r7, r3
 800d258:	42be      	cmp	r6, r7
 800d25a:	680b      	ldr	r3, [r1, #0]
 800d25c:	4682      	mov	sl, r0
 800d25e:	460c      	mov	r4, r1
 800d260:	4690      	mov	r8, r2
 800d262:	d82c      	bhi.n	800d2be <__ssputs_r+0x6e>
 800d264:	898a      	ldrh	r2, [r1, #12]
 800d266:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d26a:	d026      	beq.n	800d2ba <__ssputs_r+0x6a>
 800d26c:	6965      	ldr	r5, [r4, #20]
 800d26e:	6909      	ldr	r1, [r1, #16]
 800d270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d274:	eba3 0901 	sub.w	r9, r3, r1
 800d278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d27c:	1c7b      	adds	r3, r7, #1
 800d27e:	444b      	add	r3, r9
 800d280:	106d      	asrs	r5, r5, #1
 800d282:	429d      	cmp	r5, r3
 800d284:	bf38      	it	cc
 800d286:	461d      	movcc	r5, r3
 800d288:	0553      	lsls	r3, r2, #21
 800d28a:	d527      	bpl.n	800d2dc <__ssputs_r+0x8c>
 800d28c:	4629      	mov	r1, r5
 800d28e:	f7ff ff53 	bl	800d138 <_malloc_r>
 800d292:	4606      	mov	r6, r0
 800d294:	b360      	cbz	r0, 800d2f0 <__ssputs_r+0xa0>
 800d296:	6921      	ldr	r1, [r4, #16]
 800d298:	464a      	mov	r2, r9
 800d29a:	f7ff fed3 	bl	800d044 <memcpy>
 800d29e:	89a3      	ldrh	r3, [r4, #12]
 800d2a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a8:	81a3      	strh	r3, [r4, #12]
 800d2aa:	6126      	str	r6, [r4, #16]
 800d2ac:	6165      	str	r5, [r4, #20]
 800d2ae:	444e      	add	r6, r9
 800d2b0:	eba5 0509 	sub.w	r5, r5, r9
 800d2b4:	6026      	str	r6, [r4, #0]
 800d2b6:	60a5      	str	r5, [r4, #8]
 800d2b8:	463e      	mov	r6, r7
 800d2ba:	42be      	cmp	r6, r7
 800d2bc:	d900      	bls.n	800d2c0 <__ssputs_r+0x70>
 800d2be:	463e      	mov	r6, r7
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	4632      	mov	r2, r6
 800d2c4:	4641      	mov	r1, r8
 800d2c6:	f000 faab 	bl	800d820 <memmove>
 800d2ca:	68a3      	ldr	r3, [r4, #8]
 800d2cc:	1b9b      	subs	r3, r3, r6
 800d2ce:	60a3      	str	r3, [r4, #8]
 800d2d0:	6823      	ldr	r3, [r4, #0]
 800d2d2:	4433      	add	r3, r6
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	2000      	movs	r0, #0
 800d2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2dc:	462a      	mov	r2, r5
 800d2de:	f000 fac9 	bl	800d874 <_realloc_r>
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d1e0      	bne.n	800d2aa <__ssputs_r+0x5a>
 800d2e8:	6921      	ldr	r1, [r4, #16]
 800d2ea:	4650      	mov	r0, sl
 800d2ec:	f7ff feb8 	bl	800d060 <_free_r>
 800d2f0:	230c      	movs	r3, #12
 800d2f2:	f8ca 3000 	str.w	r3, [sl]
 800d2f6:	89a3      	ldrh	r3, [r4, #12]
 800d2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2fc:	81a3      	strh	r3, [r4, #12]
 800d2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d302:	e7e9      	b.n	800d2d8 <__ssputs_r+0x88>

0800d304 <_svfiprintf_r>:
 800d304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d308:	4698      	mov	r8, r3
 800d30a:	898b      	ldrh	r3, [r1, #12]
 800d30c:	061b      	lsls	r3, r3, #24
 800d30e:	b09d      	sub	sp, #116	; 0x74
 800d310:	4607      	mov	r7, r0
 800d312:	460d      	mov	r5, r1
 800d314:	4614      	mov	r4, r2
 800d316:	d50e      	bpl.n	800d336 <_svfiprintf_r+0x32>
 800d318:	690b      	ldr	r3, [r1, #16]
 800d31a:	b963      	cbnz	r3, 800d336 <_svfiprintf_r+0x32>
 800d31c:	2140      	movs	r1, #64	; 0x40
 800d31e:	f7ff ff0b 	bl	800d138 <_malloc_r>
 800d322:	6028      	str	r0, [r5, #0]
 800d324:	6128      	str	r0, [r5, #16]
 800d326:	b920      	cbnz	r0, 800d332 <_svfiprintf_r+0x2e>
 800d328:	230c      	movs	r3, #12
 800d32a:	603b      	str	r3, [r7, #0]
 800d32c:	f04f 30ff 	mov.w	r0, #4294967295
 800d330:	e0d0      	b.n	800d4d4 <_svfiprintf_r+0x1d0>
 800d332:	2340      	movs	r3, #64	; 0x40
 800d334:	616b      	str	r3, [r5, #20]
 800d336:	2300      	movs	r3, #0
 800d338:	9309      	str	r3, [sp, #36]	; 0x24
 800d33a:	2320      	movs	r3, #32
 800d33c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d340:	f8cd 800c 	str.w	r8, [sp, #12]
 800d344:	2330      	movs	r3, #48	; 0x30
 800d346:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d4ec <_svfiprintf_r+0x1e8>
 800d34a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d34e:	f04f 0901 	mov.w	r9, #1
 800d352:	4623      	mov	r3, r4
 800d354:	469a      	mov	sl, r3
 800d356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d35a:	b10a      	cbz	r2, 800d360 <_svfiprintf_r+0x5c>
 800d35c:	2a25      	cmp	r2, #37	; 0x25
 800d35e:	d1f9      	bne.n	800d354 <_svfiprintf_r+0x50>
 800d360:	ebba 0b04 	subs.w	fp, sl, r4
 800d364:	d00b      	beq.n	800d37e <_svfiprintf_r+0x7a>
 800d366:	465b      	mov	r3, fp
 800d368:	4622      	mov	r2, r4
 800d36a:	4629      	mov	r1, r5
 800d36c:	4638      	mov	r0, r7
 800d36e:	f7ff ff6f 	bl	800d250 <__ssputs_r>
 800d372:	3001      	adds	r0, #1
 800d374:	f000 80a9 	beq.w	800d4ca <_svfiprintf_r+0x1c6>
 800d378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d37a:	445a      	add	r2, fp
 800d37c:	9209      	str	r2, [sp, #36]	; 0x24
 800d37e:	f89a 3000 	ldrb.w	r3, [sl]
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 80a1 	beq.w	800d4ca <_svfiprintf_r+0x1c6>
 800d388:	2300      	movs	r3, #0
 800d38a:	f04f 32ff 	mov.w	r2, #4294967295
 800d38e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d392:	f10a 0a01 	add.w	sl, sl, #1
 800d396:	9304      	str	r3, [sp, #16]
 800d398:	9307      	str	r3, [sp, #28]
 800d39a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d39e:	931a      	str	r3, [sp, #104]	; 0x68
 800d3a0:	4654      	mov	r4, sl
 800d3a2:	2205      	movs	r2, #5
 800d3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3a8:	4850      	ldr	r0, [pc, #320]	; (800d4ec <_svfiprintf_r+0x1e8>)
 800d3aa:	f7f2 ffa1 	bl	80002f0 <memchr>
 800d3ae:	9a04      	ldr	r2, [sp, #16]
 800d3b0:	b9d8      	cbnz	r0, 800d3ea <_svfiprintf_r+0xe6>
 800d3b2:	06d0      	lsls	r0, r2, #27
 800d3b4:	bf44      	itt	mi
 800d3b6:	2320      	movmi	r3, #32
 800d3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3bc:	0711      	lsls	r1, r2, #28
 800d3be:	bf44      	itt	mi
 800d3c0:	232b      	movmi	r3, #43	; 0x2b
 800d3c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ca:	2b2a      	cmp	r3, #42	; 0x2a
 800d3cc:	d015      	beq.n	800d3fa <_svfiprintf_r+0xf6>
 800d3ce:	9a07      	ldr	r2, [sp, #28]
 800d3d0:	4654      	mov	r4, sl
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	f04f 0c0a 	mov.w	ip, #10
 800d3d8:	4621      	mov	r1, r4
 800d3da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3de:	3b30      	subs	r3, #48	; 0x30
 800d3e0:	2b09      	cmp	r3, #9
 800d3e2:	d94d      	bls.n	800d480 <_svfiprintf_r+0x17c>
 800d3e4:	b1b0      	cbz	r0, 800d414 <_svfiprintf_r+0x110>
 800d3e6:	9207      	str	r2, [sp, #28]
 800d3e8:	e014      	b.n	800d414 <_svfiprintf_r+0x110>
 800d3ea:	eba0 0308 	sub.w	r3, r0, r8
 800d3ee:	fa09 f303 	lsl.w	r3, r9, r3
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	9304      	str	r3, [sp, #16]
 800d3f6:	46a2      	mov	sl, r4
 800d3f8:	e7d2      	b.n	800d3a0 <_svfiprintf_r+0x9c>
 800d3fa:	9b03      	ldr	r3, [sp, #12]
 800d3fc:	1d19      	adds	r1, r3, #4
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	9103      	str	r1, [sp, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	bfbb      	ittet	lt
 800d406:	425b      	neglt	r3, r3
 800d408:	f042 0202 	orrlt.w	r2, r2, #2
 800d40c:	9307      	strge	r3, [sp, #28]
 800d40e:	9307      	strlt	r3, [sp, #28]
 800d410:	bfb8      	it	lt
 800d412:	9204      	strlt	r2, [sp, #16]
 800d414:	7823      	ldrb	r3, [r4, #0]
 800d416:	2b2e      	cmp	r3, #46	; 0x2e
 800d418:	d10c      	bne.n	800d434 <_svfiprintf_r+0x130>
 800d41a:	7863      	ldrb	r3, [r4, #1]
 800d41c:	2b2a      	cmp	r3, #42	; 0x2a
 800d41e:	d134      	bne.n	800d48a <_svfiprintf_r+0x186>
 800d420:	9b03      	ldr	r3, [sp, #12]
 800d422:	1d1a      	adds	r2, r3, #4
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	9203      	str	r2, [sp, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	bfb8      	it	lt
 800d42c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d430:	3402      	adds	r4, #2
 800d432:	9305      	str	r3, [sp, #20]
 800d434:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d4fc <_svfiprintf_r+0x1f8>
 800d438:	7821      	ldrb	r1, [r4, #0]
 800d43a:	2203      	movs	r2, #3
 800d43c:	4650      	mov	r0, sl
 800d43e:	f7f2 ff57 	bl	80002f0 <memchr>
 800d442:	b138      	cbz	r0, 800d454 <_svfiprintf_r+0x150>
 800d444:	9b04      	ldr	r3, [sp, #16]
 800d446:	eba0 000a 	sub.w	r0, r0, sl
 800d44a:	2240      	movs	r2, #64	; 0x40
 800d44c:	4082      	lsls	r2, r0
 800d44e:	4313      	orrs	r3, r2
 800d450:	3401      	adds	r4, #1
 800d452:	9304      	str	r3, [sp, #16]
 800d454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d458:	4825      	ldr	r0, [pc, #148]	; (800d4f0 <_svfiprintf_r+0x1ec>)
 800d45a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d45e:	2206      	movs	r2, #6
 800d460:	f7f2 ff46 	bl	80002f0 <memchr>
 800d464:	2800      	cmp	r0, #0
 800d466:	d038      	beq.n	800d4da <_svfiprintf_r+0x1d6>
 800d468:	4b22      	ldr	r3, [pc, #136]	; (800d4f4 <_svfiprintf_r+0x1f0>)
 800d46a:	bb1b      	cbnz	r3, 800d4b4 <_svfiprintf_r+0x1b0>
 800d46c:	9b03      	ldr	r3, [sp, #12]
 800d46e:	3307      	adds	r3, #7
 800d470:	f023 0307 	bic.w	r3, r3, #7
 800d474:	3308      	adds	r3, #8
 800d476:	9303      	str	r3, [sp, #12]
 800d478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d47a:	4433      	add	r3, r6
 800d47c:	9309      	str	r3, [sp, #36]	; 0x24
 800d47e:	e768      	b.n	800d352 <_svfiprintf_r+0x4e>
 800d480:	fb0c 3202 	mla	r2, ip, r2, r3
 800d484:	460c      	mov	r4, r1
 800d486:	2001      	movs	r0, #1
 800d488:	e7a6      	b.n	800d3d8 <_svfiprintf_r+0xd4>
 800d48a:	2300      	movs	r3, #0
 800d48c:	3401      	adds	r4, #1
 800d48e:	9305      	str	r3, [sp, #20]
 800d490:	4619      	mov	r1, r3
 800d492:	f04f 0c0a 	mov.w	ip, #10
 800d496:	4620      	mov	r0, r4
 800d498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d49c:	3a30      	subs	r2, #48	; 0x30
 800d49e:	2a09      	cmp	r2, #9
 800d4a0:	d903      	bls.n	800d4aa <_svfiprintf_r+0x1a6>
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d0c6      	beq.n	800d434 <_svfiprintf_r+0x130>
 800d4a6:	9105      	str	r1, [sp, #20]
 800d4a8:	e7c4      	b.n	800d434 <_svfiprintf_r+0x130>
 800d4aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e7f0      	b.n	800d496 <_svfiprintf_r+0x192>
 800d4b4:	ab03      	add	r3, sp, #12
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	462a      	mov	r2, r5
 800d4ba:	4b0f      	ldr	r3, [pc, #60]	; (800d4f8 <_svfiprintf_r+0x1f4>)
 800d4bc:	a904      	add	r1, sp, #16
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f3af 8000 	nop.w
 800d4c4:	1c42      	adds	r2, r0, #1
 800d4c6:	4606      	mov	r6, r0
 800d4c8:	d1d6      	bne.n	800d478 <_svfiprintf_r+0x174>
 800d4ca:	89ab      	ldrh	r3, [r5, #12]
 800d4cc:	065b      	lsls	r3, r3, #25
 800d4ce:	f53f af2d 	bmi.w	800d32c <_svfiprintf_r+0x28>
 800d4d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4d4:	b01d      	add	sp, #116	; 0x74
 800d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4da:	ab03      	add	r3, sp, #12
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	462a      	mov	r2, r5
 800d4e0:	4b05      	ldr	r3, [pc, #20]	; (800d4f8 <_svfiprintf_r+0x1f4>)
 800d4e2:	a904      	add	r1, sp, #16
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	f000 f879 	bl	800d5dc <_printf_i>
 800d4ea:	e7eb      	b.n	800d4c4 <_svfiprintf_r+0x1c0>
 800d4ec:	0800e5b8 	.word	0x0800e5b8
 800d4f0:	0800e5c2 	.word	0x0800e5c2
 800d4f4:	00000000 	.word	0x00000000
 800d4f8:	0800d251 	.word	0x0800d251
 800d4fc:	0800e5be 	.word	0x0800e5be

0800d500 <_printf_common>:
 800d500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d504:	4616      	mov	r6, r2
 800d506:	4699      	mov	r9, r3
 800d508:	688a      	ldr	r2, [r1, #8]
 800d50a:	690b      	ldr	r3, [r1, #16]
 800d50c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d510:	4293      	cmp	r3, r2
 800d512:	bfb8      	it	lt
 800d514:	4613      	movlt	r3, r2
 800d516:	6033      	str	r3, [r6, #0]
 800d518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d51c:	4607      	mov	r7, r0
 800d51e:	460c      	mov	r4, r1
 800d520:	b10a      	cbz	r2, 800d526 <_printf_common+0x26>
 800d522:	3301      	adds	r3, #1
 800d524:	6033      	str	r3, [r6, #0]
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	0699      	lsls	r1, r3, #26
 800d52a:	bf42      	ittt	mi
 800d52c:	6833      	ldrmi	r3, [r6, #0]
 800d52e:	3302      	addmi	r3, #2
 800d530:	6033      	strmi	r3, [r6, #0]
 800d532:	6825      	ldr	r5, [r4, #0]
 800d534:	f015 0506 	ands.w	r5, r5, #6
 800d538:	d106      	bne.n	800d548 <_printf_common+0x48>
 800d53a:	f104 0a19 	add.w	sl, r4, #25
 800d53e:	68e3      	ldr	r3, [r4, #12]
 800d540:	6832      	ldr	r2, [r6, #0]
 800d542:	1a9b      	subs	r3, r3, r2
 800d544:	42ab      	cmp	r3, r5
 800d546:	dc26      	bgt.n	800d596 <_printf_common+0x96>
 800d548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d54c:	1e13      	subs	r3, r2, #0
 800d54e:	6822      	ldr	r2, [r4, #0]
 800d550:	bf18      	it	ne
 800d552:	2301      	movne	r3, #1
 800d554:	0692      	lsls	r2, r2, #26
 800d556:	d42b      	bmi.n	800d5b0 <_printf_common+0xb0>
 800d558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d55c:	4649      	mov	r1, r9
 800d55e:	4638      	mov	r0, r7
 800d560:	47c0      	blx	r8
 800d562:	3001      	adds	r0, #1
 800d564:	d01e      	beq.n	800d5a4 <_printf_common+0xa4>
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	6922      	ldr	r2, [r4, #16]
 800d56a:	f003 0306 	and.w	r3, r3, #6
 800d56e:	2b04      	cmp	r3, #4
 800d570:	bf02      	ittt	eq
 800d572:	68e5      	ldreq	r5, [r4, #12]
 800d574:	6833      	ldreq	r3, [r6, #0]
 800d576:	1aed      	subeq	r5, r5, r3
 800d578:	68a3      	ldr	r3, [r4, #8]
 800d57a:	bf0c      	ite	eq
 800d57c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d580:	2500      	movne	r5, #0
 800d582:	4293      	cmp	r3, r2
 800d584:	bfc4      	itt	gt
 800d586:	1a9b      	subgt	r3, r3, r2
 800d588:	18ed      	addgt	r5, r5, r3
 800d58a:	2600      	movs	r6, #0
 800d58c:	341a      	adds	r4, #26
 800d58e:	42b5      	cmp	r5, r6
 800d590:	d11a      	bne.n	800d5c8 <_printf_common+0xc8>
 800d592:	2000      	movs	r0, #0
 800d594:	e008      	b.n	800d5a8 <_printf_common+0xa8>
 800d596:	2301      	movs	r3, #1
 800d598:	4652      	mov	r2, sl
 800d59a:	4649      	mov	r1, r9
 800d59c:	4638      	mov	r0, r7
 800d59e:	47c0      	blx	r8
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	d103      	bne.n	800d5ac <_printf_common+0xac>
 800d5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ac:	3501      	adds	r5, #1
 800d5ae:	e7c6      	b.n	800d53e <_printf_common+0x3e>
 800d5b0:	18e1      	adds	r1, r4, r3
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	2030      	movs	r0, #48	; 0x30
 800d5b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5ba:	4422      	add	r2, r4
 800d5bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5c4:	3302      	adds	r3, #2
 800d5c6:	e7c7      	b.n	800d558 <_printf_common+0x58>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	4649      	mov	r1, r9
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	47c0      	blx	r8
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	d0e6      	beq.n	800d5a4 <_printf_common+0xa4>
 800d5d6:	3601      	adds	r6, #1
 800d5d8:	e7d9      	b.n	800d58e <_printf_common+0x8e>
	...

0800d5dc <_printf_i>:
 800d5dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e0:	7e0f      	ldrb	r7, [r1, #24]
 800d5e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5e4:	2f78      	cmp	r7, #120	; 0x78
 800d5e6:	4691      	mov	r9, r2
 800d5e8:	4680      	mov	r8, r0
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	469a      	mov	sl, r3
 800d5ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5f2:	d807      	bhi.n	800d604 <_printf_i+0x28>
 800d5f4:	2f62      	cmp	r7, #98	; 0x62
 800d5f6:	d80a      	bhi.n	800d60e <_printf_i+0x32>
 800d5f8:	2f00      	cmp	r7, #0
 800d5fa:	f000 80d4 	beq.w	800d7a6 <_printf_i+0x1ca>
 800d5fe:	2f58      	cmp	r7, #88	; 0x58
 800d600:	f000 80c0 	beq.w	800d784 <_printf_i+0x1a8>
 800d604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d60c:	e03a      	b.n	800d684 <_printf_i+0xa8>
 800d60e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d612:	2b15      	cmp	r3, #21
 800d614:	d8f6      	bhi.n	800d604 <_printf_i+0x28>
 800d616:	a101      	add	r1, pc, #4	; (adr r1, 800d61c <_printf_i+0x40>)
 800d618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d61c:	0800d675 	.word	0x0800d675
 800d620:	0800d689 	.word	0x0800d689
 800d624:	0800d605 	.word	0x0800d605
 800d628:	0800d605 	.word	0x0800d605
 800d62c:	0800d605 	.word	0x0800d605
 800d630:	0800d605 	.word	0x0800d605
 800d634:	0800d689 	.word	0x0800d689
 800d638:	0800d605 	.word	0x0800d605
 800d63c:	0800d605 	.word	0x0800d605
 800d640:	0800d605 	.word	0x0800d605
 800d644:	0800d605 	.word	0x0800d605
 800d648:	0800d78d 	.word	0x0800d78d
 800d64c:	0800d6b5 	.word	0x0800d6b5
 800d650:	0800d747 	.word	0x0800d747
 800d654:	0800d605 	.word	0x0800d605
 800d658:	0800d605 	.word	0x0800d605
 800d65c:	0800d7af 	.word	0x0800d7af
 800d660:	0800d605 	.word	0x0800d605
 800d664:	0800d6b5 	.word	0x0800d6b5
 800d668:	0800d605 	.word	0x0800d605
 800d66c:	0800d605 	.word	0x0800d605
 800d670:	0800d74f 	.word	0x0800d74f
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	1d1a      	adds	r2, r3, #4
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	602a      	str	r2, [r5, #0]
 800d67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d684:	2301      	movs	r3, #1
 800d686:	e09f      	b.n	800d7c8 <_printf_i+0x1ec>
 800d688:	6820      	ldr	r0, [r4, #0]
 800d68a:	682b      	ldr	r3, [r5, #0]
 800d68c:	0607      	lsls	r7, r0, #24
 800d68e:	f103 0104 	add.w	r1, r3, #4
 800d692:	6029      	str	r1, [r5, #0]
 800d694:	d501      	bpl.n	800d69a <_printf_i+0xbe>
 800d696:	681e      	ldr	r6, [r3, #0]
 800d698:	e003      	b.n	800d6a2 <_printf_i+0xc6>
 800d69a:	0646      	lsls	r6, r0, #25
 800d69c:	d5fb      	bpl.n	800d696 <_printf_i+0xba>
 800d69e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d6a2:	2e00      	cmp	r6, #0
 800d6a4:	da03      	bge.n	800d6ae <_printf_i+0xd2>
 800d6a6:	232d      	movs	r3, #45	; 0x2d
 800d6a8:	4276      	negs	r6, r6
 800d6aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6ae:	485a      	ldr	r0, [pc, #360]	; (800d818 <_printf_i+0x23c>)
 800d6b0:	230a      	movs	r3, #10
 800d6b2:	e012      	b.n	800d6da <_printf_i+0xfe>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	6820      	ldr	r0, [r4, #0]
 800d6b8:	1d19      	adds	r1, r3, #4
 800d6ba:	6029      	str	r1, [r5, #0]
 800d6bc:	0605      	lsls	r5, r0, #24
 800d6be:	d501      	bpl.n	800d6c4 <_printf_i+0xe8>
 800d6c0:	681e      	ldr	r6, [r3, #0]
 800d6c2:	e002      	b.n	800d6ca <_printf_i+0xee>
 800d6c4:	0641      	lsls	r1, r0, #25
 800d6c6:	d5fb      	bpl.n	800d6c0 <_printf_i+0xe4>
 800d6c8:	881e      	ldrh	r6, [r3, #0]
 800d6ca:	4853      	ldr	r0, [pc, #332]	; (800d818 <_printf_i+0x23c>)
 800d6cc:	2f6f      	cmp	r7, #111	; 0x6f
 800d6ce:	bf0c      	ite	eq
 800d6d0:	2308      	moveq	r3, #8
 800d6d2:	230a      	movne	r3, #10
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6da:	6865      	ldr	r5, [r4, #4]
 800d6dc:	60a5      	str	r5, [r4, #8]
 800d6de:	2d00      	cmp	r5, #0
 800d6e0:	bfa2      	ittt	ge
 800d6e2:	6821      	ldrge	r1, [r4, #0]
 800d6e4:	f021 0104 	bicge.w	r1, r1, #4
 800d6e8:	6021      	strge	r1, [r4, #0]
 800d6ea:	b90e      	cbnz	r6, 800d6f0 <_printf_i+0x114>
 800d6ec:	2d00      	cmp	r5, #0
 800d6ee:	d04b      	beq.n	800d788 <_printf_i+0x1ac>
 800d6f0:	4615      	mov	r5, r2
 800d6f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6f6:	fb03 6711 	mls	r7, r3, r1, r6
 800d6fa:	5dc7      	ldrb	r7, [r0, r7]
 800d6fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d700:	4637      	mov	r7, r6
 800d702:	42bb      	cmp	r3, r7
 800d704:	460e      	mov	r6, r1
 800d706:	d9f4      	bls.n	800d6f2 <_printf_i+0x116>
 800d708:	2b08      	cmp	r3, #8
 800d70a:	d10b      	bne.n	800d724 <_printf_i+0x148>
 800d70c:	6823      	ldr	r3, [r4, #0]
 800d70e:	07de      	lsls	r6, r3, #31
 800d710:	d508      	bpl.n	800d724 <_printf_i+0x148>
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	6861      	ldr	r1, [r4, #4]
 800d716:	4299      	cmp	r1, r3
 800d718:	bfde      	ittt	le
 800d71a:	2330      	movle	r3, #48	; 0x30
 800d71c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d720:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d724:	1b52      	subs	r2, r2, r5
 800d726:	6122      	str	r2, [r4, #16]
 800d728:	f8cd a000 	str.w	sl, [sp]
 800d72c:	464b      	mov	r3, r9
 800d72e:	aa03      	add	r2, sp, #12
 800d730:	4621      	mov	r1, r4
 800d732:	4640      	mov	r0, r8
 800d734:	f7ff fee4 	bl	800d500 <_printf_common>
 800d738:	3001      	adds	r0, #1
 800d73a:	d14a      	bne.n	800d7d2 <_printf_i+0x1f6>
 800d73c:	f04f 30ff 	mov.w	r0, #4294967295
 800d740:	b004      	add	sp, #16
 800d742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	f043 0320 	orr.w	r3, r3, #32
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	4833      	ldr	r0, [pc, #204]	; (800d81c <_printf_i+0x240>)
 800d750:	2778      	movs	r7, #120	; 0x78
 800d752:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	6829      	ldr	r1, [r5, #0]
 800d75a:	061f      	lsls	r7, r3, #24
 800d75c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d760:	d402      	bmi.n	800d768 <_printf_i+0x18c>
 800d762:	065f      	lsls	r7, r3, #25
 800d764:	bf48      	it	mi
 800d766:	b2b6      	uxthmi	r6, r6
 800d768:	07df      	lsls	r7, r3, #31
 800d76a:	bf48      	it	mi
 800d76c:	f043 0320 	orrmi.w	r3, r3, #32
 800d770:	6029      	str	r1, [r5, #0]
 800d772:	bf48      	it	mi
 800d774:	6023      	strmi	r3, [r4, #0]
 800d776:	b91e      	cbnz	r6, 800d780 <_printf_i+0x1a4>
 800d778:	6823      	ldr	r3, [r4, #0]
 800d77a:	f023 0320 	bic.w	r3, r3, #32
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	2310      	movs	r3, #16
 800d782:	e7a7      	b.n	800d6d4 <_printf_i+0xf8>
 800d784:	4824      	ldr	r0, [pc, #144]	; (800d818 <_printf_i+0x23c>)
 800d786:	e7e4      	b.n	800d752 <_printf_i+0x176>
 800d788:	4615      	mov	r5, r2
 800d78a:	e7bd      	b.n	800d708 <_printf_i+0x12c>
 800d78c:	682b      	ldr	r3, [r5, #0]
 800d78e:	6826      	ldr	r6, [r4, #0]
 800d790:	6961      	ldr	r1, [r4, #20]
 800d792:	1d18      	adds	r0, r3, #4
 800d794:	6028      	str	r0, [r5, #0]
 800d796:	0635      	lsls	r5, r6, #24
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	d501      	bpl.n	800d7a0 <_printf_i+0x1c4>
 800d79c:	6019      	str	r1, [r3, #0]
 800d79e:	e002      	b.n	800d7a6 <_printf_i+0x1ca>
 800d7a0:	0670      	lsls	r0, r6, #25
 800d7a2:	d5fb      	bpl.n	800d79c <_printf_i+0x1c0>
 800d7a4:	8019      	strh	r1, [r3, #0]
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	6123      	str	r3, [r4, #16]
 800d7aa:	4615      	mov	r5, r2
 800d7ac:	e7bc      	b.n	800d728 <_printf_i+0x14c>
 800d7ae:	682b      	ldr	r3, [r5, #0]
 800d7b0:	1d1a      	adds	r2, r3, #4
 800d7b2:	602a      	str	r2, [r5, #0]
 800d7b4:	681d      	ldr	r5, [r3, #0]
 800d7b6:	6862      	ldr	r2, [r4, #4]
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f7f2 fd98 	bl	80002f0 <memchr>
 800d7c0:	b108      	cbz	r0, 800d7c6 <_printf_i+0x1ea>
 800d7c2:	1b40      	subs	r0, r0, r5
 800d7c4:	6060      	str	r0, [r4, #4]
 800d7c6:	6863      	ldr	r3, [r4, #4]
 800d7c8:	6123      	str	r3, [r4, #16]
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7d0:	e7aa      	b.n	800d728 <_printf_i+0x14c>
 800d7d2:	6923      	ldr	r3, [r4, #16]
 800d7d4:	462a      	mov	r2, r5
 800d7d6:	4649      	mov	r1, r9
 800d7d8:	4640      	mov	r0, r8
 800d7da:	47d0      	blx	sl
 800d7dc:	3001      	adds	r0, #1
 800d7de:	d0ad      	beq.n	800d73c <_printf_i+0x160>
 800d7e0:	6823      	ldr	r3, [r4, #0]
 800d7e2:	079b      	lsls	r3, r3, #30
 800d7e4:	d413      	bmi.n	800d80e <_printf_i+0x232>
 800d7e6:	68e0      	ldr	r0, [r4, #12]
 800d7e8:	9b03      	ldr	r3, [sp, #12]
 800d7ea:	4298      	cmp	r0, r3
 800d7ec:	bfb8      	it	lt
 800d7ee:	4618      	movlt	r0, r3
 800d7f0:	e7a6      	b.n	800d740 <_printf_i+0x164>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	4632      	mov	r2, r6
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	47d0      	blx	sl
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	d09d      	beq.n	800d73c <_printf_i+0x160>
 800d800:	3501      	adds	r5, #1
 800d802:	68e3      	ldr	r3, [r4, #12]
 800d804:	9903      	ldr	r1, [sp, #12]
 800d806:	1a5b      	subs	r3, r3, r1
 800d808:	42ab      	cmp	r3, r5
 800d80a:	dcf2      	bgt.n	800d7f2 <_printf_i+0x216>
 800d80c:	e7eb      	b.n	800d7e6 <_printf_i+0x20a>
 800d80e:	2500      	movs	r5, #0
 800d810:	f104 0619 	add.w	r6, r4, #25
 800d814:	e7f5      	b.n	800d802 <_printf_i+0x226>
 800d816:	bf00      	nop
 800d818:	0800e5c9 	.word	0x0800e5c9
 800d81c:	0800e5da 	.word	0x0800e5da

0800d820 <memmove>:
 800d820:	4288      	cmp	r0, r1
 800d822:	b510      	push	{r4, lr}
 800d824:	eb01 0402 	add.w	r4, r1, r2
 800d828:	d902      	bls.n	800d830 <memmove+0x10>
 800d82a:	4284      	cmp	r4, r0
 800d82c:	4623      	mov	r3, r4
 800d82e:	d807      	bhi.n	800d840 <memmove+0x20>
 800d830:	1e43      	subs	r3, r0, #1
 800d832:	42a1      	cmp	r1, r4
 800d834:	d008      	beq.n	800d848 <memmove+0x28>
 800d836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d83e:	e7f8      	b.n	800d832 <memmove+0x12>
 800d840:	4402      	add	r2, r0
 800d842:	4601      	mov	r1, r0
 800d844:	428a      	cmp	r2, r1
 800d846:	d100      	bne.n	800d84a <memmove+0x2a>
 800d848:	bd10      	pop	{r4, pc}
 800d84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d852:	e7f7      	b.n	800d844 <memmove+0x24>

0800d854 <_sbrk_r>:
 800d854:	b538      	push	{r3, r4, r5, lr}
 800d856:	4d06      	ldr	r5, [pc, #24]	; (800d870 <_sbrk_r+0x1c>)
 800d858:	2300      	movs	r3, #0
 800d85a:	4604      	mov	r4, r0
 800d85c:	4608      	mov	r0, r1
 800d85e:	602b      	str	r3, [r5, #0]
 800d860:	f7f5 f928 	bl	8002ab4 <_sbrk>
 800d864:	1c43      	adds	r3, r0, #1
 800d866:	d102      	bne.n	800d86e <_sbrk_r+0x1a>
 800d868:	682b      	ldr	r3, [r5, #0]
 800d86a:	b103      	cbz	r3, 800d86e <_sbrk_r+0x1a>
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	bd38      	pop	{r3, r4, r5, pc}
 800d870:	24001000 	.word	0x24001000

0800d874 <_realloc_r>:
 800d874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d878:	4680      	mov	r8, r0
 800d87a:	4614      	mov	r4, r2
 800d87c:	460e      	mov	r6, r1
 800d87e:	b921      	cbnz	r1, 800d88a <_realloc_r+0x16>
 800d880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d884:	4611      	mov	r1, r2
 800d886:	f7ff bc57 	b.w	800d138 <_malloc_r>
 800d88a:	b92a      	cbnz	r2, 800d898 <_realloc_r+0x24>
 800d88c:	f7ff fbe8 	bl	800d060 <_free_r>
 800d890:	4625      	mov	r5, r4
 800d892:	4628      	mov	r0, r5
 800d894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d898:	f000 f81b 	bl	800d8d2 <_malloc_usable_size_r>
 800d89c:	4284      	cmp	r4, r0
 800d89e:	4607      	mov	r7, r0
 800d8a0:	d802      	bhi.n	800d8a8 <_realloc_r+0x34>
 800d8a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d8a6:	d812      	bhi.n	800d8ce <_realloc_r+0x5a>
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	f7ff fc44 	bl	800d138 <_malloc_r>
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d0ed      	beq.n	800d892 <_realloc_r+0x1e>
 800d8b6:	42bc      	cmp	r4, r7
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	4631      	mov	r1, r6
 800d8bc:	bf28      	it	cs
 800d8be:	463a      	movcs	r2, r7
 800d8c0:	f7ff fbc0 	bl	800d044 <memcpy>
 800d8c4:	4631      	mov	r1, r6
 800d8c6:	4640      	mov	r0, r8
 800d8c8:	f7ff fbca 	bl	800d060 <_free_r>
 800d8cc:	e7e1      	b.n	800d892 <_realloc_r+0x1e>
 800d8ce:	4635      	mov	r5, r6
 800d8d0:	e7df      	b.n	800d892 <_realloc_r+0x1e>

0800d8d2 <_malloc_usable_size_r>:
 800d8d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8d6:	1f18      	subs	r0, r3, #4
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	bfbc      	itt	lt
 800d8dc:	580b      	ldrlt	r3, [r1, r0]
 800d8de:	18c0      	addlt	r0, r0, r3
 800d8e0:	4770      	bx	lr
	...

0800d8e4 <_init>:
 800d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e6:	bf00      	nop
 800d8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ea:	bc08      	pop	{r3}
 800d8ec:	469e      	mov	lr, r3
 800d8ee:	4770      	bx	lr

0800d8f0 <_fini>:
 800d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f2:	bf00      	nop
 800d8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8f6:	bc08      	pop	{r3}
 800d8f8:	469e      	mov	lr, r3
 800d8fa:	4770      	bx	lr

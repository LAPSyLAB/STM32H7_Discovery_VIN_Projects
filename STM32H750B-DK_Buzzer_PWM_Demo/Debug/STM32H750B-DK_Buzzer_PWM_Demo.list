
STM32H750B-DK_Buzzer_PWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d65c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf0  0800d8fc  0800d8fc  0001d8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e5ec  0800e5ec  0001e5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e5f4  0800e5f4  0001e5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e5f8  0800e5f8  0001e5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800e5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400009c  0800e698  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000fc  0800e6f8  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d90  2400015c  0800e758  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000eec  0800e758  00020eec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032786  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004477  00000000  00000000  00052910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002560  00000000  00000000  00056d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023d0  00000000  00000000  000592e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041d9f  00000000  00000000  0005b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e164  00000000  00000000  0009d457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a6e66  00000000  00000000  000cb5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00272421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aab0  00000000  00000000  00272474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400015c 	.word	0x2400015c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d8e4 	.word	0x0800d8e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000160 	.word	0x24000160
 80002dc:	0800d8e4 	.word	0x0800d8e4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8000694:	b084      	sub	sp, #16
 8000696:	b580      	push	{r7, lr}
 8000698:	b088      	sub	sp, #32
 800069a:	af00      	add	r7, sp, #0
 800069c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80006a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 80006a4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80006a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006aa:	f009 ffcf 	bl	800a64c <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Period = period; // set the period duration
 80006ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 80006b4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006b8:	f009 fe58 	bl	800a36c <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80006c0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80006c4:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006d2:	4619      	mov	r1, r3
 80006d4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006d8:	f00a f84e 	bl	800a778 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80006dc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80006de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006e2:	f009 fea5 	bl	800a430 <HAL_TIM_PWM_Start>
}
 80006e6:	bf00      	nop
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f0:	b004      	add	sp, #16
 80006f2:	4770      	bx	lr

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	b099      	sub	sp, #100	; 0x64
 80006f8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f002 fac7 	bl	8002c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f8f5 	bl	80008ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000702:	f000 f97f 	bl	8000a04 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 ff59 	bl	80015bc <MX_GPIO_Init>
  MX_ADC1_Init();
 800070a:	f000 f9ab 	bl	8000a64 <MX_ADC1_Init>
  MX_ADC2_Init();
 800070e:	f000 fa21 	bl	8000b54 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000712:	f000 fa83 	bl	8000c1c <MX_ADC3_Init>
  MX_ETH_Init();
 8000716:	f000 fae3 	bl	8000ce0 <MX_ETH_Init>
  MX_FDCAN1_Init();
 800071a:	f000 fb2d 	bl	8000d78 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800071e:	f000 fb8f 	bl	8000e40 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8000722:	f000 fefd 	bl	8001520 <MX_FMC_Init>
  MX_LTDC_Init();
 8000726:	f000 fbef 	bl	8000f08 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800072a:	f000 fc9f 	bl	800106c <MX_QUADSPI_Init>
  MX_RTC_Init();
 800072e:	f000 fcc9 	bl	80010c4 <MX_RTC_Init>
  MX_SAI2_Init();
 8000732:	f000 fcef 	bl	8001114 <MX_SAI2_Init>
  MX_SPI2_Init();
 8000736:	f000 fdab 	bl	8001290 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800073a:	f000 fe73 	bl	8001424 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800073e:	f000 febd 	bl	80014bc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000742:	f000 fdf9 	bl	8001338 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000746:	210c      	movs	r1, #12
 8000748:	485b      	ldr	r0, [pc, #364]	; (80008b8 <main+0x1c4>)
 800074a:	f009 fe71 	bl	800a430 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  melodyCount = sizeof(melodySizes)/ sizeof(uint32_t);
 800074e:	2305      	movs	r3, #5
 8000750:	60bb      	str	r3, [r7, #8]

	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	e08f      	b.n	8000878 <main+0x184>
	  {
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	e071      	b.n	8000842 <main+0x14e>
	  	  {
//		  	  buzzerSetNewFrequency(melody[melodyIndex][noteIndex]);
			  NoteFreq = melody[melodyIndex][noteIndex];
 800075e:	4a57      	ldr	r2, [pc, #348]	; (80008bc <main+0x1c8>)
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	60fb      	str	r3, [r7, #12]
			  if (NoteFreq == 0) NoteFreq = 1;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <main+0x86>
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]

			  ARR_period = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 800077a:	4a51      	ldr	r2, [pc, #324]	; (80008c0 <main+0x1cc>)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000782:	607b      	str	r3, [r7, #4]
    		  setPWM(htim2, TIM_CHANNEL_4, ARR_period, ARR_period/2);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b29a      	uxth	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da00      	bge.n	8000790 <main+0x9c>
 800078e:	3301      	adds	r3, #1
 8000790:	105b      	asrs	r3, r3, #1
 8000792:	b29b      	uxth	r3, r3
 8000794:	4e48      	ldr	r6, [pc, #288]	; (80008b8 <main+0x1c4>)
 8000796:	9311      	str	r3, [sp, #68]	; 0x44
 8000798:	9210      	str	r2, [sp, #64]	; 0x40
 800079a:	230c      	movs	r3, #12
 800079c:	930f      	str	r3, [sp, #60]	; 0x3c
 800079e:	466d      	mov	r5, sp
 80007a0:	f106 0410 	add.w	r4, r6, #16
 80007a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007bc:	f7ff ff6a 	bl	8000694 <setPWM>

			  Delaymsecs = noteDurations[melodyIndex][noteIndex] * melodySlowfactor[melodyIndex];
 80007c0:	4a40      	ldr	r2, [pc, #256]	; (80008c4 <main+0x1d0>)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	493d      	ldr	r1, [pc, #244]	; (80008c8 <main+0x1d4>)
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007d8:	fb02 f303 	mul.w	r3, r2, r3
 80007dc:	603b      	str	r3, [r7, #0]

			  snprintf (SendBuffer,BUFSIZE,"Melody[%d],Note #%d F=%d Hz Duration:%d ms| ARR=%d CCR1=%d\r\n",melodyIndex,noteIndex,melody[melodyIndex][noteIndex],Delaymsecs,htim2.Instance->ARR,htim2.Instance->CCR1);
 80007de:	4a37      	ldr	r2, [pc, #220]	; (80008bc <main+0x1c8>)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <main+0x1c4>)
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80007f4:	4930      	ldr	r1, [pc, #192]	; (80008b8 <main+0x1c4>)
 80007f6:	6809      	ldr	r1, [r1, #0]
 80007f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80007fa:	9104      	str	r1, [sp, #16]
 80007fc:	9203      	str	r2, [sp, #12]
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	9202      	str	r2, [sp, #8]
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	4a30      	ldr	r2, [pc, #192]	; (80008cc <main+0x1d8>)
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	482f      	ldr	r0, [pc, #188]	; (80008d0 <main+0x1dc>)
 8000812:	f00c fbf3 	bl	800cffc <sniprintf>
			  HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000816:	482e      	ldr	r0, [pc, #184]	; (80008d0 <main+0x1dc>)
 8000818:	f7ff fd62 	bl	80002e0 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	492b      	ldr	r1, [pc, #172]	; (80008d0 <main+0x1dc>)
 8000824:	482b      	ldr	r0, [pc, #172]	; (80008d4 <main+0x1e0>)
 8000826:	f00a fec5 	bl	800b5b4 <HAL_UART_Transmit>

			  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 800082a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082e:	482a      	ldr	r0, [pc, #168]	; (80008d8 <main+0x1e4>)
 8000830:	f004 fddb 	bl	80053ea <HAL_GPIO_TogglePin>
//			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
//			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
//			  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_10);
//			  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_12);

		  	  HAL_Delay(Delaymsecs);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f002 faba 	bl	8002db0 <HAL_Delay>
		  for(noteIndex = 0; noteIndex < melodySizes[melodyIndex]; noteIndex++)
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	3301      	adds	r3, #1
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4a26      	ldr	r2, [pc, #152]	; (80008dc <main+0x1e8>)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	d886      	bhi.n	800075e <main+0x6a>
	  	  }
		  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of Melody[%d]\r\n\r\n",melodyIndex);
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <main+0x1ec>)
 8000854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000858:	481d      	ldr	r0, [pc, #116]	; (80008d0 <main+0x1dc>)
 800085a:	f00c fbcf 	bl	800cffc <sniprintf>
		  HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 800085e:	481c      	ldr	r0, [pc, #112]	; (80008d0 <main+0x1dc>)
 8000860:	f7ff fd3e 	bl	80002e0 <strlen>
 8000864:	4603      	mov	r3, r0
 8000866:	b29a      	uxth	r2, r3
 8000868:	2364      	movs	r3, #100	; 0x64
 800086a:	4919      	ldr	r1, [pc, #100]	; (80008d0 <main+0x1dc>)
 800086c:	4819      	ldr	r0, [pc, #100]	; (80008d4 <main+0x1e0>)
 800086e:	f00a fea1 	bl	800b5b4 <HAL_UART_Transmit>
	  for(melodyIndex = 0; melodyIndex < melodyCount; melodyIndex++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	429a      	cmp	r2, r3
 800087e:	f6ff af6b 	blt.w	8000758 <main+0x64>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 8000882:	2104      	movs	r1, #4
 8000884:	4817      	ldr	r0, [pc, #92]	; (80008e4 <main+0x1f0>)
 8000886:	f004 fdb0 	bl	80053ea <HAL_GPIO_TogglePin>

	  snprintf (SendBuffer,BUFSIZE,"\r\n\r\nEnd of All Melodies[%d]\r\n\r\n",melodyIndex);
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <main+0x1f4>)
 800088e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000892:	480f      	ldr	r0, [pc, #60]	; (80008d0 <main+0x1dc>)
 8000894:	f00c fbb2 	bl	800cffc <sniprintf>
	  HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),1);
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <main+0x1dc>)
 800089a:	f7ff fd21 	bl	80002e0 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	2301      	movs	r3, #1
 80008a4:	490a      	ldr	r1, [pc, #40]	; (80008d0 <main+0x1dc>)
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <main+0x1e0>)
 80008a8:	f00a fe84 	bl	800b5b4 <HAL_UART_Transmit>

      HAL_Delay(2000);
 80008ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b0:	f002 fa7e 	bl	8002db0 <HAL_Delay>
  {
 80008b4:	e74b      	b.n	800074e <main+0x5a>
 80008b6:	bf00      	nop
 80008b8:	2400079c 	.word	0x2400079c
 80008bc:	24000000 	.word	0x24000000
 80008c0:	000f4240 	.word	0x000f4240
 80008c4:	24000014 	.word	0x24000014
 80008c8:	0800e560 	.word	0x0800e560
 80008cc:	0800d8fc 	.word	0x0800d8fc
 80008d0:	24000dbc 	.word	0x24000dbc
 80008d4:	240007e8 	.word	0x240007e8
 80008d8:	58022000 	.word	0x58022000
 80008dc:	0800e56c 	.word	0x0800e56c
 80008e0:	0800d93c 	.word	0x0800d93c
 80008e4:	58022400 	.word	0x58022400
 80008e8:	0800d958 	.word	0x0800d958

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09c      	sub	sp, #112	; 0x70
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	224c      	movs	r2, #76	; 0x4c
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f00c fb76 	bl	800cfec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00c fb70 	bl	800cfec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800090c:	2002      	movs	r0, #2
 800090e:	f005 f977 	bl	8005c00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <SystemClock_Config+0x10c>)
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	4a37      	ldr	r2, [pc, #220]	; (80009f8 <SystemClock_Config+0x10c>)
 800091c:	f023 0301 	bic.w	r3, r3, #1
 8000920:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000922:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <SystemClock_Config+0x10c>)
 8000924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	4b33      	ldr	r3, [pc, #204]	; (80009fc <SystemClock_Config+0x110>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000934:	4a31      	ldr	r2, [pc, #196]	; (80009fc <SystemClock_Config+0x110>)
 8000936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <SystemClock_Config+0x110>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000948:	bf00      	nop
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <SystemClock_Config+0x110>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000956:	d1f8      	bne.n	800094a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000958:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <SystemClock_Config+0x114>)
 800095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095c:	f023 0303 	bic.w	r3, r3, #3
 8000960:	4a27      	ldr	r2, [pc, #156]	; (8000a00 <SystemClock_Config+0x114>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000968:	230b      	movs	r3, #11
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800096c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000972:	2301      	movs	r3, #1
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000976:	2340      	movs	r3, #64	; 0x40
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800097a:	2301      	movs	r3, #1
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	2302      	movs	r3, #2
 8000984:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000986:	2316      	movs	r3, #22
 8000988:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 800098a:	23a9      	movs	r3, #169	; 0xa9
 800098c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098e:	2302      	movs	r3, #2
 8000990:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000992:	2304      	movs	r3, #4
 8000994:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800099a:	2300      	movs	r3, #0
 800099c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800099e:	2300      	movs	r3, #0
 80009a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4618      	mov	r0, r3
 80009ac:	f005 fa2c 	bl	8005e08 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009b6:	f000 ffd7 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	233f      	movs	r3, #63	; 0x3f
 80009bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 fe6c 	bl	80066bc <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x102>
  {
    Error_Handler();
 80009ea:	f000 ffbd 	bl	8001968 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3770      	adds	r7, #112	; 0x70
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58000400 	.word	0x58000400
 80009fc:	58024800 	.word	0x58024800
 8000a00:	58024400 	.word	0x58024400

08000a04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b0      	sub	sp, #192	; 0xc0
 8000a08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	22c0      	movs	r2, #192	; 0xc0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00c faeb 	bl	800cfec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a26:	230c      	movs	r3, #12
 8000a28:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a36:	23c0      	movs	r3, #192	; 0xc0
 8000a38:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f006 f9c2 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a56:	f000 ff87 	bl	8001968 <Error_Handler>
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	37c0      	adds	r7, #192	; 0xc0
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000a8a:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <MX_ADC1_Init+0xec>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000a90:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aae:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae6:	4819      	ldr	r0, [pc, #100]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000ae8:	f002 fb48 	bl	800317c <HAL_ADC_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000af2:	f000 ff39 	bl	8001968 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4812      	ldr	r0, [pc, #72]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000b02:	f003 f95f 	bl	8003dc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b0c:	f000 ff2c 	bl	8001968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b10:	2301      	movs	r3, #1
 8000b12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b14:	2306      	movs	r3, #6
 8000b16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b22:	2304      	movs	r3, #4
 8000b24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_ADC1_Init+0xe8>)
 8000b34:	f002 fcc4 	bl	80034c0 <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b3e:	f000 ff13 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	240001b0 	.word	0x240001b0
 8000b50:	40022000 	.word	0x40022000

08000b54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000b6e:	4a2a      	ldr	r2, [pc, #168]	; (8000c18 <MX_ADC2_Init+0xc4>)
 8000b70:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000b74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b78:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b86:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000b88:	2204      	movs	r2, #4
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000bcc:	f002 fad6 	bl	800317c <HAL_ADC_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bd6:	f000 fec7 	bl	8001968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bde:	2306      	movs	r3, #6
 8000be0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bec:	2304      	movs	r3, #4
 8000bee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_ADC2_Init+0xc0>)
 8000bfe:	f002 fc5f 	bl	80034c0 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000c08:	f000 feae 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	24000214 	.word	0x24000214
 8000c18:	40022100 	.word	0x40022100

08000c1c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c36:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <MX_ADC3_Init+0xbc>)
 8000c38:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c48:	2204      	movs	r2, #4
 8000c4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000c8c:	f002 fa76 	bl	800317c <HAL_ADC_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c96:	f000 fe67 	bl	8001968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_ADC3_Init+0xc0>)
 8000c9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000caa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cac:	2304      	movs	r3, #4
 8000cae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_ADC3_Init+0xb8>)
 8000cbe:	f002 fbff 	bl	80034c0 <HAL_ADC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000cc8:	f000 fe4e 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	24000278 	.word	0x24000278
 8000cd8:	58026000 	.word	0x58026000
 8000cdc:	1d500080 	.word	0x1d500080

08000ce0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_ETH_Init+0x80>)
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <MX_ETH_Init+0x84>)
 8000ce8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_ETH_Init+0x88>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_ETH_Init+0x88>)
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_ETH_Init+0x88>)
 8000cf8:	22e1      	movs	r2, #225	; 0xe1
 8000cfa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_ETH_Init+0x88>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_ETH_Init+0x88>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_ETH_Init+0x88>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_ETH_Init+0x80>)
 8000d10:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <MX_ETH_Init+0x88>)
 8000d12:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_ETH_Init+0x80>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_ETH_Init+0x80>)
 8000d1c:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <MX_ETH_Init+0x8c>)
 8000d1e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_ETH_Init+0x80>)
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <MX_ETH_Init+0x90>)
 8000d24:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_ETH_Init+0x80>)
 8000d28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d2c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_ETH_Init+0x80>)
 8000d30:	f003 fa0a 	bl	8004148 <HAL_ETH_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d3a:	f000 fe15 	bl	8001968 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d3e:	2238      	movs	r2, #56	; 0x38
 8000d40:	2100      	movs	r1, #0
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <MX_ETH_Init+0x94>)
 8000d44:	f00c f952 	bl	800cfec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_ETH_Init+0x94>)
 8000d4a:	2221      	movs	r2, #33	; 0x21
 8000d4c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_ETH_Init+0x94>)
 8000d50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d54:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_ETH_Init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	240002dc 	.word	0x240002dc
 8000d64:	40028000 	.word	0x40028000
 8000d68:	24000ebc 	.word	0x24000ebc
 8000d6c:	240000fc 	.word	0x240000fc
 8000d70:	2400009c 	.word	0x2400009c
 8000d74:	24000178 	.word	0x24000178

08000d78 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d7c:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d7e:	4a2f      	ldr	r2, [pc, #188]	; (8000e3c <MX_FDCAN1_Init+0xc4>)
 8000d80:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d88:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000da2:	2210      	movs	r2, #16
 8000da4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000df6:	2204      	movs	r2, #4
 8000df8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e02:	2204      	movs	r2, #4
 8000e04:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_FDCAN1_Init+0xc0>)
 8000e26:	f003 fdb3 	bl	8004990 <HAL_FDCAN_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e30:	f000 fd9a 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2400038c 	.word	0x2400038c
 8000e3c:	4000a000 	.word	0x4000a000

08000e40 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e44:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <MX_FDCAN2_Init+0xc4>)
 8000e48:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000ee8:	2204      	movs	r2, #4
 8000eea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_FDCAN2_Init+0xc0>)
 8000eee:	f003 fd4f 	bl	8004990 <HAL_FDCAN_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ef8:	f000 fd36 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2400042c 	.word	0x2400042c
 8000f04:	4000a400 	.word	0x4000a400

08000f08 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b09a      	sub	sp, #104	; 0x68
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f12:	2234      	movs	r2, #52	; 0x34
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00c f868 	bl	800cfec <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2234      	movs	r2, #52	; 0x34
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00c f862 	bl	800cfec <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f28:	4b4e      	ldr	r3, [pc, #312]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f2a:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <MX_LTDC_Init+0x160>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f2e:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f34:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f3a:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f40:	4b48      	ldr	r3, [pc, #288]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f4c:	4b45      	ldr	r3, [pc, #276]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f4e:	2203      	movs	r2, #3
 8000f50:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f52:	4b44      	ldr	r3, [pc, #272]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f54:	220e      	movs	r2, #14
 8000f56:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f58:	4b42      	ldr	r3, [pc, #264]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f60:	f240 228e 	movw	r2, #654	; 0x28e
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f66:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f68:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f70:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f78:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f7e:	4b39      	ldr	r3, [pc, #228]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f86:	4b37      	ldr	r3, [pc, #220]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f8e:	4b35      	ldr	r3, [pc, #212]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f96:	4833      	ldr	r0, [pc, #204]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000f98:	f004 fa42 	bl	8005420 <HAL_LTDC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fa2:	f000 fce1 	bl	8001968 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481c      	ldr	r0, [pc, #112]	; (8001064 <MX_LTDC_Init+0x15c>)
 8000ff4:	f004 fae4 	bl	80055c0 <HAL_LTDC_ConfigLayer>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000ffe:	f000 fcb3 	bl	8001968 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800101e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001022:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001024:	2305      	movs	r3, #5
 8001026:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_LTDC_Init+0x15c>)
 800104e:	f004 fab7 	bl	80055c0 <HAL_LTDC_ConfigLayer>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001058:	f000 fc86 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3768      	adds	r7, #104	; 0x68
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	240004cc 	.word	0x240004cc
 8001068:	50001000 	.word	0x50001000

0800106c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_QUADSPI_Init+0x50>)
 8001072:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <MX_QUADSPI_Init+0x54>)
 8001074:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_QUADSPI_Init+0x50>)
 8001078:	22ff      	movs	r2, #255	; 0xff
 800107a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_QUADSPI_Init+0x50>)
 800107e:	2201      	movs	r2, #1
 8001080:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_QUADSPI_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_QUADSPI_Init+0x50>)
 800108a:	2201      	movs	r2, #1
 800108c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_QUADSPI_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_QUADSPI_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_QUADSPI_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_QUADSPI_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_QUADSPI_Init+0x50>)
 80010a8:	f004 fdf4 	bl	8005c94 <HAL_QSPI_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010b2:	f000 fc59 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	24000574 	.word	0x24000574
 80010c0:	52005000 	.word	0x52005000

080010c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_RTC_Init+0x48>)
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <MX_RTC_Init+0x4c>)
 80010cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_RTC_Init+0x48>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_RTC_Init+0x48>)
 80010d6:	227f      	movs	r2, #127	; 0x7f
 80010d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_RTC_Init+0x48>)
 80010dc:	22ff      	movs	r2, #255	; 0xff
 80010de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_RTC_Init+0x48>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_RTC_Init+0x48>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_RTC_Init+0x48>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_RTC_Init+0x48>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_RTC_Init+0x48>)
 80010fa:	f008 fb69 	bl	80097d0 <HAL_RTC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001104:	f000 fc30 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	240005c0 	.word	0x240005c0
 8001110:	58004000 	.word	0x58004000

08001114 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001118:	4b58      	ldr	r3, [pc, #352]	; (800127c <MX_SAI2_Init+0x168>)
 800111a:	4a59      	ldr	r2, [pc, #356]	; (8001280 <MX_SAI2_Init+0x16c>)
 800111c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800111e:	4b57      	ldr	r3, [pc, #348]	; (800127c <MX_SAI2_Init+0x168>)
 8001120:	2200      	movs	r2, #0
 8001122:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <MX_SAI2_Init+0x168>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800112a:	4b54      	ldr	r3, [pc, #336]	; (800127c <MX_SAI2_Init+0x168>)
 800112c:	2240      	movs	r2, #64	; 0x40
 800112e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001130:	4b52      	ldr	r3, [pc, #328]	; (800127c <MX_SAI2_Init+0x168>)
 8001132:	2200      	movs	r2, #0
 8001134:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <MX_SAI2_Init+0x168>)
 8001138:	2200      	movs	r2, #0
 800113a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800113c:	4b4f      	ldr	r3, [pc, #316]	; (800127c <MX_SAI2_Init+0x168>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001142:	4b4e      	ldr	r3, [pc, #312]	; (800127c <MX_SAI2_Init+0x168>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001148:	4b4c      	ldr	r3, [pc, #304]	; (800127c <MX_SAI2_Init+0x168>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800114e:	4b4b      	ldr	r3, [pc, #300]	; (800127c <MX_SAI2_Init+0x168>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001154:	4b49      	ldr	r3, [pc, #292]	; (800127c <MX_SAI2_Init+0x168>)
 8001156:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <MX_SAI2_Init+0x170>)
 8001158:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <MX_SAI2_Init+0x168>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001160:	4b46      	ldr	r3, [pc, #280]	; (800127c <MX_SAI2_Init+0x168>)
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001166:	4b45      	ldr	r3, [pc, #276]	; (800127c <MX_SAI2_Init+0x168>)
 8001168:	2200      	movs	r2, #0
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800116c:	4b43      	ldr	r3, [pc, #268]	; (800127c <MX_SAI2_Init+0x168>)
 800116e:	2200      	movs	r2, #0
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001172:	4b42      	ldr	r3, [pc, #264]	; (800127c <MX_SAI2_Init+0x168>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 800117a:	4b40      	ldr	r3, [pc, #256]	; (800127c <MX_SAI2_Init+0x168>)
 800117c:	2201      	movs	r2, #1
 800117e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001180:	4b3e      	ldr	r3, [pc, #248]	; (800127c <MX_SAI2_Init+0x168>)
 8001182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001186:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001188:	4b3c      	ldr	r3, [pc, #240]	; (800127c <MX_SAI2_Init+0x168>)
 800118a:	2208      	movs	r2, #8
 800118c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <MX_SAI2_Init+0x168>)
 8001190:	2201      	movs	r2, #1
 8001192:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <MX_SAI2_Init+0x168>)
 8001196:	2200      	movs	r2, #0
 8001198:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <MX_SAI2_Init+0x168>)
 800119c:	2200      	movs	r2, #0
 800119e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <MX_SAI2_Init+0x168>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <MX_SAI2_Init+0x168>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <MX_SAI2_Init+0x168>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80011b2:	4b32      	ldr	r3, [pc, #200]	; (800127c <MX_SAI2_Init+0x168>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <MX_SAI2_Init+0x168>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80011be:	482f      	ldr	r0, [pc, #188]	; (800127c <MX_SAI2_Init+0x168>)
 80011c0:	f008 fc1e 	bl	8009a00 <HAL_SAI_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 80011ca:	f000 fbcd 	bl	8001968 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <MX_SAI2_Init+0x174>)
 80011d0:	4a2e      	ldr	r2, [pc, #184]	; (800128c <MX_SAI2_Init+0x178>)
 80011d2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <MX_SAI2_Init+0x174>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80011da:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <MX_SAI2_Init+0x174>)
 80011dc:	2203      	movs	r2, #3
 80011de:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <MX_SAI2_Init+0x174>)
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011e6:	4b28      	ldr	r3, [pc, #160]	; (8001288 <MX_SAI2_Init+0x174>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_SAI2_Init+0x174>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <MX_SAI2_Init+0x174>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_SAI2_Init+0x174>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_SAI2_Init+0x174>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MX_SAI2_Init+0x174>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_SAI2_Init+0x174>)
 800120c:	2200      	movs	r2, #0
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_SAI2_Init+0x174>)
 8001212:	2200      	movs	r2, #0
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_SAI2_Init+0x174>)
 8001218:	2200      	movs	r2, #0
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_SAI2_Init+0x174>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_SAI2_Init+0x174>)
 8001226:	2201      	movs	r2, #1
 8001228:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_SAI2_Init+0x174>)
 800122c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_SAI2_Init+0x174>)
 8001234:	2208      	movs	r2, #8
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_SAI2_Init+0x174>)
 800123a:	2201      	movs	r2, #1
 800123c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_SAI2_Init+0x174>)
 8001240:	2200      	movs	r2, #0
 8001242:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_SAI2_Init+0x174>)
 8001246:	2200      	movs	r2, #0
 8001248:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_SAI2_Init+0x174>)
 800124c:	2200      	movs	r2, #0
 800124e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <MX_SAI2_Init+0x174>)
 8001252:	2200      	movs	r2, #0
 8001254:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_SAI2_Init+0x174>)
 8001258:	2200      	movs	r2, #0
 800125a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <MX_SAI2_Init+0x174>)
 800125e:	2201      	movs	r2, #1
 8001260:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_SAI2_Init+0x174>)
 8001264:	2200      	movs	r2, #0
 8001266:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_SAI2_Init+0x174>)
 800126a:	f008 fbc9 	bl	8009a00 <HAL_SAI_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001274:	f000 fb78 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	240005e4 	.word	0x240005e4
 8001280:	40015c04 	.word	0x40015c04
 8001284:	0002ee00 	.word	0x0002ee00
 8001288:	2400067c 	.word	0x2400067c
 800128c:	40015c24 	.word	0x40015c24

08001290 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <MX_SPI2_Init+0xa0>)
 8001296:	4a27      	ldr	r2, [pc, #156]	; (8001334 <MX_SPI2_Init+0xa4>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <MX_SPI2_Init+0xa0>)
 800129c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012aa:	2203      	movs	r2, #3
 80012ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <MX_SPI2_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_SPI2_Init+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_SPI2_Init+0xa0>)
 8001306:	2200      	movs	r2, #0
 8001308:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPI2_Init+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_SPI2_Init+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPI2_Init+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_SPI2_Init+0xa0>)
 800131e:	f008 fe8f 	bl	800a040 <HAL_SPI_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001328:	f000 fb1e 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	24000714 	.word	0x24000714
 8001334:	40003800 	.word	0x40003800

08001338 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <MX_TIM2_Init+0xe8>)
 800136c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001370:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_TIM2_Init+0xe8>)
 8001374:	223f      	movs	r2, #63	; 0x3f
 8001376:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_TIM2_Init+0xe8>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_TIM2_Init+0xe8>)
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_TIM2_Init+0xe8>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_TIM2_Init+0xe8>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001392:	4823      	ldr	r0, [pc, #140]	; (8001420 <MX_TIM2_Init+0xe8>)
 8001394:	f008 ff93 	bl	800a2be <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800139e:	f000 fae3 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ac:	4619      	mov	r1, r3
 80013ae:	481c      	ldr	r0, [pc, #112]	; (8001420 <MX_TIM2_Init+0xe8>)
 80013b0:	f009 faf6 	bl	800a9a0 <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013ba:	f000 fad5 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <MX_TIM2_Init+0xe8>)
 80013c0:	f008 ffd4 	bl	800a36c <HAL_TIM_PWM_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013ca:	f000 facd 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <MX_TIM2_Init+0xe8>)
 80013de:	f00a f80b 	bl	800b3f8 <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013e8:	f000 fabe 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	; 0x60
 80013ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	220c      	movs	r2, #12
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_TIM2_Init+0xe8>)
 8001404:	f009 f9b8 	bl	800a778 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800140e:	f000 faab 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_TIM2_Init+0xe8>)
 8001414:	f001 f8a0 	bl	8002558 <HAL_TIM_MspPostInit>

}
 8001418:	bf00      	nop
 800141a:	3738      	adds	r7, #56	; 0x38
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2400079c 	.word	0x2400079c

08001424 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <MX_USART3_UART_Init+0x94>)
 800142c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 800146e:	f00a f851 	bl	800b514 <HAL_UART_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001478:	f000 fa76 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 8001480:	f00b f8e1 	bl	800c646 <HAL_UARTEx_SetTxFifoThreshold>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800148a:	f000 fa6d 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 8001492:	f00b f916 	bl	800c6c2 <HAL_UARTEx_SetRxFifoThreshold>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800149c:	f000 fa64 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_USART3_UART_Init+0x90>)
 80014a2:	f00b f897 	bl	800c5d4 <HAL_UARTEx_DisableFifoMode>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014ac:	f000 fa5c 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	240007e8 	.word	0x240007e8
 80014b8:	40004800 	.word	0x40004800

080014bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014c2:	4a16      	ldr	r2, [pc, #88]	; (800151c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80014c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014c8:	2209      	movs	r2, #9
 80014ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ce:	2202      	movs	r2, #2
 80014d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014da:	2202      	movs	r2, #2
 80014dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001504:	f004 fa34 	bl	8005970 <HAL_PCD_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800150e:	f000 fa2b 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2400087c 	.word	0x2400087c
 800151c:	40080000 	.word	0x40080000

08001520 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_FMC_Init+0x94>)
 800153a:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <MX_FMC_Init+0x98>)
 800153c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_FMC_Init+0x94>)
 8001540:	2201      	movs	r2, #1
 8001542:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_FMC_Init+0x94>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_FMC_Init+0x94>)
 800154c:	2204      	movs	r2, #4
 800154e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_FMC_Init+0x94>)
 8001552:	2210      	movs	r2, #16
 8001554:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_FMC_Init+0x94>)
 8001558:	2240      	movs	r2, #64	; 0x40
 800155a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_FMC_Init+0x94>)
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_FMC_Init+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_FMC_Init+0x94>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_FMC_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_FMC_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800157a:	2310      	movs	r3, #16
 800157c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800157e:	2310      	movs	r3, #16
 8001580:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001582:	2310      	movs	r3, #16
 8001584:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001586:	2310      	movs	r3, #16
 8001588:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800158a:	2310      	movs	r3, #16
 800158c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800158e:	2310      	movs	r3, #16
 8001590:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001592:	2310      	movs	r3, #16
 8001594:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_FMC_Init+0x94>)
 800159c:	f008 fd14 	bl	8009fc8 <HAL_SDRAM_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80015a6:	f000 f9df 	bl	8001968 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	24000d88 	.word	0x24000d88
 80015b8:	52004140 	.word	0x52004140

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b090      	sub	sp, #64	; 0x40
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015d2:	4bc0      	ldr	r3, [pc, #768]	; (80018d4 <MX_GPIO_Init+0x318>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d8:	4abe      	ldr	r2, [pc, #760]	; (80018d4 <MX_GPIO_Init+0x318>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e2:	4bbc      	ldr	r3, [pc, #752]	; (80018d4 <MX_GPIO_Init+0x318>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	4bb8      	ldr	r3, [pc, #736]	; (80018d4 <MX_GPIO_Init+0x318>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f6:	4ab7      	ldr	r2, [pc, #732]	; (80018d4 <MX_GPIO_Init+0x318>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001600:	4bb4      	ldr	r3, [pc, #720]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800160e:	4bb1      	ldr	r3, [pc, #708]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001614:	4aaf      	ldr	r2, [pc, #700]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161e:	4bad      	ldr	r3, [pc, #692]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800162c:	4ba9      	ldr	r3, [pc, #676]	; (80018d4 <MX_GPIO_Init+0x318>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001632:	4aa8      	ldr	r2, [pc, #672]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800163c:	4ba5      	ldr	r3, [pc, #660]	; (80018d4 <MX_GPIO_Init+0x318>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	4ba2      	ldr	r3, [pc, #648]	; (80018d4 <MX_GPIO_Init+0x318>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001650:	4aa0      	ldr	r2, [pc, #640]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800165a:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <MX_GPIO_Init+0x318>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b9a      	ldr	r3, [pc, #616]	; (80018d4 <MX_GPIO_Init+0x318>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166e:	4a99      	ldr	r2, [pc, #612]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001678:	4b96      	ldr	r3, [pc, #600]	; (80018d4 <MX_GPIO_Init+0x318>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001686:	4b93      	ldr	r3, [pc, #588]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168c:	4a91      	ldr	r2, [pc, #580]	; (80018d4 <MX_GPIO_Init+0x318>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001696:	4b8f      	ldr	r3, [pc, #572]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016a4:	4b8b      	ldr	r3, [pc, #556]	; (80018d4 <MX_GPIO_Init+0x318>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016aa:	4a8a      	ldr	r2, [pc, #552]	; (80018d4 <MX_GPIO_Init+0x318>)
 80016ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b4:	4b87      	ldr	r3, [pc, #540]	; (80018d4 <MX_GPIO_Init+0x318>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	4b84      	ldr	r3, [pc, #528]	; (80018d4 <MX_GPIO_Init+0x318>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c8:	4a82      	ldr	r2, [pc, #520]	; (80018d4 <MX_GPIO_Init+0x318>)
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d2:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <MX_GPIO_Init+0x318>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e0:	4b7c      	ldr	r3, [pc, #496]	; (80018d4 <MX_GPIO_Init+0x318>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	4a7b      	ldr	r2, [pc, #492]	; (80018d4 <MX_GPIO_Init+0x318>)
 80016e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f0:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <MX_GPIO_Init+0x318>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fe:	4b75      	ldr	r3, [pc, #468]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	4a73      	ldr	r2, [pc, #460]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001706:	f043 0320 	orr.w	r3, r3, #32
 800170a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170e:	4b71      	ldr	r3, [pc, #452]	; (80018d4 <MX_GPIO_Init+0x318>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001722:	486d      	ldr	r0, [pc, #436]	; (80018d8 <MX_GPIO_Init+0x31c>)
 8001724:	f003 fe48 	bl	80053b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800172e:	486b      	ldr	r0, [pc, #428]	; (80018dc <MX_GPIO_Init+0x320>)
 8001730:	f003 fe42 	bl	80053b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f241 0104 	movw	r1, #4100	; 0x1004
 800173a:	4869      	ldr	r0, [pc, #420]	; (80018e0 <MX_GPIO_Init+0x324>)
 800173c:	f003 fe3c 	bl	80053b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2104      	movs	r1, #4
 8001744:	4867      	ldr	r0, [pc, #412]	; (80018e4 <MX_GPIO_Init+0x328>)
 8001746:	f003 fe37 	bl	80053b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2110      	movs	r1, #16
 800174e:	4866      	ldr	r0, [pc, #408]	; (80018e8 <MX_GPIO_Init+0x32c>)
 8001750:	f003 fe32 	bl	80053b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001766:	2303      	movs	r3, #3
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	485a      	ldr	r0, [pc, #360]	; (80018dc <MX_GPIO_Init+0x320>)
 8001772:	f003 fc71 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001786:	4619      	mov	r1, r3
 8001788:	4858      	ldr	r0, [pc, #352]	; (80018ec <MX_GPIO_Init+0x330>)
 800178a:	f003 fc65 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800178e:	2330      	movs	r3, #48	; 0x30
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800179e:	230a      	movs	r3, #10
 80017a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	4851      	ldr	r0, [pc, #324]	; (80018f0 <MX_GPIO_Init+0x334>)
 80017aa:	f003 fc55 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80017ae:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c0:	4619      	mov	r1, r3
 80017c2:	4849      	ldr	r0, [pc, #292]	; (80018e8 <MX_GPIO_Init+0x32c>)
 80017c4:	f003 fc48 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017da:	4619      	mov	r1, r3
 80017dc:	4845      	ldr	r0, [pc, #276]	; (80018f4 <MX_GPIO_Init+0x338>)
 80017de:	f003 fc3b 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fc:	4619      	mov	r1, r3
 80017fe:	483a      	ldr	r0, [pc, #232]	; (80018e8 <MX_GPIO_Init+0x32c>)
 8001800:	f003 fc2a 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001814:	2306      	movs	r3, #6
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	4619      	mov	r1, r3
 800181e:	4836      	ldr	r0, [pc, #216]	; (80018f8 <MX_GPIO_Init+0x33c>)
 8001820:	f003 fc1a 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183a:	4619      	mov	r1, r3
 800183c:	4826      	ldr	r0, [pc, #152]	; (80018d8 <MX_GPIO_Init+0x31c>)
 800183e:	f003 fc0b 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001842:	2304      	movs	r3, #4
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001846:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001854:	4619      	mov	r1, r3
 8001856:	4828      	ldr	r0, [pc, #160]	; (80018f8 <MX_GPIO_Init+0x33c>)
 8001858:	f003 fbfe 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800185c:	2301      	movs	r3, #1
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186c:	4619      	mov	r1, r3
 800186e:	4823      	ldr	r0, [pc, #140]	; (80018fc <MX_GPIO_Init+0x340>)
 8001870:	f003 fbf2 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH10 PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001874:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <MX_GPIO_Init+0x320>)
 800188e:	f003 fbe3 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001898:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a6:	4619      	mov	r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <MX_GPIO_Init+0x320>)
 80018aa:	f003 fbd5 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ae:	2340      	movs	r3, #64	; 0x40
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80018be:	2309      	movs	r3, #9
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c6:	4619      	mov	r1, r3
 80018c8:	4807      	ldr	r0, [pc, #28]	; (80018e8 <MX_GPIO_Init+0x32c>)
 80018ca:	f003 fbc5 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80018ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80018d2:	e015      	b.n	8001900 <MX_GPIO_Init+0x344>
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58022000 	.word	0x58022000
 80018dc:	58021c00 	.word	0x58021c00
 80018e0:	58020400 	.word	0x58020400
 80018e4:	58022400 	.word	0x58022400
 80018e8:	58020000 	.word	0x58020000
 80018ec:	58020c00 	.word	0x58020c00
 80018f0:	58021000 	.word	0x58021000
 80018f4:	58020800 	.word	0x58020800
 80018f8:	58021800 	.word	0x58021800
 80018fc:	58022800 	.word	0x58022800
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001912:	4619      	mov	r1, r3
 8001914:	4811      	ldr	r0, [pc, #68]	; (800195c <MX_GPIO_Init+0x3a0>)
 8001916:	f003 fb9f 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800191a:	2304      	movs	r3, #4
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	4619      	mov	r1, r3
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <MX_GPIO_Init+0x3a4>)
 8001932:	f003 fb91 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001936:	2310      	movs	r3, #16
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_GPIO_Init+0x3a8>)
 800194e:	f003 fb83 	bl	8005058 <HAL_GPIO_Init>

}
 8001952:	bf00      	nop
 8001954:	3740      	adds	r7, #64	; 0x40
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	58020400 	.word	0x58020400
 8001960:	58022400 	.word	0x58022400
 8001964:	58020000 	.word	0x58020000

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001970:	e7fe      	b.n	8001970 <Error_Handler+0x8>
	...

08001974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_MspInit+0x30>)
 800197c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001980:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_MspInit+0x30>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_MspInit+0x30>)
 800198c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	58024400 	.word	0x58024400

080019a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b090      	sub	sp, #64	; 0x40
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_ADC_MspInit+0x1e8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d14e      	bne.n	8001a68 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_ADC_MspInit+0x1ec>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a70      	ldr	r2, [pc, #448]	; (8001b94 <HAL_ADC_MspInit+0x1ec>)
 80019d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019d4:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_ADC_MspInit+0x1ec>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d10e      	bne.n	80019fa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019dc:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 80019de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019e2:	4a6d      	ldr	r2, [pc, #436]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 80019ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	4a65      	ldr	r2, [pc, #404]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0a:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	4a5e      	ldr	r2, [pc, #376]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a28:	4b5b      	ldr	r3, [pc, #364]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a36:	2301      	movs	r3, #1
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a46:	4619      	mov	r1, r3
 8001a48:	4854      	ldr	r0, [pc, #336]	; (8001b9c <HAL_ADC_MspInit+0x1f4>)
 8001a4a:	f003 fb05 	bl	8005058 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001a4e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001a52:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001a56:	f001 f9ef 	bl	8002e38 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001a5a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a5e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a62:	f001 f9e9 	bl	8002e38 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a66:	e08f      	b.n	8001b88 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_ADC_MspInit+0x1f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d133      	bne.n	8001ada <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <HAL_ADC_MspInit+0x1ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	4a46      	ldr	r2, [pc, #280]	; (8001b94 <HAL_ADC_MspInit+0x1ec>)
 8001a7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a7c:	4b45      	ldr	r3, [pc, #276]	; (8001b94 <HAL_ADC_MspInit+0x1ec>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10e      	bne.n	8001aa2 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a84:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a8a:	4a43      	ldr	r2, [pc, #268]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001a8c:	f043 0320 	orr.w	r3, r3, #32
 8001a90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001a96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001ac0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001ac4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001ac8:	f001 f9b6 	bl	8002e38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001acc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001ad4:	f001 f9b0 	bl	8002e38 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001ad8:	e056      	b.n	8001b88 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <HAL_ADC_MspInit+0x1fc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d151      	bne.n	8001b88 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001b0a:	f043 0320 	orr.w	r3, r3, #32
 8001b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b26:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_ADC_MspInit+0x1f0>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b44:	2303      	movs	r3, #3
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b50:	4619      	mov	r1, r3
 8001b52:	4815      	ldr	r0, [pc, #84]	; (8001ba8 <HAL_ADC_MspInit+0x200>)
 8001b54:	f003 fa80 	bl	8005058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <HAL_ADC_MspInit+0x1f4>)
 8001b6c:	f003 fa74 	bl	8005058 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001b70:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001b74:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001b78:	f001 f95e 	bl	8002e38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001b7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001b80:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001b84:	f001 f958 	bl	8002e38 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001b88:	bf00      	nop
 8001b8a:	3740      	adds	r7, #64	; 0x40
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40022000 	.word	0x40022000
 8001b94:	24000ec4 	.word	0x24000ec4
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	58020800 	.word	0x58020800
 8001ba0:	40022100 	.word	0x40022100
 8001ba4:	58026000 	.word	0x58026000
 8001ba8:	58021400 	.word	0x58021400

08001bac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b092      	sub	sp, #72	; 0x48
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a87      	ldr	r2, [pc, #540]	; (8001de8 <HAL_ETH_MspInit+0x23c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	f040 8108 	bne.w	8001de0 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001bd0:	4b86      	ldr	r3, [pc, #536]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001bd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bd6:	4a85      	ldr	r2, [pc, #532]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001be0:	4b82      	ldr	r3, [pc, #520]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001be2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
 8001bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001bee:	4b7f      	ldr	r3, [pc, #508]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bf4:	4a7d      	ldr	r2, [pc, #500]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bfe:	4b7b      	ldr	r3, [pc, #492]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001c0c:	4b77      	ldr	r3, [pc, #476]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c12:	4a76      	ldr	r2, [pc, #472]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c1c:	4b73      	ldr	r3, [pc, #460]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c2a:	4b70      	ldr	r3, [pc, #448]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3a:	4b6c      	ldr	r3, [pc, #432]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	4a67      	ldr	r2, [pc, #412]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c50:	f043 0310 	orr.w	r3, r3, #16
 8001c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c58:	4b64      	ldr	r3, [pc, #400]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	623b      	str	r3, [r7, #32]
 8001c64:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c66:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	4a5f      	ldr	r2, [pc, #380]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8a:	4a58      	ldr	r2, [pc, #352]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c94:	4b55      	ldr	r3, [pc, #340]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ca2:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca8:	4a50      	ldr	r2, [pc, #320]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb2:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd0:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	4a41      	ldr	r2, [pc, #260]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cee:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_ETH_MspInit+0x240>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001cfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d0e:	230b      	movs	r3, #11
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d16:	4619      	mov	r1, r3
 8001d18:	4835      	ldr	r0, [pc, #212]	; (8001df0 <HAL_ETH_MspInit+0x244>)
 8001d1a:	f003 f99d 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d2e:	230b      	movs	r3, #11
 8001d30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d36:	4619      	mov	r1, r3
 8001d38:	482e      	ldr	r0, [pc, #184]	; (8001df4 <HAL_ETH_MspInit+0x248>)
 8001d3a:	f003 f98d 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d50:	230b      	movs	r3, #11
 8001d52:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4827      	ldr	r0, [pc, #156]	; (8001df8 <HAL_ETH_MspInit+0x24c>)
 8001d5c:	f003 f97c 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001d60:	233e      	movs	r3, #62	; 0x3e
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d70:	230b      	movs	r3, #11
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4820      	ldr	r0, [pc, #128]	; (8001dfc <HAL_ETH_MspInit+0x250>)
 8001d7c:	f003 f96c 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001d80:	230c      	movs	r3, #12
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d90:	230b      	movs	r3, #11
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4819      	ldr	r0, [pc, #100]	; (8001e00 <HAL_ETH_MspInit+0x254>)
 8001d9c:	f003 f95c 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001da0:	2386      	movs	r3, #134	; 0x86
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001db0:	230b      	movs	r3, #11
 8001db2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001db8:	4619      	mov	r1, r3
 8001dba:	4812      	ldr	r0, [pc, #72]	; (8001e04 <HAL_ETH_MspInit+0x258>)
 8001dbc:	f003 f94c 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dd0:	230b      	movs	r3, #11
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480b      	ldr	r0, [pc, #44]	; (8001e08 <HAL_ETH_MspInit+0x25c>)
 8001ddc:	f003 f93c 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3748      	adds	r7, #72	; 0x48
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40028000 	.word	0x40028000
 8001dec:	58024400 	.word	0x58024400
 8001df0:	58021800 	.word	0x58021800
 8001df4:	58021000 	.word	0x58021000
 8001df8:	58022000 	.word	0x58022000
 8001dfc:	58020800 	.word	0x58020800
 8001e00:	58021c00 	.word	0x58021c00
 8001e04:	58020000 	.word	0x58020000
 8001e08:	58020400 	.word	0x58020400

08001e0c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0bc      	sub	sp, #240	; 0xf0
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	22c0      	movs	r2, #192	; 0xc0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00b f8dd 	bl	800cfec <memset>
  if(hfdcan->Instance==FDCAN1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <HAL_FDCAN_MspInit+0x188>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d151      	bne.n	8001ee0 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 ffbd 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001e60:	f7ff fd82 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e64:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <HAL_FDCAN_MspInit+0x18c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a4b      	ldr	r2, [pc, #300]	; (8001f98 <HAL_FDCAN_MspInit+0x18c>)
 8001e6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_FDCAN_MspInit+0x18c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d10e      	bne.n	8001e94 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e76:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001e78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e7c:	4a47      	ldr	r2, [pc, #284]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e86:	4b45      	ldr	r3, [pc, #276]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001e88:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e94:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001eb2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ecc:	2309      	movs	r3, #9
 8001ece:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ed2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4831      	ldr	r0, [pc, #196]	; (8001fa0 <HAL_FDCAN_MspInit+0x194>)
 8001eda:	f003 f8bd 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001ede:	e055      	b.n	8001f8c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <HAL_FDCAN_MspInit+0x198>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d150      	bne.n	8001f8c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001eea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ef6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001efa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efe:	f107 0318 	add.w	r3, r7, #24
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 ff66 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001f0e:	f7ff fd2b 	bl	8001968 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_FDCAN_MspInit+0x18c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_FDCAN_MspInit+0x18c>)
 8001f1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_FDCAN_MspInit+0x18c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d10e      	bne.n	8001f42 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001f26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001f36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_FDCAN_MspInit+0x190>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001f60:	f242 0320 	movw	r3, #8224	; 0x2020
 8001f64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f7a:	2309      	movs	r3, #9
 8001f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f84:	4619      	mov	r1, r3
 8001f86:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <HAL_FDCAN_MspInit+0x19c>)
 8001f88:	f003 f866 	bl	8005058 <HAL_GPIO_Init>
}
 8001f8c:	bf00      	nop
 8001f8e:	37f0      	adds	r7, #240	; 0xf0
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	4000a000 	.word	0x4000a000
 8001f98:	24000ec8 	.word	0x24000ec8
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	58021c00 	.word	0x58021c00
 8001fa4:	4000a400 	.word	0x4000a400
 8001fa8:	58020400 	.word	0x58020400

08001fac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0be      	sub	sp, #248	; 0xf8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fc4:	f107 0320 	add.w	r3, r7, #32
 8001fc8:	22c0      	movs	r2, #192	; 0xc0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00b f80d 	bl	800cfec <memset>
  if(hltdc->Instance==LTDC)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a66      	ldr	r2, [pc, #408]	; (8002170 <HAL_LTDC_MspInit+0x1c4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	f040 80c4 	bne.w	8002166 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fde:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001fea:	2320      	movs	r3, #32
 8001fec:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001fee:	23c0      	movs	r3, #192	; 0xc0
 8001ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001ffe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002002:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002008:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fede 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 800201e:	f7ff fca3 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002022:	4b54      	ldr	r3, [pc, #336]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 8002024:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002028:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002032:	4b50      	ldr	r3, [pc, #320]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 8002034:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002040:	4b4c      	ldr	r3, [pc, #304]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 8002048:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002050:	4b48      	ldr	r3, [pc, #288]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800205e:	4b45      	ldr	r3, [pc, #276]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002064:	4a43      	ldr	r2, [pc, #268]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800207c:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002082:	4a3c      	ldr	r2, [pc, #240]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 8002084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800208c:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a0:	4a34      	ldr	r2, [pc, #208]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 80020a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020aa:	4b32      	ldr	r3, [pc, #200]	; (8002174 <HAL_LTDC_MspInit+0x1c8>)
 80020ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80020b8:	23fc      	movs	r3, #252	; 0xfc
 80020ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020d0:	230e      	movs	r3, #14
 80020d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020da:	4619      	mov	r1, r3
 80020dc:	4826      	ldr	r0, [pc, #152]	; (8002178 <HAL_LTDC_MspInit+0x1cc>)
 80020de:	f002 ffbb 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80020e2:	f24d 2303 	movw	r3, #53763	; 0xd203
 80020e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020fc:	230e      	movs	r3, #14
 80020fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002102:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002106:	4619      	mov	r1, r3
 8002108:	481c      	ldr	r0, [pc, #112]	; (800217c <HAL_LTDC_MspInit+0x1d0>)
 800210a:	f002 ffa5 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800210e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002128:	230e      	movs	r3, #14
 800212a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800212e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002132:	4619      	mov	r1, r3
 8002134:	4812      	ldr	r0, [pc, #72]	; (8002180 <HAL_LTDC_MspInit+0x1d4>)
 8002136:	f002 ff8f 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800213a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800213e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002154:	230e      	movs	r3, #14
 8002156:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800215a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800215e:	4619      	mov	r1, r3
 8002160:	4808      	ldr	r0, [pc, #32]	; (8002184 <HAL_LTDC_MspInit+0x1d8>)
 8002162:	f002 ff79 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002166:	bf00      	nop
 8002168:	37f8      	adds	r7, #248	; 0xf8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	50001000 	.word	0x50001000
 8002174:	58024400 	.word	0x58024400
 8002178:	58022800 	.word	0x58022800
 800217c:	58022000 	.word	0x58022000
 8002180:	58022400 	.word	0x58022400
 8002184:	58021c00 	.word	0x58021c00

08002188 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0bc      	sub	sp, #240	; 0xf0
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a0:	f107 0318 	add.w	r3, r7, #24
 80021a4:	22c0      	movs	r2, #192	; 0xc0
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f00a ff1f 	bl	800cfec <memset>
  if(hqspi->Instance==QUADSPI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a56      	ldr	r2, [pc, #344]	; (800230c <HAL_QSPI_MspInit+0x184>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	f040 80a5 	bne.w	8002304 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80021ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ca:	f107 0318 	add.w	r3, r7, #24
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fe00 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80021da:	f7ff fbc5 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021de:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 80021e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021e4:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80021ee:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 80021f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	4b44      	ldr	r3, [pc, #272]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002202:	4a43      	ldr	r2, [pc, #268]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800220c:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 800221c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002220:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 8002222:	f043 0320 	orr.w	r3, r3, #32
 8002226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800222a:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 800222c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002238:	4b35      	ldr	r3, [pc, #212]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223e:	4a34      	ldr	r2, [pc, #208]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002248:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_QSPI_MspInit+0x188>)
 800224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002256:	2340      	movs	r3, #64	; 0x40
 8002258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800226e:	230a      	movs	r3, #10
 8002270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002278:	4619      	mov	r1, r3
 800227a:	4826      	ldr	r0, [pc, #152]	; (8002314 <HAL_QSPI_MspInit+0x18c>)
 800227c:	f002 feec 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002280:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800229a:	2309      	movs	r3, #9
 800229c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022a4:	4619      	mov	r1, r3
 80022a6:	481c      	ldr	r0, [pc, #112]	; (8002318 <HAL_QSPI_MspInit+0x190>)
 80022a8:	f002 fed6 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80022c6:	230a      	movs	r3, #10
 80022c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022d0:	4619      	mov	r1, r3
 80022d2:	4811      	ldr	r0, [pc, #68]	; (8002318 <HAL_QSPI_MspInit+0x190>)
 80022d4:	f002 fec0 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022f2:	2309      	movs	r3, #9
 80022f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022fc:	4619      	mov	r1, r3
 80022fe:	4807      	ldr	r0, [pc, #28]	; (800231c <HAL_QSPI_MspInit+0x194>)
 8002300:	f002 feaa 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002304:	bf00      	nop
 8002306:	37f0      	adds	r7, #240	; 0xf0
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	52005000 	.word	0x52005000
 8002310:	58024400 	.word	0x58024400
 8002314:	58020400 	.word	0x58020400
 8002318:	58021400 	.word	0x58021400
 800231c:	58020c00 	.word	0x58020c00

08002320 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b0b2      	sub	sp, #200	; 0xc8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	22c0      	movs	r2, #192	; 0xc0
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f00a fe5b 	bl	800cfec <memset>
  if(hrtc->Instance==RTC)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a10      	ldr	r2, [pc, #64]	; (800237c <HAL_RTC_MspInit+0x5c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d119      	bne.n	8002374 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002340:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800234c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002354:	f107 0308 	add.w	r3, r7, #8
 8002358:	4618      	mov	r0, r3
 800235a:	f004 fd3b 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002364:	f7ff fb00 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RTC_MspInit+0x60>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_RTC_MspInit+0x60>)
 800236e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002374:	bf00      	nop
 8002376:	37c8      	adds	r7, #200	; 0xc8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	58004000 	.word	0x58004000
 8002380:	58024400 	.word	0x58024400

08002384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0bc      	sub	sp, #240	; 0xf0
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	22c0      	movs	r2, #192	; 0xc0
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f00a fe21 	bl	800cfec <memset>
  if(hspi->Instance==SPI2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a55      	ldr	r2, [pc, #340]	; (8002504 <HAL_SPI_MspInit+0x180>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	f040 80a3 	bne.w	80024fc <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80023b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c6:	f107 0318 	add.w	r3, r7, #24
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fd02 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80023d6:	f7ff fac7 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023da:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <HAL_SPI_MspInit+0x184>)
 80023dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e0:	4a49      	ldr	r2, [pc, #292]	; (8002508 <HAL_SPI_MspInit+0x184>)
 80023e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_SPI_MspInit+0x184>)
 80023ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f8:	4b43      	ldr	r3, [pc, #268]	; (8002508 <HAL_SPI_MspInit+0x184>)
 80023fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fe:	4a42      	ldr	r2, [pc, #264]	; (8002508 <HAL_SPI_MspInit+0x184>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002408:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <HAL_SPI_MspInit+0x184>)
 800240a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002416:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <HAL_SPI_MspInit+0x184>)
 8002418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241c:	4a3a      	ldr	r2, [pc, #232]	; (8002508 <HAL_SPI_MspInit+0x184>)
 800241e:	f043 0308 	orr.w	r3, r3, #8
 8002422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_SPI_MspInit+0x184>)
 8002428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <HAL_SPI_MspInit+0x184>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243a:	4a33      	ldr	r2, [pc, #204]	; (8002508 <HAL_SPI_MspInit+0x184>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002444:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_SPI_MspInit+0x184>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002452:	2310      	movs	r3, #16
 8002454:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800246a:	2307      	movs	r3, #7
 800246c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002474:	4619      	mov	r1, r3
 8002476:	4825      	ldr	r0, [pc, #148]	; (800250c <HAL_SPI_MspInit+0x188>)
 8002478:	f002 fdee 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800247c:	2308      	movs	r3, #8
 800247e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002494:	2305      	movs	r3, #5
 8002496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800249a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800249e:	4619      	mov	r1, r3
 80024a0:	481b      	ldr	r0, [pc, #108]	; (8002510 <HAL_SPI_MspInit+0x18c>)
 80024a2:	f002 fdd9 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024a6:	2304      	movs	r3, #4
 80024a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024be:	2305      	movs	r3, #5
 80024c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024c8:	4619      	mov	r1, r3
 80024ca:	4812      	ldr	r0, [pc, #72]	; (8002514 <HAL_SPI_MspInit+0x190>)
 80024cc:	f002 fdc4 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ea:	2305      	movs	r3, #5
 80024ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024f4:	4619      	mov	r1, r3
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <HAL_SPI_MspInit+0x188>)
 80024f8:	f002 fdae 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024fc:	bf00      	nop
 80024fe:	37f0      	adds	r7, #240	; 0xf0
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40003800 	.word	0x40003800
 8002508:	58024400 	.word	0x58024400
 800250c:	58020400 	.word	0x58020400
 8002510:	58020c00 	.word	0x58020c00
 8002514:	58022000 	.word	0x58022000

08002518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_TIM_Base_MspInit+0x3c>)
 800252c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002530:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_TIM_Base_MspInit+0x3c>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_TIM_Base_MspInit+0x3c>)
 800253c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	58024400 	.word	0x58024400

08002558 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002578:	d11e      	bne.n	80025b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_TIM_MspPostInit+0x68>)
 800257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002580:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_TIM_MspPostInit+0x68>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_TIM_MspPostInit+0x68>)
 800258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002598:	2308      	movs	r3, #8
 800259a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025a8:	2301      	movs	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	4619      	mov	r1, r3
 80025b2:	4804      	ldr	r0, [pc, #16]	; (80025c4 <HAL_TIM_MspPostInit+0x6c>)
 80025b4:	f002 fd50 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025b8:	bf00      	nop
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58024400 	.word	0x58024400
 80025c4:	58020000 	.word	0x58020000

080025c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b0ba      	sub	sp, #232	; 0xe8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	22c0      	movs	r2, #192	; 0xc0
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f00a fcff 	bl	800cfec <memset>
  if(huart->Instance==USART3)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a27      	ldr	r2, [pc, #156]	; (8002690 <HAL_UART_MspInit+0xc8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d146      	bne.n	8002686 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025f8:	f04f 0202 	mov.w	r2, #2
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800260a:	f107 0310 	add.w	r3, r7, #16
 800260e:	4618      	mov	r0, r3
 8002610:	f004 fbe0 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800261a:	f7ff f9a5 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_UART_MspInit+0xcc>)
 8002620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_UART_MspInit+0xcc>)
 8002626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_UART_MspInit+0xcc>)
 8002630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_UART_MspInit+0xcc>)
 800263e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002642:	4a14      	ldr	r2, [pc, #80]	; (8002694 <HAL_UART_MspInit+0xcc>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_UART_MspInit+0xcc>)
 800264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800265a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800265e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002674:	2307      	movs	r3, #7
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <HAL_UART_MspInit+0xd0>)
 8002682:	f002 fce9 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002686:	bf00      	nop
 8002688:	37e8      	adds	r7, #232	; 0xe8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40004800 	.word	0x40004800
 8002694:	58024400 	.word	0x58024400
 8002698:	58020400 	.word	0x58020400

0800269c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b0ba      	sub	sp, #232	; 0xe8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	22c0      	movs	r2, #192	; 0xc0
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f00a fc95 	bl	800cfec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a30      	ldr	r2, [pc, #192]	; (8002788 <HAL_PCD_MspInit+0xec>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d159      	bne.n	8002780 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80026d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 fb75 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80026f0:	f7ff f93a 	bl	8001968 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80026f4:	f003 fabe 	bl	8005c74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_PCD_MspInit+0xf0>)
 80026fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fe:	4a23      	ldr	r2, [pc, #140]	; (800278c <HAL_PCD_MspInit+0xf0>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_PCD_MspInit+0xf0>)
 800270a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800271a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800272a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800272e:	4619      	mov	r1, r3
 8002730:	4817      	ldr	r0, [pc, #92]	; (8002790 <HAL_PCD_MspInit+0xf4>)
 8002732:	f002 fc91 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002736:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800273a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002750:	230a      	movs	r3, #10
 8002752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002756:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800275a:	4619      	mov	r1, r3
 800275c:	480c      	ldr	r0, [pc, #48]	; (8002790 <HAL_PCD_MspInit+0xf4>)
 800275e:	f002 fc7b 	bl	8005058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_PCD_MspInit+0xf0>)
 8002764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002768:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_PCD_MspInit+0xf0>)
 800276a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800276e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_PCD_MspInit+0xf0>)
 8002774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002780:	bf00      	nop
 8002782:	37e8      	adds	r7, #232	; 0xe8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40080000 	.word	0x40080000
 800278c:	58024400 	.word	0x58024400
 8002790:	58020000 	.word	0x58020000

08002794 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002794:	b580      	push	{r7, lr}
 8002796:	b0b8      	sub	sp, #224	; 0xe0
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800279a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80027aa:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <HAL_FMC_MspInit+0x15c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 8099 	bne.w	80028e6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80027b4:	4b4e      	ldr	r3, [pc, #312]	; (80028f0 <HAL_FMC_MspInit+0x15c>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	22c0      	movs	r2, #192	; 0xc0
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f00a fc12 	bl	800cfec <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80027c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d8:	f107 0308 	add.w	r3, r7, #8
 80027dc:	4618      	mov	r0, r3
 80027de:	f004 faf9 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80027e8:	f7ff f8be 	bl	8001968 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80027ec:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_FMC_MspInit+0x160>)
 80027ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027f2:	4a40      	ldr	r2, [pc, #256]	; (80028f4 <HAL_FMC_MspInit+0x160>)
 80027f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80027fc:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_FMC_MspInit+0x160>)
 80027fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800280a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800280e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002824:	230c      	movs	r3, #12
 8002826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800282a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800282e:	4619      	mov	r1, r3
 8002830:	4831      	ldr	r0, [pc, #196]	; (80028f8 <HAL_FMC_MspInit+0x164>)
 8002832:	f002 fc11 	bl	8005058 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002836:	f248 1333 	movw	r3, #33075	; 0x8133
 800283a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002850:	230c      	movs	r3, #12
 8002852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002856:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800285a:	4619      	mov	r1, r3
 800285c:	4827      	ldr	r0, [pc, #156]	; (80028fc <HAL_FMC_MspInit+0x168>)
 800285e:	f002 fbfb 	bl	8005058 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002862:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002866:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800287c:	230c      	movs	r3, #12
 800287e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002882:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002886:	4619      	mov	r1, r3
 8002888:	481d      	ldr	r0, [pc, #116]	; (8002900 <HAL_FMC_MspInit+0x16c>)
 800288a:	f002 fbe5 	bl	8005058 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800288e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028a8:	230c      	movs	r3, #12
 80028aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028b2:	4619      	mov	r1, r3
 80028b4:	4813      	ldr	r0, [pc, #76]	; (8002904 <HAL_FMC_MspInit+0x170>)
 80028b6:	f002 fbcf 	bl	8005058 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028ba:	23e0      	movs	r3, #224	; 0xe0
 80028bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028d2:	230c      	movs	r3, #12
 80028d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028dc:	4619      	mov	r1, r3
 80028de:	480a      	ldr	r0, [pc, #40]	; (8002908 <HAL_FMC_MspInit+0x174>)
 80028e0:	f002 fbba 	bl	8005058 <HAL_GPIO_Init>
 80028e4:	e000      	b.n	80028e8 <HAL_FMC_MspInit+0x154>
    return;
 80028e6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80028e8:	37e0      	adds	r7, #224	; 0xe0
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	24000ecc 	.word	0x24000ecc
 80028f4:	58024400 	.word	0x58024400
 80028f8:	58021000 	.word	0x58021000
 80028fc:	58021800 	.word	0x58021800
 8002900:	58020c00 	.word	0x58020c00
 8002904:	58021400 	.word	0x58021400
 8002908:	58021c00 	.word	0x58021c00

0800290c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002914:	f7ff ff3e 	bl	8002794 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b0ba      	sub	sp, #232	; 0xe8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	22c0      	movs	r2, #192	; 0xc0
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f00a fb5b 	bl	800cfec <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a45      	ldr	r2, [pc, #276]	; (8002a50 <HAL_SAI_MspInit+0x130>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d13e      	bne.n	80029be <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800294c:	2300      	movs	r3, #0
 800294e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	4618      	mov	r0, r3
 8002956:	f004 fa3d 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002960:	f7ff f802 	bl	8001968 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10e      	bne.n	800298a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800296c:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 800296e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002972:	4a39      	ldr	r2, [pc, #228]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 8002974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002978:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 800297e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800298a:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 8002992:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002994:	23f0      	movs	r3, #240	; 0xf0
 8002996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80029ac:	230a      	movs	r3, #10
 80029ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4828      	ldr	r0, [pc, #160]	; (8002a5c <HAL_SAI_MspInit+0x13c>)
 80029ba:	f002 fb4d 	bl	8005058 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <HAL_SAI_MspInit+0x140>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d13f      	bne.n	8002a48 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80029c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 f9f9 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80029e8:	f7fe ffbe 	bl	8001968 <Error_Handler>
    }

      if (SAI2_client == 0)
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10e      	bne.n	8002a12 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 80029f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 80029fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 8002a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 8002a1a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a36:	230a      	movs	r3, #10
 8002a38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4808      	ldr	r0, [pc, #32]	; (8002a64 <HAL_SAI_MspInit+0x144>)
 8002a44:	f002 fb08 	bl	8005058 <HAL_GPIO_Init>

    }
}
 8002a48:	bf00      	nop
 8002a4a:	37e8      	adds	r7, #232	; 0xe8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40015c04 	.word	0x40015c04
 8002a54:	24000ed0 	.word	0x24000ed0
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	58022000 	.word	0x58022000
 8002a60:	40015c24 	.word	0x40015c24
 8002a64:	58021800 	.word	0x58021800

08002a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <NMI_Handler+0x4>

08002a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a72:	e7fe      	b.n	8002a72 <HardFault_Handler+0x4>

08002a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <MemManage_Handler+0x4>

08002a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <BusFault_Handler+0x4>

08002a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a84:	e7fe      	b.n	8002a84 <UsageFault_Handler+0x4>

08002a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab4:	f000 f95c 	bl	8002d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <_sbrk+0x5c>)
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <_sbrk+0x60>)
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <_sbrk+0x64>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <_sbrk+0x64>)
 8002ada:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <_sbrk+0x68>)
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d207      	bcs.n	8002afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aec:	f00a fa46 	bl	800cf7c <__errno>
 8002af0:	4603      	mov	r3, r0
 8002af2:	220c      	movs	r2, #12
 8002af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
 8002afa:	e009      	b.n	8002b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <_sbrk+0x64>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <_sbrk+0x64>)
 8002b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	24080000 	.word	0x24080000
 8002b1c:	00000400 	.word	0x00000400
 8002b20:	24000ed4 	.word	0x24000ed4
 8002b24:	24000ef0 	.word	0x24000ef0

08002b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b2c:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <SystemInit+0xe4>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <SystemInit+0xe4>)
 8002b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b3c:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <SystemInit+0xe8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d807      	bhi.n	8002b58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b48:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <SystemInit+0xe8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 030f 	bic.w	r3, r3, #15
 8002b50:	4a2f      	ldr	r2, [pc, #188]	; (8002c10 <SystemInit+0xe8>)
 8002b52:	f043 0307 	orr.w	r3, r3, #7
 8002b56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b58:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <SystemInit+0xec>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a2d      	ldr	r2, [pc, #180]	; (8002c14 <SystemInit+0xec>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <SystemInit+0xec>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <SystemInit+0xec>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4929      	ldr	r1, [pc, #164]	; (8002c14 <SystemInit+0xec>)
 8002b70:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <SystemInit+0xf0>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <SystemInit+0xe8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <SystemInit+0xe8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 030f 	bic.w	r3, r3, #15
 8002b8a:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <SystemInit+0xe8>)
 8002b8c:	f043 0307 	orr.w	r3, r3, #7
 8002b90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <SystemInit+0xec>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b98:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <SystemInit+0xec>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <SystemInit+0xec>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <SystemInit+0xec>)
 8002ba6:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <SystemInit+0xf4>)
 8002ba8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <SystemInit+0xec>)
 8002bac:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <SystemInit+0xf8>)
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002bb0:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <SystemInit+0xec>)
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <SystemInit+0xfc>)
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <SystemInit+0xec>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <SystemInit+0xec>)
 8002bbe:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <SystemInit+0xfc>)
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <SystemInit+0xec>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <SystemInit+0xec>)
 8002bca:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <SystemInit+0xfc>)
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <SystemInit+0xec>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <SystemInit+0xec>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <SystemInit+0xec>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <SystemInit+0xec>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <SystemInit+0x100>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <SystemInit+0x104>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf2:	d202      	bcs.n	8002bfa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <SystemInit+0x108>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <SystemInit+0x10c>)
 8002bfc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00
 8002c10:	52002000 	.word	0x52002000
 8002c14:	58024400 	.word	0x58024400
 8002c18:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c1c:	02020200 	.word	0x02020200
 8002c20:	01ff0000 	.word	0x01ff0000
 8002c24:	01010280 	.word	0x01010280
 8002c28:	5c001000 	.word	0x5c001000
 8002c2c:	ffff0000 	.word	0xffff0000
 8002c30:	51008108 	.word	0x51008108
 8002c34:	52004000 	.word	0x52004000

08002c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c3c:	f7ff ff74 	bl	8002b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c40:	480c      	ldr	r0, [pc, #48]	; (8002c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c42:	490d      	ldr	r1, [pc, #52]	; (8002c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c48:	e002      	b.n	8002c50 <LoopCopyDataInit>

08002c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4e:	3304      	adds	r3, #4

08002c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c54:	d3f9      	bcc.n	8002c4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c58:	4c0a      	ldr	r4, [pc, #40]	; (8002c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c5c:	e001      	b.n	8002c62 <LoopFillZerobss>

08002c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c60:	3204      	adds	r2, #4

08002c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c64:	d3fb      	bcc.n	8002c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c66:	f00a f98f 	bl	800cf88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c6a:	f7fd fd43 	bl	80006f4 <main>
  bx  lr
 8002c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002c74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c78:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8002c7c:	0800e5fc 	.word	0x0800e5fc
  ldr r2, =_sbss
 8002c80:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 8002c84:	24000eec 	.word	0x24000eec

08002c88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c88:	e7fe      	b.n	8002c88 <ADC3_IRQHandler>
	...

08002c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c92:	2003      	movs	r0, #3
 8002c94:	f001 fa26 	bl	80040e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c98:	f003 fec6 	bl	8006a28 <HAL_RCC_GetSysClockFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_Init+0x68>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	4913      	ldr	r1, [pc, #76]	; (8002cf8 <HAL_Init+0x6c>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_Init+0x68>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <HAL_Init+0x6c>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <HAL_Init+0x70>)
 8002cce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cd0:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <HAL_Init+0x74>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f000 f814 	bl	8002d04 <HAL_InitTick>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e002      	b.n	8002cec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce6:	f7fe fe45 	bl	8001974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	0800e580 	.word	0x0800e580
 8002cfc:	2400002c 	.word	0x2400002c
 8002d00:	24000028 	.word	0x24000028

08002d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_InitTick+0x60>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e021      	b.n	8002d5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_InitTick+0x64>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_InitTick+0x60>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 f9fd 	bl	800412e <HAL_SYSTICK_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00e      	b.n	8002d5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d80a      	bhi.n	8002d5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d44:	2200      	movs	r2, #0
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	f001 f9d5 	bl	80040fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d50:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <HAL_InitTick+0x68>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	24000034 	.word	0x24000034
 8002d68:	24000028 	.word	0x24000028
 8002d6c:	24000030 	.word	0x24000030

08002d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x20>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_IncTick+0x24>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_IncTick+0x24>)
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	24000034 	.word	0x24000034
 8002d94:	24000ed8 	.word	0x24000ed8

08002d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_GetTick+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	24000ed8 	.word	0x24000ed8

08002db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff ffee 	bl	8002d98 <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d005      	beq.n	8002dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_Delay+0x44>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dd6:	bf00      	nop
 8002dd8:	f7ff ffde 	bl	8002d98 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d8f7      	bhi.n	8002dd8 <HAL_Delay+0x28>
  {
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	24000034 	.word	0x24000034

08002df8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_GetREVID+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0c1b      	lsrs	r3, r3, #16
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	5c001000 	.word	0x5c001000

08002e10 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e20:	4904      	ldr	r1, [pc, #16]	; (8002e34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	58000400 	.word	0x58000400

08002e38 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	4904      	ldr	r1, [pc, #16]	; (8002e60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	58000400 	.word	0x58000400

08002e64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3360      	adds	r3, #96	; 0x60
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	431a      	orrs	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	611a      	str	r2, [r3, #16]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b087      	sub	sp, #28
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3360      	adds	r3, #96	; 0x60
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	601a      	str	r2, [r3, #0]
  }
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3330      	adds	r3, #48	; 0x30
 8002f84:	461a      	mov	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	4413      	add	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	211f      	movs	r1, #31
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0e9b      	lsrs	r3, r3, #26
 8002fac:	f003 011f 	and.w	r1, r3, #31
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	0e5b      	lsrs	r3, r3, #25
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	4413      	add	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	0d1b      	lsrs	r3, r3, #20
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2107      	movs	r1, #7
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	401a      	ands	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0d1b      	lsrs	r3, r3, #20
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	431a      	orrs	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003016:	bf00      	nop
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0318 	and.w	r3, r3, #24
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003048:	40d9      	lsrs	r1, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	400b      	ands	r3, r1
 800304e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003052:	431a      	orrs	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	000fffff 	.word	0x000fffff

0800306c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <LL_ADC_DisableDeepPowerDown+0x20>)
 800307a:	4013      	ands	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6093      	str	r3, [r2, #8]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	5fffffc0 	.word	0x5fffffc0

08003090 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a4:	d101      	bne.n	80030aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <LL_ADC_EnableInternalRegulator+0x24>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	6fffffc0 	.word	0x6fffffc0

080030e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030f4:	d101      	bne.n	80030fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <LL_ADC_IsEnabled+0x18>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <LL_ADC_IsEnabled+0x1a>
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d101      	bne.n	8003146 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b08      	cmp	r3, #8
 8003166:	d101      	bne.n	800316c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e18f      	b.n	80034b6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fe fbff 	bl	80019a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff67 	bl	8003090 <LL_ADC_IsDeepPowerDownEnabled>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d004      	beq.n	80031d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff4d 	bl	800306c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff82 	bl	80030e0 <LL_ADC_IsInternalRegulatorEnabled>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d114      	bne.n	800320c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff66 	bl	80030b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031ec:	4b87      	ldr	r3, [pc, #540]	; (800340c <HAL_ADC_Init+0x290>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	4a87      	ldr	r2, [pc, #540]	; (8003410 <HAL_ADC_Init+0x294>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	3301      	adds	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031fe:	e002      	b.n	8003206 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3b01      	subs	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f9      	bne.n	8003200 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff65 	bl	80030e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff76 	bl	800312e <LL_ADC_REG_IsConversionOngoing>
 8003242:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 8129 	bne.w	80034a4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 8125 	bne.w	80034a4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003262:	f043 0202 	orr.w	r2, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ff4a 	bl	8003108 <LL_ADC_IsEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d136      	bne.n	80032e8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a65      	ldr	r2, [pc, #404]	; (8003414 <HAL_ADC_Init+0x298>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_ADC_Init+0x112>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a63      	ldr	r2, [pc, #396]	; (8003418 <HAL_ADC_Init+0x29c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10e      	bne.n	80032ac <HAL_ADC_Init+0x130>
 800328e:	4861      	ldr	r0, [pc, #388]	; (8003414 <HAL_ADC_Init+0x298>)
 8003290:	f7ff ff3a 	bl	8003108 <LL_ADC_IsEnabled>
 8003294:	4604      	mov	r4, r0
 8003296:	4860      	ldr	r0, [pc, #384]	; (8003418 <HAL_ADC_Init+0x29c>)
 8003298:	f7ff ff36 	bl	8003108 <LL_ADC_IsEnabled>
 800329c:	4603      	mov	r3, r0
 800329e:	4323      	orrs	r3, r4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e008      	b.n	80032be <HAL_ADC_Init+0x142>
 80032ac:	485b      	ldr	r0, [pc, #364]	; (800341c <HAL_ADC_Init+0x2a0>)
 80032ae:	f7ff ff2b 	bl	8003108 <LL_ADC_IsEnabled>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d012      	beq.n	80032e8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a53      	ldr	r2, [pc, #332]	; (8003414 <HAL_ADC_Init+0x298>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d004      	beq.n	80032d6 <HAL_ADC_Init+0x15a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_ADC_Init+0x29c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_ADC_Init+0x15e>
 80032d6:	4a52      	ldr	r2, [pc, #328]	; (8003420 <HAL_ADC_Init+0x2a4>)
 80032d8:	e000      	b.n	80032dc <HAL_ADC_Init+0x160>
 80032da:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_ADC_Init+0x2a8>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f7ff fdbe 	bl	8002e64 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80032e8:	f7ff fd86 	bl	8002df8 <HAL_GetREVID>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d914      	bls.n	8003320 <HAL_ADC_Init+0x1a4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d110      	bne.n	8003320 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7d5b      	ldrb	r3, [r3, #21]
 8003302:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003308:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800330e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7f1b      	ldrb	r3, [r3, #28]
 8003314:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003316:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003318:	f043 030c 	orr.w	r3, r3, #12
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	e00d      	b.n	800333c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7d5b      	ldrb	r3, [r3, #21]
 8003324:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800332a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003330:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7f1b      	ldrb	r3, [r3, #28]
 8003336:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7f1b      	ldrb	r3, [r3, #28]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	3b01      	subs	r3, #1
 800334a:	045b      	lsls	r3, r3, #17
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <HAL_ADC_Init+0x2ac>)
 8003376:	4013      	ands	r3, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	69b9      	ldr	r1, [r7, #24]
 800337e:	430b      	orrs	r3, r1
 8003380:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fed1 	bl	800312e <LL_ADC_REG_IsConversionOngoing>
 800338c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fede 	bl	8003154 <LL_ADC_INJ_IsConversionOngoing>
 8003398:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d15f      	bne.n	8003460 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d15c      	bne.n	8003460 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7d1b      	ldrb	r3, [r3, #20]
 80033aa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	4b1c      	ldr	r3, [pc, #112]	; (800342c <HAL_ADC_Init+0x2b0>)
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d130      	bne.n	8003434 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_ADC_Init+0x2b4>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033e6:	3a01      	subs	r2, #1
 80033e8:	0411      	lsls	r1, r2, #16
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ee:	4311      	orrs	r1, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033f4:	4311      	orrs	r1, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033fa:	430a      	orrs	r2, r1
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	611a      	str	r2, [r3, #16]
 8003408:	e01c      	b.n	8003444 <HAL_ADC_Init+0x2c8>
 800340a:	bf00      	nop
 800340c:	24000028 	.word	0x24000028
 8003410:	053e2d63 	.word	0x053e2d63
 8003414:	40022000 	.word	0x40022000
 8003418:	40022100 	.word	0x40022100
 800341c:	58026000 	.word	0x58026000
 8003420:	40022300 	.word	0x40022300
 8003424:	58026300 	.word	0x58026300
 8003428:	fff0c003 	.word	0xfff0c003
 800342c:	ffffbffc 	.word	0xffffbffc
 8003430:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fb80 	bl	8003b60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d10c      	bne.n	8003482 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f023 010f 	bic.w	r1, r3, #15
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	1e5a      	subs	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
 8003480:	e007      	b.n	8003492 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 020f 	bic.w	r2, r2, #15
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
 80034a2:	e007      	b.n	80034b4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd90      	pop	{r4, r7, pc}
 80034be:	bf00      	nop

080034c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b0a1      	sub	sp, #132	; 0x84
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a9d      	ldr	r2, [pc, #628]	; (8003750 <HAL_ADC_ConfigChannel+0x290>)
 80034da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x2a>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e321      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x66e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fe19 	bl	800312e <LL_ADC_REG_IsConversionOngoing>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 8306 	bne.w	8003b10 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800350c:	2b00      	cmp	r3, #0
 800350e:	d108      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x62>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0e9b      	lsrs	r3, r3, #26
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	2201      	movs	r2, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	e016      	b.n	8003550 <HAL_ADC_ConfigChannel+0x90>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003532:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800353a:	2320      	movs	r3, #32
 800353c:	e003      	b.n	8003546 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800353e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2201      	movs	r2, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	69d1      	ldr	r1, [r2, #28]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	430b      	orrs	r3, r1
 800355c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	f7ff fd02 	bl	8002f74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fdda 	bl	800312e <LL_ADC_REG_IsConversionOngoing>
 800357a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fde7 	bl	8003154 <LL_ADC_INJ_IsConversionOngoing>
 8003586:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 80b3 	bne.w	80036f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 80af 	bne.w	80036f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	461a      	mov	r2, r3
 80035a6:	f7ff fd11 	bl	8002fcc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035aa:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_ADC_ConfigChannel+0x294>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b6:	d10b      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x110>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	e01d      	b.n	800360c <HAL_ADC_ConfigChannel+0x14c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x136>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	e00a      	b.n	800360c <HAL_ADC_ConfigChannel+0x14c>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b04      	cmp	r3, #4
 8003614:	d027      	beq.n	8003666 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6919      	ldr	r1, [r3, #16]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003624:	f7ff fc52 	bl	8002ecc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6919      	ldr	r1, [r3, #16]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	7e5b      	ldrb	r3, [r3, #25]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <HAL_ADC_ConfigChannel+0x17e>
 8003638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800363c:	e000      	b.n	8003640 <HAL_ADC_ConfigChannel+0x180>
 800363e:	2300      	movs	r3, #0
 8003640:	461a      	mov	r2, r3
 8003642:	f7ff fc7c 	bl	8002f3e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6919      	ldr	r1, [r3, #16]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	7e1b      	ldrb	r3, [r3, #24]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d102      	bne.n	800365c <HAL_ADC_ConfigChannel+0x19c>
 8003656:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800365a:	e000      	b.n	800365e <HAL_ADC_ConfigChannel+0x19e>
 800365c:	2300      	movs	r3, #0
 800365e:	461a      	mov	r2, r3
 8003660:	f7ff fc54 	bl	8002f0c <LL_ADC_SetDataRightShift>
 8003664:	e047      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	069b      	lsls	r3, r3, #26
 8003676:	429a      	cmp	r2, r3
 8003678:	d107      	bne.n	800368a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003688:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003690:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	069b      	lsls	r3, r3, #26
 800369a:	429a      	cmp	r2, r3
 800369c:	d107      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	069b      	lsls	r3, r3, #26
 80036be:	429a      	cmp	r2, r3
 80036c0:	d107      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	069b      	lsls	r3, r3, #26
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d107      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fd04 	bl	8003108 <LL_ADC_IsEnabled>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 820d 	bne.w	8003b22 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	461a      	mov	r2, r3
 8003716:	f7ff fc85 	bl	8003024 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <HAL_ADC_ConfigChannel+0x290>)
 8003720:	4293      	cmp	r3, r2
 8003722:	f040 8133 	bne.w	800398c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003732:	2b00      	cmp	r3, #0
 8003734:	d110      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x298>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0e9b      	lsrs	r3, r3, #26
 800373c:	3301      	adds	r3, #1
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2b09      	cmp	r3, #9
 8003744:	bf94      	ite	ls
 8003746:	2301      	movls	r3, #1
 8003748:	2300      	movhi	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	e01e      	b.n	800378c <HAL_ADC_ConfigChannel+0x2cc>
 800374e:	bf00      	nop
 8003750:	47ff0000 	.word	0x47ff0000
 8003754:	5c001000 	.word	0x5c001000
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003768:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800376a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003770:	2320      	movs	r3, #32
 8003772:	e003      	b.n	800377c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	3301      	adds	r3, #1
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2b09      	cmp	r3, #9
 8003784:	bf94      	ite	ls
 8003786:	2301      	movls	r3, #1
 8003788:	2300      	movhi	r3, #0
 800378a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378c:	2b00      	cmp	r3, #0
 800378e:	d079      	beq.n	8003884 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003798:	2b00      	cmp	r3, #0
 800379a:	d107      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x2ec>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0e9b      	lsrs	r3, r3, #26
 80037a2:	3301      	adds	r3, #1
 80037a4:	069b      	lsls	r3, r3, #26
 80037a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037aa:	e015      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x318>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80037ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80037c4:	2320      	movs	r3, #32
 80037c6:	e003      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80037c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	069b      	lsls	r3, r3, #26
 80037d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x338>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	0e9b      	lsrs	r3, r3, #26
 80037ea:	3301      	adds	r3, #1
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	2101      	movs	r1, #1
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	e017      	b.n	8003828 <HAL_ADC_ConfigChannel+0x368>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003808:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800380a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003810:	2320      	movs	r3, #32
 8003812:	e003      	b.n	800381c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	3301      	adds	r3, #1
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	ea42 0103 	orr.w	r1, r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <HAL_ADC_ConfigChannel+0x38e>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0e9b      	lsrs	r3, r3, #26
 800383e:	3301      	adds	r3, #1
 8003840:	f003 021f 	and.w	r2, r3, #31
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	051b      	lsls	r3, r3, #20
 800384c:	e018      	b.n	8003880 <HAL_ADC_ConfigChannel+0x3c0>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003866:	2320      	movs	r3, #32
 8003868:	e003      	b.n	8003872 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003880:	430b      	orrs	r3, r1
 8003882:	e07e      	b.n	8003982 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800388c:	2b00      	cmp	r3, #0
 800388e:	d107      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x3e0>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0e9b      	lsrs	r3, r3, #26
 8003896:	3301      	adds	r3, #1
 8003898:	069b      	lsls	r3, r3, #26
 800389a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800389e:	e015      	b.n	80038cc <HAL_ADC_ConfigChannel+0x40c>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80038b8:	2320      	movs	r3, #32
 80038ba:	e003      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	069b      	lsls	r3, r3, #26
 80038c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x42c>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0e9b      	lsrs	r3, r3, #26
 80038de:	3301      	adds	r3, #1
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	2101      	movs	r1, #1
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	e017      	b.n	800391c <HAL_ADC_ConfigChannel+0x45c>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	61bb      	str	r3, [r7, #24]
  return result;
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003904:	2320      	movs	r3, #32
 8003906:	e003      	b.n	8003910 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	3301      	adds	r3, #1
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	ea42 0103 	orr.w	r1, r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10d      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x488>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0e9b      	lsrs	r3, r3, #26
 8003932:	3301      	adds	r3, #1
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	3b1e      	subs	r3, #30
 8003940:	051b      	lsls	r3, r3, #20
 8003942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003946:	e01b      	b.n	8003980 <HAL_ADC_ConfigChannel+0x4c0>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	60fb      	str	r3, [r7, #12]
  return result;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003960:	2320      	movs	r3, #32
 8003962:	e003      	b.n	800396c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f003 021f 	and.w	r2, r3, #31
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	3b1e      	subs	r3, #30
 800397a:	051b      	lsls	r3, r3, #20
 800397c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003980:	430b      	orrs	r3, r1
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	6892      	ldr	r2, [r2, #8]
 8003986:	4619      	mov	r1, r3
 8003988:	f7ff fb20 	bl	8002fcc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f280 80c6 	bge.w	8003b22 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a67      	ldr	r2, [pc, #412]	; (8003b38 <HAL_ADC_ConfigChannel+0x678>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_ADC_ConfigChannel+0x4ea>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a65      	ldr	r2, [pc, #404]	; (8003b3c <HAL_ADC_ConfigChannel+0x67c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x4ee>
 80039aa:	4b65      	ldr	r3, [pc, #404]	; (8003b40 <HAL_ADC_ConfigChannel+0x680>)
 80039ac:	e000      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x4f0>
 80039ae:	4b65      	ldr	r3, [pc, #404]	; (8003b44 <HAL_ADC_ConfigChannel+0x684>)
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fa7d 	bl	8002eb0 <LL_ADC_GetCommonPathInternalCh>
 80039b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a5e      	ldr	r2, [pc, #376]	; (8003b38 <HAL_ADC_ConfigChannel+0x678>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_ADC_ConfigChannel+0x50c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a5d      	ldr	r2, [pc, #372]	; (8003b3c <HAL_ADC_ConfigChannel+0x67c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10e      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x52a>
 80039cc:	485a      	ldr	r0, [pc, #360]	; (8003b38 <HAL_ADC_ConfigChannel+0x678>)
 80039ce:	f7ff fb9b 	bl	8003108 <LL_ADC_IsEnabled>
 80039d2:	4604      	mov	r4, r0
 80039d4:	4859      	ldr	r0, [pc, #356]	; (8003b3c <HAL_ADC_ConfigChannel+0x67c>)
 80039d6:	f7ff fb97 	bl	8003108 <LL_ADC_IsEnabled>
 80039da:	4603      	mov	r3, r0
 80039dc:	4323      	orrs	r3, r4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	e008      	b.n	80039fc <HAL_ADC_ConfigChannel+0x53c>
 80039ea:	4857      	ldr	r0, [pc, #348]	; (8003b48 <HAL_ADC_ConfigChannel+0x688>)
 80039ec:	f7ff fb8c 	bl	8003108 <LL_ADC_IsEnabled>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d07d      	beq.n	8003afc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a51      	ldr	r2, [pc, #324]	; (8003b4c <HAL_ADC_ConfigChannel+0x68c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d130      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x5ac>
 8003a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d12b      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a4b      	ldr	r2, [pc, #300]	; (8003b48 <HAL_ADC_ConfigChannel+0x688>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	f040 8081 	bne.w	8003b22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a44      	ldr	r2, [pc, #272]	; (8003b38 <HAL_ADC_ConfigChannel+0x678>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_ADC_ConfigChannel+0x574>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a43      	ldr	r2, [pc, #268]	; (8003b3c <HAL_ADC_ConfigChannel+0x67c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x578>
 8003a34:	4a42      	ldr	r2, [pc, #264]	; (8003b40 <HAL_ADC_ConfigChannel+0x680>)
 8003a36:	e000      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x57a>
 8003a38:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <HAL_ADC_ConfigChannel+0x684>)
 8003a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7ff fa21 	bl	8002e8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a48:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_ADC_ConfigChannel+0x690>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	4a41      	ldr	r2, [pc, #260]	; (8003b54 <HAL_ADC_ConfigChannel+0x694>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	3301      	adds	r3, #1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a5c:	e002      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f9      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a6a:	e05a      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a39      	ldr	r2, [pc, #228]	; (8003b58 <HAL_ADC_ConfigChannel+0x698>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d11e      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x5f4>
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d119      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a30      	ldr	r2, [pc, #192]	; (8003b48 <HAL_ADC_ConfigChannel+0x688>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d14b      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2a      	ldr	r2, [pc, #168]	; (8003b38 <HAL_ADC_ConfigChannel+0x678>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_ADC_ConfigChannel+0x5de>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a28      	ldr	r2, [pc, #160]	; (8003b3c <HAL_ADC_ConfigChannel+0x67c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x5e2>
 8003a9e:	4a28      	ldr	r2, [pc, #160]	; (8003b40 <HAL_ADC_ConfigChannel+0x680>)
 8003aa0:	e000      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x5e4>
 8003aa2:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <HAL_ADC_ConfigChannel+0x684>)
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7ff f9ec 	bl	8002e8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ab2:	e036      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <HAL_ADC_ConfigChannel+0x69c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d131      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x662>
 8003abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d12c      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <HAL_ADC_ConfigChannel+0x688>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d127      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_ADC_ConfigChannel+0x678>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_ADC_ConfigChannel+0x626>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <HAL_ADC_ConfigChannel+0x67c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x62a>
 8003ae6:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <HAL_ADC_ConfigChannel+0x680>)
 8003ae8:	e000      	b.n	8003aec <HAL_ADC_ConfigChannel+0x62c>
 8003aea:	4a16      	ldr	r2, [pc, #88]	; (8003b44 <HAL_ADC_ConfigChannel+0x684>)
 8003aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7ff f9c8 	bl	8002e8a <LL_ADC_SetCommonPathInternalCh>
 8003afa:	e012      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b0e:	e008      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3784      	adds	r7, #132	; 0x84
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd90      	pop	{r4, r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	40022100 	.word	0x40022100
 8003b40:	40022300 	.word	0x40022300
 8003b44:	58026300 	.word	0x58026300
 8003b48:	58026000 	.word	0x58026000
 8003b4c:	cb840000 	.word	0xcb840000
 8003b50:	24000028 	.word	0x24000028
 8003b54:	053e2d63 	.word	0x053e2d63
 8003b58:	c7520000 	.word	0xc7520000
 8003b5c:	cfb80000 	.word	0xcfb80000

08003b60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a7a      	ldr	r2, [pc, #488]	; (8003d58 <ADC_ConfigureBoostMode+0x1f8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <ADC_ConfigureBoostMode+0x1c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a79      	ldr	r2, [pc, #484]	; (8003d5c <ADC_ConfigureBoostMode+0x1fc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d109      	bne.n	8003b90 <ADC_ConfigureBoostMode+0x30>
 8003b7c:	4b78      	ldr	r3, [pc, #480]	; (8003d60 <ADC_ConfigureBoostMode+0x200>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e008      	b.n	8003ba2 <ADC_ConfigureBoostMode+0x42>
 8003b90:	4b74      	ldr	r3, [pc, #464]	; (8003d64 <ADC_ConfigureBoostMode+0x204>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01c      	beq.n	8003be0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ba6:	f003 f8b9 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8003baa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bb4:	d010      	beq.n	8003bd8 <ADC_ConfigureBoostMode+0x78>
 8003bb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bba:	d873      	bhi.n	8003ca4 <ADC_ConfigureBoostMode+0x144>
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d002      	beq.n	8003bc8 <ADC_ConfigureBoostMode+0x68>
 8003bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc6:	d16d      	bne.n	8003ca4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	60fb      	str	r3, [r7, #12]
        break;
 8003bd6:	e068      	b.n	8003caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	089b      	lsrs	r3, r3, #2
 8003bdc:	60fb      	str	r3, [r7, #12]
        break;
 8003bde:	e064      	b.n	8003caa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003be0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003be4:	f04f 0100 	mov.w	r1, #0
 8003be8:	f004 fafe 	bl	80081e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003bf6:	d051      	beq.n	8003c9c <ADC_ConfigureBoostMode+0x13c>
 8003bf8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003bfc:	d854      	bhi.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
 8003bfe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c02:	d047      	beq.n	8003c94 <ADC_ConfigureBoostMode+0x134>
 8003c04:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c08:	d84e      	bhi.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
 8003c0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c0e:	d03d      	beq.n	8003c8c <ADC_ConfigureBoostMode+0x12c>
 8003c10:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c14:	d848      	bhi.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
 8003c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c1a:	d033      	beq.n	8003c84 <ADC_ConfigureBoostMode+0x124>
 8003c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c20:	d842      	bhi.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
 8003c22:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c26:	d029      	beq.n	8003c7c <ADC_ConfigureBoostMode+0x11c>
 8003c28:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c2c:	d83c      	bhi.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
 8003c2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c32:	d01a      	beq.n	8003c6a <ADC_ConfigureBoostMode+0x10a>
 8003c34:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c38:	d836      	bhi.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
 8003c3a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c3e:	d014      	beq.n	8003c6a <ADC_ConfigureBoostMode+0x10a>
 8003c40:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c44:	d830      	bhi.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4a:	d00e      	beq.n	8003c6a <ADC_ConfigureBoostMode+0x10a>
 8003c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c50:	d82a      	bhi.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
 8003c52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c56:	d008      	beq.n	8003c6a <ADC_ConfigureBoostMode+0x10a>
 8003c58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c5c:	d824      	bhi.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
 8003c5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c62:	d002      	beq.n	8003c6a <ADC_ConfigureBoostMode+0x10a>
 8003c64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c68:	d11e      	bne.n	8003ca8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0c9b      	lsrs	r3, r3, #18
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	60fb      	str	r3, [r7, #12]
        break;
 8003c7a:	e016      	b.n	8003caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	60fb      	str	r3, [r7, #12]
        break;
 8003c82:	e012      	b.n	8003caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	60fb      	str	r3, [r7, #12]
        break;
 8003c8a:	e00e      	b.n	8003caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	099b      	lsrs	r3, r3, #6
 8003c90:	60fb      	str	r3, [r7, #12]
        break;
 8003c92:	e00a      	b.n	8003caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	09db      	lsrs	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]
        break;
 8003c9a:	e006      	b.n	8003caa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	60fb      	str	r3, [r7, #12]
        break;
 8003ca2:	e002      	b.n	8003caa <ADC_ConfigureBoostMode+0x14a>
        break;
 8003ca4:	bf00      	nop
 8003ca6:	e000      	b.n	8003caa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ca8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003caa:	f7ff f8a5 	bl	8002df8 <HAL_GetREVID>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d815      	bhi.n	8003ce4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a2b      	ldr	r2, [pc, #172]	; (8003d68 <ADC_ConfigureBoostMode+0x208>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d908      	bls.n	8003cd2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003cd0:	e03e      	b.n	8003d50 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ce0:	609a      	str	r2, [r3, #8]
}
 8003ce2:	e035      	b.n	8003d50 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <ADC_ConfigureBoostMode+0x20c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d808      	bhi.n	8003d04 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d00:	609a      	str	r2, [r3, #8]
}
 8003d02:	e025      	b.n	8003d50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <ADC_ConfigureBoostMode+0x210>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d80a      	bhi.n	8003d22 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1e:	609a      	str	r2, [r3, #8]
}
 8003d20:	e016      	b.n	8003d50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <ADC_ConfigureBoostMode+0x214>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d80a      	bhi.n	8003d40 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3c:	609a      	str	r2, [r3, #8]
}
 8003d3e:	e007      	b.n	8003d50 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40022100 	.word	0x40022100
 8003d60:	40022300 	.word	0x40022300
 8003d64:	58026300 	.word	0x58026300
 8003d68:	01312d00 	.word	0x01312d00
 8003d6c:	005f5e10 	.word	0x005f5e10
 8003d70:	00bebc20 	.word	0x00bebc20
 8003d74:	017d7840 	.word	0x017d7840

08003d78 <LL_ADC_IsEnabled>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <LL_ADC_IsEnabled+0x18>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <LL_ADC_IsEnabled+0x1a>
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <LL_ADC_REG_IsConversionOngoing>:
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d101      	bne.n	8003db6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b09f      	sub	sp, #124	; 0x7c
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e0be      	b.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a5c      	ldr	r2, [pc, #368]	; (8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d102      	bne.n	8003e02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003dfc:	4b5b      	ldr	r3, [pc, #364]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	e001      	b.n	8003e06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10b      	bne.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e09d      	b.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ffb9 	bl	8003d9e <LL_ADC_REG_IsConversionOngoing>
 8003e2c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ffb3 	bl	8003d9e <LL_ADC_REG_IsConversionOngoing>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d17f      	bne.n	8003f3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d17c      	bne.n	8003f3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a47      	ldr	r2, [pc, #284]	; (8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a46      	ldr	r2, [pc, #280]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003e58:	4b45      	ldr	r3, [pc, #276]	; (8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e5a:	e000      	b.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003e5c:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d039      	beq.n	8003edc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a38      	ldr	r2, [pc, #224]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10e      	bne.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e8e:	4836      	ldr	r0, [pc, #216]	; (8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e90:	f7ff ff72 	bl	8003d78 <LL_ADC_IsEnabled>
 8003e94:	4604      	mov	r4, r0
 8003e96:	4835      	ldr	r0, [pc, #212]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e98:	f7ff ff6e 	bl	8003d78 <LL_ADC_IsEnabled>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4323      	orrs	r3, r4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e008      	b.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003eac:	4832      	ldr	r0, [pc, #200]	; (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003eae:	f7ff ff63 	bl	8003d78 <LL_ADC_IsEnabled>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d047      	beq.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	6892      	ldr	r2, [r2, #8]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eda:	e03a      	b.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10e      	bne.n	8003f1a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003efc:	481a      	ldr	r0, [pc, #104]	; (8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003efe:	f7ff ff3b 	bl	8003d78 <LL_ADC_IsEnabled>
 8003f02:	4604      	mov	r4, r0
 8003f04:	4819      	ldr	r0, [pc, #100]	; (8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f06:	f7ff ff37 	bl	8003d78 <LL_ADC_IsEnabled>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4323      	orrs	r3, r4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bf0c      	ite	eq
 8003f12:	2301      	moveq	r3, #1
 8003f14:	2300      	movne	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	e008      	b.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003f1a:	4817      	ldr	r0, [pc, #92]	; (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f1c:	f7ff ff2c 	bl	8003d78 <LL_ADC_IsEnabled>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d010      	beq.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f3a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f3c:	e009      	b.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f50:	e000      	b.n	8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f52:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	377c      	adds	r7, #124	; 0x7c
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd90      	pop	{r4, r7, pc}
 8003f68:	40022000 	.word	0x40022000
 8003f6c:	40022100 	.word	0x40022100
 8003f70:	40022300 	.word	0x40022300
 8003f74:	58026300 	.word	0x58026300
 8003f78:	58026000 	.word	0x58026000
 8003f7c:	fffff0e0 	.word	0xfffff0e0

08003f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fae:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	60d3      	str	r3, [r2, #12]
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	e000ed00 	.word	0xe000ed00
 8003fc4:	05fa0000 	.word	0x05fa0000

08003fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fcc:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	f003 0307 	and.w	r3, r3, #7
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	db0a      	blt.n	800400e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	490c      	ldr	r1, [pc, #48]	; (8004030 <__NVIC_SetPriority+0x4c>)
 8003ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004002:	0112      	lsls	r2, r2, #4
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	440b      	add	r3, r1
 8004008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800400c:	e00a      	b.n	8004024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4908      	ldr	r1, [pc, #32]	; (8004034 <__NVIC_SetPriority+0x50>)
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	3b04      	subs	r3, #4
 800401c:	0112      	lsls	r2, r2, #4
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	440b      	add	r3, r1
 8004022:	761a      	strb	r2, [r3, #24]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000e100 	.word	0xe000e100
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f1c3 0307 	rsb	r3, r3, #7
 8004052:	2b04      	cmp	r3, #4
 8004054:	bf28      	it	cs
 8004056:	2304      	movcs	r3, #4
 8004058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3304      	adds	r3, #4
 800405e:	2b06      	cmp	r3, #6
 8004060:	d902      	bls.n	8004068 <NVIC_EncodePriority+0x30>
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3b03      	subs	r3, #3
 8004066:	e000      	b.n	800406a <NVIC_EncodePriority+0x32>
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	401a      	ands	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004080:	f04f 31ff 	mov.w	r1, #4294967295
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	43d9      	mvns	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004090:	4313      	orrs	r3, r2
         );
}
 8004092:	4618      	mov	r0, r3
 8004094:	3724      	adds	r7, #36	; 0x24
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b0:	d301      	bcc.n	80040b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040b2:	2301      	movs	r3, #1
 80040b4:	e00f      	b.n	80040d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <SysTick_Config+0x40>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040be:	210f      	movs	r1, #15
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	f7ff ff8e 	bl	8003fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <SysTick_Config+0x40>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ce:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <SysTick_Config+0x40>)
 80040d0:	2207      	movs	r2, #7
 80040d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	e000e010 	.word	0xe000e010

080040e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff47 	bl	8003f80 <__NVIC_SetPriorityGrouping>
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	4603      	mov	r3, r0
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004108:	f7ff ff5e 	bl	8003fc8 <__NVIC_GetPriorityGrouping>
 800410c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	6978      	ldr	r0, [r7, #20]
 8004114:	f7ff ff90 	bl	8004038 <NVIC_EncodePriority>
 8004118:	4602      	mov	r2, r0
 800411a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff5f 	bl	8003fe4 <__NVIC_SetPriority>
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ffb2 	bl	80040a0 <SysTick_Config>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e0cf      	b.n	80042fa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2223      	movs	r2, #35	; 0x23
 8004168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fd fd1d 	bl	8001bac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004172:	4b64      	ldr	r3, [pc, #400]	; (8004304 <HAL_ETH_Init+0x1bc>)
 8004174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004178:	4a62      	ldr	r2, [pc, #392]	; (8004304 <HAL_ETH_Init+0x1bc>)
 800417a:	f043 0302 	orr.w	r3, r3, #2
 800417e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004182:	4b60      	ldr	r3, [pc, #384]	; (8004304 <HAL_ETH_Init+0x1bc>)
 8004184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7a1b      	ldrb	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004198:	2000      	movs	r0, #0
 800419a:	f7fe fe39 	bl	8002e10 <HAL_SYSCFG_ETHInterfaceSelect>
 800419e:	e003      	b.n	80041a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80041a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80041a4:	f7fe fe34 	bl	8002e10 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80041a8:	4b57      	ldr	r3, [pc, #348]	; (8004308 <HAL_ETH_Init+0x1c0>)
 80041aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c4:	f7fe fde8 	bl	8002d98 <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80041ca:	e011      	b.n	80041f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80041cc:	f7fe fde4 	bl	8002d98 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041da:	d909      	bls.n	80041f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2204      	movs	r2, #4
 80041e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	22e0      	movs	r2, #224	; 0xe0
 80041e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e084      	b.n	80042fa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e4      	bne.n	80041cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f886 	bl	8004314 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004208:	f002 fd88 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 800420c:	4603      	mov	r3, r0
 800420e:	4a3f      	ldr	r2, [pc, #252]	; (800430c <HAL_ETH_Init+0x1c4>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	0c9a      	lsrs	r2, r3, #18
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3a01      	subs	r2, #1
 800421c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa71 	bl	8004708 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004232:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800423e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004242:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	22e0      	movs	r2, #224	; 0xe0
 800425e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e049      	b.n	80042fa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004272:	4b27      	ldr	r3, [pc, #156]	; (8004310 <HAL_ETH_Init+0x1c8>)
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6952      	ldr	r2, [r2, #20]
 800427a:	0051      	lsls	r1, r2, #1
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004286:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fad9 	bl	8004842 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb1f 	bl	80048d4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	3305      	adds	r3, #5
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	021a      	lsls	r2, r3, #8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	4619      	mov	r1, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	3303      	adds	r3, #3
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	061a      	lsls	r2, r3, #24
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	3302      	adds	r3, #2
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	3301      	adds	r3, #1
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80042e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2210      	movs	r2, #16
 80042f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	58024400 	.word	0x58024400
 8004308:	58000400 	.word	0x58000400
 800430c:	431bde83 	.word	0x431bde83
 8004310:	ffff8001 	.word	0xffff8001

08004314 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004324:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800432c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800432e:	f002 fcf5 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8004332:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d908      	bls.n	800434e <HAL_ETH_SetMDIOClockRange+0x3a>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d804      	bhi.n	800434e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e027      	b.n	800439e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d908      	bls.n	8004368 <HAL_ETH_SetMDIOClockRange+0x54>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d204      	bcs.n	8004368 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e01a      	b.n	800439e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d303      	bcc.n	8004378 <HAL_ETH_SetMDIOClockRange+0x64>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d911      	bls.n	800439c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4a10      	ldr	r2, [pc, #64]	; (80043bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d908      	bls.n	8004392 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d804      	bhi.n	8004392 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e005      	b.n	800439e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e000      	b.n	800439e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800439c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	01312cff 	.word	0x01312cff
 80043b4:	02160ebf 	.word	0x02160ebf
 80043b8:	03938700 	.word	0x03938700
 80043bc:	05f5e0ff 	.word	0x05f5e0ff
 80043c0:	08f0d17f 	.word	0x08f0d17f

080043c4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80043d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	791b      	ldrb	r3, [r3, #4]
 80043dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80043de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	7b1b      	ldrb	r3, [r3, #12]
 80043e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80043e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	7b5b      	ldrb	r3, [r3, #13]
 80043ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	7b9b      	ldrb	r3, [r3, #14]
 80043f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80043f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	7bdb      	ldrb	r3, [r3, #15]
 80043fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80043fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	7c12      	ldrb	r2, [r2, #16]
 8004404:	2a00      	cmp	r2, #0
 8004406:	d102      	bne.n	800440e <ETH_SetMACConfig+0x4a>
 8004408:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800440c:	e000      	b.n	8004410 <ETH_SetMACConfig+0x4c>
 800440e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004410:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	7c52      	ldrb	r2, [r2, #17]
 8004416:	2a00      	cmp	r2, #0
 8004418:	d102      	bne.n	8004420 <ETH_SetMACConfig+0x5c>
 800441a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800441e:	e000      	b.n	8004422 <ETH_SetMACConfig+0x5e>
 8004420:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	7c9b      	ldrb	r3, [r3, #18]
 8004428:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800442a:	431a      	orrs	r2, r3
               macconf->Speed |
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004430:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	7f1b      	ldrb	r3, [r3, #28]
 800443c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800443e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	7f5b      	ldrb	r3, [r3, #29]
 8004444:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004446:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	7f92      	ldrb	r2, [r2, #30]
 800444c:	2a00      	cmp	r2, #0
 800444e:	d102      	bne.n	8004456 <ETH_SetMACConfig+0x92>
 8004450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004454:	e000      	b.n	8004458 <ETH_SetMACConfig+0x94>
 8004456:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004458:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	7fdb      	ldrb	r3, [r3, #31]
 800445e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004460:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004468:	2a00      	cmp	r2, #0
 800446a:	d102      	bne.n	8004472 <ETH_SetMACConfig+0xae>
 800446c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004470:	e000      	b.n	8004474 <ETH_SetMACConfig+0xb0>
 8004472:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004474:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800447a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004482:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004484:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b56      	ldr	r3, [pc, #344]	; (80045f0 <ETH_SetMACConfig+0x22c>)
 8004496:	4013      	ands	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	68f9      	ldr	r1, [r7, #12]
 800449e:	430b      	orrs	r3, r1
 80044a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80044ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044c2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80044c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	d102      	bne.n	80044d6 <ETH_SetMACConfig+0x112>
 80044d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044d4:	e000      	b.n	80044d8 <ETH_SetMACConfig+0x114>
 80044d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80044d8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4b42      	ldr	r3, [pc, #264]	; (80045f4 <ETH_SetMACConfig+0x230>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	430b      	orrs	r3, r1
 80044f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	4b3a      	ldr	r3, [pc, #232]	; (80045f8 <ETH_SetMACConfig+0x234>)
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	68f9      	ldr	r1, [r7, #12]
 8004516:	430b      	orrs	r3, r1
 8004518:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004520:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004526:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800452e:	2a00      	cmp	r2, #0
 8004530:	d101      	bne.n	8004536 <ETH_SetMACConfig+0x172>
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	e000      	b.n	8004538 <ETH_SetMACConfig+0x174>
 8004536:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004538:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800453e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800454a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800454e:	4013      	ands	r3, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	68f9      	ldr	r1, [r7, #12]
 8004556:	430b      	orrs	r3, r1
 8004558:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004560:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004568:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f023 0103 	bic.w	r1, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	430a      	orrs	r2, r1
 8004582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800458e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80045aa:	2a00      	cmp	r2, #0
 80045ac:	d101      	bne.n	80045b2 <ETH_SetMACConfig+0x1ee>
 80045ae:	2240      	movs	r2, #64	; 0x40
 80045b0:	e000      	b.n	80045b4 <ETH_SetMACConfig+0x1f0>
 80045b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80045b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80045bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80045be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80045c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80045d4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	430a      	orrs	r2, r1
 80045e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	00048083 	.word	0x00048083
 80045f4:	c0f88000 	.word	0xc0f88000
 80045f8:	fffffef0 	.word	0xfffffef0

080045fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <ETH_SetDMAConfig+0xf8>)
 8004612:	4013      	ands	r3, r2
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	6811      	ldr	r1, [r2, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	430b      	orrs	r3, r1
 800461e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004622:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	791b      	ldrb	r3, [r3, #4]
 8004628:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800462e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	7b1b      	ldrb	r3, [r3, #12]
 8004634:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <ETH_SetDMAConfig+0xfc>)
 8004646:	4013      	ands	r3, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	68f9      	ldr	r1, [r7, #12]
 800464e:	430b      	orrs	r3, r1
 8004650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004654:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	7b5b      	ldrb	r3, [r3, #13]
 800465a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004670:	4b22      	ldr	r3, [pc, #136]	; (80046fc <ETH_SetDMAConfig+0x100>)
 8004672:	4013      	ands	r3, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	430b      	orrs	r3, r1
 800467c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004680:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	7d1b      	ldrb	r3, [r3, #20]
 800468c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800468e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	7f5b      	ldrb	r3, [r3, #29]
 8004694:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80046a6:	4b16      	ldr	r3, [pc, #88]	; (8004700 <ETH_SetDMAConfig+0x104>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	68f9      	ldr	r1, [r7, #12]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	7f1b      	ldrb	r3, [r3, #28]
 80046be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <ETH_SetDMAConfig+0x108>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	430b      	orrs	r3, r1
 80046e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046e4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	ffff87fd 	.word	0xffff87fd
 80046f8:	ffff2ffe 	.word	0xffff2ffe
 80046fc:	fffec000 	.word	0xfffec000
 8004700:	ffc0efef 	.word	0xffc0efef
 8004704:	7fc0ffff 	.word	0x7fc0ffff

08004708 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b0a4      	sub	sp, #144	; 0x90
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004716:	2300      	movs	r3, #0
 8004718:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004748:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004750:	2300      	movs	r3, #0
 8004752:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800475a:	2300      	movs	r3, #0
 800475c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004760:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004764:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004766:	2300      	movs	r3, #0
 8004768:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800476c:	2300      	movs	r3, #0
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004782:	2300      	movs	r3, #0
 8004784:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004786:	2300      	movs	r3, #0
 8004788:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800478a:	2300      	movs	r3, #0
 800478c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80047a0:	2320      	movs	r3, #32
 80047a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80047b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80047b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047bc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80047be:	2300      	movs	r3, #0
 80047c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80047c4:	2302      	movs	r3, #2
 80047c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80047e2:	2300      	movs	r3, #0
 80047e4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80047ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff fde6 	bl	80043c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80047fc:	2301      	movs	r3, #1
 80047fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800480a:	2300      	movs	r3, #0
 800480c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800480e:	2300      	movs	r3, #0
 8004810:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004812:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004816:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004818:	2300      	movs	r3, #0
 800481a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800481c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004820:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004822:	2300      	movs	r3, #0
 8004824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004828:	f44f 7306 	mov.w	r3, #536	; 0x218
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800482e:	f107 0308 	add.w	r3, r7, #8
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fee1 	bl	80045fc <ETH_SetDMAConfig>
}
 800483a:	bf00      	nop
 800483c:	3790      	adds	r7, #144	; 0x90
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	e01d      	b.n	800488c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68d9      	ldr	r1, [r3, #12]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4613      	mov	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	440b      	add	r3, r1
 8004860:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	3206      	adds	r2, #6
 8004882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d9de      	bls.n	8004850 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a0:	461a      	mov	r2, r3
 80048a2:	2303      	movs	r3, #3
 80048a4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e023      	b.n	800492a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6919      	ldr	r1, [r3, #16]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4613      	mov	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	4413      	add	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	440b      	add	r3, r1
 80048f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2200      	movs	r2, #0
 80048fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2200      	movs	r2, #0
 8004904:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2200      	movs	r2, #0
 800490a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2200      	movs	r2, #0
 8004910:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2200      	movs	r2, #0
 8004916:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	3212      	adds	r2, #18
 8004920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b03      	cmp	r3, #3
 800492e:	d9d8      	bls.n	80048e2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004956:	461a      	mov	r2, r3
 8004958:	2303      	movs	r3, #3
 800495a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b098      	sub	sp, #96	; 0x60
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004998:	4a84      	ldr	r2, [pc, #528]	; (8004bac <HAL_FDCAN_Init+0x21c>)
 800499a:	f107 030c 	add.w	r3, r7, #12
 800499e:	4611      	mov	r1, r2
 80049a0:	224c      	movs	r2, #76	; 0x4c
 80049a2:	4618      	mov	r0, r3
 80049a4:	f008 fb14 	bl	800cfd0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e1c6      	b.n	8004d40 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a7e      	ldr	r2, [pc, #504]	; (8004bb0 <HAL_FDCAN_Init+0x220>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d106      	bne.n	80049ca <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80049c4:	461a      	mov	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd fa14 	bl	8001e0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0210 	bic.w	r2, r2, #16
 80049f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049f4:	f7fe f9d0 	bl	8002d98 <HAL_GetTick>
 80049f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80049fa:	e014      	b.n	8004a26 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80049fc:	f7fe f9cc 	bl	8002d98 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b0a      	cmp	r3, #10
 8004a08:	d90d      	bls.n	8004a26 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a10:	f043 0201 	orr.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e18c      	b.n	8004d40 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d0e3      	beq.n	80049fc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a44:	f7fe f9a8 	bl	8002d98 <HAL_GetTick>
 8004a48:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a4a:	e014      	b.n	8004a76 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004a4c:	f7fe f9a4 	bl	8002d98 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b0a      	cmp	r3, #10
 8004a58:	d90d      	bls.n	8004a76 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e164      	b.n	8004d40 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0e3      	beq.n	8004a4c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0202 	orr.w	r2, r2, #2
 8004a92:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	7c1b      	ldrb	r3, [r3, #16]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d108      	bne.n	8004aae <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aaa:	619a      	str	r2, [r3, #24]
 8004aac:	e007      	b.n	8004abe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004abc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	7c5b      	ldrb	r3, [r3, #17]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d108      	bne.n	8004ad8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699a      	ldr	r2, [r3, #24]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad4:	619a      	str	r2, [r3, #24]
 8004ad6:	e007      	b.n	8004ae8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ae6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	7c9b      	ldrb	r3, [r3, #18]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d108      	bne.n	8004b02 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004afe:	619a      	str	r2, [r3, #24]
 8004b00:	e007      	b.n	8004b12 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699a      	ldr	r2, [r3, #24]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b10:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004b36:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0210 	bic.w	r2, r2, #16
 8004b46:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d108      	bne.n	8004b62 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0204 	orr.w	r2, r2, #4
 8004b5e:	619a      	str	r2, [r3, #24]
 8004b60:	e030      	b.n	8004bc4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d02c      	beq.n	8004bc4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d020      	beq.n	8004bb4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b80:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0210 	orr.w	r2, r2, #16
 8004b90:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d114      	bne.n	8004bc4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0220 	orr.w	r2, r2, #32
 8004ba8:	619a      	str	r2, [r3, #24]
 8004baa:	e00b      	b.n	8004bc4 <HAL_FDCAN_Init+0x234>
 8004bac:	0800d978 	.word	0x0800d978
 8004bb0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0220 	orr.w	r2, r2, #32
 8004bc2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004bd4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004bdc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004bec:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004bee:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf8:	d115      	bne.n	8004c26 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	3b01      	subs	r3, #1
 8004c06:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004c08:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004c12:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004c22:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004c24:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4c:	4413      	add	r3, r2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d011      	beq.n	8004c76 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004c5a:	f023 0107 	bic.w	r1, r3, #7
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	3360      	adds	r3, #96	; 0x60
 8004c66:	443b      	add	r3, r7
 8004c68:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d011      	beq.n	8004ca2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c86:	f023 0107 	bic.w	r1, r3, #7
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	3360      	adds	r3, #96	; 0x60
 8004c92:	443b      	add	r3, r7
 8004c94:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d012      	beq.n	8004cd0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004cb2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	3360      	adds	r3, #96	; 0x60
 8004cbe:	443b      	add	r3, r7
 8004cc0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004cc4:	011a      	lsls	r2, r3, #4
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d012      	beq.n	8004cfe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ce0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	3360      	adds	r3, #96	; 0x60
 8004cec:	443b      	add	r3, r7
 8004cee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <HAL_FDCAN_Init+0x3b8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d107      	bne.n	8004d18 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f022 0203 	bic.w	r2, r2, #3
 8004d16:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f80b 	bl	8004d4c <FDCAN_CalcultateRamBlockAddresses>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004d3c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3760      	adds	r7, #96	; 0x60
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	4000a000 	.word	0x4000a000

08004d4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d62:	4ba7      	ldr	r3, [pc, #668]	; (8005000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	0091      	lsls	r1, r2, #2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	041a      	lsls	r2, r3, #16
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4413      	add	r3, r2
 8004d98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004da2:	4b97      	ldr	r3, [pc, #604]	; (8005000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	0091      	lsls	r1, r2, #2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	430b      	orrs	r3, r1
 8004db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	041a      	lsls	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004de4:	4b86      	ldr	r3, [pc, #536]	; (8005000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	0091      	lsls	r1, r2, #2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	430b      	orrs	r3, r1
 8004df2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004dfe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	041a      	lsls	r2, r3, #16
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	4413      	add	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004e2c:	4b74      	ldr	r3, [pc, #464]	; (8005000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	0091      	lsls	r1, r2, #2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4e:	041a      	lsls	r2, r3, #16
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	4413      	add	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004e74:	4b62      	ldr	r3, [pc, #392]	; (8005000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	0091      	lsls	r1, r2, #2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	430b      	orrs	r3, r1
 8004e82:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4413      	add	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004ea0:	4b57      	ldr	r3, [pc, #348]	; (8005000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	0091      	lsls	r1, r2, #2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	430b      	orrs	r3, r1
 8004eae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eba:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	041a      	lsls	r2, r3, #16
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004ee2:	4b47      	ldr	r3, [pc, #284]	; (8005000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	0091      	lsls	r1, r2, #2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004efc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f04:	041a      	lsls	r2, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f18:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f20:	061a      	lsls	r2, r3, #24
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f30:	4b34      	ldr	r3, [pc, #208]	; (8005004 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004f32:	4413      	add	r3, r2
 8004f34:	009a      	lsls	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	441a      	add	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	441a      	add	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004fe2:	fb01 f303 	mul.w	r3, r1, r3
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	4a04      	ldr	r2, [pc, #16]	; (8005008 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d915      	bls.n	8005028 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004ffc:	e006      	b.n	800500c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004ffe:	bf00      	nop
 8005000:	ffff0003 	.word	0xffff0003
 8005004:	10002b00 	.word	0x10002b00
 8005008:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005012:	f043 0220 	orr.w	r2, r3, #32
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2203      	movs	r2, #3
 8005020:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e010      	b.n	800504a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e005      	b.n	800503c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3304      	adds	r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	429a      	cmp	r2, r3
 8005046:	d3f3      	bcc.n	8005030 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop

08005058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005066:	4b89      	ldr	r3, [pc, #548]	; (800528c <HAL_GPIO_Init+0x234>)
 8005068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800506a:	e194      	b.n	8005396 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	2101      	movs	r1, #1
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	4013      	ands	r3, r2
 800507a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 8186 	beq.w	8005390 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d005      	beq.n	800509c <HAL_GPIO_Init+0x44>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d130      	bne.n	80050fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	2203      	movs	r2, #3
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050d2:	2201      	movs	r2, #1
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43db      	mvns	r3, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4013      	ands	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	091b      	lsrs	r3, r3, #4
 80050e8:	f003 0201 	and.w	r2, r3, #1
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b03      	cmp	r3, #3
 8005108:	d017      	beq.n	800513a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	2203      	movs	r2, #3
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	43db      	mvns	r3, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4013      	ands	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4313      	orrs	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d123      	bne.n	800518e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	08da      	lsrs	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3208      	adds	r2, #8
 800514e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	220f      	movs	r2, #15
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4313      	orrs	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	08da      	lsrs	r2, r3, #3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3208      	adds	r2, #8
 8005188:	69b9      	ldr	r1, [r7, #24]
 800518a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	2203      	movs	r2, #3
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 0203 	and.w	r2, r3, #3
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80e0 	beq.w	8005390 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051d0:	4b2f      	ldr	r3, [pc, #188]	; (8005290 <HAL_GPIO_Init+0x238>)
 80051d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051d6:	4a2e      	ldr	r2, [pc, #184]	; (8005290 <HAL_GPIO_Init+0x238>)
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051e0:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <HAL_GPIO_Init+0x238>)
 80051e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051ee:	4a29      	ldr	r2, [pc, #164]	; (8005294 <HAL_GPIO_Init+0x23c>)
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	3302      	adds	r3, #2
 80051f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	220f      	movs	r2, #15
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a20      	ldr	r2, [pc, #128]	; (8005298 <HAL_GPIO_Init+0x240>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d052      	beq.n	80052c0 <HAL_GPIO_Init+0x268>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1f      	ldr	r2, [pc, #124]	; (800529c <HAL_GPIO_Init+0x244>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d031      	beq.n	8005286 <HAL_GPIO_Init+0x22e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <HAL_GPIO_Init+0x248>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02b      	beq.n	8005282 <HAL_GPIO_Init+0x22a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <HAL_GPIO_Init+0x24c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d025      	beq.n	800527e <HAL_GPIO_Init+0x226>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1c      	ldr	r2, [pc, #112]	; (80052a8 <HAL_GPIO_Init+0x250>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01f      	beq.n	800527a <HAL_GPIO_Init+0x222>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_GPIO_Init+0x254>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d019      	beq.n	8005276 <HAL_GPIO_Init+0x21e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_GPIO_Init+0x258>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_GPIO_Init+0x21a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <HAL_GPIO_Init+0x25c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00d      	beq.n	800526e <HAL_GPIO_Init+0x216>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <HAL_GPIO_Init+0x260>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <HAL_GPIO_Init+0x212>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a17      	ldr	r2, [pc, #92]	; (80052bc <HAL_GPIO_Init+0x264>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d101      	bne.n	8005266 <HAL_GPIO_Init+0x20e>
 8005262:	2309      	movs	r3, #9
 8005264:	e02d      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 8005266:	230a      	movs	r3, #10
 8005268:	e02b      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 800526a:	2308      	movs	r3, #8
 800526c:	e029      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 800526e:	2307      	movs	r3, #7
 8005270:	e027      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 8005272:	2306      	movs	r3, #6
 8005274:	e025      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 8005276:	2305      	movs	r3, #5
 8005278:	e023      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 800527a:	2304      	movs	r3, #4
 800527c:	e021      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 800527e:	2303      	movs	r3, #3
 8005280:	e01f      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 8005282:	2302      	movs	r3, #2
 8005284:	e01d      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 8005286:	2301      	movs	r3, #1
 8005288:	e01b      	b.n	80052c2 <HAL_GPIO_Init+0x26a>
 800528a:	bf00      	nop
 800528c:	58000080 	.word	0x58000080
 8005290:	58024400 	.word	0x58024400
 8005294:	58000400 	.word	0x58000400
 8005298:	58020000 	.word	0x58020000
 800529c:	58020400 	.word	0x58020400
 80052a0:	58020800 	.word	0x58020800
 80052a4:	58020c00 	.word	0x58020c00
 80052a8:	58021000 	.word	0x58021000
 80052ac:	58021400 	.word	0x58021400
 80052b0:	58021800 	.word	0x58021800
 80052b4:	58021c00 	.word	0x58021c00
 80052b8:	58022000 	.word	0x58022000
 80052bc:	58022400 	.word	0x58022400
 80052c0:	2300      	movs	r3, #0
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	f002 0203 	and.w	r2, r2, #3
 80052c8:	0092      	lsls	r2, r2, #2
 80052ca:	4093      	lsls	r3, r2
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052d2:	4938      	ldr	r1, [pc, #224]	; (80053b4 <HAL_GPIO_Init+0x35c>)
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	089b      	lsrs	r3, r3, #2
 80052d8:	3302      	adds	r3, #2
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	43db      	mvns	r3, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	4013      	ands	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3301      	adds	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f47f ae63 	bne.w	800506c <HAL_GPIO_Init+0x14>
  }
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	3724      	adds	r7, #36	; 0x24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	58000400 	.word	0x58000400

080053b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	807b      	strh	r3, [r7, #2]
 80053c4:	4613      	mov	r3, r2
 80053c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053c8:	787b      	ldrb	r3, [r7, #1]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ce:	887a      	ldrh	r2, [r7, #2]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053d4:	e003      	b.n	80053de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053d6:	887b      	ldrh	r3, [r7, #2]
 80053d8:	041a      	lsls	r2, r3, #16
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	460b      	mov	r3, r1
 80053f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053fc:	887a      	ldrh	r2, [r7, #2]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4013      	ands	r3, r2
 8005402:	041a      	lsls	r2, r3, #16
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	43d9      	mvns	r1, r3
 8005408:	887b      	ldrh	r3, [r7, #2]
 800540a:	400b      	ands	r3, r1
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	619a      	str	r2, [r3, #24]
}
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e0bf      	b.n	80055b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fc fdb0 	bl	8001fac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005462:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6999      	ldr	r1, [r3, #24]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005478:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6899      	ldr	r1, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b4a      	ldr	r3, [pc, #296]	; (80055bc <HAL_LTDC_Init+0x19c>)
 8005494:	400b      	ands	r3, r1
 8005496:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	041b      	lsls	r3, r3, #16
 800549e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6899      	ldr	r1, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68d9      	ldr	r1, [r3, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4b3e      	ldr	r3, [pc, #248]	; (80055bc <HAL_LTDC_Init+0x19c>)
 80054c2:	400b      	ands	r3, r1
 80054c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68d9      	ldr	r1, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1a      	ldr	r2, [r3, #32]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6919      	ldr	r1, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b33      	ldr	r3, [pc, #204]	; (80055bc <HAL_LTDC_Init+0x19c>)
 80054f0:	400b      	ands	r3, r1
 80054f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6919      	ldr	r1, [r3, #16]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6959      	ldr	r1, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4b27      	ldr	r3, [pc, #156]	; (80055bc <HAL_LTDC_Init+0x19c>)
 800551e:	400b      	ands	r3, r1
 8005520:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	041b      	lsls	r3, r3, #16
 8005528:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6959      	ldr	r1, [r3, #20]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005550:	041b      	lsls	r3, r3, #16
 8005552:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0206 	orr.w	r2, r2, #6
 800558e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	f000f800 	.word	0xf000f800

080055c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055c0:	b5b0      	push	{r4, r5, r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_LTDC_ConfigLayer+0x1a>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e02c      	b.n	8005634 <HAL_LTDC_ConfigLayer+0x74>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2134      	movs	r1, #52	; 0x34
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4614      	mov	r4, r2
 80055fe:	461d      	mov	r5, r3
 8005600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800560a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f811 	bl	800563c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2201      	movs	r2, #1
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bdb0      	pop	{r4, r5, r7, pc}

0800563c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800563c:	b480      	push	{r7}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005658:	4413      	add	r3, r2
 800565a:	041b      	lsls	r3, r3, #16
 800565c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	01db      	lsls	r3, r3, #7
 8005668:	4413      	add	r3, r2
 800566a:	3384      	adds	r3, #132	; 0x84
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	4611      	mov	r1, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	01d2      	lsls	r2, r2, #7
 8005678:	440a      	add	r2, r1
 800567a:	3284      	adds	r2, #132	; 0x84
 800567c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005680:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005692:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005694:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	01db      	lsls	r3, r3, #7
 80056a0:	440b      	add	r3, r1
 80056a2:	3384      	adds	r3, #132	; 0x84
 80056a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ba:	4413      	add	r3, r2
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	01db      	lsls	r3, r3, #7
 80056ca:	4413      	add	r3, r2
 80056cc:	3384      	adds	r3, #132	; 0x84
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	4611      	mov	r1, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	01d2      	lsls	r2, r2, #7
 80056da:	440a      	add	r2, r1
 80056dc:	3284      	adds	r2, #132	; 0x84
 80056de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80056e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056f2:	4413      	add	r3, r2
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	01db      	lsls	r3, r3, #7
 8005700:	440b      	add	r3, r1
 8005702:	3384      	adds	r3, #132	; 0x84
 8005704:	4619      	mov	r1, r3
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4313      	orrs	r3, r2
 800570a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	01db      	lsls	r3, r3, #7
 8005716:	4413      	add	r3, r2
 8005718:	3384      	adds	r3, #132	; 0x84
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	4611      	mov	r1, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	01d2      	lsls	r2, r2, #7
 8005726:	440a      	add	r2, r1
 8005728:	3284      	adds	r2, #132	; 0x84
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	01db      	lsls	r3, r3, #7
 800573a:	4413      	add	r3, r2
 800573c:	3384      	adds	r3, #132	; 0x84
 800573e:	461a      	mov	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	061b      	lsls	r3, r3, #24
 8005760:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	01db      	lsls	r3, r3, #7
 800576c:	4413      	add	r3, r2
 800576e:	3384      	adds	r3, #132	; 0x84
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	01db      	lsls	r3, r3, #7
 800577c:	4413      	add	r3, r2
 800577e:	3384      	adds	r3, #132	; 0x84
 8005780:	461a      	mov	r2, r3
 8005782:	2300      	movs	r3, #0
 8005784:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800578c:	461a      	mov	r2, r3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	431a      	orrs	r2, r3
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	431a      	orrs	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4619      	mov	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	01db      	lsls	r3, r3, #7
 80057a0:	440b      	add	r3, r1
 80057a2:	3384      	adds	r3, #132	; 0x84
 80057a4:	4619      	mov	r1, r3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	01db      	lsls	r3, r3, #7
 80057b6:	4413      	add	r3, r2
 80057b8:	3384      	adds	r3, #132	; 0x84
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	4611      	mov	r1, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	01d2      	lsls	r2, r2, #7
 80057c6:	440a      	add	r2, r1
 80057c8:	3284      	adds	r2, #132	; 0x84
 80057ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	01db      	lsls	r3, r3, #7
 80057da:	4413      	add	r3, r2
 80057dc:	3384      	adds	r3, #132	; 0x84
 80057de:	461a      	mov	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	01db      	lsls	r3, r3, #7
 80057f0:	4413      	add	r3, r2
 80057f2:	3384      	adds	r3, #132	; 0x84
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4619      	mov	r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	01db      	lsls	r3, r3, #7
 8005800:	440b      	add	r3, r1
 8005802:	3384      	adds	r3, #132	; 0x84
 8005804:	4619      	mov	r1, r3
 8005806:	4b58      	ldr	r3, [pc, #352]	; (8005968 <LTDC_SetConfig+0x32c>)
 8005808:	4013      	ands	r3, r2
 800580a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	68f9      	ldr	r1, [r7, #12]
 8005816:	6809      	ldr	r1, [r1, #0]
 8005818:	4608      	mov	r0, r1
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	01c9      	lsls	r1, r1, #7
 800581e:	4401      	add	r1, r0
 8005820:	3184      	adds	r1, #132	; 0x84
 8005822:	4313      	orrs	r3, r2
 8005824:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	01db      	lsls	r3, r3, #7
 8005830:	4413      	add	r3, r2
 8005832:	3384      	adds	r3, #132	; 0x84
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	01db      	lsls	r3, r3, #7
 8005840:	4413      	add	r3, r2
 8005842:	3384      	adds	r3, #132	; 0x84
 8005844:	461a      	mov	r2, r3
 8005846:	2300      	movs	r3, #0
 8005848:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	01db      	lsls	r3, r3, #7
 8005854:	4413      	add	r3, r2
 8005856:	3384      	adds	r3, #132	; 0x84
 8005858:	461a      	mov	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005868:	2304      	movs	r3, #4
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	e01b      	b.n	80058a6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d102      	bne.n	800587c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005876:	2303      	movs	r3, #3
 8005878:	61fb      	str	r3, [r7, #28]
 800587a:	e014      	b.n	80058a6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d00b      	beq.n	800589c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005888:	2b02      	cmp	r3, #2
 800588a:	d007      	beq.n	800589c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005890:	2b03      	cmp	r3, #3
 8005892:	d003      	beq.n	800589c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005898:	2b07      	cmp	r3, #7
 800589a:	d102      	bne.n	80058a2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800589c:	2302      	movs	r3, #2
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e001      	b.n	80058a6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	01db      	lsls	r3, r3, #7
 80058b0:	4413      	add	r3, r2
 80058b2:	3384      	adds	r3, #132	; 0x84
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	4611      	mov	r1, r2
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	01d2      	lsls	r2, r2, #7
 80058c0:	440a      	add	r2, r1
 80058c2:	3284      	adds	r2, #132	; 0x84
 80058c4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80058c8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	fb02 f303 	mul.w	r3, r2, r3
 80058d4:	041a      	lsls	r2, r3, #16
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	1acb      	subs	r3, r1, r3
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	fb01 f303 	mul.w	r3, r1, r3
 80058e6:	3307      	adds	r3, #7
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	6809      	ldr	r1, [r1, #0]
 80058ec:	4608      	mov	r0, r1
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	01c9      	lsls	r1, r1, #7
 80058f2:	4401      	add	r1, r0
 80058f4:	3184      	adds	r1, #132	; 0x84
 80058f6:	4313      	orrs	r3, r2
 80058f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	01db      	lsls	r3, r3, #7
 8005904:	4413      	add	r3, r2
 8005906:	3384      	adds	r3, #132	; 0x84
 8005908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4619      	mov	r1, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	01db      	lsls	r3, r3, #7
 8005914:	440b      	add	r3, r1
 8005916:	3384      	adds	r3, #132	; 0x84
 8005918:	4619      	mov	r1, r3
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <LTDC_SetConfig+0x330>)
 800591c:	4013      	ands	r3, r2
 800591e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	01db      	lsls	r3, r3, #7
 800592a:	4413      	add	r3, r2
 800592c:	3384      	adds	r3, #132	; 0x84
 800592e:	461a      	mov	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	01db      	lsls	r3, r3, #7
 8005940:	4413      	add	r3, r2
 8005942:	3384      	adds	r3, #132	; 0x84
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	4611      	mov	r1, r2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	01d2      	lsls	r2, r2, #7
 8005950:	440a      	add	r2, r1
 8005952:	3284      	adds	r2, #132	; 0x84
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6013      	str	r3, [r2, #0]
}
 800595a:	bf00      	nop
 800595c:	3724      	adds	r7, #36	; 0x24
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	fffff8f8 	.word	0xfffff8f8
 800596c:	fffff800 	.word	0xfffff800

08005970 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005972:	b08f      	sub	sp, #60	; 0x3c
 8005974:	af0a      	add	r7, sp, #40	; 0x28
 8005976:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e116      	b.n	8005bb0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7fc fe7d 	bl	800269c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2203      	movs	r2, #3
 80059a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f007 f83f 	bl	800ca44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	687e      	ldr	r6, [r7, #4]
 80059ce:	466d      	mov	r5, sp
 80059d0:	f106 0410 	add.w	r4, r6, #16
 80059d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80059e4:	1d33      	adds	r3, r6, #4
 80059e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059e8:	6838      	ldr	r0, [r7, #0]
 80059ea:	f006 ffbd 	bl	800c968 <USB_CoreInit>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0d7      	b.n	8005bb0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f007 f82d 	bl	800ca66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]
 8005a10:	e04a      	b.n	8005aa8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a12:	7bfa      	ldrb	r2, [r7, #15]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	333d      	adds	r3, #61	; 0x3d
 8005a22:	2201      	movs	r2, #1
 8005a24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a26:	7bfa      	ldrb	r2, [r7, #15]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	333c      	adds	r3, #60	; 0x3c
 8005a36:	7bfa      	ldrb	r2, [r7, #15]
 8005a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a3a:	7bfa      	ldrb	r2, [r7, #15]
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	b298      	uxth	r0, r3
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3356      	adds	r3, #86	; 0x56
 8005a4e:	4602      	mov	r2, r0
 8005a50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	3340      	adds	r3, #64	; 0x40
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a66:	7bfa      	ldrb	r2, [r7, #15]
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	3344      	adds	r3, #68	; 0x44
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a7a:	7bfa      	ldrb	r2, [r7, #15]
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	3348      	adds	r3, #72	; 0x48
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a8e:	7bfa      	ldrb	r2, [r7, #15]
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	334c      	adds	r3, #76	; 0x4c
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
 8005aa8:	7bfa      	ldrb	r2, [r7, #15]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d3af      	bcc.n	8005a12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73fb      	strb	r3, [r7, #15]
 8005ab6:	e044      	b.n	8005b42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ab8:	7bfa      	ldrb	r2, [r7, #15]
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ace:	7bfa      	ldrb	r2, [r7, #15]
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ae0:	7bfa      	ldrb	r2, [r7, #15]
 8005ae2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ae4:	7bfa      	ldrb	r2, [r7, #15]
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005af6:	2200      	movs	r2, #0
 8005af8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005afa:	7bfa      	ldrb	r2, [r7, #15]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b10:	7bfa      	ldrb	r2, [r7, #15]
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b26:	7bfa      	ldrb	r2, [r7, #15]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
 8005b42:	7bfa      	ldrb	r2, [r7, #15]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d3b5      	bcc.n	8005ab8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	687e      	ldr	r6, [r7, #4]
 8005b54:	466d      	mov	r5, sp
 8005b56:	f106 0410 	add.w	r4, r6, #16
 8005b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b66:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b6a:	1d33      	adds	r3, r6, #4
 8005b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b6e:	6838      	ldr	r0, [r7, #0]
 8005b70:	f006 ffc6 	bl	800cb00 <USB_DevInit>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e014      	b.n	8005bb0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d102      	bne.n	8005ba4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f80a 	bl	8005bb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f007 f984 	bl	800ceb6 <USB_DevDisconnect>

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_PCDEx_ActivateLPM+0x44>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	10000003 	.word	0x10000003

08005c00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c08:	4b19      	ldr	r3, [pc, #100]	; (8005c70 <HAL_PWREx_ConfigSupply+0x70>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d00a      	beq.n	8005c2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c14:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <HAL_PWREx_ConfigSupply+0x70>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d001      	beq.n	8005c26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e01f      	b.n	8005c66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e01d      	b.n	8005c66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <HAL_PWREx_ConfigSupply+0x70>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f023 0207 	bic.w	r2, r3, #7
 8005c32:	490f      	ldr	r1, [pc, #60]	; (8005c70 <HAL_PWREx_ConfigSupply+0x70>)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c3a:	f7fd f8ad 	bl	8002d98 <HAL_GetTick>
 8005c3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c40:	e009      	b.n	8005c56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c42:	f7fd f8a9 	bl	8002d98 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c50:	d901      	bls.n	8005c56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e007      	b.n	8005c66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c56:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <HAL_PWREx_ConfigSupply+0x70>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	d1ee      	bne.n	8005c42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	58024800 	.word	0x58024800

08005c74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c82:	60d3      	str	r3, [r2, #12]
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	58024800 	.word	0x58024800

08005c94 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005c9c:	f7fd f87c 	bl	8002d98 <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e05f      	b.n	8005d6c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d107      	bne.n	8005cc8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fc fa65 	bl	8002188 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005cbe:	f241 3188 	movw	r1, #5000	; 0x1388
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f85a 	bl	8005d7c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	021a      	lsls	r2, r3, #8
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2120      	movs	r1, #32
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f852 	bl	8005d98 <QSPI_WaitFlagStateUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d135      	bne.n	8005d6a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <HAL_QSPI_Init+0xe0>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6852      	ldr	r2, [r2, #4]
 8005d0c:	0611      	lsls	r1, r2, #24
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68d2      	ldr	r2, [r2, #12]
 8005d12:	4311      	orrs	r1, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	69d2      	ldr	r2, [r2, #28]
 8005d18:	4311      	orrs	r1, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6a12      	ldr	r2, [r2, #32]
 8005d1e:	4311      	orrs	r1, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <HAL_QSPI_Init+0xe4>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6912      	ldr	r2, [r2, #16]
 8005d36:	0411      	lsls	r1, r2, #16
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6952      	ldr	r2, [r2, #20]
 8005d3c:	4311      	orrs	r1, r2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6992      	ldr	r2, [r2, #24]
 8005d42:	4311      	orrs	r1, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	00ffff2f 	.word	0x00ffff2f
 8005d78:	ffe0f8fe 	.word	0xffe0f8fe

08005d7c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005da8:	e01a      	b.n	8005de0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d016      	beq.n	8005de0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db2:	f7fc fff1 	bl	8002d98 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d302      	bcc.n	8005dc8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	f043 0201 	orr.w	r2, r3, #1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e00e      	b.n	8005dfe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bf14      	ite	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	2300      	moveq	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1d6      	bne.n	8005daa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	; 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d102      	bne.n	8005e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f000 bc48 	b.w	80066ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8088 	beq.w	8005f3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e2a:	4b99      	ldr	r3, [pc, #612]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e34:	4b96      	ldr	r3, [pc, #600]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	2b10      	cmp	r3, #16
 8005e3e:	d007      	beq.n	8005e50 <HAL_RCC_OscConfig+0x48>
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b18      	cmp	r3, #24
 8005e44:	d111      	bne.n	8005e6a <HAL_RCC_OscConfig+0x62>
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d10c      	bne.n	8005e6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e50:	4b8f      	ldr	r3, [pc, #572]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d06d      	beq.n	8005f38 <HAL_RCC_OscConfig+0x130>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d169      	bne.n	8005f38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f000 bc21 	b.w	80066ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e72:	d106      	bne.n	8005e82 <HAL_RCC_OscConfig+0x7a>
 8005e74:	4b86      	ldr	r3, [pc, #536]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a85      	ldr	r2, [pc, #532]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	e02e      	b.n	8005ee0 <HAL_RCC_OscConfig+0xd8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x9c>
 8005e8a:	4b81      	ldr	r3, [pc, #516]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a80      	ldr	r2, [pc, #512]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b7e      	ldr	r3, [pc, #504]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a7d      	ldr	r2, [pc, #500]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e01d      	b.n	8005ee0 <HAL_RCC_OscConfig+0xd8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0xc0>
 8005eae:	4b78      	ldr	r3, [pc, #480]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a77      	ldr	r2, [pc, #476]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b75      	ldr	r3, [pc, #468]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a74      	ldr	r2, [pc, #464]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0xd8>
 8005ec8:	4b71      	ldr	r3, [pc, #452]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a70      	ldr	r2, [pc, #448]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4b6e      	ldr	r3, [pc, #440]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a6d      	ldr	r2, [pc, #436]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fc ff56 	bl	8002d98 <HAL_GetTick>
 8005eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fc ff52 	bl	8002d98 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e3d4      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f02:	4b63      	ldr	r3, [pc, #396]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0xe8>
 8005f0e:	e014      	b.n	8005f3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7fc ff42 	bl	8002d98 <HAL_GetTick>
 8005f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fc ff3e 	bl	8002d98 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	; 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e3c0      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f2a:	4b59      	ldr	r3, [pc, #356]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0x110>
 8005f36:	e000      	b.n	8005f3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80ca 	beq.w	80060dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f48:	4b51      	ldr	r3, [pc, #324]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f52:	4b4f      	ldr	r3, [pc, #316]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <HAL_RCC_OscConfig+0x166>
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	2b18      	cmp	r3, #24
 8005f62:	d156      	bne.n	8006012 <HAL_RCC_OscConfig+0x20a>
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d151      	bne.n	8006012 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f6e:	4b48      	ldr	r3, [pc, #288]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_RCC_OscConfig+0x17e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e392      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f86:	4b42      	ldr	r3, [pc, #264]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f023 0219 	bic.w	r2, r3, #25
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	493f      	ldr	r1, [pc, #252]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fc fefe 	bl	8002d98 <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa0:	f7fc fefa 	bl	8002d98 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e37c      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fb2:	4b37      	ldr	r3, [pc, #220]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fbe:	f7fc ff1b 	bl	8002df8 <HAL_GetREVID>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d817      	bhi.n	8005ffc <HAL_RCC_OscConfig+0x1f4>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b40      	cmp	r3, #64	; 0x40
 8005fd2:	d108      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x1de>
 8005fd4:	4b2e      	ldr	r3, [pc, #184]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005fdc:	4a2c      	ldr	r2, [pc, #176]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fe4:	e07a      	b.n	80060dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe6:	4b2a      	ldr	r3, [pc, #168]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	031b      	lsls	r3, r3, #12
 8005ff4:	4926      	ldr	r1, [pc, #152]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ffa:	e06f      	b.n	80060dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffc:	4b24      	ldr	r3, [pc, #144]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	061b      	lsls	r3, r3, #24
 800600a:	4921      	ldr	r1, [pc, #132]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 800600c:	4313      	orrs	r3, r2
 800600e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006010:	e064      	b.n	80060dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d047      	beq.n	80060aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800601a:	4b1d      	ldr	r3, [pc, #116]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f023 0219 	bic.w	r2, r3, #25
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	491a      	ldr	r1, [pc, #104]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8006028:	4313      	orrs	r3, r2
 800602a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fc feb4 	bl	8002d98 <HAL_GetTick>
 8006030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006034:	f7fc feb0 	bl	8002d98 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e332      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006046:	4b12      	ldr	r3, [pc, #72]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006052:	f7fc fed1 	bl	8002df8 <HAL_GetREVID>
 8006056:	4603      	mov	r3, r0
 8006058:	f241 0203 	movw	r2, #4099	; 0x1003
 800605c:	4293      	cmp	r3, r2
 800605e:	d819      	bhi.n	8006094 <HAL_RCC_OscConfig+0x28c>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d108      	bne.n	800607a <HAL_RCC_OscConfig+0x272>
 8006068:	4b09      	ldr	r3, [pc, #36]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006070:	4a07      	ldr	r2, [pc, #28]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 8006072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006076:	6053      	str	r3, [r2, #4]
 8006078:	e030      	b.n	80060dc <HAL_RCC_OscConfig+0x2d4>
 800607a:	4b05      	ldr	r3, [pc, #20]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	031b      	lsls	r3, r3, #12
 8006088:	4901      	ldr	r1, [pc, #4]	; (8006090 <HAL_RCC_OscConfig+0x288>)
 800608a:	4313      	orrs	r3, r2
 800608c:	604b      	str	r3, [r1, #4]
 800608e:	e025      	b.n	80060dc <HAL_RCC_OscConfig+0x2d4>
 8006090:	58024400 	.word	0x58024400
 8006094:	4b9a      	ldr	r3, [pc, #616]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	4997      	ldr	r1, [pc, #604]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]
 80060a8:	e018      	b.n	80060dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060aa:	4b95      	ldr	r3, [pc, #596]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a94      	ldr	r2, [pc, #592]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fc fe6f 	bl	8002d98 <HAL_GetTick>
 80060ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060be:	f7fc fe6b 	bl	8002d98 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e2ed      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060d0:	4b8b      	ldr	r3, [pc, #556]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80a9 	beq.w	800623c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ea:	4b85      	ldr	r3, [pc, #532]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060f4:	4b82      	ldr	r3, [pc, #520]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d007      	beq.n	8006110 <HAL_RCC_OscConfig+0x308>
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b18      	cmp	r3, #24
 8006104:	d13a      	bne.n	800617c <HAL_RCC_OscConfig+0x374>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d135      	bne.n	800617c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006110:	4b7b      	ldr	r3, [pc, #492]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_RCC_OscConfig+0x320>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d001      	beq.n	8006128 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e2c1      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006128:	f7fc fe66 	bl	8002df8 <HAL_GetREVID>
 800612c:	4603      	mov	r3, r0
 800612e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006132:	4293      	cmp	r3, r2
 8006134:	d817      	bhi.n	8006166 <HAL_RCC_OscConfig+0x35e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	2b20      	cmp	r3, #32
 800613c:	d108      	bne.n	8006150 <HAL_RCC_OscConfig+0x348>
 800613e:	4b70      	ldr	r3, [pc, #448]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006146:	4a6e      	ldr	r2, [pc, #440]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800614c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800614e:	e075      	b.n	800623c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006150:	4b6b      	ldr	r3, [pc, #428]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	069b      	lsls	r3, r3, #26
 800615e:	4968      	ldr	r1, [pc, #416]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006160:	4313      	orrs	r3, r2
 8006162:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006164:	e06a      	b.n	800623c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006166:	4b66      	ldr	r3, [pc, #408]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	061b      	lsls	r3, r3, #24
 8006174:	4962      	ldr	r1, [pc, #392]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	4313      	orrs	r3, r2
 8006178:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800617a:	e05f      	b.n	800623c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d042      	beq.n	800620a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006184:	4b5e      	ldr	r3, [pc, #376]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a5d      	ldr	r2, [pc, #372]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 800618a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006190:	f7fc fe02 	bl	8002d98 <HAL_GetTick>
 8006194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006198:	f7fc fdfe 	bl	8002d98 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e280      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061aa:	4b55      	ldr	r3, [pc, #340]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061b6:	f7fc fe1f 	bl	8002df8 <HAL_GetREVID>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d817      	bhi.n	80061f4 <HAL_RCC_OscConfig+0x3ec>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d108      	bne.n	80061de <HAL_RCC_OscConfig+0x3d6>
 80061cc:	4b4c      	ldr	r3, [pc, #304]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061d4:	4a4a      	ldr	r2, [pc, #296]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80061d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061da:	6053      	str	r3, [r2, #4]
 80061dc:	e02e      	b.n	800623c <HAL_RCC_OscConfig+0x434>
 80061de:	4b48      	ldr	r3, [pc, #288]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	069b      	lsls	r3, r3, #26
 80061ec:	4944      	ldr	r1, [pc, #272]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	604b      	str	r3, [r1, #4]
 80061f2:	e023      	b.n	800623c <HAL_RCC_OscConfig+0x434>
 80061f4:	4b42      	ldr	r3, [pc, #264]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	061b      	lsls	r3, r3, #24
 8006202:	493f      	ldr	r1, [pc, #252]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006204:	4313      	orrs	r3, r2
 8006206:	60cb      	str	r3, [r1, #12]
 8006208:	e018      	b.n	800623c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800620a:	4b3d      	ldr	r3, [pc, #244]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a3c      	ldr	r2, [pc, #240]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006216:	f7fc fdbf 	bl	8002d98 <HAL_GetTick>
 800621a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800621e:	f7fc fdbb 	bl	8002d98 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e23d      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006230:	4b33      	ldr	r3, [pc, #204]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f0      	bne.n	800621e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d036      	beq.n	80062b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d019      	beq.n	8006284 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006250:	4b2b      	ldr	r3, [pc, #172]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006254:	4a2a      	ldr	r2, [pc, #168]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625c:	f7fc fd9c 	bl	8002d98 <HAL_GetTick>
 8006260:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006264:	f7fc fd98 	bl	8002d98 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e21a      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006276:	4b22      	ldr	r3, [pc, #136]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0f0      	beq.n	8006264 <HAL_RCC_OscConfig+0x45c>
 8006282:	e018      	b.n	80062b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006284:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 8006286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006288:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006290:	f7fc fd82 	bl	8002d98 <HAL_GetTick>
 8006294:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006298:	f7fc fd7e 	bl	8002d98 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e200      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80062ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d039      	beq.n	8006336 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01c      	beq.n	8006304 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062ca:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a0c      	ldr	r2, [pc, #48]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80062d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062d6:	f7fc fd5f 	bl	8002d98 <HAL_GetTick>
 80062da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062de:	f7fc fd5b 	bl	8002d98 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e1dd      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062f0:	4b03      	ldr	r3, [pc, #12]	; (8006300 <HAL_RCC_OscConfig+0x4f8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0f0      	beq.n	80062de <HAL_RCC_OscConfig+0x4d6>
 80062fc:	e01b      	b.n	8006336 <HAL_RCC_OscConfig+0x52e>
 80062fe:	bf00      	nop
 8006300:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006304:	4b9b      	ldr	r3, [pc, #620]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a9a      	ldr	r2, [pc, #616]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800630a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800630e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006310:	f7fc fd42 	bl	8002d98 <HAL_GetTick>
 8006314:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006318:	f7fc fd3e 	bl	8002d98 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e1c0      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800632a:	4b92      	ldr	r3, [pc, #584]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8081 	beq.w	8006446 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006344:	4b8c      	ldr	r3, [pc, #560]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a8b      	ldr	r2, [pc, #556]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800634a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006350:	f7fc fd22 	bl	8002d98 <HAL_GetTick>
 8006354:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006358:	f7fc fd1e 	bl	8002d98 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e1a0      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800636a:	4b83      	ldr	r3, [pc, #524]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d106      	bne.n	800638c <HAL_RCC_OscConfig+0x584>
 800637e:	4b7d      	ldr	r3, [pc, #500]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	4a7c      	ldr	r2, [pc, #496]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	6713      	str	r3, [r2, #112]	; 0x70
 800638a:	e02d      	b.n	80063e8 <HAL_RCC_OscConfig+0x5e0>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10c      	bne.n	80063ae <HAL_RCC_OscConfig+0x5a6>
 8006394:	4b77      	ldr	r3, [pc, #476]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006398:	4a76      	ldr	r2, [pc, #472]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	6713      	str	r3, [r2, #112]	; 0x70
 80063a0:	4b74      	ldr	r3, [pc, #464]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a4:	4a73      	ldr	r2, [pc, #460]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063a6:	f023 0304 	bic.w	r3, r3, #4
 80063aa:	6713      	str	r3, [r2, #112]	; 0x70
 80063ac:	e01c      	b.n	80063e8 <HAL_RCC_OscConfig+0x5e0>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x5c8>
 80063b6:	4b6f      	ldr	r3, [pc, #444]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ba:	4a6e      	ldr	r2, [pc, #440]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063bc:	f043 0304 	orr.w	r3, r3, #4
 80063c0:	6713      	str	r3, [r2, #112]	; 0x70
 80063c2:	4b6c      	ldr	r3, [pc, #432]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c6:	4a6b      	ldr	r2, [pc, #428]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063c8:	f043 0301 	orr.w	r3, r3, #1
 80063cc:	6713      	str	r3, [r2, #112]	; 0x70
 80063ce:	e00b      	b.n	80063e8 <HAL_RCC_OscConfig+0x5e0>
 80063d0:	4b68      	ldr	r3, [pc, #416]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	4a67      	ldr	r2, [pc, #412]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	6713      	str	r3, [r2, #112]	; 0x70
 80063dc:	4b65      	ldr	r3, [pc, #404]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e0:	4a64      	ldr	r2, [pc, #400]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80063e2:	f023 0304 	bic.w	r3, r3, #4
 80063e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d015      	beq.n	800641c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fc fcd2 	bl	8002d98 <HAL_GetTick>
 80063f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063f6:	e00a      	b.n	800640e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f8:	f7fc fcce 	bl	8002d98 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f241 3288 	movw	r2, #5000	; 0x1388
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e14e      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800640e:	4b59      	ldr	r3, [pc, #356]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0ee      	beq.n	80063f8 <HAL_RCC_OscConfig+0x5f0>
 800641a:	e014      	b.n	8006446 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641c:	f7fc fcbc 	bl	8002d98 <HAL_GetTick>
 8006420:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006422:	e00a      	b.n	800643a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006424:	f7fc fcb8 	bl	8002d98 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006432:	4293      	cmp	r3, r2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e138      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800643a:	4b4e      	ldr	r3, [pc, #312]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1ee      	bne.n	8006424 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 812d 	beq.w	80066aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006450:	4b48      	ldr	r3, [pc, #288]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006458:	2b18      	cmp	r3, #24
 800645a:	f000 80bd 	beq.w	80065d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2b02      	cmp	r3, #2
 8006464:	f040 809e 	bne.w	80065a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006468:	4b42      	ldr	r3, [pc, #264]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a41      	ldr	r2, [pc, #260]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800646e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006474:	f7fc fc90 	bl	8002d98 <HAL_GetTick>
 8006478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800647c:	f7fc fc8c 	bl	8002d98 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e10e      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800648e:	4b39      	ldr	r3, [pc, #228]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f0      	bne.n	800647c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800649a:	4b36      	ldr	r3, [pc, #216]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800649c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800649e:	4b37      	ldr	r3, [pc, #220]	; (800657c <HAL_RCC_OscConfig+0x774>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064aa:	0112      	lsls	r2, r2, #4
 80064ac:	430a      	orrs	r2, r1
 80064ae:	4931      	ldr	r1, [pc, #196]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	628b      	str	r3, [r1, #40]	; 0x28
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	3b01      	subs	r3, #1
 80064ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c2:	3b01      	subs	r3, #1
 80064c4:	025b      	lsls	r3, r3, #9
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	3b01      	subs	r3, #1
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064dc:	3b01      	subs	r3, #1
 80064de:	061b      	lsls	r3, r3, #24
 80064e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064e4:	4923      	ldr	r1, [pc, #140]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80064ea:	4b22      	ldr	r3, [pc, #136]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	4a21      	ldr	r2, [pc, #132]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064f6:	4b1f      	ldr	r3, [pc, #124]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 80064f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064fa:	4b21      	ldr	r3, [pc, #132]	; (8006580 <HAL_RCC_OscConfig+0x778>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006502:	00d2      	lsls	r2, r2, #3
 8006504:	491b      	ldr	r1, [pc, #108]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006506:	4313      	orrs	r3, r2
 8006508:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800650a:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650e:	f023 020c 	bic.w	r2, r3, #12
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	4917      	ldr	r1, [pc, #92]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006518:	4313      	orrs	r3, r2
 800651a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	f023 0202 	bic.w	r2, r3, #2
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006528:	4912      	ldr	r1, [pc, #72]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	4a10      	ldr	r2, [pc, #64]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006538:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800653a:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	4a0d      	ldr	r2, [pc, #52]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006544:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 800654c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	4a07      	ldr	r2, [pc, #28]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800655e:	4b05      	ldr	r3, [pc, #20]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a04      	ldr	r2, [pc, #16]	; (8006574 <HAL_RCC_OscConfig+0x76c>)
 8006564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656a:	f7fc fc15 	bl	8002d98 <HAL_GetTick>
 800656e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006570:	e011      	b.n	8006596 <HAL_RCC_OscConfig+0x78e>
 8006572:	bf00      	nop
 8006574:	58024400 	.word	0x58024400
 8006578:	58024800 	.word	0x58024800
 800657c:	fffffc0c 	.word	0xfffffc0c
 8006580:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006584:	f7fc fc08 	bl	8002d98 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e08a      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006596:	4b47      	ldr	r3, [pc, #284]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0x77c>
 80065a2:	e082      	b.n	80066aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a4:	4b43      	ldr	r3, [pc, #268]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a42      	ldr	r2, [pc, #264]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 80065aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b0:	f7fc fbf2 	bl	8002d98 <HAL_GetTick>
 80065b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b8:	f7fc fbee 	bl	8002d98 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e070      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065ca:	4b3a      	ldr	r3, [pc, #232]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0x7b0>
 80065d6:	e068      	b.n	80066aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065d8:	4b36      	ldr	r3, [pc, #216]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065de:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d031      	beq.n	8006650 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f003 0203 	and.w	r2, r3, #3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d12a      	bne.n	8006650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d122      	bne.n	8006650 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006616:	429a      	cmp	r2, r3
 8006618:	d11a      	bne.n	8006650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	0a5b      	lsrs	r3, r3, #9
 800661e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006628:	429a      	cmp	r2, r3
 800662a:	d111      	bne.n	8006650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	0c1b      	lsrs	r3, r3, #16
 8006630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800663a:	429a      	cmp	r2, r3
 800663c:	d108      	bne.n	8006650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	0e1b      	lsrs	r3, r3, #24
 8006642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800664c:	429a      	cmp	r2, r3
 800664e:	d001      	beq.n	8006654 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e02b      	b.n	80066ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006654:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	08db      	lsrs	r3, r3, #3
 800665a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800665e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	429a      	cmp	r2, r3
 8006668:	d01f      	beq.n	80066aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800666a:	4b12      	ldr	r3, [pc, #72]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	4a11      	ldr	r2, [pc, #68]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006676:	f7fc fb8f 	bl	8002d98 <HAL_GetTick>
 800667a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800667c:	bf00      	nop
 800667e:	f7fc fb8b 	bl	8002d98 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	4293      	cmp	r3, r2
 8006688:	d0f9      	beq.n	800667e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800668a:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 800668c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <HAL_RCC_OscConfig+0x8b0>)
 8006690:	4013      	ands	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006696:	00d2      	lsls	r2, r2, #3
 8006698:	4906      	ldr	r1, [pc, #24]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 800669a:	4313      	orrs	r3, r2
 800669c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800669e:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	4a04      	ldr	r2, [pc, #16]	; (80066b4 <HAL_RCC_OscConfig+0x8ac>)
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3730      	adds	r7, #48	; 0x30
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	58024400 	.word	0x58024400
 80066b8:	ffff0007 	.word	0xffff0007

080066bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e19c      	b.n	8006a0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066d0:	4b8a      	ldr	r3, [pc, #552]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d910      	bls.n	8006700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b87      	ldr	r3, [pc, #540]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f023 020f 	bic.w	r2, r3, #15
 80066e6:	4985      	ldr	r1, [pc, #532]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	4b83      	ldr	r3, [pc, #524]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d001      	beq.n	8006700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e184      	b.n	8006a0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d010      	beq.n	800672e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	4b7b      	ldr	r3, [pc, #492]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006718:	429a      	cmp	r2, r3
 800671a:	d908      	bls.n	800672e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800671c:	4b78      	ldr	r3, [pc, #480]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	4975      	ldr	r1, [pc, #468]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800672a:	4313      	orrs	r3, r2
 800672c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d010      	beq.n	800675c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695a      	ldr	r2, [r3, #20]
 800673e:	4b70      	ldr	r3, [pc, #448]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006746:	429a      	cmp	r2, r3
 8006748:	d908      	bls.n	800675c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800674a:	4b6d      	ldr	r3, [pc, #436]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	496a      	ldr	r1, [pc, #424]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 8006758:	4313      	orrs	r3, r2
 800675a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b00      	cmp	r3, #0
 8006766:	d010      	beq.n	800678a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	4b64      	ldr	r3, [pc, #400]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006774:	429a      	cmp	r2, r3
 8006776:	d908      	bls.n	800678a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006778:	4b61      	ldr	r3, [pc, #388]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	495e      	ldr	r1, [pc, #376]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 8006786:	4313      	orrs	r3, r2
 8006788:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d010      	beq.n	80067b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	4b59      	ldr	r3, [pc, #356]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d908      	bls.n	80067b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067a6:	4b56      	ldr	r3, [pc, #344]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	4953      	ldr	r1, [pc, #332]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	4b4d      	ldr	r3, [pc, #308]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d908      	bls.n	80067e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d4:	4b4a      	ldr	r3, [pc, #296]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f023 020f 	bic.w	r2, r3, #15
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	4947      	ldr	r1, [pc, #284]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d055      	beq.n	800689e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067f2:	4b43      	ldr	r3, [pc, #268]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	4940      	ldr	r1, [pc, #256]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 8006800:	4313      	orrs	r3, r2
 8006802:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d107      	bne.n	800681c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800680c:	4b3c      	ldr	r3, [pc, #240]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d121      	bne.n	800685c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e0f6      	b.n	8006a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d107      	bne.n	8006834 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006824:	4b36      	ldr	r3, [pc, #216]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d115      	bne.n	800685c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e0ea      	b.n	8006a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d107      	bne.n	800684c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800683c:	4b30      	ldr	r3, [pc, #192]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006844:	2b00      	cmp	r3, #0
 8006846:	d109      	bne.n	800685c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0de      	b.n	8006a0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800684c:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e0d6      	b.n	8006a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800685c:	4b28      	ldr	r3, [pc, #160]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f023 0207 	bic.w	r2, r3, #7
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4925      	ldr	r1, [pc, #148]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800686a:	4313      	orrs	r3, r2
 800686c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800686e:	f7fc fa93 	bl	8002d98 <HAL_GetTick>
 8006872:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006874:	e00a      	b.n	800688c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006876:	f7fc fa8f 	bl	8002d98 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f241 3288 	movw	r2, #5000	; 0x1388
 8006884:	4293      	cmp	r3, r2
 8006886:	d901      	bls.n	800688c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e0be      	b.n	8006a0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688c:	4b1c      	ldr	r3, [pc, #112]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	429a      	cmp	r2, r3
 800689c:	d1eb      	bne.n	8006876 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d010      	beq.n	80068cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	4b14      	ldr	r3, [pc, #80]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d208      	bcs.n	80068cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f023 020f 	bic.w	r2, r3, #15
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	490e      	ldr	r1, [pc, #56]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068cc:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d214      	bcs.n	8006904 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068da:	4b08      	ldr	r3, [pc, #32]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f023 020f 	bic.w	r2, r3, #15
 80068e2:	4906      	ldr	r1, [pc, #24]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ea:	4b04      	ldr	r3, [pc, #16]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d005      	beq.n	8006904 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e086      	b.n	8006a0a <HAL_RCC_ClockConfig+0x34e>
 80068fc:	52002000 	.word	0x52002000
 8006900:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d010      	beq.n	8006932 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	4b3f      	ldr	r3, [pc, #252]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800691c:	429a      	cmp	r2, r3
 800691e:	d208      	bcs.n	8006932 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006920:	4b3c      	ldr	r3, [pc, #240]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	4939      	ldr	r1, [pc, #228]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 800692e:	4313      	orrs	r3, r2
 8006930:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d010      	beq.n	8006960 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	4b34      	ldr	r3, [pc, #208]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800694a:	429a      	cmp	r2, r3
 800694c:	d208      	bcs.n	8006960 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800694e:	4b31      	ldr	r3, [pc, #196]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	492e      	ldr	r1, [pc, #184]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 800695c:	4313      	orrs	r3, r2
 800695e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	d010      	beq.n	800698e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	4b28      	ldr	r3, [pc, #160]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006978:	429a      	cmp	r2, r3
 800697a:	d208      	bcs.n	800698e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800697c:	4b25      	ldr	r3, [pc, #148]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	4922      	ldr	r1, [pc, #136]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 800698a:	4313      	orrs	r3, r2
 800698c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d010      	beq.n	80069bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69da      	ldr	r2, [r3, #28]
 800699e:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d208      	bcs.n	80069bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069aa:	4b1a      	ldr	r3, [pc, #104]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	4917      	ldr	r1, [pc, #92]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069bc:	f000 f834 	bl	8006a28 <HAL_RCC_GetSysClockFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	0a1b      	lsrs	r3, r3, #8
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	4912      	ldr	r1, [pc, #72]	; (8006a18 <HAL_RCC_ClockConfig+0x35c>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
 80069d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069da:	4b0e      	ldr	r3, [pc, #56]	; (8006a14 <HAL_RCC_ClockConfig+0x358>)
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	4a0d      	ldr	r2, [pc, #52]	; (8006a18 <HAL_RCC_ClockConfig+0x35c>)
 80069e4:	5cd3      	ldrb	r3, [r2, r3]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	fa22 f303 	lsr.w	r3, r2, r3
 80069f0:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <HAL_RCC_ClockConfig+0x360>)
 80069f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069f4:	4a0a      	ldr	r2, [pc, #40]	; (8006a20 <HAL_RCC_ClockConfig+0x364>)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80069fa:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <HAL_RCC_ClockConfig+0x368>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fc f980 	bl	8002d04 <HAL_InitTick>
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	58024400 	.word	0x58024400
 8006a18:	0800e580 	.word	0x0800e580
 8006a1c:	2400002c 	.word	0x2400002c
 8006a20:	24000028 	.word	0x24000028
 8006a24:	24000030 	.word	0x24000030

08006a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b089      	sub	sp, #36	; 0x24
 8006a2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a2e:	4bb3      	ldr	r3, [pc, #716]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a36:	2b18      	cmp	r3, #24
 8006a38:	f200 8155 	bhi.w	8006ce6 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a3c:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a42:	bf00      	nop
 8006a44:	08006aa9 	.word	0x08006aa9
 8006a48:	08006ce7 	.word	0x08006ce7
 8006a4c:	08006ce7 	.word	0x08006ce7
 8006a50:	08006ce7 	.word	0x08006ce7
 8006a54:	08006ce7 	.word	0x08006ce7
 8006a58:	08006ce7 	.word	0x08006ce7
 8006a5c:	08006ce7 	.word	0x08006ce7
 8006a60:	08006ce7 	.word	0x08006ce7
 8006a64:	08006acf 	.word	0x08006acf
 8006a68:	08006ce7 	.word	0x08006ce7
 8006a6c:	08006ce7 	.word	0x08006ce7
 8006a70:	08006ce7 	.word	0x08006ce7
 8006a74:	08006ce7 	.word	0x08006ce7
 8006a78:	08006ce7 	.word	0x08006ce7
 8006a7c:	08006ce7 	.word	0x08006ce7
 8006a80:	08006ce7 	.word	0x08006ce7
 8006a84:	08006ad5 	.word	0x08006ad5
 8006a88:	08006ce7 	.word	0x08006ce7
 8006a8c:	08006ce7 	.word	0x08006ce7
 8006a90:	08006ce7 	.word	0x08006ce7
 8006a94:	08006ce7 	.word	0x08006ce7
 8006a98:	08006ce7 	.word	0x08006ce7
 8006a9c:	08006ce7 	.word	0x08006ce7
 8006aa0:	08006ce7 	.word	0x08006ce7
 8006aa4:	08006adb 	.word	0x08006adb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aa8:	4b94      	ldr	r3, [pc, #592]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d009      	beq.n	8006ac8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ab4:	4b91      	ldr	r3, [pc, #580]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	08db      	lsrs	r3, r3, #3
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	4a90      	ldr	r2, [pc, #576]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006ac6:	e111      	b.n	8006cec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ac8:	4b8d      	ldr	r3, [pc, #564]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006aca:	61bb      	str	r3, [r7, #24]
      break;
 8006acc:	e10e      	b.n	8006cec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ace:	4b8d      	ldr	r3, [pc, #564]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ad0:	61bb      	str	r3, [r7, #24]
      break;
 8006ad2:	e10b      	b.n	8006cec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ad4:	4b8c      	ldr	r3, [pc, #560]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ad6:	61bb      	str	r3, [r7, #24]
      break;
 8006ad8:	e108      	b.n	8006cec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ada:	4b88      	ldr	r3, [pc, #544]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ae4:	4b85      	ldr	r3, [pc, #532]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	091b      	lsrs	r3, r3, #4
 8006aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006af0:	4b82      	ldr	r3, [pc, #520]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006afa:	4b80      	ldr	r3, [pc, #512]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	08db      	lsrs	r3, r3, #3
 8006b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80e1 	beq.w	8006ce0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	f000 8083 	beq.w	8006c2c <HAL_RCC_GetSysClockFreq+0x204>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	f200 80a1 	bhi.w	8006c70 <HAL_RCC_GetSysClockFreq+0x248>
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_RCC_GetSysClockFreq+0x114>
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d056      	beq.n	8006be8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b3a:	e099      	b.n	8006c70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b3c:	4b6f      	ldr	r3, [pc, #444]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d02d      	beq.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b48:	4b6c      	ldr	r3, [pc, #432]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	08db      	lsrs	r3, r3, #3
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	4a6b      	ldr	r2, [pc, #428]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b62      	ldr	r3, [pc, #392]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b86:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006ba2:	e087      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb6:	4b51      	ldr	r3, [pc, #324]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006be6:	e065      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfa:	4b40      	ldr	r3, [pc, #256]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c2a:	e043      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b2f      	ldr	r3, [pc, #188]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c6e:	e021      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b1e      	ldr	r3, [pc, #120]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006cb4:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	0a5b      	lsrs	r3, r3, #9
 8006cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd8:	ee17 3a90 	vmov	r3, s15
 8006cdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006cde:	e005      	b.n	8006cec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61bb      	str	r3, [r7, #24]
      break;
 8006ce4:	e002      	b.n	8006cec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006ce6:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ce8:	61bb      	str	r3, [r7, #24]
      break;
 8006cea:	bf00      	nop
  }

  return sysclockfreq;
 8006cec:	69bb      	ldr	r3, [r7, #24]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3724      	adds	r7, #36	; 0x24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	03d09000 	.word	0x03d09000
 8006d04:	003d0900 	.word	0x003d0900
 8006d08:	017d7840 	.word	0x017d7840
 8006d0c:	46000000 	.word	0x46000000
 8006d10:	4c742400 	.word	0x4c742400
 8006d14:	4a742400 	.word	0x4a742400
 8006d18:	4bbebc20 	.word	0x4bbebc20

08006d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d22:	f7ff fe81 	bl	8006a28 <HAL_RCC_GetSysClockFreq>
 8006d26:	4602      	mov	r2, r0
 8006d28:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	0a1b      	lsrs	r3, r3, #8
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	490f      	ldr	r1, [pc, #60]	; (8006d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d34:	5ccb      	ldrb	r3, [r1, r3]
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f003 030f 	and.w	r3, r3, #15
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d4a:	5cd3      	ldrb	r3, [r2, r3]
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d5a:	4a07      	ldr	r2, [pc, #28]	; (8006d78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d62:	681b      	ldr	r3, [r3, #0]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	58024400 	.word	0x58024400
 8006d70:	0800e580 	.word	0x0800e580
 8006d74:	2400002c 	.word	0x2400002c
 8006d78:	24000028 	.word	0x24000028

08006d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d80:	f7ff ffcc 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d84:	4602      	mov	r2, r0
 8006d86:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	091b      	lsrs	r3, r3, #4
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	4904      	ldr	r1, [pc, #16]	; (8006da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d92:	5ccb      	ldrb	r3, [r1, r3]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	58024400 	.word	0x58024400
 8006da4:	0800e580 	.word	0x0800e580

08006da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006dac:	f7ff ffb6 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006db0:	4602      	mov	r2, r0
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	4904      	ldr	r1, [pc, #16]	; (8006dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dbe:	5ccb      	ldrb	r3, [r1, r3]
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	0800e580 	.word	0x0800e580

08006dd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dd8:	b0ca      	sub	sp, #296	; 0x128
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006de6:	2300      	movs	r3, #0
 8006de8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006df8:	2500      	movs	r5, #0
 8006dfa:	ea54 0305 	orrs.w	r3, r4, r5
 8006dfe:	d049      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e0a:	d02f      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e10:	d828      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e16:	d01a      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e1c:	d822      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e26:	d007      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e28:	e01c      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e2a:	4bb8      	ldr	r3, [pc, #736]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	4ab7      	ldr	r2, [pc, #732]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e36:	e01a      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	2102      	movs	r1, #2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f002 fb61 	bl	8009508 <RCCEx_PLL2_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e4c:	e00f      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e52:	3328      	adds	r3, #40	; 0x28
 8006e54:	2102      	movs	r1, #2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f002 fc08 	bl	800966c <RCCEx_PLL3_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e62:	e004      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e6a:	e000      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e76:	4ba5      	ldr	r3, [pc, #660]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e84:	4aa1      	ldr	r2, [pc, #644]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e86:	430b      	orrs	r3, r1
 8006e88:	6513      	str	r3, [r2, #80]	; 0x50
 8006e8a:	e003      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006ea0:	f04f 0900 	mov.w	r9, #0
 8006ea4:	ea58 0309 	orrs.w	r3, r8, r9
 8006ea8:	d047      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d82a      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006eb4:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ed1 	.word	0x08006ed1
 8006ec0:	08006edf 	.word	0x08006edf
 8006ec4:	08006ef5 	.word	0x08006ef5
 8006ec8:	08006f13 	.word	0x08006f13
 8006ecc:	08006f13 	.word	0x08006f13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed0:	4b8e      	ldr	r3, [pc, #568]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	4a8d      	ldr	r2, [pc, #564]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006edc:	e01a      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f002 fb0e 	bl	8009508 <RCCEx_PLL2_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ef2:	e00f      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef8:	3328      	adds	r3, #40	; 0x28
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f002 fbb5 	bl	800966c <RCCEx_PLL3_Config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f08:	e004      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f10:	e000      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f1c:	4b7b      	ldr	r3, [pc, #492]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f20:	f023 0107 	bic.w	r1, r3, #7
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2a:	4a78      	ldr	r2, [pc, #480]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	6513      	str	r3, [r2, #80]	; 0x50
 8006f30:	e003      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006f46:	f04f 0b00 	mov.w	fp, #0
 8006f4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f4e:	d04c      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5a:	d030      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f60:	d829      	bhi.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f62:	2bc0      	cmp	r3, #192	; 0xc0
 8006f64:	d02d      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006f66:	2bc0      	cmp	r3, #192	; 0xc0
 8006f68:	d825      	bhi.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f6a:	2b80      	cmp	r3, #128	; 0x80
 8006f6c:	d018      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f6e:	2b80      	cmp	r3, #128	; 0x80
 8006f70:	d821      	bhi.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d007      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006f7a:	e01c      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f7c:	4b63      	ldr	r3, [pc, #396]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	4a62      	ldr	r2, [pc, #392]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f88:	e01c      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f8e:	3308      	adds	r3, #8
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f002 fab8 	bl	8009508 <RCCEx_PLL2_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f9e:	e011      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa4:	3328      	adds	r3, #40	; 0x28
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f002 fb5f 	bl	800966c <RCCEx_PLL3_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fb4:	e006      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fbc:	e002      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fbe:	bf00      	nop
 8006fc0:	e000      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fcc:	4b4f      	ldr	r3, [pc, #316]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fda:	4a4c      	ldr	r2, [pc, #304]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	6513      	str	r3, [r2, #80]	; 0x50
 8006fe0:	e003      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006ff6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007000:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007004:	460b      	mov	r3, r1
 8007006:	4313      	orrs	r3, r2
 8007008:	d053      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800700a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007016:	d035      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800701c:	d82e      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800701e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007022:	d031      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007024:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007028:	d828      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800702a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800702e:	d01a      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007034:	d822      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800703a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800703e:	d007      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007040:	e01c      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007042:	4b32      	ldr	r3, [pc, #200]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	4a31      	ldr	r2, [pc, #196]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800704e:	e01c      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007054:	3308      	adds	r3, #8
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f002 fa55 	bl	8009508 <RCCEx_PLL2_Config>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007064:	e011      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800706a:	3328      	adds	r3, #40	; 0x28
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f002 fafc 	bl	800966c <RCCEx_PLL3_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800707a:	e006      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007082:	e002      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800708a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007092:	4b1e      	ldr	r3, [pc, #120]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070a2:	4a1a      	ldr	r2, [pc, #104]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6593      	str	r3, [r2, #88]	; 0x58
 80070a8:	e003      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80070be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070c2:	2300      	movs	r3, #0
 80070c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80070cc:	460b      	mov	r3, r1
 80070ce:	4313      	orrs	r3, r2
 80070d0:	d056      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070de:	d038      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80070e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070e4:	d831      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070ea:	d034      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80070ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070f0:	d82b      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070f6:	d01d      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80070f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070fc:	d825      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d006      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007102:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007108:	e01f      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800710a:	bf00      	nop
 800710c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007110:	4ba2      	ldr	r3, [pc, #648]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	4aa1      	ldr	r2, [pc, #644]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800711c:	e01c      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800711e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007122:	3308      	adds	r3, #8
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f002 f9ee 	bl	8009508 <RCCEx_PLL2_Config>
 800712c:	4603      	mov	r3, r0
 800712e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007132:	e011      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007138:	3328      	adds	r3, #40	; 0x28
 800713a:	2100      	movs	r1, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f002 fa95 	bl	800966c <RCCEx_PLL3_Config>
 8007142:	4603      	mov	r3, r0
 8007144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007148:	e006      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007150:	e002      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007152:	bf00      	nop
 8007154:	e000      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10b      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007160:	4b8e      	ldr	r3, [pc, #568]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007164:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007170:	4a8a      	ldr	r2, [pc, #552]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007172:	430b      	orrs	r3, r1
 8007174:	6593      	str	r3, [r2, #88]	; 0x58
 8007176:	e003      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800717c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800718c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007196:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d03a      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80071a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a6:	2b30      	cmp	r3, #48	; 0x30
 80071a8:	d01f      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80071aa:	2b30      	cmp	r3, #48	; 0x30
 80071ac:	d819      	bhi.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d00c      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	d815      	bhi.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d019      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071ba:	2b10      	cmp	r3, #16
 80071bc:	d111      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071be:	4b77      	ldr	r3, [pc, #476]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	4a76      	ldr	r2, [pc, #472]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071ca:	e011      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d0:	3308      	adds	r3, #8
 80071d2:	2102      	movs	r1, #2
 80071d4:	4618      	mov	r0, r3
 80071d6:	f002 f997 	bl	8009508 <RCCEx_PLL2_Config>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071e0:	e006      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071e8:	e002      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80071ea:	bf00      	nop
 80071ec:	e000      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80071ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80071f8:	4b68      	ldr	r3, [pc, #416]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007206:	4a65      	ldr	r2, [pc, #404]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007208:	430b      	orrs	r3, r1
 800720a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800720c:	e003      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007222:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007226:	2300      	movs	r3, #0
 8007228:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800722c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007230:	460b      	mov	r3, r1
 8007232:	4313      	orrs	r3, r2
 8007234:	d051      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007240:	d035      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007246:	d82e      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007248:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800724c:	d031      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800724e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007252:	d828      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007258:	d01a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800725a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725e:	d822      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007268:	d007      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800726a:	e01c      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800726c:	4b4b      	ldr	r3, [pc, #300]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	4a4a      	ldr	r2, [pc, #296]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007278:	e01c      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800727e:	3308      	adds	r3, #8
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f002 f940 	bl	8009508 <RCCEx_PLL2_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800728e:	e011      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007294:	3328      	adds	r3, #40	; 0x28
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f002 f9e7 	bl	800966c <RCCEx_PLL3_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072a4:	e006      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072ac:	e002      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072ae:	bf00      	nop
 80072b0:	e000      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072bc:	4b37      	ldr	r3, [pc, #220]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ca:	4a34      	ldr	r2, [pc, #208]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072cc:	430b      	orrs	r3, r1
 80072ce:	6513      	str	r3, [r2, #80]	; 0x50
 80072d0:	e003      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80072e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072ea:	2300      	movs	r3, #0
 80072ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80072f4:	460b      	mov	r3, r1
 80072f6:	4313      	orrs	r3, r2
 80072f8:	d056      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007304:	d033      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800730a:	d82c      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800730c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007310:	d02f      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007316:	d826      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800731c:	d02b      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800731e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007322:	d820      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007328:	d012      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800732a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800732e:	d81a      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d022      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007338:	d115      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733e:	3308      	adds	r3, #8
 8007340:	2101      	movs	r1, #1
 8007342:	4618      	mov	r0, r3
 8007344:	f002 f8e0 	bl	8009508 <RCCEx_PLL2_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800734e:	e015      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007354:	3328      	adds	r3, #40	; 0x28
 8007356:	2101      	movs	r1, #1
 8007358:	4618      	mov	r0, r3
 800735a:	f002 f987 	bl	800966c <RCCEx_PLL3_Config>
 800735e:	4603      	mov	r3, r0
 8007360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007364:	e00a      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800736c:	e006      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800736e:	bf00      	nop
 8007370:	e004      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007372:	bf00      	nop
 8007374:	e002      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007376:	bf00      	nop
 8007378:	e000      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800737a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10d      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007388:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007392:	4a02      	ldr	r2, [pc, #8]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007394:	430b      	orrs	r3, r1
 8007396:	6513      	str	r3, [r2, #80]	; 0x50
 8007398:	e006      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800739a:	bf00      	nop
 800739c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80073b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073b8:	2300      	movs	r3, #0
 80073ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4313      	orrs	r3, r2
 80073c6:	d055      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073d4:	d033      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80073d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073da:	d82c      	bhi.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e0:	d02f      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80073e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e6:	d826      	bhi.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073ec:	d02b      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80073ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073f2:	d820      	bhi.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f8:	d012      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80073fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073fe:	d81a      	bhi.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d022      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007408:	d115      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740e:	3308      	adds	r3, #8
 8007410:	2101      	movs	r1, #1
 8007412:	4618      	mov	r0, r3
 8007414:	f002 f878 	bl	8009508 <RCCEx_PLL2_Config>
 8007418:	4603      	mov	r3, r0
 800741a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800741e:	e015      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007424:	3328      	adds	r3, #40	; 0x28
 8007426:	2101      	movs	r1, #1
 8007428:	4618      	mov	r0, r3
 800742a:	f002 f91f 	bl	800966c <RCCEx_PLL3_Config>
 800742e:	4603      	mov	r3, r0
 8007430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007434:	e00a      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800743c:	e006      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800743e:	bf00      	nop
 8007440:	e004      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007442:	bf00      	nop
 8007444:	e002      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007446:	bf00      	nop
 8007448:	e000      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800744a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007454:	4ba3      	ldr	r3, [pc, #652]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007458:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800745c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007460:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007464:	4a9f      	ldr	r2, [pc, #636]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007466:	430b      	orrs	r3, r1
 8007468:	6593      	str	r3, [r2, #88]	; 0x58
 800746a:	e003      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007470:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007484:	2300      	movs	r3, #0
 8007486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800748a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800748e:	460b      	mov	r3, r1
 8007490:	4313      	orrs	r3, r2
 8007492:	d037      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800749e:	d00e      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80074a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074a4:	d816      	bhi.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d018      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80074aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ae:	d111      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b0:	4b8c      	ldr	r3, [pc, #560]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	4a8b      	ldr	r2, [pc, #556]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074bc:	e00f      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c2:	3308      	adds	r3, #8
 80074c4:	2101      	movs	r1, #1
 80074c6:	4618      	mov	r0, r3
 80074c8:	f002 f81e 	bl	8009508 <RCCEx_PLL2_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074d2:	e004      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80074dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074e6:	4b7f      	ldr	r3, [pc, #508]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f4:	4a7b      	ldr	r2, [pc, #492]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f6:	430b      	orrs	r3, r1
 80074f8:	6513      	str	r3, [r2, #80]	; 0x50
 80074fa:	e003      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007514:	2300      	movs	r3, #0
 8007516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800751a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800751e:	460b      	mov	r3, r1
 8007520:	4313      	orrs	r3, r2
 8007522:	d039      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752a:	2b03      	cmp	r3, #3
 800752c:	d81c      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800752e:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007571 	.word	0x08007571
 8007538:	08007545 	.word	0x08007545
 800753c:	08007553 	.word	0x08007553
 8007540:	08007571 	.word	0x08007571
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007544:	4b67      	ldr	r3, [pc, #412]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	4a66      	ldr	r2, [pc, #408]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800754a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800754e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007550:	e00f      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007556:	3308      	adds	r3, #8
 8007558:	2102      	movs	r1, #2
 800755a:	4618      	mov	r0, r3
 800755c:	f001 ffd4 	bl	8009508 <RCCEx_PLL2_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007566:	e004      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800756e:	e000      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800757a:	4b5a      	ldr	r3, [pc, #360]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800757c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757e:	f023 0103 	bic.w	r1, r3, #3
 8007582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007588:	4a56      	ldr	r2, [pc, #344]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800758a:	430b      	orrs	r3, r1
 800758c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800758e:	e003      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007594:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80075a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075a8:	2300      	movs	r3, #0
 80075aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80075b2:	460b      	mov	r3, r1
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f000 809f 	beq.w	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075ba:	4b4b      	ldr	r3, [pc, #300]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a4a      	ldr	r2, [pc, #296]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075c6:	f7fb fbe7 	bl	8002d98 <HAL_GetTick>
 80075ca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ce:	e00b      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d0:	f7fb fbe2 	bl	8002d98 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b64      	cmp	r3, #100	; 0x64
 80075de:	d903      	bls.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075e6:	e005      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e8:	4b3f      	ldr	r3, [pc, #252]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0ed      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80075f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d179      	bne.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075fc:	4b39      	ldr	r3, [pc, #228]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007604:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007608:	4053      	eors	r3, r2
 800760a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760e:	2b00      	cmp	r3, #0
 8007610:	d015      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007612:	4b34      	ldr	r3, [pc, #208]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800761e:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	4a30      	ldr	r2, [pc, #192]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007628:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800762a:	4b2e      	ldr	r3, [pc, #184]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	4a2d      	ldr	r2, [pc, #180]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007634:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007636:	4a2b      	ldr	r2, [pc, #172]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007638:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800763c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800763e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007642:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800764a:	d118      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fb fba4 	bl	8002d98 <HAL_GetTick>
 8007650:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007654:	e00d      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007656:	f7fb fb9f 	bl	8002d98 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007660:	1ad2      	subs	r2, r2, r3
 8007662:	f241 3388 	movw	r3, #5000	; 0x1388
 8007666:	429a      	cmp	r2, r3
 8007668:	d903      	bls.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007670:	e005      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007672:	4b1c      	ldr	r3, [pc, #112]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0eb      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800767e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007682:	2b00      	cmp	r3, #0
 8007684:	d129      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800768a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800768e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007696:	d10e      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007698:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076a8:	091a      	lsrs	r2, r3, #4
 80076aa:	4b10      	ldr	r3, [pc, #64]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	4a0d      	ldr	r2, [pc, #52]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6113      	str	r3, [r2, #16]
 80076b4:	e005      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	4a0a      	ldr	r2, [pc, #40]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076c0:	6113      	str	r3, [r2, #16]
 80076c2:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d2:	4a04      	ldr	r2, [pc, #16]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6713      	str	r3, [r2, #112]	; 0x70
 80076d8:	e00e      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80076e2:	e009      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80076e4:	58024400 	.word	0x58024400
 80076e8:	58024800 	.word	0x58024800
 80076ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	f002 0301 	and.w	r3, r2, #1
 8007704:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007708:	2300      	movs	r3, #0
 800770a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800770e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007712:	460b      	mov	r3, r1
 8007714:	4313      	orrs	r3, r2
 8007716:	f000 8089 	beq.w	800782c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007720:	2b28      	cmp	r3, #40	; 0x28
 8007722:	d86b      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007805 	.word	0x08007805
 8007730:	080077fd 	.word	0x080077fd
 8007734:	080077fd 	.word	0x080077fd
 8007738:	080077fd 	.word	0x080077fd
 800773c:	080077fd 	.word	0x080077fd
 8007740:	080077fd 	.word	0x080077fd
 8007744:	080077fd 	.word	0x080077fd
 8007748:	080077fd 	.word	0x080077fd
 800774c:	080077d1 	.word	0x080077d1
 8007750:	080077fd 	.word	0x080077fd
 8007754:	080077fd 	.word	0x080077fd
 8007758:	080077fd 	.word	0x080077fd
 800775c:	080077fd 	.word	0x080077fd
 8007760:	080077fd 	.word	0x080077fd
 8007764:	080077fd 	.word	0x080077fd
 8007768:	080077fd 	.word	0x080077fd
 800776c:	080077e7 	.word	0x080077e7
 8007770:	080077fd 	.word	0x080077fd
 8007774:	080077fd 	.word	0x080077fd
 8007778:	080077fd 	.word	0x080077fd
 800777c:	080077fd 	.word	0x080077fd
 8007780:	080077fd 	.word	0x080077fd
 8007784:	080077fd 	.word	0x080077fd
 8007788:	080077fd 	.word	0x080077fd
 800778c:	08007805 	.word	0x08007805
 8007790:	080077fd 	.word	0x080077fd
 8007794:	080077fd 	.word	0x080077fd
 8007798:	080077fd 	.word	0x080077fd
 800779c:	080077fd 	.word	0x080077fd
 80077a0:	080077fd 	.word	0x080077fd
 80077a4:	080077fd 	.word	0x080077fd
 80077a8:	080077fd 	.word	0x080077fd
 80077ac:	08007805 	.word	0x08007805
 80077b0:	080077fd 	.word	0x080077fd
 80077b4:	080077fd 	.word	0x080077fd
 80077b8:	080077fd 	.word	0x080077fd
 80077bc:	080077fd 	.word	0x080077fd
 80077c0:	080077fd 	.word	0x080077fd
 80077c4:	080077fd 	.word	0x080077fd
 80077c8:	080077fd 	.word	0x080077fd
 80077cc:	08007805 	.word	0x08007805
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d4:	3308      	adds	r3, #8
 80077d6:	2101      	movs	r1, #1
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 fe95 	bl	8009508 <RCCEx_PLL2_Config>
 80077de:	4603      	mov	r3, r0
 80077e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077e4:	e00f      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ea:	3328      	adds	r3, #40	; 0x28
 80077ec:	2101      	movs	r1, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 ff3c 	bl	800966c <RCCEx_PLL3_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077fa:	e004      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007802:	e000      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800780e:	4bbf      	ldr	r3, [pc, #764]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007812:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800781c:	4abb      	ldr	r2, [pc, #748]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800781e:	430b      	orrs	r3, r1
 8007820:	6553      	str	r3, [r2, #84]	; 0x54
 8007822:	e003      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007824:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007828:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f002 0302 	and.w	r3, r2, #2
 8007838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800783c:	2300      	movs	r3, #0
 800783e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007842:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007846:	460b      	mov	r3, r1
 8007848:	4313      	orrs	r3, r2
 800784a:	d041      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800784c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007852:	2b05      	cmp	r3, #5
 8007854:	d824      	bhi.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007856:	a201      	add	r2, pc, #4	; (adr r2, 800785c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	080078a9 	.word	0x080078a9
 8007860:	08007875 	.word	0x08007875
 8007864:	0800788b 	.word	0x0800788b
 8007868:	080078a9 	.word	0x080078a9
 800786c:	080078a9 	.word	0x080078a9
 8007870:	080078a9 	.word	0x080078a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007878:	3308      	adds	r3, #8
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f001 fe43 	bl	8009508 <RCCEx_PLL2_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007888:	e00f      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800788a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800788e:	3328      	adds	r3, #40	; 0x28
 8007890:	2101      	movs	r1, #1
 8007892:	4618      	mov	r0, r3
 8007894:	f001 feea 	bl	800966c <RCCEx_PLL3_Config>
 8007898:	4603      	mov	r3, r0
 800789a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800789e:	e004      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078a6:	e000      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80078a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078b2:	4b96      	ldr	r3, [pc, #600]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	f023 0107 	bic.w	r1, r3, #7
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078c0:	4a92      	ldr	r2, [pc, #584]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078c2:	430b      	orrs	r3, r1
 80078c4:	6553      	str	r3, [r2, #84]	; 0x54
 80078c6:	e003      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f002 0304 	and.w	r3, r2, #4
 80078dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078e0:	2300      	movs	r3, #0
 80078e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4313      	orrs	r3, r2
 80078ee:	d044      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d825      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007951 	.word	0x08007951
 8007908:	0800791d 	.word	0x0800791d
 800790c:	08007933 	.word	0x08007933
 8007910:	08007951 	.word	0x08007951
 8007914:	08007951 	.word	0x08007951
 8007918:	08007951 	.word	0x08007951
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007920:	3308      	adds	r3, #8
 8007922:	2101      	movs	r1, #1
 8007924:	4618      	mov	r0, r3
 8007926:	f001 fdef 	bl	8009508 <RCCEx_PLL2_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007930:	e00f      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007936:	3328      	adds	r3, #40	; 0x28
 8007938:	2101      	movs	r1, #1
 800793a:	4618      	mov	r0, r3
 800793c:	f001 fe96 	bl	800966c <RCCEx_PLL3_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007946:	e004      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800794e:	e000      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800795a:	4b6c      	ldr	r3, [pc, #432]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800795c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795e:	f023 0107 	bic.w	r1, r3, #7
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800796a:	4a68      	ldr	r2, [pc, #416]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800796c:	430b      	orrs	r3, r1
 800796e:	6593      	str	r3, [r2, #88]	; 0x58
 8007970:	e003      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f002 0320 	and.w	r3, r2, #32
 8007986:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800798a:	2300      	movs	r3, #0
 800798c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007990:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007994:	460b      	mov	r3, r1
 8007996:	4313      	orrs	r3, r2
 8007998:	d055      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800799e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079a6:	d033      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80079a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079ac:	d82c      	bhi.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b2:	d02f      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80079b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b8:	d826      	bhi.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079be:	d02b      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80079c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079c4:	d820      	bhi.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ca:	d012      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80079cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d0:	d81a      	bhi.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d022      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80079d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079da:	d115      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e0:	3308      	adds	r3, #8
 80079e2:	2100      	movs	r1, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 fd8f 	bl	8009508 <RCCEx_PLL2_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079f0:	e015      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f6:	3328      	adds	r3, #40	; 0x28
 80079f8:	2102      	movs	r1, #2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 fe36 	bl	800966c <RCCEx_PLL3_Config>
 8007a00:	4603      	mov	r3, r0
 8007a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a06:	e00a      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a0e:	e006      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a10:	bf00      	nop
 8007a12:	e004      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a14:	bf00      	nop
 8007a16:	e002      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a18:	bf00      	nop
 8007a1a:	e000      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10b      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a26:	4b39      	ldr	r3, [pc, #228]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a36:	4a35      	ldr	r2, [pc, #212]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	6553      	str	r3, [r2, #84]	; 0x54
 8007a3c:	e003      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a56:	2300      	movs	r3, #0
 8007a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4313      	orrs	r3, r2
 8007a64:	d058      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a72:	d033      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007a74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a78:	d82c      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7e:	d02f      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a84:	d826      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a8a:	d02b      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007a8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a90:	d820      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a96:	d012      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9c:	d81a      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d022      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa6:	d115      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aac:	3308      	adds	r3, #8
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 fd29 	bl	8009508 <RCCEx_PLL2_Config>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007abc:	e015      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	3328      	adds	r3, #40	; 0x28
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fdd0 	bl	800966c <RCCEx_PLL3_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ad2:	e00a      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ada:	e006      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007adc:	bf00      	nop
 8007ade:	e004      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ae0:	bf00      	nop
 8007ae2:	e002      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ae4:	bf00      	nop
 8007ae6:	e000      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10e      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007af2:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b02:	4a02      	ldr	r2, [pc, #8]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b04:	430b      	orrs	r3, r1
 8007b06:	6593      	str	r3, [r2, #88]	; 0x58
 8007b08:	e006      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b0a:	bf00      	nop
 8007b0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007b32:	460b      	mov	r3, r1
 8007b34:	4313      	orrs	r3, r2
 8007b36:	d055      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b40:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b44:	d033      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007b46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b4a:	d82c      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b50:	d02f      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b56:	d826      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b5c:	d02b      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007b5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b62:	d820      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b68:	d012      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b6e:	d81a      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d022      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b78:	d115      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7e:	3308      	adds	r3, #8
 8007b80:	2100      	movs	r1, #0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fcc0 	bl	8009508 <RCCEx_PLL2_Config>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b8e:	e015      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b94:	3328      	adds	r3, #40	; 0x28
 8007b96:	2102      	movs	r1, #2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 fd67 	bl	800966c <RCCEx_PLL3_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ba4:	e00a      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bac:	e006      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bae:	bf00      	nop
 8007bb0:	e004      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bb2:	bf00      	nop
 8007bb4:	e002      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bb6:	bf00      	nop
 8007bb8:	e000      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10b      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bc4:	4ba1      	ldr	r3, [pc, #644]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bd4:	4a9d      	ldr	r2, [pc, #628]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8007bda:	e003      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007be0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f002 0308 	and.w	r3, r2, #8
 8007bf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bfa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4313      	orrs	r3, r2
 8007c02:	d01e      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c10:	d10c      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c16:	3328      	adds	r3, #40	; 0x28
 8007c18:	2102      	movs	r1, #2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 fd26 	bl	800966c <RCCEx_PLL3_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c2c:	4b87      	ldr	r3, [pc, #540]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c3c:	4a83      	ldr	r2, [pc, #524]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c3e:	430b      	orrs	r3, r1
 8007c40:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f002 0310 	and.w	r3, r2, #16
 8007c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c52:	2300      	movs	r3, #0
 8007c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	d01e      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6e:	d10c      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c74:	3328      	adds	r3, #40	; 0x28
 8007c76:	2102      	movs	r1, #2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 fcf7 	bl	800966c <RCCEx_PLL3_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c8a:	4b70      	ldr	r3, [pc, #448]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c9a:	4a6c      	ldr	r2, [pc, #432]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cb6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	d03e      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ccc:	d022      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd2:	d81b      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cdc:	d00b      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007cde:	e015      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f001 fc0d 	bl	8009508 <RCCEx_PLL2_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cf4:	e00f      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfa:	3328      	adds	r3, #40	; 0x28
 8007cfc:	2102      	movs	r1, #2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fcb4 	bl	800966c <RCCEx_PLL3_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d0a:	e004      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d12:	e000      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10b      	bne.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d1e:	4b4b      	ldr	r3, [pc, #300]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d22:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d2e:	4a47      	ldr	r2, [pc, #284]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d30:	430b      	orrs	r3, r1
 8007d32:	6593      	str	r3, [r2, #88]	; 0x58
 8007d34:	e003      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007d4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007d54:	460b      	mov	r3, r1
 8007d56:	4313      	orrs	r3, r2
 8007d58:	d03b      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d66:	d01f      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007d68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d6c:	d818      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d72:	d003      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d78:	d007      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007d7a:	e011      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d7c:	4b33      	ldr	r3, [pc, #204]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	4a32      	ldr	r2, [pc, #200]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d88:	e00f      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8e:	3328      	adds	r3, #40	; 0x28
 8007d90:	2101      	movs	r1, #1
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 fc6a 	bl	800966c <RCCEx_PLL3_Config>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d9e:	e004      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007da6:	e000      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10b      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007db2:	4b26      	ldr	r3, [pc, #152]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc2:	4a22      	ldr	r2, [pc, #136]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dc4:	430b      	orrs	r3, r1
 8007dc6:	6553      	str	r3, [r2, #84]	; 0x54
 8007dc8:	e003      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007dde:	673b      	str	r3, [r7, #112]	; 0x70
 8007de0:	2300      	movs	r3, #0
 8007de2:	677b      	str	r3, [r7, #116]	; 0x74
 8007de4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007de8:	460b      	mov	r3, r1
 8007dea:	4313      	orrs	r3, r2
 8007dec:	d034      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dfc:	d007      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007dfe:	e011      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e00:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	4a11      	ldr	r2, [pc, #68]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e0c:	e00e      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e12:	3308      	adds	r3, #8
 8007e14:	2102      	movs	r1, #2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fb76 	bl	8009508 <RCCEx_PLL2_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e22:	e003      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10d      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e42:	4a02      	ldr	r2, [pc, #8]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e44:	430b      	orrs	r3, r1
 8007e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e48:	e006      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007e4a:	bf00      	nop
 8007e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007e64:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e66:	2300      	movs	r3, #0
 8007e68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4313      	orrs	r3, r2
 8007e72:	d00c      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e78:	3328      	adds	r3, #40	; 0x28
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fbf5 	bl	800966c <RCCEx_PLL3_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	667b      	str	r3, [r7, #100]	; 0x64
 8007ea0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	d038      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eb6:	d018      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ebc:	d811      	bhi.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec2:	d014      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec8:	d80b      	bhi.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d011      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed2:	d106      	bne.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed4:	4bc3      	ldr	r3, [pc, #780]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	4ac2      	ldr	r2, [pc, #776]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ede:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ee0:	e008      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ee8:	e004      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007eea:	bf00      	nop
 8007eec:	e002      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007eee:	bf00      	nop
 8007ef0:	e000      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10b      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007efc:	4bb9      	ldr	r3, [pc, #740]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f0c:	4ab5      	ldr	r2, [pc, #724]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	6553      	str	r3, [r2, #84]	; 0x54
 8007f12:	e003      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007f28:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007f32:	460b      	mov	r3, r1
 8007f34:	4313      	orrs	r3, r2
 8007f36:	d009      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f38:	4baa      	ldr	r3, [pc, #680]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f46:	4aa7      	ldr	r2, [pc, #668]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007f58:	653b      	str	r3, [r7, #80]	; 0x50
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8007f5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007f62:	460b      	mov	r3, r1
 8007f64:	4313      	orrs	r3, r2
 8007f66:	d00a      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f68:	4b9e      	ldr	r3, [pc, #632]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f78:	4a9a      	ldr	r2, [pc, #616]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007f94:	460b      	mov	r3, r1
 8007f96:	4313      	orrs	r3, r2
 8007f98:	d009      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f9a:	4b92      	ldr	r3, [pc, #584]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa8:	4a8e      	ldr	r2, [pc, #568]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007faa:	430b      	orrs	r3, r1
 8007fac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007fba:	643b      	str	r3, [r7, #64]	; 0x40
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	d00e      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fca:	4b86      	ldr	r3, [pc, #536]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	4a85      	ldr	r2, [pc, #532]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fd4:	6113      	str	r3, [r2, #16]
 8007fd6:	4b83      	ldr	r3, [pc, #524]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fd8:	6919      	ldr	r1, [r3, #16]
 8007fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007fe2:	4a80      	ldr	r2, [pc, #512]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ffa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007ffe:	460b      	mov	r3, r1
 8008000:	4313      	orrs	r3, r2
 8008002:	d009      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008004:	4b77      	ldr	r3, [pc, #476]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008008:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008012:	4a74      	ldr	r2, [pc, #464]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008014:	430b      	orrs	r3, r1
 8008016:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008024:	633b      	str	r3, [r7, #48]	; 0x30
 8008026:	2300      	movs	r3, #0
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
 800802a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800802e:	460b      	mov	r3, r1
 8008030:	4313      	orrs	r3, r2
 8008032:	d00a      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008034:	4b6b      	ldr	r3, [pc, #428]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008038:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800803c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008044:	4a67      	ldr	r2, [pc, #412]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008046:	430b      	orrs	r3, r1
 8008048:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	2100      	movs	r1, #0
 8008054:	62b9      	str	r1, [r7, #40]	; 0x28
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800805c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d011      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806a:	3308      	adds	r3, #8
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f001 fa4a 	bl	8009508 <RCCEx_PLL2_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800807a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	2100      	movs	r1, #0
 8008094:	6239      	str	r1, [r7, #32]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
 800809c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080a0:	460b      	mov	r3, r1
 80080a2:	4313      	orrs	r3, r2
 80080a4:	d011      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080aa:	3308      	adds	r3, #8
 80080ac:	2101      	movs	r1, #1
 80080ae:	4618      	mov	r0, r3
 80080b0:	f001 fa2a 	bl	8009508 <RCCEx_PLL2_Config>
 80080b4:	4603      	mov	r3, r0
 80080b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	2100      	movs	r1, #0
 80080d4:	61b9      	str	r1, [r7, #24]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	61fb      	str	r3, [r7, #28]
 80080dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080e0:	460b      	mov	r3, r1
 80080e2:	4313      	orrs	r3, r2
 80080e4:	d011      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ea:	3308      	adds	r3, #8
 80080ec:	2102      	movs	r1, #2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 fa0a 	bl	8009508 <RCCEx_PLL2_Config>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008106:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800810a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	2100      	movs	r1, #0
 8008114:	6139      	str	r1, [r7, #16]
 8008116:	f003 0308 	and.w	r3, r3, #8
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008120:	460b      	mov	r3, r1
 8008122:	4313      	orrs	r3, r2
 8008124:	d011      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800812a:	3328      	adds	r3, #40	; 0x28
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f001 fa9c 	bl	800966c <RCCEx_PLL3_Config>
 8008134:	4603      	mov	r3, r0
 8008136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800813a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008146:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800814a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	2100      	movs	r1, #0
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	f003 0310 	and.w	r3, r3, #16
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008160:	460b      	mov	r3, r1
 8008162:	4313      	orrs	r3, r2
 8008164:	d011      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800816a:	3328      	adds	r3, #40	; 0x28
 800816c:	2101      	movs	r1, #1
 800816e:	4618      	mov	r0, r3
 8008170:	f001 fa7c 	bl	800966c <RCCEx_PLL3_Config>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800817a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008186:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	2100      	movs	r1, #0
 8008194:	6039      	str	r1, [r7, #0]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	607b      	str	r3, [r7, #4]
 800819c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081a0:	460b      	mov	r3, r1
 80081a2:	4313      	orrs	r3, r2
 80081a4:	d011      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081aa:	3328      	adds	r3, #40	; 0x28
 80081ac:	2102      	movs	r1, #2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 fa5c 	bl	800966c <RCCEx_PLL3_Config>
 80081b4:	4603      	mov	r3, r0
 80081b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80081ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80081ca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e000      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
}
 80081d8:	4618      	mov	r0, r3
 80081da:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80081de:	46bd      	mov	sp, r7
 80081e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e4:	58024400 	.word	0x58024400

080081e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b090      	sub	sp, #64	; 0x40
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80081fa:	430b      	orrs	r3, r1
 80081fc:	f040 8094 	bne.w	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008200:	4b9e      	ldr	r3, [pc, #632]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	2b04      	cmp	r3, #4
 800820e:	f200 8087 	bhi.w	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	0800822d 	.word	0x0800822d
 800821c:	08008255 	.word	0x08008255
 8008220:	0800827d 	.word	0x0800827d
 8008224:	08008319 	.word	0x08008319
 8008228:	080082a5 	.word	0x080082a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800822c:	4b93      	ldr	r3, [pc, #588]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008238:	d108      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800823a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800823e:	4618      	mov	r0, r3
 8008240:	f001 f810 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008248:	f000 bd45 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008250:	f000 bd41 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008254:	4b89      	ldr	r3, [pc, #548]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800825c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008260:	d108      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008262:	f107 0318 	add.w	r3, r7, #24
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fd54 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008270:	f000 bd31 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008278:	f000 bd2d 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800827c:	4b7f      	ldr	r3, [pc, #508]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008288:	d108      	bne.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800828a:	f107 030c 	add.w	r3, r7, #12
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fe94 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008298:	f000 bd1d 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a0:	f000 bd19 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082a4:	4b75      	ldr	r3, [pc, #468]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082ae:	4b73      	ldr	r3, [pc, #460]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0304 	and.w	r3, r3, #4
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d10c      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d109      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082c0:	4b6e      	ldr	r3, [pc, #440]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	08db      	lsrs	r3, r3, #3
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	4a6d      	ldr	r2, [pc, #436]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082cc:	fa22 f303 	lsr.w	r3, r2, r3
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d2:	e01f      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082d4:	4b69      	ldr	r3, [pc, #420]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e0:	d106      	bne.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082e8:	d102      	bne.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082ea:	4b66      	ldr	r3, [pc, #408]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ee:	e011      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082f0:	4b62      	ldr	r3, [pc, #392]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082fc:	d106      	bne.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008304:	d102      	bne.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008306:	4b60      	ldr	r3, [pc, #384]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800830a:	e003      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008310:	f000 bce1 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008314:	f000 bcdf 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008318:	4b5c      	ldr	r3, [pc, #368]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800831c:	f000 bcdb 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008324:	f000 bcd7 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800832c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008330:	430b      	orrs	r3, r1
 8008332:	f040 80ad 	bne.w	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008336:	4b51      	ldr	r3, [pc, #324]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800833e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008346:	d056      	beq.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834e:	f200 8090 	bhi.w	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	2bc0      	cmp	r3, #192	; 0xc0
 8008356:	f000 8088 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	2bc0      	cmp	r3, #192	; 0xc0
 800835e:	f200 8088 	bhi.w	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	2b80      	cmp	r3, #128	; 0x80
 8008366:	d032      	beq.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836a:	2b80      	cmp	r3, #128	; 0x80
 800836c:	f200 8081 	bhi.w	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	2b40      	cmp	r3, #64	; 0x40
 800837a:	d014      	beq.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800837c:	e079      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800837e:	4b3f      	ldr	r3, [pc, #252]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800838a:	d108      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800838c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008390:	4618      	mov	r0, r3
 8008392:	f000 ff67 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800839a:	f000 bc9c 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083a2:	f000 bc98 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083a6:	4b35      	ldr	r3, [pc, #212]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083b2:	d108      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b4:	f107 0318 	add.w	r3, r7, #24
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fcab 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c2:	f000 bc88 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ca:	f000 bc84 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ce:	4b2b      	ldr	r3, [pc, #172]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083da:	d108      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083dc:	f107 030c 	add.w	r3, r7, #12
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 fdeb 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ea:	f000 bc74 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083f2:	f000 bc70 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083f6:	4b21      	ldr	r3, [pc, #132]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008400:	4b1e      	ldr	r3, [pc, #120]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b04      	cmp	r3, #4
 800840a:	d10c      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008412:	4b1a      	ldr	r3, [pc, #104]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	08db      	lsrs	r3, r3, #3
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	4a18      	ldr	r2, [pc, #96]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800841e:	fa22 f303 	lsr.w	r3, r2, r3
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008424:	e01f      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008426:	4b15      	ldr	r3, [pc, #84]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008432:	d106      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800843a:	d102      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800843c:	4b11      	ldr	r3, [pc, #68]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008440:	e011      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008442:	4b0e      	ldr	r3, [pc, #56]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800844e:	d106      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008456:	d102      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008458:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008462:	f000 bc38 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008466:	f000 bc36 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800846a:	4b08      	ldr	r3, [pc, #32]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800846e:	f000 bc32 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008476:	f000 bc2e 	b.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800847a:	bf00      	nop
 800847c:	58024400 	.word	0x58024400
 8008480:	03d09000 	.word	0x03d09000
 8008484:	003d0900 	.word	0x003d0900
 8008488:	017d7840 	.word	0x017d7840
 800848c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008494:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008498:	430b      	orrs	r3, r1
 800849a:	f040 809c 	bne.w	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800849e:	4b9e      	ldr	r3, [pc, #632]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80084a6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084ae:	d054      	beq.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084b6:	f200 808b 	bhi.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084c0:	f000 8083 	beq.w	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084ca:	f200 8081 	bhi.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084d4:	d02f      	beq.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084dc:	d878      	bhi.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084ea:	d012      	beq.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80084ec:	e070      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084ee:	4b8a      	ldr	r3, [pc, #552]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084fa:	d107      	bne.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008500:	4618      	mov	r0, r3
 8008502:	f000 feaf 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800850a:	e3e4      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008510:	e3e1      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008512:	4b81      	ldr	r3, [pc, #516]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800851a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800851e:	d107      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008520:	f107 0318 	add.w	r3, r7, #24
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fbf5 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800852e:	e3d2      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008534:	e3cf      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008536:	4b78      	ldr	r3, [pc, #480]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800853e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008542:	d107      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008544:	f107 030c 	add.w	r3, r7, #12
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fd37 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008552:	e3c0      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008558:	e3bd      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800855a:	4b6f      	ldr	r3, [pc, #444]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800855c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008562:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008564:	4b6c      	ldr	r3, [pc, #432]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b04      	cmp	r3, #4
 800856e:	d10c      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008572:	2b00      	cmp	r3, #0
 8008574:	d109      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008576:	4b68      	ldr	r3, [pc, #416]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	08db      	lsrs	r3, r3, #3
 800857c:	f003 0303 	and.w	r3, r3, #3
 8008580:	4a66      	ldr	r2, [pc, #408]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008582:	fa22 f303 	lsr.w	r3, r2, r3
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008588:	e01e      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800858a:	4b63      	ldr	r3, [pc, #396]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008596:	d106      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800859e:	d102      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085a0:	4b5f      	ldr	r3, [pc, #380]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a4:	e010      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085a6:	4b5c      	ldr	r3, [pc, #368]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085b2:	d106      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80085b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ba:	d102      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085bc:	4b59      	ldr	r3, [pc, #356]	; (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085c0:	e002      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80085c6:	e386      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085c8:	e385      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085ca:	4b57      	ldr	r3, [pc, #348]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ce:	e382      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d4:	e37f      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085da:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80085de:	430b      	orrs	r3, r1
 80085e0:	f040 80a7 	bne.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80085e4:	4b4c      	ldr	r3, [pc, #304]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80085ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085f4:	d055      	beq.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085fc:	f200 8096 	bhi.w	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008606:	f000 8084 	beq.w	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008610:	f200 808c 	bhi.w	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800861a:	d030      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008622:	f200 8083 	bhi.w	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	2b00      	cmp	r3, #0
 800862a:	d004      	beq.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008632:	d012      	beq.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008634:	e07a      	b.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008636:	4b38      	ldr	r3, [pc, #224]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008642:	d107      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fe0b 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008652:	e340      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008658:	e33d      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800865a:	4b2f      	ldr	r3, [pc, #188]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008666:	d107      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008668:	f107 0318 	add.w	r3, r7, #24
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fb51 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008676:	e32e      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800867c:	e32b      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800867e:	4b26      	ldr	r3, [pc, #152]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800868a:	d107      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868c:	f107 030c 	add.w	r3, r7, #12
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fc93 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800869a:	e31c      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a0:	e319      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086a2:	4b1d      	ldr	r3, [pc, #116]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086ac:	4b1a      	ldr	r3, [pc, #104]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d10c      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086be:	4b16      	ldr	r3, [pc, #88]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	08db      	lsrs	r3, r3, #3
 80086c4:	f003 0303 	and.w	r3, r3, #3
 80086c8:	4a14      	ldr	r2, [pc, #80]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086ca:	fa22 f303 	lsr.w	r3, r2, r3
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d0:	e01e      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086d2:	4b11      	ldr	r3, [pc, #68]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086de:	d106      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e6:	d102      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086e8:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ec:	e010      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086ee:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086fa:	d106      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80086fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008702:	d102      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008708:	e002      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800870e:	e2e2      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008710:	e2e1      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008716:	e2de      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008718:	58024400 	.word	0x58024400
 800871c:	03d09000 	.word	0x03d09000
 8008720:	003d0900 	.word	0x003d0900
 8008724:	017d7840 	.word	0x017d7840
 8008728:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008730:	e2d1      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008736:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800873a:	430b      	orrs	r3, r1
 800873c:	f040 809c 	bne.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008740:	4b93      	ldr	r3, [pc, #588]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008744:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008748:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008750:	d054      	beq.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008758:	f200 808b 	bhi.w	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800875c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008762:	f000 8083 	beq.w	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800876c:	f200 8081 	bhi.w	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008776:	d02f      	beq.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800877e:	d878      	bhi.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878c:	d012      	beq.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800878e:	e070      	b.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008790:	4b7f      	ldr	r3, [pc, #508]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800879c:	d107      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800879e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fd5e 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ac:	e293      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b2:	e290      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087b4:	4b76      	ldr	r3, [pc, #472]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087c0:	d107      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c2:	f107 0318 	add.w	r3, r7, #24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 faa4 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d0:	e281      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d6:	e27e      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087d8:	4b6d      	ldr	r3, [pc, #436]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e4:	d107      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e6:	f107 030c 	add.w	r3, r7, #12
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fbe6 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f4:	e26f      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087fa:	e26c      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087fc:	4b64      	ldr	r3, [pc, #400]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008800:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008804:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008806:	4b62      	ldr	r3, [pc, #392]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0304 	and.w	r3, r3, #4
 800880e:	2b04      	cmp	r3, #4
 8008810:	d10c      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008814:	2b00      	cmp	r3, #0
 8008816:	d109      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008818:	4b5d      	ldr	r3, [pc, #372]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	08db      	lsrs	r3, r3, #3
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	4a5c      	ldr	r2, [pc, #368]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008824:	fa22 f303 	lsr.w	r3, r2, r3
 8008828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800882a:	e01e      	b.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800882c:	4b58      	ldr	r3, [pc, #352]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008838:	d106      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800883a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008840:	d102      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008842:	4b55      	ldr	r3, [pc, #340]	; (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008844:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008846:	e010      	b.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008848:	4b51      	ldr	r3, [pc, #324]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008854:	d106      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885c:	d102      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800885e:	4b4f      	ldr	r3, [pc, #316]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008862:	e002      	b.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008868:	e235      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800886a:	e234      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800886c:	4b4c      	ldr	r3, [pc, #304]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008870:	e231      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008876:	e22e      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800887c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008880:	430b      	orrs	r3, r1
 8008882:	f040 808f 	bne.w	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008886:	4b42      	ldr	r3, [pc, #264]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800888a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800888e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008896:	d06b      	beq.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800889e:	d874      	bhi.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088a6:	d056      	beq.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088ae:	d86c      	bhi.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088b6:	d03b      	beq.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088be:	d864      	bhi.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088c6:	d021      	beq.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ce:	d85c      	bhi.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d004      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088dc:	d004      	beq.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80088de:	e054      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80088e0:	f7fe fa4c 	bl	8006d7c <HAL_RCC_GetPCLK1Freq>
 80088e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088e6:	e1f6      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e8:	4b29      	ldr	r3, [pc, #164]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088f4:	d107      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088f6:	f107 0318 	add.w	r3, r7, #24
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fa0a 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008904:	e1e7      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800890a:	e1e4      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800890c:	4b20      	ldr	r3, [pc, #128]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008918:	d107      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800891a:	f107 030c 	add.w	r3, r7, #12
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fb4c 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008928:	e1d5      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892e:	e1d2      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008930:	4b17      	ldr	r3, [pc, #92]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b04      	cmp	r3, #4
 800893a:	d109      	bne.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800893c:	4b14      	ldr	r3, [pc, #80]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	08db      	lsrs	r3, r3, #3
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	4a13      	ldr	r2, [pc, #76]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008948:	fa22 f303 	lsr.w	r3, r2, r3
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894e:	e1c2      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008950:	2300      	movs	r3, #0
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008954:	e1bf      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008962:	d102      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008964:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008968:	e1b5      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800896e:	e1b2      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008970:	4b07      	ldr	r3, [pc, #28]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800897c:	d102      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800897e:	4b07      	ldr	r3, [pc, #28]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008980:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008982:	e1a8      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008988:	e1a5      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800898e:	e1a2      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008990:	58024400 	.word	0x58024400
 8008994:	03d09000 	.word	0x03d09000
 8008998:	003d0900 	.word	0x003d0900
 800899c:	017d7840 	.word	0x017d7840
 80089a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80089a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80089ac:	430b      	orrs	r3, r1
 80089ae:	d173      	bne.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80089b0:	4b9c      	ldr	r3, [pc, #624]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80089b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089c0:	d02f      	beq.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089c8:	d863      	bhi.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d6:	d012      	beq.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80089d8:	e05b      	b.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089da:	4b92      	ldr	r3, [pc, #584]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e6:	d107      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e8:	f107 0318 	add.w	r3, r7, #24
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f991 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089f6:	e16e      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089fc:	e16b      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089fe:	4b89      	ldr	r3, [pc, #548]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a0c:	f107 030c 	add.w	r3, r7, #12
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fad3 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a1a:	e15c      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a20:	e159      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a22:	4b80      	ldr	r3, [pc, #512]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a2a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a2c:	4b7d      	ldr	r3, [pc, #500]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	d10c      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d109      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a3e:	4b79      	ldr	r3, [pc, #484]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	08db      	lsrs	r3, r3, #3
 8008a44:	f003 0303 	and.w	r3, r3, #3
 8008a48:	4a77      	ldr	r2, [pc, #476]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a50:	e01e      	b.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a52:	4b74      	ldr	r3, [pc, #464]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5e:	d106      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a66:	d102      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a68:	4b70      	ldr	r3, [pc, #448]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a6c:	e010      	b.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a6e:	4b6d      	ldr	r3, [pc, #436]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a7a:	d106      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a82:	d102      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a84:	4b6a      	ldr	r3, [pc, #424]	; (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a88:	e002      	b.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008a8e:	e122      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a90:	e121      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a96:	e11e      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a9c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	d133      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008aa4:	4b5f      	ldr	r3, [pc, #380]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008aac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d004      	beq.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aba:	d012      	beq.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008abc:	e023      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008abe:	4b59      	ldr	r3, [pc, #356]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aca:	d107      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fbc7 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ada:	e0fc      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae0:	e0f9      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ae2:	4b50      	ldr	r3, [pc, #320]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aee:	d107      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008af0:	f107 0318 	add.w	r3, r7, #24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 f90d 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008afe:	e0ea      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b04:	e0e7      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b0a:	e0e4      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b10:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008b14:	430b      	orrs	r3, r1
 8008b16:	f040 808d 	bne.w	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b1a:	4b42      	ldr	r3, [pc, #264]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008b22:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b2a:	d06b      	beq.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b32:	d874      	bhi.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3a:	d056      	beq.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b42:	d86c      	bhi.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b4a:	d03b      	beq.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b52:	d864      	bhi.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b5a:	d021      	beq.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b62:	d85c      	bhi.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d004      	beq.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b70:	d004      	beq.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008b72:	e054      	b.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b74:	f000 f8b8 	bl	8008ce8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b78:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b7a:	e0ac      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b7c:	4b29      	ldr	r3, [pc, #164]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b88:	d107      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b8a:	f107 0318 	add.w	r3, r7, #24
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 f8c0 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b98:	e09d      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b9e:	e09a      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ba0:	4b20      	ldr	r3, [pc, #128]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bac:	d107      	bne.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bae:	f107 030c 	add.w	r3, r7, #12
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fa02 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bbc:	e08b      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc2:	e088      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bc4:	4b17      	ldr	r3, [pc, #92]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d109      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bd0:	4b14      	ldr	r3, [pc, #80]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	08db      	lsrs	r3, r3, #3
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	4a13      	ldr	r2, [pc, #76]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be2:	e078      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be8:	e075      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bea:	4b0e      	ldr	r3, [pc, #56]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf6:	d102      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008bf8:	4b0c      	ldr	r3, [pc, #48]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfc:	e06b      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c02:	e068      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c04:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c10:	d102      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008c12:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c16:	e05e      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c1c:	e05b      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c22:	e058      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c24:	58024400 	.word	0x58024400
 8008c28:	03d09000 	.word	0x03d09000
 8008c2c:	003d0900 	.word	0x003d0900
 8008c30:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c38:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008c3c:	430b      	orrs	r3, r1
 8008c3e:	d148      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c40:	4b27      	ldr	r3, [pc, #156]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c48:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c50:	d02a      	beq.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c58:	d838      	bhi.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d004      	beq.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c66:	d00d      	beq.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008c68:	e030      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c76:	d102      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008c78:	4b1a      	ldr	r3, [pc, #104]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c7c:	e02b      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c82:	e028      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c84:	4b16      	ldr	r3, [pc, #88]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c90:	d107      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fae4 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca0:	e019      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca6:	e016      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ca8:	4b0d      	ldr	r3, [pc, #52]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cb4:	d107      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cb6:	f107 0318 	add.w	r3, r7, #24
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 f82a 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cc4:	e007      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cca:	e004      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cd0:	e001      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3740      	adds	r7, #64	; 0x40
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	017d7840 	.word	0x017d7840

08008ce8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008cec:	f7fe f816 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	091b      	lsrs	r3, r3, #4
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	4904      	ldr	r1, [pc, #16]	; (8008d10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cfe:	5ccb      	ldrb	r3, [r1, r3]
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	58024400 	.word	0x58024400
 8008d10:	0800e580 	.word	0x0800e580

08008d14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b089      	sub	sp, #36	; 0x24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d1c:	4ba1      	ldr	r3, [pc, #644]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	f003 0303 	and.w	r3, r3, #3
 8008d24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008d26:	4b9f      	ldr	r3, [pc, #636]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	0b1b      	lsrs	r3, r3, #12
 8008d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d32:	4b9c      	ldr	r3, [pc, #624]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	091b      	lsrs	r3, r3, #4
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008d3e:	4b99      	ldr	r3, [pc, #612]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d42:	08db      	lsrs	r3, r3, #3
 8008d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	fb02 f303 	mul.w	r3, r2, r3
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 8111 	beq.w	8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	f000 8083 	beq.w	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	f200 80a1 	bhi.w	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d056      	beq.n	8008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d7e:	e099      	b.n	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d80:	4b88      	ldr	r3, [pc, #544]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d02d      	beq.n	8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d8c:	4b85      	ldr	r3, [pc, #532]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	08db      	lsrs	r3, r3, #3
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	4a84      	ldr	r2, [pc, #528]	; (8008fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d98:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	ee07 3a90 	vmov	s15, r3
 8008da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b7b      	ldr	r3, [pc, #492]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008de6:	e087      	b.n	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b6a      	ldr	r3, [pc, #424]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e2a:	e065      	b.n	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b59      	ldr	r3, [pc, #356]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e6e:	e043      	b.n	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e82:	4b48      	ldr	r3, [pc, #288]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb2:	e021      	b.n	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec6:	4b37      	ldr	r3, [pc, #220]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ef6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ef8:	4b2a      	ldr	r3, [pc, #168]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	0a5b      	lsrs	r3, r3, #9
 8008efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f02:	ee07 3a90 	vmov	s15, r3
 8008f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1e:	ee17 2a90 	vmov	r2, s15
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008f26:	4b1f      	ldr	r3, [pc, #124]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	0c1b      	lsrs	r3, r3, #16
 8008f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4c:	ee17 2a90 	vmov	r2, s15
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f54:	4b13      	ldr	r3, [pc, #76]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f58:	0e1b      	lsrs	r3, r3, #24
 8008f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f7a:	ee17 2a90 	vmov	r2, s15
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f82:	e008      	b.n	8008f96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	609a      	str	r2, [r3, #8]
}
 8008f96:	bf00      	nop
 8008f98:	3724      	adds	r7, #36	; 0x24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	03d09000 	.word	0x03d09000
 8008fac:	46000000 	.word	0x46000000
 8008fb0:	4c742400 	.word	0x4c742400
 8008fb4:	4a742400 	.word	0x4a742400
 8008fb8:	4bbebc20 	.word	0x4bbebc20

08008fbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fc4:	4ba1      	ldr	r3, [pc, #644]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008fce:	4b9f      	ldr	r3, [pc, #636]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	0d1b      	lsrs	r3, r3, #20
 8008fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008fda:	4b9c      	ldr	r3, [pc, #624]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	0a1b      	lsrs	r3, r3, #8
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008fe6:	4b99      	ldr	r3, [pc, #612]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fea:	08db      	lsrs	r3, r3, #3
 8008fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	fb02 f303 	mul.w	r3, r2, r3
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 8111 	beq.w	800922c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b02      	cmp	r3, #2
 800900e:	f000 8083 	beq.w	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b02      	cmp	r3, #2
 8009016:	f200 80a1 	bhi.w	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d056      	beq.n	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009026:	e099      	b.n	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009028:	4b88      	ldr	r3, [pc, #544]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0320 	and.w	r3, r3, #32
 8009030:	2b00      	cmp	r3, #0
 8009032:	d02d      	beq.n	8009090 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009034:	4b85      	ldr	r3, [pc, #532]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	08db      	lsrs	r3, r3, #3
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	4a84      	ldr	r2, [pc, #528]	; (8009250 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009040:	fa22 f303 	lsr.w	r3, r2, r3
 8009044:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	ee07 3a90 	vmov	s15, r3
 800904c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	ee07 3a90 	vmov	s15, r3
 8009056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905e:	4b7b      	ldr	r3, [pc, #492]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009072:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800907a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800908e:	e087      	b.n	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800909e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a2:	4b6a      	ldr	r3, [pc, #424]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090d2:	e065      	b.n	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800925c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e6:	4b59      	ldr	r3, [pc, #356]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009116:	e043      	b.n	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912a:	4b48      	ldr	r3, [pc, #288]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913a:	ed97 6a03 	vldr	s12, [r7, #12]
 800913e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800915a:	e021      	b.n	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800925c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800916a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916e:	4b37      	ldr	r3, [pc, #220]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009182:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800919e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80091a0:	4b2a      	ldr	r3, [pc, #168]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a4:	0a5b      	lsrs	r3, r3, #9
 80091a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091aa:	ee07 3a90 	vmov	s15, r3
 80091ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80091be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091c6:	ee17 2a90 	vmov	r2, s15
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80091ce:	4b1f      	ldr	r3, [pc, #124]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	0c1b      	lsrs	r3, r3, #16
 80091d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f4:	ee17 2a90 	vmov	r2, s15
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80091fc:	4b13      	ldr	r3, [pc, #76]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009200:	0e1b      	lsrs	r3, r3, #24
 8009202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009216:	edd7 6a07 	vldr	s13, [r7, #28]
 800921a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800921e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009222:	ee17 2a90 	vmov	r2, s15
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800922a:	e008      	b.n	800923e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	609a      	str	r2, [r3, #8]
}
 800923e:	bf00      	nop
 8009240:	3724      	adds	r7, #36	; 0x24
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	58024400 	.word	0x58024400
 8009250:	03d09000 	.word	0x03d09000
 8009254:	46000000 	.word	0x46000000
 8009258:	4c742400 	.word	0x4c742400
 800925c:	4a742400 	.word	0x4a742400
 8009260:	4bbebc20 	.word	0x4bbebc20

08009264 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009264:	b480      	push	{r7}
 8009266:	b089      	sub	sp, #36	; 0x24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800926c:	4ba0      	ldr	r3, [pc, #640]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	f003 0303 	and.w	r3, r3, #3
 8009274:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009276:	4b9e      	ldr	r3, [pc, #632]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	091b      	lsrs	r3, r3, #4
 800927c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009280:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009282:	4b9b      	ldr	r3, [pc, #620]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800928c:	4b98      	ldr	r3, [pc, #608]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800928e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009290:	08db      	lsrs	r3, r3, #3
 8009292:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	fb02 f303 	mul.w	r3, r2, r3
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8111 	beq.w	80094d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	f000 8083 	beq.w	80093be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	f200 80a1 	bhi.w	8009402 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d056      	beq.n	800937a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092cc:	e099      	b.n	8009402 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ce:	4b88      	ldr	r3, [pc, #544]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0320 	and.w	r3, r3, #32
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d02d      	beq.n	8009336 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092da:	4b85      	ldr	r3, [pc, #532]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	08db      	lsrs	r3, r3, #3
 80092e0:	f003 0303 	and.w	r3, r3, #3
 80092e4:	4a83      	ldr	r2, [pc, #524]	; (80094f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092e6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009304:	4b7a      	ldr	r3, [pc, #488]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930c:	ee07 3a90 	vmov	s15, r3
 8009310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009314:	ed97 6a03 	vldr	s12, [r7, #12]
 8009318:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800931c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009324:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800932c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009330:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009334:	e087      	b.n	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	ee07 3a90 	vmov	s15, r3
 800933c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009340:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009348:	4b69      	ldr	r3, [pc, #420]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009350:	ee07 3a90 	vmov	s15, r3
 8009354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009358:	ed97 6a03 	vldr	s12, [r7, #12]
 800935c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800936c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009374:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009378:	e065      	b.n	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009384:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938c:	4b58      	ldr	r3, [pc, #352]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009394:	ee07 3a90 	vmov	s15, r3
 8009398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939c:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093bc:	e043      	b.n	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	ee07 3a90 	vmov	s15, r3
 80093c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d0:	4b47      	ldr	r3, [pc, #284]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009400:	e021      	b.n	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009414:	4b36      	ldr	r3, [pc, #216]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941c:	ee07 3a90 	vmov	s15, r3
 8009420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009424:	ed97 6a03 	vldr	s12, [r7, #12]
 8009428:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800942c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009444:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009446:	4b2a      	ldr	r3, [pc, #168]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	0a5b      	lsrs	r3, r3, #9
 800944c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009450:	ee07 3a90 	vmov	s15, r3
 8009454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800945c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009460:	edd7 6a07 	vldr	s13, [r7, #28]
 8009464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800946c:	ee17 2a90 	vmov	r2, s15
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009474:	4b1e      	ldr	r3, [pc, #120]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009478:	0c1b      	lsrs	r3, r3, #16
 800947a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800948a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800949a:	ee17 2a90 	vmov	r2, s15
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80094a2:	4b13      	ldr	r3, [pc, #76]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a6:	0e1b      	lsrs	r3, r3, #24
 80094a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c8:	ee17 2a90 	vmov	r2, s15
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094d0:	e008      	b.n	80094e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	609a      	str	r2, [r3, #8]
}
 80094e4:	bf00      	nop
 80094e6:	3724      	adds	r7, #36	; 0x24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	58024400 	.word	0x58024400
 80094f4:	03d09000 	.word	0x03d09000
 80094f8:	46000000 	.word	0x46000000
 80094fc:	4c742400 	.word	0x4c742400
 8009500:	4a742400 	.word	0x4a742400
 8009504:	4bbebc20 	.word	0x4bbebc20

08009508 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009516:	4b53      	ldr	r3, [pc, #332]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	2b03      	cmp	r3, #3
 8009520:	d101      	bne.n	8009526 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e099      	b.n	800965a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009526:	4b4f      	ldr	r3, [pc, #316]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a4e      	ldr	r2, [pc, #312]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800952c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009532:	f7f9 fc31 	bl	8002d98 <HAL_GetTick>
 8009536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009538:	e008      	b.n	800954c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800953a:	f7f9 fc2d 	bl	8002d98 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b02      	cmp	r3, #2
 8009546:	d901      	bls.n	800954c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e086      	b.n	800965a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800954c:	4b45      	ldr	r3, [pc, #276]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1f0      	bne.n	800953a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009558:	4b42      	ldr	r3, [pc, #264]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	031b      	lsls	r3, r3, #12
 8009566:	493f      	ldr	r1, [pc, #252]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009568:	4313      	orrs	r3, r2
 800956a:	628b      	str	r3, [r1, #40]	; 0x28
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	3b01      	subs	r3, #1
 8009572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	3b01      	subs	r3, #1
 800957c:	025b      	lsls	r3, r3, #9
 800957e:	b29b      	uxth	r3, r3
 8009580:	431a      	orrs	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	3b01      	subs	r3, #1
 8009588:	041b      	lsls	r3, r3, #16
 800958a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	3b01      	subs	r3, #1
 8009596:	061b      	lsls	r3, r3, #24
 8009598:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800959c:	4931      	ldr	r1, [pc, #196]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800959e:	4313      	orrs	r3, r2
 80095a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095a2:	4b30      	ldr	r3, [pc, #192]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	492d      	ldr	r1, [pc, #180]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095b4:	4b2b      	ldr	r3, [pc, #172]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	f023 0220 	bic.w	r2, r3, #32
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	4928      	ldr	r1, [pc, #160]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095c6:	4b27      	ldr	r3, [pc, #156]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	4a26      	ldr	r2, [pc, #152]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095cc:	f023 0310 	bic.w	r3, r3, #16
 80095d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095d2:	4b24      	ldr	r3, [pc, #144]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <RCCEx_PLL2_Config+0x160>)
 80095d8:	4013      	ands	r3, r2
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	69d2      	ldr	r2, [r2, #28]
 80095de:	00d2      	lsls	r2, r2, #3
 80095e0:	4920      	ldr	r1, [pc, #128]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095e6:	4b1f      	ldr	r3, [pc, #124]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	4a1e      	ldr	r2, [pc, #120]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095ec:	f043 0310 	orr.w	r3, r3, #16
 80095f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d106      	bne.n	8009606 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095f8:	4b1a      	ldr	r3, [pc, #104]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	4a19      	ldr	r2, [pc, #100]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009602:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009604:	e00f      	b.n	8009626 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d106      	bne.n	800961a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800960c:	4b15      	ldr	r3, [pc, #84]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	4a14      	ldr	r2, [pc, #80]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009618:	e005      	b.n	8009626 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800961a:	4b12      	ldr	r3, [pc, #72]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961e:	4a11      	ldr	r2, [pc, #68]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009624:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009626:	4b0f      	ldr	r3, [pc, #60]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a0e      	ldr	r2, [pc, #56]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800962c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009632:	f7f9 fbb1 	bl	8002d98 <HAL_GetTick>
 8009636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009638:	e008      	b.n	800964c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800963a:	f7f9 fbad 	bl	8002d98 <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	2b02      	cmp	r3, #2
 8009646:	d901      	bls.n	800964c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e006      	b.n	800965a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800964c:	4b05      	ldr	r3, [pc, #20]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0f0      	beq.n	800963a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	58024400 	.word	0x58024400
 8009668:	ffff0007 	.word	0xffff0007

0800966c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800967a:	4b53      	ldr	r3, [pc, #332]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	2b03      	cmp	r3, #3
 8009684:	d101      	bne.n	800968a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e099      	b.n	80097be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800968a:	4b4f      	ldr	r3, [pc, #316]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a4e      	ldr	r2, [pc, #312]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009696:	f7f9 fb7f 	bl	8002d98 <HAL_GetTick>
 800969a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800969c:	e008      	b.n	80096b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800969e:	f7f9 fb7b 	bl	8002d98 <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d901      	bls.n	80096b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e086      	b.n	80097be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096b0:	4b45      	ldr	r3, [pc, #276]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1f0      	bne.n	800969e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096bc:	4b42      	ldr	r3, [pc, #264]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	051b      	lsls	r3, r3, #20
 80096ca:	493f      	ldr	r1, [pc, #252]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	628b      	str	r3, [r1, #40]	; 0x28
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	3b01      	subs	r3, #1
 80096e0:	025b      	lsls	r3, r3, #9
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	041b      	lsls	r3, r3, #16
 80096ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096f2:	431a      	orrs	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	061b      	lsls	r3, r3, #24
 80096fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009700:	4931      	ldr	r1, [pc, #196]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009702:	4313      	orrs	r3, r2
 8009704:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009706:	4b30      	ldr	r3, [pc, #192]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	492d      	ldr	r1, [pc, #180]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009714:	4313      	orrs	r3, r2
 8009716:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009718:	4b2b      	ldr	r3, [pc, #172]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	4928      	ldr	r1, [pc, #160]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009726:	4313      	orrs	r3, r2
 8009728:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800972a:	4b27      	ldr	r3, [pc, #156]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	4a26      	ldr	r2, [pc, #152]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009736:	4b24      	ldr	r3, [pc, #144]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800973a:	4b24      	ldr	r3, [pc, #144]	; (80097cc <RCCEx_PLL3_Config+0x160>)
 800973c:	4013      	ands	r3, r2
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	69d2      	ldr	r2, [r2, #28]
 8009742:	00d2      	lsls	r2, r2, #3
 8009744:	4920      	ldr	r1, [pc, #128]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009746:	4313      	orrs	r3, r2
 8009748:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800974a:	4b1f      	ldr	r3, [pc, #124]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800974c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974e:	4a1e      	ldr	r2, [pc, #120]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d106      	bne.n	800976a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800975c:	4b1a      	ldr	r3, [pc, #104]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	4a19      	ldr	r2, [pc, #100]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009768:	e00f      	b.n	800978a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d106      	bne.n	800977e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009770:	4b15      	ldr	r3, [pc, #84]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009774:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009776:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800977a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800977c:	e005      	b.n	800978a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800977e:	4b12      	ldr	r3, [pc, #72]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	4a11      	ldr	r2, [pc, #68]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009788:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800978a:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a0e      	ldr	r2, [pc, #56]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009796:	f7f9 faff 	bl	8002d98 <HAL_GetTick>
 800979a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800979c:	e008      	b.n	80097b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800979e:	f7f9 fafb 	bl	8002d98 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d901      	bls.n	80097b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e006      	b.n	80097be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097b0:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0f0      	beq.n	800979e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	58024400 	.word	0x58024400
 80097cc:	ffff0007 	.word	0xffff0007

080097d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d071      	beq.n	80098c6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d106      	bne.n	80097fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7f8 fd92 	bl	8002320 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b10      	cmp	r3, #16
 8009810:	d050      	beq.n	80098b4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	22ca      	movs	r2, #202	; 0xca
 8009818:	625a      	str	r2, [r3, #36]	; 0x24
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2253      	movs	r2, #83	; 0x53
 8009820:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f87a 	bl	800991c <RTC_EnterInitMode>
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d124      	bne.n	800987c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6899      	ldr	r1, [r3, #8]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	4b24      	ldr	r3, [pc, #144]	; (80098d0 <HAL_RTC_Init+0x100>)
 800983e:	400b      	ands	r3, r1
 8009840:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6899      	ldr	r1, [r3, #8]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	431a      	orrs	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	431a      	orrs	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	0419      	lsls	r1, r3, #16
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f886 	bl	8009984 <RTC_ExitInitMode>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d113      	bne.n	80098aa <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 0203 	bic.w	r2, r2, #3
 8009890:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	69da      	ldr	r2, [r3, #28]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	431a      	orrs	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	22ff      	movs	r2, #255	; 0xff
 80098b0:	625a      	str	r2, [r3, #36]	; 0x24
 80098b2:	e001      	b.n	80098b8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	ff8fffbf 	.word	0xff8fffbf

080098d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a0d      	ldr	r2, [pc, #52]	; (8009918 <HAL_RTC_WaitForSynchro+0x44>)
 80098e2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80098e4:	f7f9 fa58 	bl	8002d98 <HAL_GetTick>
 80098e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80098ea:	e009      	b.n	8009900 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80098ec:	f7f9 fa54 	bl	8002d98 <HAL_GetTick>
 80098f0:	4602      	mov	r2, r0
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098fa:	d901      	bls.n	8009900 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e007      	b.n	8009910 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0ee      	beq.n	80098ec <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	0003ff5f 	.word	0x0003ff5f

0800991c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009932:	2b00      	cmp	r3, #0
 8009934:	d120      	bne.n	8009978 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f04f 32ff 	mov.w	r2, #4294967295
 800993e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009940:	f7f9 fa2a 	bl	8002d98 <HAL_GetTick>
 8009944:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009946:	e00d      	b.n	8009964 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009948:	f7f9 fa26 	bl	8002d98 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009956:	d905      	bls.n	8009964 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2203      	movs	r2, #3
 8009960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d102      	bne.n	8009978 <RTC_EnterInitMode+0x5c>
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	2b03      	cmp	r3, #3
 8009976:	d1e7      	bne.n	8009948 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009978:	7bfb      	ldrb	r3, [r7, #15]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009990:	4b1a      	ldr	r3, [pc, #104]	; (80099fc <RTC_ExitInitMode+0x78>)
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	4a19      	ldr	r2, [pc, #100]	; (80099fc <RTC_ExitInitMode+0x78>)
 8009996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800999a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800999c:	4b17      	ldr	r3, [pc, #92]	; (80099fc <RTC_ExitInitMode+0x78>)
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10c      	bne.n	80099c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff ff93 	bl	80098d4 <HAL_RTC_WaitForSynchro>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d01e      	beq.n	80099f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2203      	movs	r2, #3
 80099b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	73fb      	strb	r3, [r7, #15]
 80099c0:	e017      	b.n	80099f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80099c2:	4b0e      	ldr	r3, [pc, #56]	; (80099fc <RTC_ExitInitMode+0x78>)
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	4a0d      	ldr	r2, [pc, #52]	; (80099fc <RTC_ExitInitMode+0x78>)
 80099c8:	f023 0320 	bic.w	r3, r3, #32
 80099cc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7ff ff80 	bl	80098d4 <HAL_RTC_WaitForSynchro>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d005      	beq.n	80099e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2203      	movs	r2, #3
 80099de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80099e6:	4b05      	ldr	r3, [pc, #20]	; (80099fc <RTC_ExitInitMode+0x78>)
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	4a04      	ldr	r2, [pc, #16]	; (80099fc <RTC_ExitInitMode+0x78>)
 80099ec:	f043 0320 	orr.w	r3, r3, #32
 80099f0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	58004000 	.word	0x58004000

08009a00 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08a      	sub	sp, #40	; 0x28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e28e      	b.n	8009f30 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009a12:	f7f9 f9f1 	bl	8002df8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d113      	bne.n	8009a48 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a96      	ldr	r2, [pc, #600]	; (8009c80 <HAL_SAI_Init+0x280>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d004      	beq.n	8009a34 <HAL_SAI_Init+0x34>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a95      	ldr	r2, [pc, #596]	; (8009c84 <HAL_SAI_Init+0x284>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d107      	bne.n	8009a44 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d103      	bne.n	8009a44 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e273      	b.n	8009f30 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a8c      	ldr	r2, [pc, #560]	; (8009c80 <HAL_SAI_Init+0x280>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d004      	beq.n	8009a5c <HAL_SAI_Init+0x5c>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a8c      	ldr	r2, [pc, #560]	; (8009c88 <HAL_SAI_Init+0x288>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d102      	bne.n	8009a62 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009a5c:	4b8b      	ldr	r3, [pc, #556]	; (8009c8c <HAL_SAI_Init+0x28c>)
 8009a5e:	61bb      	str	r3, [r7, #24]
 8009a60:	e028      	b.n	8009ab4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a8a      	ldr	r2, [pc, #552]	; (8009c90 <HAL_SAI_Init+0x290>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d004      	beq.n	8009a76 <HAL_SAI_Init+0x76>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a88      	ldr	r2, [pc, #544]	; (8009c94 <HAL_SAI_Init+0x294>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d102      	bne.n	8009a7c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009a76:	4b88      	ldr	r3, [pc, #544]	; (8009c98 <HAL_SAI_Init+0x298>)
 8009a78:	61bb      	str	r3, [r7, #24]
 8009a7a:	e01b      	b.n	8009ab4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a86      	ldr	r2, [pc, #536]	; (8009c9c <HAL_SAI_Init+0x29c>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d004      	beq.n	8009a90 <HAL_SAI_Init+0x90>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a85      	ldr	r2, [pc, #532]	; (8009ca0 <HAL_SAI_Init+0x2a0>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d102      	bne.n	8009a96 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009a90:	4b84      	ldr	r3, [pc, #528]	; (8009ca4 <HAL_SAI_Init+0x2a4>)
 8009a92:	61bb      	str	r3, [r7, #24]
 8009a94:	e00e      	b.n	8009ab4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a7a      	ldr	r2, [pc, #488]	; (8009c84 <HAL_SAI_Init+0x284>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d004      	beq.n	8009aaa <HAL_SAI_Init+0xaa>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a80      	ldr	r2, [pc, #512]	; (8009ca8 <HAL_SAI_Init+0x2a8>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d102      	bne.n	8009ab0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8009aaa:	4b80      	ldr	r3, [pc, #512]	; (8009cac <HAL_SAI_Init+0x2ac>)
 8009aac:	61bb      	str	r3, [r7, #24]
 8009aae:	e001      	b.n	8009ab4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e23d      	b.n	8009f30 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d106      	bne.n	8009ace <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7f8 ff29 	bl	8002920 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fa40 	bl	8009f54 <SAI_Disable>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e228      	b.n	8009f30 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d00c      	beq.n	8009b08 <HAL_SAI_Init+0x108>
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d80d      	bhi.n	8009b0e <HAL_SAI_Init+0x10e>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <HAL_SAI_Init+0xfc>
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d003      	beq.n	8009b02 <HAL_SAI_Init+0x102>
 8009afa:	e008      	b.n	8009b0e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b00:	e008      	b.n	8009b14 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009b02:	2310      	movs	r3, #16
 8009b04:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b06:	e005      	b.n	8009b14 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009b08:	2320      	movs	r3, #32
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b0c:	e002      	b.n	8009b14 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b12:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	2b05      	cmp	r3, #5
 8009b1a:	d832      	bhi.n	8009b82 <HAL_SAI_Init+0x182>
 8009b1c:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <HAL_SAI_Init+0x124>)
 8009b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b22:	bf00      	nop
 8009b24:	08009b3d 	.word	0x08009b3d
 8009b28:	08009b43 	.word	0x08009b43
 8009b2c:	08009b4b 	.word	0x08009b4b
 8009b30:	08009b53 	.word	0x08009b53
 8009b34:	08009b63 	.word	0x08009b63
 8009b38:	08009b73 	.word	0x08009b73
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	61fb      	str	r3, [r7, #28]
      break;
 8009b40:	e022      	b.n	8009b88 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b46:	61fb      	str	r3, [r7, #28]
      break;
 8009b48:	e01e      	b.n	8009b88 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b4e:	61fb      	str	r3, [r7, #28]
      break;
 8009b50:	e01a      	b.n	8009b88 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b56:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b60:	e012      	b.n	8009b88 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b66:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	f043 0302 	orr.w	r3, r3, #2
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b70:	e00a      	b.n	8009b88 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b76:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	f043 0303 	orr.w	r3, r3, #3
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009b80:	e002      	b.n	8009b88 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	61fb      	str	r3, [r7, #28]
      break;
 8009b86:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80c5 	beq.w	8009d22 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a37      	ldr	r2, [pc, #220]	; (8009c80 <HAL_SAI_Init+0x280>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d004      	beq.n	8009bb0 <HAL_SAI_Init+0x1b0>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a37      	ldr	r2, [pc, #220]	; (8009c88 <HAL_SAI_Init+0x288>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d106      	bne.n	8009bbe <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009bb0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009bb4:	f04f 0100 	mov.w	r1, #0
 8009bb8:	f7fe fb16 	bl	80081e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009bbc:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a33      	ldr	r2, [pc, #204]	; (8009c90 <HAL_SAI_Init+0x290>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d004      	beq.n	8009bd2 <HAL_SAI_Init+0x1d2>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a31      	ldr	r2, [pc, #196]	; (8009c94 <HAL_SAI_Init+0x294>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d106      	bne.n	8009be0 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009bd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009bd6:	f04f 0100 	mov.w	r1, #0
 8009bda:	f7fe fb05 	bl	80081e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009bde:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a2d      	ldr	r2, [pc, #180]	; (8009c9c <HAL_SAI_Init+0x29c>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d004      	beq.n	8009bf4 <HAL_SAI_Init+0x1f4>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a2c      	ldr	r2, [pc, #176]	; (8009ca0 <HAL_SAI_Init+0x2a0>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d106      	bne.n	8009c02 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009bf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009bf8:	f04f 0100 	mov.w	r1, #0
 8009bfc:	f7fe faf4 	bl	80081e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c00:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a1f      	ldr	r2, [pc, #124]	; (8009c84 <HAL_SAI_Init+0x284>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d106      	bne.n	8009c1a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009c0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009c10:	f04f 0100 	mov.w	r1, #0
 8009c14:	f7fe fae8 	bl	80081e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c18:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a22      	ldr	r2, [pc, #136]	; (8009ca8 <HAL_SAI_Init+0x2a8>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d106      	bne.n	8009c32 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009c24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009c28:	f04f 0100 	mov.w	r1, #0
 8009c2c:	f7fe fadc 	bl	80081e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c30:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c3a:	d139      	bne.n	8009cb0 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d102      	bne.n	8009c4a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009c44:	2340      	movs	r3, #64	; 0x40
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	e00a      	b.n	8009c60 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4e:	2b08      	cmp	r3, #8
 8009c50:	d103      	bne.n	8009c5a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	e002      	b.n	8009c60 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	fb02 f303 	mul.w	r3, r2, r3
 8009c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c7a:	613b      	str	r3, [r7, #16]
 8009c7c:	e030      	b.n	8009ce0 <HAL_SAI_Init+0x2e0>
 8009c7e:	bf00      	nop
 8009c80:	40015804 	.word	0x40015804
 8009c84:	58005404 	.word	0x58005404
 8009c88:	40015824 	.word	0x40015824
 8009c8c:	40015800 	.word	0x40015800
 8009c90:	40015c04 	.word	0x40015c04
 8009c94:	40015c24 	.word	0x40015c24
 8009c98:	40015c00 	.word	0x40015c00
 8009c9c:	40016004 	.word	0x40016004
 8009ca0:	40016024 	.word	0x40016024
 8009ca4:	40016000 	.word	0x40016000
 8009ca8:	58005424 	.word	0x58005424
 8009cac:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cb8:	d101      	bne.n	8009cbe <HAL_SAI_Init+0x2be>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e000      	b.n	8009cc0 <HAL_SAI_Init+0x2c0>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	4619      	mov	r1, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	fb02 f303 	mul.w	r3, r2, r3
 8009cd8:	021b      	lsls	r3, r3, #8
 8009cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8009cde:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	4a95      	ldr	r2, [pc, #596]	; (8009f38 <HAL_SAI_Init+0x538>)
 8009ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce8:	08da      	lsrs	r2, r3, #3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009cee:	6939      	ldr	r1, [r7, #16]
 8009cf0:	4b91      	ldr	r3, [pc, #580]	; (8009f38 <HAL_SAI_Init+0x538>)
 8009cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8009cf6:	08da      	lsrs	r2, r3, #3
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	1aca      	subs	r2, r1, r3
 8009d02:	2a08      	cmp	r2, #8
 8009d04:	d904      	bls.n	8009d10 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d104      	bne.n	8009d22 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	085a      	lsrs	r2, r3, #1
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <HAL_SAI_Init+0x332>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d109      	bne.n	8009d46 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d101      	bne.n	8009d3e <HAL_SAI_Init+0x33e>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e001      	b.n	8009d42 <HAL_SAI_Init+0x342>
 8009d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d42:	623b      	str	r3, [r7, #32]
 8009d44:	e008      	b.n	8009d58 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d102      	bne.n	8009d54 <HAL_SAI_Init+0x354>
 8009d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d52:	e000      	b.n	8009d56 <HAL_SAI_Init+0x356>
 8009d54:	2300      	movs	r3, #0
 8009d56:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009d58:	f7f9 f84e 	bl	8002df8 <HAL_GetREVID>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d62:	d331      	bcc.n	8009dc8 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6819      	ldr	r1, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4b73      	ldr	r3, [pc, #460]	; (8009f3c <HAL_SAI_Init+0x53c>)
 8009d70:	400b      	ands	r3, r1
 8009d72:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6819      	ldr	r1, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d82:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d88:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009d9c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009da8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	051b      	lsls	r3, r3, #20
 8009db0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009db6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	e02d      	b.n	8009e24 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b5b      	ldr	r3, [pc, #364]	; (8009f40 <HAL_SAI_Init+0x540>)
 8009dd4:	400b      	ands	r3, r1
 8009dd6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6819      	ldr	r1, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009dec:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df2:	431a      	orrs	r2, r3
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009e00:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e0c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	051b      	lsls	r3, r3, #20
 8009e14:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e1a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6859      	ldr	r1, [r3, #4]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	4b45      	ldr	r3, [pc, #276]	; (8009f44 <HAL_SAI_Init+0x544>)
 8009e30:	400b      	ands	r3, r1
 8009e32:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6859      	ldr	r1, [r3, #4]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	69da      	ldr	r2, [r3, #28]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e42:	431a      	orrs	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e48:	431a      	orrs	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6899      	ldr	r1, [r3, #8]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	4b3a      	ldr	r3, [pc, #232]	; (8009f48 <HAL_SAI_Init+0x548>)
 8009e5e:	400b      	ands	r3, r1
 8009e60:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6899      	ldr	r1, [r3, #8]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009e72:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009e78:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009e7e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e84:	3b01      	subs	r3, #1
 8009e86:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009e88:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68d9      	ldr	r1, [r3, #12]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009ea0:	400b      	ands	r3, r1
 8009ea2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68d9      	ldr	r1, [r3, #12]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009eba:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a1e      	ldr	r2, [pc, #120]	; (8009f4c <HAL_SAI_Init+0x54c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d004      	beq.n	8009ee2 <HAL_SAI_Init+0x4e2>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a1c      	ldr	r2, [pc, #112]	; (8009f50 <HAL_SAI_Init+0x550>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d119      	bne.n	8009f16 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee6:	f023 0201 	bic.w	r2, r3, #1
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d10e      	bne.n	8009f16 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f00:	3b01      	subs	r3, #1
 8009f02:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009f04:	431a      	orrs	r2, r3
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f0e:	f043 0201 	orr.w	r2, r3, #1
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3728      	adds	r7, #40	; 0x28
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	cccccccd 	.word	0xcccccccd
 8009f3c:	f005c010 	.word	0xf005c010
 8009f40:	f805c010 	.word	0xf805c010
 8009f44:	ffff1ff0 	.word	0xffff1ff0
 8009f48:	fff88000 	.word	0xfff88000
 8009f4c:	40015804 	.word	0x40015804
 8009f50:	58005404 	.word	0x58005404

08009f54 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009f5c:	4b18      	ldr	r3, [pc, #96]	; (8009fc0 <SAI_Disable+0x6c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a18      	ldr	r2, [pc, #96]	; (8009fc4 <SAI_Disable+0x70>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	0b1b      	lsrs	r3, r3, #12
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009f7e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10a      	bne.n	8009f9c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	72fb      	strb	r3, [r7, #11]
      break;
 8009f9a:	e009      	b.n	8009fb0 <SAI_Disable+0x5c>
    }
    count--;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e7      	bne.n	8009f80 <SAI_Disable+0x2c>

  return status;
 8009fb0:	7afb      	ldrb	r3, [r7, #11]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3714      	adds	r7, #20
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	24000028 	.word	0x24000028
 8009fc4:	95cbec1b 	.word	0x95cbec1b

08009fc8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e02b      	b.n	800a034 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d106      	bne.n	8009ff6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7f8 fc8b 	bl	800290c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3304      	adds	r3, #4
 800a006:	4619      	mov	r1, r3
 800a008:	4610      	mov	r0, r2
 800a00a:	f002 fbe7 	bl	800c7dc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	461a      	mov	r2, r3
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	f002 fc3b 	bl	800c894 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a01e:	4b07      	ldr	r3, [pc, #28]	; (800a03c <HAL_SDRAM_Init+0x74>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a06      	ldr	r2, [pc, #24]	; (800a03c <HAL_SDRAM_Init+0x74>)
 800a024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a028:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	52004000 	.word	0x52004000

0800a040 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e10f      	b.n	800a272 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a87      	ldr	r2, [pc, #540]	; (800a27c <HAL_SPI_Init+0x23c>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d00f      	beq.n	800a082 <HAL_SPI_Init+0x42>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a86      	ldr	r2, [pc, #536]	; (800a280 <HAL_SPI_Init+0x240>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d00a      	beq.n	800a082 <HAL_SPI_Init+0x42>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a84      	ldr	r2, [pc, #528]	; (800a284 <HAL_SPI_Init+0x244>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d005      	beq.n	800a082 <HAL_SPI_Init+0x42>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2b0f      	cmp	r3, #15
 800a07c:	d901      	bls.n	800a082 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e0f7      	b.n	800a272 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f900 	bl	800a288 <SPI_GetPacketSize>
 800a088:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a7b      	ldr	r2, [pc, #492]	; (800a27c <HAL_SPI_Init+0x23c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d00c      	beq.n	800a0ae <HAL_SPI_Init+0x6e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a79      	ldr	r2, [pc, #484]	; (800a280 <HAL_SPI_Init+0x240>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d007      	beq.n	800a0ae <HAL_SPI_Init+0x6e>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a78      	ldr	r2, [pc, #480]	; (800a284 <HAL_SPI_Init+0x244>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d002      	beq.n	800a0ae <HAL_SPI_Init+0x6e>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2b08      	cmp	r3, #8
 800a0ac:	d811      	bhi.n	800a0d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0b2:	4a72      	ldr	r2, [pc, #456]	; (800a27c <HAL_SPI_Init+0x23c>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d009      	beq.n	800a0cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a70      	ldr	r2, [pc, #448]	; (800a280 <HAL_SPI_Init+0x240>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d004      	beq.n	800a0cc <HAL_SPI_Init+0x8c>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a6f      	ldr	r2, [pc, #444]	; (800a284 <HAL_SPI_Init+0x244>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d104      	bne.n	800a0d6 <HAL_SPI_Init+0x96>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b10      	cmp	r3, #16
 800a0d0:	d901      	bls.n	800a0d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e0cd      	b.n	800a272 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d106      	bne.n	800a0f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7f8 f94a 	bl	8002384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0201 	bic.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a112:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a11c:	d119      	bne.n	800a152 <HAL_SPI_Init+0x112>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a126:	d103      	bne.n	800a130 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d008      	beq.n	800a142 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10c      	bne.n	800a152 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a13c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a140:	d107      	bne.n	800a152 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a150:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00f      	beq.n	800a17e <HAL_SPI_Init+0x13e>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	2b06      	cmp	r3, #6
 800a164:	d90b      	bls.n	800a17e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	430a      	orrs	r2, r1
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	e007      	b.n	800a18e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a18c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	69da      	ldr	r2, [r3, #28]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a196:	431a      	orrs	r2, r3
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1a0:	ea42 0103 	orr.w	r1, r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	431a      	orrs	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ee:	ea42 0103 	orr.w	r1, r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d113      	bne.n	800a22e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a218:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a22c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0201 	bic.w	r2, r2, #1
 800a23c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	430a      	orrs	r2, r1
 800a25e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	40013000 	.word	0x40013000
 800a280:	40003800 	.word	0x40003800
 800a284:	40003c00 	.word	0x40003c00

0800a288 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a294:	095b      	lsrs	r3, r3, #5
 800a296:	3301      	adds	r3, #1
 800a298:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	3307      	adds	r3, #7
 800a2a6:	08db      	lsrs	r3, r3, #3
 800a2a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	fb02 f303 	mul.w	r3, r2, r3
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e049      	b.n	800a364 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7f8 f917 	bl	8002518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	f000 fc47 	bl	800ab90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e049      	b.n	800a412 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f841 	bl	800a41a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	f000 fbf0 	bl	800ab90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
	...

0800a430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d109      	bne.n	800a454 <HAL_TIM_PWM_Start+0x24>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b01      	cmp	r3, #1
 800a44a:	bf14      	ite	ne
 800a44c:	2301      	movne	r3, #1
 800a44e:	2300      	moveq	r3, #0
 800a450:	b2db      	uxtb	r3, r3
 800a452:	e03c      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2b04      	cmp	r3, #4
 800a458:	d109      	bne.n	800a46e <HAL_TIM_PWM_Start+0x3e>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b01      	cmp	r3, #1
 800a464:	bf14      	ite	ne
 800a466:	2301      	movne	r3, #1
 800a468:	2300      	moveq	r3, #0
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	e02f      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b08      	cmp	r3, #8
 800a472:	d109      	bne.n	800a488 <HAL_TIM_PWM_Start+0x58>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	bf14      	ite	ne
 800a480:	2301      	movne	r3, #1
 800a482:	2300      	moveq	r3, #0
 800a484:	b2db      	uxtb	r3, r3
 800a486:	e022      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b0c      	cmp	r3, #12
 800a48c:	d109      	bne.n	800a4a2 <HAL_TIM_PWM_Start+0x72>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b01      	cmp	r3, #1
 800a498:	bf14      	ite	ne
 800a49a:	2301      	movne	r3, #1
 800a49c:	2300      	moveq	r3, #0
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	e015      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b10      	cmp	r3, #16
 800a4a6:	d109      	bne.n	800a4bc <HAL_TIM_PWM_Start+0x8c>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	bf14      	ite	ne
 800a4b4:	2301      	movne	r3, #1
 800a4b6:	2300      	moveq	r3, #0
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	e008      	b.n	800a4ce <HAL_TIM_PWM_Start+0x9e>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	bf14      	ite	ne
 800a4c8:	2301      	movne	r3, #1
 800a4ca:	2300      	moveq	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e0a1      	b.n	800a61a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d104      	bne.n	800a4e6 <HAL_TIM_PWM_Start+0xb6>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4e4:	e023      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	d104      	bne.n	800a4f6 <HAL_TIM_PWM_Start+0xc6>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4f4:	e01b      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b08      	cmp	r3, #8
 800a4fa:	d104      	bne.n	800a506 <HAL_TIM_PWM_Start+0xd6>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a504:	e013      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b0c      	cmp	r3, #12
 800a50a:	d104      	bne.n	800a516 <HAL_TIM_PWM_Start+0xe6>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a514:	e00b      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b10      	cmp	r3, #16
 800a51a:	d104      	bne.n	800a526 <HAL_TIM_PWM_Start+0xf6>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a524:	e003      	b.n	800a52e <HAL_TIM_PWM_Start+0xfe>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2202      	movs	r2, #2
 800a52a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2201      	movs	r2, #1
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f000 ff38 	bl	800b3ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a38      	ldr	r2, [pc, #224]	; (800a624 <HAL_TIM_PWM_Start+0x1f4>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d013      	beq.n	800a56e <HAL_TIM_PWM_Start+0x13e>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a37      	ldr	r2, [pc, #220]	; (800a628 <HAL_TIM_PWM_Start+0x1f8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d00e      	beq.n	800a56e <HAL_TIM_PWM_Start+0x13e>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a35      	ldr	r2, [pc, #212]	; (800a62c <HAL_TIM_PWM_Start+0x1fc>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d009      	beq.n	800a56e <HAL_TIM_PWM_Start+0x13e>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a34      	ldr	r2, [pc, #208]	; (800a630 <HAL_TIM_PWM_Start+0x200>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d004      	beq.n	800a56e <HAL_TIM_PWM_Start+0x13e>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a32      	ldr	r2, [pc, #200]	; (800a634 <HAL_TIM_PWM_Start+0x204>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d101      	bne.n	800a572 <HAL_TIM_PWM_Start+0x142>
 800a56e:	2301      	movs	r3, #1
 800a570:	e000      	b.n	800a574 <HAL_TIM_PWM_Start+0x144>
 800a572:	2300      	movs	r3, #0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d007      	beq.n	800a588 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a586:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a25      	ldr	r2, [pc, #148]	; (800a624 <HAL_TIM_PWM_Start+0x1f4>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d022      	beq.n	800a5d8 <HAL_TIM_PWM_Start+0x1a8>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59a:	d01d      	beq.n	800a5d8 <HAL_TIM_PWM_Start+0x1a8>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a25      	ldr	r2, [pc, #148]	; (800a638 <HAL_TIM_PWM_Start+0x208>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d018      	beq.n	800a5d8 <HAL_TIM_PWM_Start+0x1a8>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a24      	ldr	r2, [pc, #144]	; (800a63c <HAL_TIM_PWM_Start+0x20c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d013      	beq.n	800a5d8 <HAL_TIM_PWM_Start+0x1a8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a22      	ldr	r2, [pc, #136]	; (800a640 <HAL_TIM_PWM_Start+0x210>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d00e      	beq.n	800a5d8 <HAL_TIM_PWM_Start+0x1a8>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a1a      	ldr	r2, [pc, #104]	; (800a628 <HAL_TIM_PWM_Start+0x1f8>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d009      	beq.n	800a5d8 <HAL_TIM_PWM_Start+0x1a8>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a1e      	ldr	r2, [pc, #120]	; (800a644 <HAL_TIM_PWM_Start+0x214>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d004      	beq.n	800a5d8 <HAL_TIM_PWM_Start+0x1a8>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a16      	ldr	r2, [pc, #88]	; (800a62c <HAL_TIM_PWM_Start+0x1fc>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d115      	bne.n	800a604 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	4b1a      	ldr	r3, [pc, #104]	; (800a648 <HAL_TIM_PWM_Start+0x218>)
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b06      	cmp	r3, #6
 800a5e8:	d015      	beq.n	800a616 <HAL_TIM_PWM_Start+0x1e6>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f0:	d011      	beq.n	800a616 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f042 0201 	orr.w	r2, r2, #1
 800a600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a602:	e008      	b.n	800a616 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f042 0201 	orr.w	r2, r2, #1
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	e000      	b.n	800a618 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	40010000 	.word	0x40010000
 800a628:	40010400 	.word	0x40010400
 800a62c:	40014000 	.word	0x40014000
 800a630:	40014400 	.word	0x40014400
 800a634:	40014800 	.word	0x40014800
 800a638:	40000400 	.word	0x40000400
 800a63c:	40000800 	.word	0x40000800
 800a640:	40000c00 	.word	0x40000c00
 800a644:	40001800 	.word	0x40001800
 800a648:	00010007 	.word	0x00010007

0800a64c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fea4 	bl	800b3ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a3e      	ldr	r2, [pc, #248]	; (800a764 <HAL_TIM_PWM_Stop+0x118>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d013      	beq.n	800a696 <HAL_TIM_PWM_Stop+0x4a>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a3d      	ldr	r2, [pc, #244]	; (800a768 <HAL_TIM_PWM_Stop+0x11c>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d00e      	beq.n	800a696 <HAL_TIM_PWM_Stop+0x4a>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a3b      	ldr	r2, [pc, #236]	; (800a76c <HAL_TIM_PWM_Stop+0x120>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d009      	beq.n	800a696 <HAL_TIM_PWM_Stop+0x4a>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a3a      	ldr	r2, [pc, #232]	; (800a770 <HAL_TIM_PWM_Stop+0x124>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d004      	beq.n	800a696 <HAL_TIM_PWM_Stop+0x4a>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a38      	ldr	r2, [pc, #224]	; (800a774 <HAL_TIM_PWM_Stop+0x128>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d101      	bne.n	800a69a <HAL_TIM_PWM_Stop+0x4e>
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <HAL_TIM_PWM_Stop+0x50>
 800a69a:	2300      	movs	r3, #0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d017      	beq.n	800a6d0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6a1a      	ldr	r2, [r3, #32]
 800a6a6:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10f      	bne.n	800a6d0 <HAL_TIM_PWM_Stop+0x84>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6a1a      	ldr	r2, [r3, #32]
 800a6b6:	f240 4344 	movw	r3, #1092	; 0x444
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d107      	bne.n	800a6d0 <HAL_TIM_PWM_Stop+0x84>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6a1a      	ldr	r2, [r3, #32]
 800a6d6:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6da:	4013      	ands	r3, r2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10f      	bne.n	800a700 <HAL_TIM_PWM_Stop+0xb4>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6a1a      	ldr	r2, [r3, #32]
 800a6e6:	f240 4344 	movw	r3, #1092	; 0x444
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d107      	bne.n	800a700 <HAL_TIM_PWM_Stop+0xb4>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f022 0201 	bic.w	r2, r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d104      	bne.n	800a710 <HAL_TIM_PWM_Stop+0xc4>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a70e:	e023      	b.n	800a758 <HAL_TIM_PWM_Stop+0x10c>
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2b04      	cmp	r3, #4
 800a714:	d104      	bne.n	800a720 <HAL_TIM_PWM_Stop+0xd4>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a71e:	e01b      	b.n	800a758 <HAL_TIM_PWM_Stop+0x10c>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	2b08      	cmp	r3, #8
 800a724:	d104      	bne.n	800a730 <HAL_TIM_PWM_Stop+0xe4>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a72e:	e013      	b.n	800a758 <HAL_TIM_PWM_Stop+0x10c>
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b0c      	cmp	r3, #12
 800a734:	d104      	bne.n	800a740 <HAL_TIM_PWM_Stop+0xf4>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a73e:	e00b      	b.n	800a758 <HAL_TIM_PWM_Stop+0x10c>
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b10      	cmp	r3, #16
 800a744:	d104      	bne.n	800a750 <HAL_TIM_PWM_Stop+0x104>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a74e:	e003      	b.n	800a758 <HAL_TIM_PWM_Stop+0x10c>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	40010000 	.word	0x40010000
 800a768:	40010400 	.word	0x40010400
 800a76c:	40014000 	.word	0x40014000
 800a770:	40014400 	.word	0x40014400
 800a774:	40014800 	.word	0x40014800

0800a778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d101      	bne.n	800a796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a792:	2302      	movs	r3, #2
 800a794:	e0ff      	b.n	800a996 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b14      	cmp	r3, #20
 800a7a2:	f200 80f0 	bhi.w	800a986 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a7a6:	a201      	add	r2, pc, #4	; (adr r2, 800a7ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ac:	0800a801 	.word	0x0800a801
 800a7b0:	0800a987 	.word	0x0800a987
 800a7b4:	0800a987 	.word	0x0800a987
 800a7b8:	0800a987 	.word	0x0800a987
 800a7bc:	0800a841 	.word	0x0800a841
 800a7c0:	0800a987 	.word	0x0800a987
 800a7c4:	0800a987 	.word	0x0800a987
 800a7c8:	0800a987 	.word	0x0800a987
 800a7cc:	0800a883 	.word	0x0800a883
 800a7d0:	0800a987 	.word	0x0800a987
 800a7d4:	0800a987 	.word	0x0800a987
 800a7d8:	0800a987 	.word	0x0800a987
 800a7dc:	0800a8c3 	.word	0x0800a8c3
 800a7e0:	0800a987 	.word	0x0800a987
 800a7e4:	0800a987 	.word	0x0800a987
 800a7e8:	0800a987 	.word	0x0800a987
 800a7ec:	0800a905 	.word	0x0800a905
 800a7f0:	0800a987 	.word	0x0800a987
 800a7f4:	0800a987 	.word	0x0800a987
 800a7f8:	0800a987 	.word	0x0800a987
 800a7fc:	0800a945 	.word	0x0800a945
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68b9      	ldr	r1, [r7, #8]
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fa5c 	bl	800acc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	699a      	ldr	r2, [r3, #24]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f042 0208 	orr.w	r2, r2, #8
 800a81a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	699a      	ldr	r2, [r3, #24]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f022 0204 	bic.w	r2, r2, #4
 800a82a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6999      	ldr	r1, [r3, #24]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	691a      	ldr	r2, [r3, #16]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	619a      	str	r2, [r3, #24]
      break;
 800a83e:	e0a5      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68b9      	ldr	r1, [r7, #8]
 800a846:	4618      	mov	r0, r3
 800a848:	f000 facc 	bl	800ade4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	699a      	ldr	r2, [r3, #24]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a85a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	699a      	ldr	r2, [r3, #24]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a86a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6999      	ldr	r1, [r3, #24]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	021a      	lsls	r2, r3, #8
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	430a      	orrs	r2, r1
 800a87e:	619a      	str	r2, [r3, #24]
      break;
 800a880:	e084      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68b9      	ldr	r1, [r7, #8]
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 fb35 	bl	800aef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69da      	ldr	r2, [r3, #28]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f042 0208 	orr.w	r2, r2, #8
 800a89c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	69da      	ldr	r2, [r3, #28]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0204 	bic.w	r2, r2, #4
 800a8ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	69d9      	ldr	r1, [r3, #28]
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	691a      	ldr	r2, [r3, #16]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	61da      	str	r2, [r3, #28]
      break;
 800a8c0:	e064      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68b9      	ldr	r1, [r7, #8]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fb9d 	bl	800b008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	69da      	ldr	r2, [r3, #28]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	69da      	ldr	r2, [r3, #28]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	69d9      	ldr	r1, [r3, #28]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	021a      	lsls	r2, r3, #8
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	430a      	orrs	r2, r1
 800a900:	61da      	str	r2, [r3, #28]
      break;
 800a902:	e043      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fbe6 	bl	800b0dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0208 	orr.w	r2, r2, #8
 800a91e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0204 	bic.w	r2, r2, #4
 800a92e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	691a      	ldr	r2, [r3, #16]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a942:	e023      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 fc2a 	bl	800b1a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a95e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a96e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	021a      	lsls	r2, r3, #8
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a984:	e002      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	75fb      	strb	r3, [r7, #23]
      break;
 800a98a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a994:	7dfb      	ldrb	r3, [r7, #23]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop

0800a9a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d101      	bne.n	800a9bc <HAL_TIM_ConfigClockSource+0x1c>
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	e0dc      	b.n	800ab76 <HAL_TIM_ConfigClockSource+0x1d6>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	4b6a      	ldr	r3, [pc, #424]	; (800ab80 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a9d8:	4013      	ands	r3, r2
 800a9da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a64      	ldr	r2, [pc, #400]	; (800ab84 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	f000 80a9 	beq.w	800ab4a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f8:	4a62      	ldr	r2, [pc, #392]	; (800ab84 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	f200 80ae 	bhi.w	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa00:	4a61      	ldr	r2, [pc, #388]	; (800ab88 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	f000 80a1 	beq.w	800ab4a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa08:	4a5f      	ldr	r2, [pc, #380]	; (800ab88 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	f200 80a6 	bhi.w	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa10:	4a5e      	ldr	r2, [pc, #376]	; (800ab8c <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	f000 8099 	beq.w	800ab4a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa18:	4a5c      	ldr	r2, [pc, #368]	; (800ab8c <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	f200 809e 	bhi.w	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa24:	f000 8091 	beq.w	800ab4a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa2c:	f200 8096 	bhi.w	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa34:	f000 8089 	beq.w	800ab4a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa3c:	f200 808e 	bhi.w	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa44:	d03e      	beq.n	800aac4 <HAL_TIM_ConfigClockSource+0x124>
 800aa46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa4a:	f200 8087 	bhi.w	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa52:	f000 8086 	beq.w	800ab62 <HAL_TIM_ConfigClockSource+0x1c2>
 800aa56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa5a:	d87f      	bhi.n	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa5c:	2b70      	cmp	r3, #112	; 0x70
 800aa5e:	d01a      	beq.n	800aa96 <HAL_TIM_ConfigClockSource+0xf6>
 800aa60:	2b70      	cmp	r3, #112	; 0x70
 800aa62:	d87b      	bhi.n	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa64:	2b60      	cmp	r3, #96	; 0x60
 800aa66:	d050      	beq.n	800ab0a <HAL_TIM_ConfigClockSource+0x16a>
 800aa68:	2b60      	cmp	r3, #96	; 0x60
 800aa6a:	d877      	bhi.n	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa6c:	2b50      	cmp	r3, #80	; 0x50
 800aa6e:	d03c      	beq.n	800aaea <HAL_TIM_ConfigClockSource+0x14a>
 800aa70:	2b50      	cmp	r3, #80	; 0x50
 800aa72:	d873      	bhi.n	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa74:	2b40      	cmp	r3, #64	; 0x40
 800aa76:	d058      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x18a>
 800aa78:	2b40      	cmp	r3, #64	; 0x40
 800aa7a:	d86f      	bhi.n	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa7c:	2b30      	cmp	r3, #48	; 0x30
 800aa7e:	d064      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa80:	2b30      	cmp	r3, #48	; 0x30
 800aa82:	d86b      	bhi.n	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa84:	2b20      	cmp	r3, #32
 800aa86:	d060      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa88:	2b20      	cmp	r3, #32
 800aa8a:	d867      	bhi.n	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d05c      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	d05a      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa94:	e062      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	6899      	ldr	r1, [r3, #8]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	f000 fc61 	bl	800b36c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	609a      	str	r2, [r3, #8]
      break;
 800aac2:	e04f      	b.n	800ab64 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6818      	ldr	r0, [r3, #0]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	6899      	ldr	r1, [r3, #8]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f000 fc4a 	bl	800b36c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689a      	ldr	r2, [r3, #8]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aae6:	609a      	str	r2, [r3, #8]
      break;
 800aae8:	e03c      	b.n	800ab64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	6859      	ldr	r1, [r3, #4]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f000 fbba 	bl	800b270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2150      	movs	r1, #80	; 0x50
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fc14 	bl	800b330 <TIM_ITRx_SetConfig>
      break;
 800ab08:	e02c      	b.n	800ab64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	6859      	ldr	r1, [r3, #4]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f000 fbd9 	bl	800b2ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2160      	movs	r1, #96	; 0x60
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 fc04 	bl	800b330 <TIM_ITRx_SetConfig>
      break;
 800ab28:	e01c      	b.n	800ab64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	6859      	ldr	r1, [r3, #4]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	461a      	mov	r2, r3
 800ab38:	f000 fb9a 	bl	800b270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2140      	movs	r1, #64	; 0x40
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fbf4 	bl	800b330 <TIM_ITRx_SetConfig>
      break;
 800ab48:	e00c      	b.n	800ab64 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4619      	mov	r1, r3
 800ab54:	4610      	mov	r0, r2
 800ab56:	f000 fbeb 	bl	800b330 <TIM_ITRx_SetConfig>
      break;
 800ab5a:	e003      	b.n	800ab64 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab60:	e000      	b.n	800ab64 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ab62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	ffceff88 	.word	0xffceff88
 800ab84:	00100040 	.word	0x00100040
 800ab88:	00100030 	.word	0x00100030
 800ab8c:	00100020 	.word	0x00100020

0800ab90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a40      	ldr	r2, [pc, #256]	; (800aca4 <TIM_Base_SetConfig+0x114>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d013      	beq.n	800abd0 <TIM_Base_SetConfig+0x40>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abae:	d00f      	beq.n	800abd0 <TIM_Base_SetConfig+0x40>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a3d      	ldr	r2, [pc, #244]	; (800aca8 <TIM_Base_SetConfig+0x118>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d00b      	beq.n	800abd0 <TIM_Base_SetConfig+0x40>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a3c      	ldr	r2, [pc, #240]	; (800acac <TIM_Base_SetConfig+0x11c>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d007      	beq.n	800abd0 <TIM_Base_SetConfig+0x40>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a3b      	ldr	r2, [pc, #236]	; (800acb0 <TIM_Base_SetConfig+0x120>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d003      	beq.n	800abd0 <TIM_Base_SetConfig+0x40>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a3a      	ldr	r2, [pc, #232]	; (800acb4 <TIM_Base_SetConfig+0x124>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d108      	bne.n	800abe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a2f      	ldr	r2, [pc, #188]	; (800aca4 <TIM_Base_SetConfig+0x114>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d01f      	beq.n	800ac2a <TIM_Base_SetConfig+0x9a>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf0:	d01b      	beq.n	800ac2a <TIM_Base_SetConfig+0x9a>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a2c      	ldr	r2, [pc, #176]	; (800aca8 <TIM_Base_SetConfig+0x118>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d017      	beq.n	800ac2a <TIM_Base_SetConfig+0x9a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a2b      	ldr	r2, [pc, #172]	; (800acac <TIM_Base_SetConfig+0x11c>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d013      	beq.n	800ac2a <TIM_Base_SetConfig+0x9a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a2a      	ldr	r2, [pc, #168]	; (800acb0 <TIM_Base_SetConfig+0x120>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00f      	beq.n	800ac2a <TIM_Base_SetConfig+0x9a>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a29      	ldr	r2, [pc, #164]	; (800acb4 <TIM_Base_SetConfig+0x124>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00b      	beq.n	800ac2a <TIM_Base_SetConfig+0x9a>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a28      	ldr	r2, [pc, #160]	; (800acb8 <TIM_Base_SetConfig+0x128>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d007      	beq.n	800ac2a <TIM_Base_SetConfig+0x9a>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a27      	ldr	r2, [pc, #156]	; (800acbc <TIM_Base_SetConfig+0x12c>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d003      	beq.n	800ac2a <TIM_Base_SetConfig+0x9a>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a26      	ldr	r2, [pc, #152]	; (800acc0 <TIM_Base_SetConfig+0x130>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d108      	bne.n	800ac3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a10      	ldr	r2, [pc, #64]	; (800aca4 <TIM_Base_SetConfig+0x114>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d00f      	beq.n	800ac88 <TIM_Base_SetConfig+0xf8>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a12      	ldr	r2, [pc, #72]	; (800acb4 <TIM_Base_SetConfig+0x124>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d00b      	beq.n	800ac88 <TIM_Base_SetConfig+0xf8>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a11      	ldr	r2, [pc, #68]	; (800acb8 <TIM_Base_SetConfig+0x128>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d007      	beq.n	800ac88 <TIM_Base_SetConfig+0xf8>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a10      	ldr	r2, [pc, #64]	; (800acbc <TIM_Base_SetConfig+0x12c>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d003      	beq.n	800ac88 <TIM_Base_SetConfig+0xf8>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a0f      	ldr	r2, [pc, #60]	; (800acc0 <TIM_Base_SetConfig+0x130>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d103      	bne.n	800ac90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	691a      	ldr	r2, [r3, #16]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	615a      	str	r2, [r3, #20]
}
 800ac96:	bf00      	nop
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	40010000 	.word	0x40010000
 800aca8:	40000400 	.word	0x40000400
 800acac:	40000800 	.word	0x40000800
 800acb0:	40000c00 	.word	0x40000c00
 800acb4:	40010400 	.word	0x40010400
 800acb8:	40014000 	.word	0x40014000
 800acbc:	40014400 	.word	0x40014400
 800acc0:	40014800 	.word	0x40014800

0800acc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b087      	sub	sp, #28
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	f023 0201 	bic.w	r2, r3, #1
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4b37      	ldr	r3, [pc, #220]	; (800adcc <TIM_OC1_SetConfig+0x108>)
 800acf0:	4013      	ands	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f023 0303 	bic.w	r3, r3, #3
 800acfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f023 0302 	bic.w	r3, r3, #2
 800ad0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a2d      	ldr	r2, [pc, #180]	; (800add0 <TIM_OC1_SetConfig+0x10c>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00f      	beq.n	800ad40 <TIM_OC1_SetConfig+0x7c>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a2c      	ldr	r2, [pc, #176]	; (800add4 <TIM_OC1_SetConfig+0x110>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d00b      	beq.n	800ad40 <TIM_OC1_SetConfig+0x7c>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a2b      	ldr	r2, [pc, #172]	; (800add8 <TIM_OC1_SetConfig+0x114>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d007      	beq.n	800ad40 <TIM_OC1_SetConfig+0x7c>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a2a      	ldr	r2, [pc, #168]	; (800addc <TIM_OC1_SetConfig+0x118>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d003      	beq.n	800ad40 <TIM_OC1_SetConfig+0x7c>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a29      	ldr	r2, [pc, #164]	; (800ade0 <TIM_OC1_SetConfig+0x11c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d10c      	bne.n	800ad5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	f023 0308 	bic.w	r3, r3, #8
 800ad46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f023 0304 	bic.w	r3, r3, #4
 800ad58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a1c      	ldr	r2, [pc, #112]	; (800add0 <TIM_OC1_SetConfig+0x10c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d00f      	beq.n	800ad82 <TIM_OC1_SetConfig+0xbe>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a1b      	ldr	r2, [pc, #108]	; (800add4 <TIM_OC1_SetConfig+0x110>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d00b      	beq.n	800ad82 <TIM_OC1_SetConfig+0xbe>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a1a      	ldr	r2, [pc, #104]	; (800add8 <TIM_OC1_SetConfig+0x114>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d007      	beq.n	800ad82 <TIM_OC1_SetConfig+0xbe>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a19      	ldr	r2, [pc, #100]	; (800addc <TIM_OC1_SetConfig+0x118>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d003      	beq.n	800ad82 <TIM_OC1_SetConfig+0xbe>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a18      	ldr	r2, [pc, #96]	; (800ade0 <TIM_OC1_SetConfig+0x11c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d111      	bne.n	800ada6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	621a      	str	r2, [r3, #32]
}
 800adc0:	bf00      	nop
 800adc2:	371c      	adds	r7, #28
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	fffeff8f 	.word	0xfffeff8f
 800add0:	40010000 	.word	0x40010000
 800add4:	40010400 	.word	0x40010400
 800add8:	40014000 	.word	0x40014000
 800addc:	40014400 	.word	0x40014400
 800ade0:	40014800 	.word	0x40014800

0800ade4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	f023 0210 	bic.w	r2, r3, #16
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4b34      	ldr	r3, [pc, #208]	; (800aee0 <TIM_OC2_SetConfig+0xfc>)
 800ae10:	4013      	ands	r3, r2
 800ae12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f023 0320 	bic.w	r3, r3, #32
 800ae2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a29      	ldr	r2, [pc, #164]	; (800aee4 <TIM_OC2_SetConfig+0x100>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d003      	beq.n	800ae4c <TIM_OC2_SetConfig+0x68>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a28      	ldr	r2, [pc, #160]	; (800aee8 <TIM_OC2_SetConfig+0x104>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d10d      	bne.n	800ae68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a1e      	ldr	r2, [pc, #120]	; (800aee4 <TIM_OC2_SetConfig+0x100>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d00f      	beq.n	800ae90 <TIM_OC2_SetConfig+0xac>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a1d      	ldr	r2, [pc, #116]	; (800aee8 <TIM_OC2_SetConfig+0x104>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d00b      	beq.n	800ae90 <TIM_OC2_SetConfig+0xac>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a1c      	ldr	r2, [pc, #112]	; (800aeec <TIM_OC2_SetConfig+0x108>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d007      	beq.n	800ae90 <TIM_OC2_SetConfig+0xac>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a1b      	ldr	r2, [pc, #108]	; (800aef0 <TIM_OC2_SetConfig+0x10c>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d003      	beq.n	800ae90 <TIM_OC2_SetConfig+0xac>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a1a      	ldr	r2, [pc, #104]	; (800aef4 <TIM_OC2_SetConfig+0x110>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d113      	bne.n	800aeb8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	621a      	str	r2, [r3, #32]
}
 800aed2:	bf00      	nop
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	feff8fff 	.word	0xfeff8fff
 800aee4:	40010000 	.word	0x40010000
 800aee8:	40010400 	.word	0x40010400
 800aeec:	40014000 	.word	0x40014000
 800aef0:	40014400 	.word	0x40014400
 800aef4:	40014800 	.word	0x40014800

0800aef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4b33      	ldr	r3, [pc, #204]	; (800aff0 <TIM_OC3_SetConfig+0xf8>)
 800af24:	4013      	ands	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f023 0303 	bic.w	r3, r3, #3
 800af2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	021b      	lsls	r3, r3, #8
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a28      	ldr	r2, [pc, #160]	; (800aff4 <TIM_OC3_SetConfig+0xfc>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d003      	beq.n	800af5e <TIM_OC3_SetConfig+0x66>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a27      	ldr	r2, [pc, #156]	; (800aff8 <TIM_OC3_SetConfig+0x100>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d10d      	bne.n	800af7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	021b      	lsls	r3, r3, #8
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	4313      	orrs	r3, r2
 800af70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a1d      	ldr	r2, [pc, #116]	; (800aff4 <TIM_OC3_SetConfig+0xfc>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d00f      	beq.n	800afa2 <TIM_OC3_SetConfig+0xaa>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a1c      	ldr	r2, [pc, #112]	; (800aff8 <TIM_OC3_SetConfig+0x100>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d00b      	beq.n	800afa2 <TIM_OC3_SetConfig+0xaa>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a1b      	ldr	r2, [pc, #108]	; (800affc <TIM_OC3_SetConfig+0x104>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d007      	beq.n	800afa2 <TIM_OC3_SetConfig+0xaa>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a1a      	ldr	r2, [pc, #104]	; (800b000 <TIM_OC3_SetConfig+0x108>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d003      	beq.n	800afa2 <TIM_OC3_SetConfig+0xaa>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a19      	ldr	r2, [pc, #100]	; (800b004 <TIM_OC3_SetConfig+0x10c>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d113      	bne.n	800afca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	011b      	lsls	r3, r3, #4
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	621a      	str	r2, [r3, #32]
}
 800afe4:	bf00      	nop
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr
 800aff0:	fffeff8f 	.word	0xfffeff8f
 800aff4:	40010000 	.word	0x40010000
 800aff8:	40010400 	.word	0x40010400
 800affc:	40014000 	.word	0x40014000
 800b000:	40014400 	.word	0x40014400
 800b004:	40014800 	.word	0x40014800

0800b008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b008:	b480      	push	{r7}
 800b00a:	b087      	sub	sp, #28
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	4b24      	ldr	r3, [pc, #144]	; (800b0c4 <TIM_OC4_SetConfig+0xbc>)
 800b034:	4013      	ands	r3, r2
 800b036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	021b      	lsls	r3, r3, #8
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	4313      	orrs	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	031b      	lsls	r3, r3, #12
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a19      	ldr	r2, [pc, #100]	; (800b0c8 <TIM_OC4_SetConfig+0xc0>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00f      	beq.n	800b088 <TIM_OC4_SetConfig+0x80>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a18      	ldr	r2, [pc, #96]	; (800b0cc <TIM_OC4_SetConfig+0xc4>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d00b      	beq.n	800b088 <TIM_OC4_SetConfig+0x80>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a17      	ldr	r2, [pc, #92]	; (800b0d0 <TIM_OC4_SetConfig+0xc8>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d007      	beq.n	800b088 <TIM_OC4_SetConfig+0x80>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a16      	ldr	r2, [pc, #88]	; (800b0d4 <TIM_OC4_SetConfig+0xcc>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d003      	beq.n	800b088 <TIM_OC4_SetConfig+0x80>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a15      	ldr	r2, [pc, #84]	; (800b0d8 <TIM_OC4_SetConfig+0xd0>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d109      	bne.n	800b09c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b08e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	019b      	lsls	r3, r3, #6
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	4313      	orrs	r3, r2
 800b09a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	621a      	str	r2, [r3, #32]
}
 800b0b6:	bf00      	nop
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	feff8fff 	.word	0xfeff8fff
 800b0c8:	40010000 	.word	0x40010000
 800b0cc:	40010400 	.word	0x40010400
 800b0d0:	40014000 	.word	0x40014000
 800b0d4:	40014400 	.word	0x40014400
 800b0d8:	40014800 	.word	0x40014800

0800b0dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4b21      	ldr	r3, [pc, #132]	; (800b18c <TIM_OC5_SetConfig+0xb0>)
 800b108:	4013      	ands	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	4313      	orrs	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b11c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	041b      	lsls	r3, r3, #16
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	4313      	orrs	r3, r2
 800b128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a18      	ldr	r2, [pc, #96]	; (800b190 <TIM_OC5_SetConfig+0xb4>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00f      	beq.n	800b152 <TIM_OC5_SetConfig+0x76>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a17      	ldr	r2, [pc, #92]	; (800b194 <TIM_OC5_SetConfig+0xb8>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d00b      	beq.n	800b152 <TIM_OC5_SetConfig+0x76>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a16      	ldr	r2, [pc, #88]	; (800b198 <TIM_OC5_SetConfig+0xbc>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d007      	beq.n	800b152 <TIM_OC5_SetConfig+0x76>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a15      	ldr	r2, [pc, #84]	; (800b19c <TIM_OC5_SetConfig+0xc0>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d003      	beq.n	800b152 <TIM_OC5_SetConfig+0x76>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a14      	ldr	r2, [pc, #80]	; (800b1a0 <TIM_OC5_SetConfig+0xc4>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d109      	bne.n	800b166 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	021b      	lsls	r3, r3, #8
 800b160:	697a      	ldr	r2, [r7, #20]
 800b162:	4313      	orrs	r3, r2
 800b164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	621a      	str	r2, [r3, #32]
}
 800b180:	bf00      	nop
 800b182:	371c      	adds	r7, #28
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	fffeff8f 	.word	0xfffeff8f
 800b190:	40010000 	.word	0x40010000
 800b194:	40010400 	.word	0x40010400
 800b198:	40014000 	.word	0x40014000
 800b19c:	40014400 	.word	0x40014400
 800b1a0:	40014800 	.word	0x40014800

0800b1a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	4b22      	ldr	r3, [pc, #136]	; (800b258 <TIM_OC6_SetConfig+0xb4>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	021b      	lsls	r3, r3, #8
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	051b      	lsls	r3, r3, #20
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a19      	ldr	r2, [pc, #100]	; (800b25c <TIM_OC6_SetConfig+0xb8>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d00f      	beq.n	800b21c <TIM_OC6_SetConfig+0x78>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a18      	ldr	r2, [pc, #96]	; (800b260 <TIM_OC6_SetConfig+0xbc>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d00b      	beq.n	800b21c <TIM_OC6_SetConfig+0x78>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a17      	ldr	r2, [pc, #92]	; (800b264 <TIM_OC6_SetConfig+0xc0>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d007      	beq.n	800b21c <TIM_OC6_SetConfig+0x78>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a16      	ldr	r2, [pc, #88]	; (800b268 <TIM_OC6_SetConfig+0xc4>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d003      	beq.n	800b21c <TIM_OC6_SetConfig+0x78>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a15      	ldr	r2, [pc, #84]	; (800b26c <TIM_OC6_SetConfig+0xc8>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d109      	bne.n	800b230 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	029b      	lsls	r3, r3, #10
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	621a      	str	r2, [r3, #32]
}
 800b24a:	bf00      	nop
 800b24c:	371c      	adds	r7, #28
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	feff8fff 	.word	0xfeff8fff
 800b25c:	40010000 	.word	0x40010000
 800b260:	40010400 	.word	0x40010400
 800b264:	40014000 	.word	0x40014000
 800b268:	40014400 	.word	0x40014400
 800b26c:	40014800 	.word	0x40014800

0800b270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b270:	b480      	push	{r7}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6a1b      	ldr	r3, [r3, #32]
 800b280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	f023 0201 	bic.w	r2, r3, #1
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b29a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	011b      	lsls	r3, r3, #4
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f023 030a 	bic.w	r3, r3, #10
 800b2ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	621a      	str	r2, [r3, #32]
}
 800b2c2:	bf00      	nop
 800b2c4:	371c      	adds	r7, #28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b087      	sub	sp, #28
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	f023 0210 	bic.w	r2, r3, #16
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6a1b      	ldr	r3, [r3, #32]
 800b2f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	031b      	lsls	r3, r3, #12
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	4313      	orrs	r3, r2
 800b302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b30a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	4313      	orrs	r3, r2
 800b314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	621a      	str	r2, [r3, #32]
}
 800b322:	bf00      	nop
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
	...

0800b330 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	4b09      	ldr	r3, [pc, #36]	; (800b368 <TIM_ITRx_SetConfig+0x38>)
 800b344:	4013      	ands	r3, r2
 800b346:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	f043 0307 	orr.w	r3, r3, #7
 800b352:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	609a      	str	r2, [r3, #8]
}
 800b35a:	bf00      	nop
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	ffcfff8f 	.word	0xffcfff8f

0800b36c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	021a      	lsls	r2, r3, #8
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	431a      	orrs	r2, r3
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	4313      	orrs	r3, r2
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	4313      	orrs	r3, r2
 800b398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	609a      	str	r2, [r3, #8]
}
 800b3a0:	bf00      	nop
 800b3a2:	371c      	adds	r7, #28
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f003 031f 	and.w	r3, r3, #31
 800b3be:	2201      	movs	r2, #1
 800b3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a1a      	ldr	r2, [r3, #32]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	43db      	mvns	r3, r3
 800b3ce:	401a      	ands	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a1a      	ldr	r2, [r3, #32]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	f003 031f 	and.w	r3, r3, #31
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	621a      	str	r2, [r3, #32]
}
 800b3ea:	bf00      	nop
 800b3ec:	371c      	adds	r7, #28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
	...

0800b3f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d101      	bne.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b40c:	2302      	movs	r3, #2
 800b40e:	e06d      	b.n	800b4ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a30      	ldr	r2, [pc, #192]	; (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d004      	beq.n	800b444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a2f      	ldr	r2, [pc, #188]	; (800b4fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d108      	bne.n	800b456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b44a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	4313      	orrs	r3, r2
 800b454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b45c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4313      	orrs	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a20      	ldr	r2, [pc, #128]	; (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d022      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b482:	d01d      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a1d      	ldr	r2, [pc, #116]	; (800b500 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d018      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a1c      	ldr	r2, [pc, #112]	; (800b504 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d013      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a1a      	ldr	r2, [pc, #104]	; (800b508 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d00e      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a15      	ldr	r2, [pc, #84]	; (800b4fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d009      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a16      	ldr	r2, [pc, #88]	; (800b50c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d004      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a15      	ldr	r2, [pc, #84]	; (800b510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d10c      	bne.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	40010000 	.word	0x40010000
 800b4fc:	40010400 	.word	0x40010400
 800b500:	40000400 	.word	0x40000400
 800b504:	40000800 	.word	0x40000800
 800b508:	40000c00 	.word	0x40000c00
 800b50c:	40001800 	.word	0x40001800
 800b510:	40014000 	.word	0x40014000

0800b514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e042      	b.n	800b5ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d106      	bne.n	800b53e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7f7 f845 	bl	80025c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2224      	movs	r2, #36	; 0x24
 800b542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f022 0201 	bic.w	r2, r2, #1
 800b554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f8ba 	bl	800b6d0 <UART_SetConfig>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d101      	bne.n	800b566 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e022      	b.n	800b5ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fe16 	bl	800c1a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685a      	ldr	r2, [r3, #4]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f042 0201 	orr.w	r2, r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fe9d 	bl	800c2e4 <UART_CheckIdleState>
 800b5aa:	4603      	mov	r3, r0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08a      	sub	sp, #40	; 0x28
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	603b      	str	r3, [r7, #0]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ca:	2b20      	cmp	r3, #32
 800b5cc:	d17b      	bne.n	800b6c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <HAL_UART_Transmit+0x26>
 800b5d4:	88fb      	ldrh	r3, [r7, #6]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e074      	b.n	800b6c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2221      	movs	r2, #33	; 0x21
 800b5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5ee:	f7f7 fbd3 	bl	8002d98 <HAL_GetTick>
 800b5f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	88fa      	ldrh	r2, [r7, #6]
 800b5f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	88fa      	ldrh	r2, [r7, #6]
 800b600:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b60c:	d108      	bne.n	800b620 <HAL_UART_Transmit+0x6c>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d104      	bne.n	800b620 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b616:	2300      	movs	r3, #0
 800b618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	61bb      	str	r3, [r7, #24]
 800b61e:	e003      	b.n	800b628 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b624:	2300      	movs	r3, #0
 800b626:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b628:	e030      	b.n	800b68c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	2200      	movs	r2, #0
 800b632:	2180      	movs	r1, #128	; 0x80
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 feff 	bl	800c438 <UART_WaitOnFlagUntilTimeout>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d005      	beq.n	800b64c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2220      	movs	r2, #32
 800b644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e03d      	b.n	800b6c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10b      	bne.n	800b66a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	881b      	ldrh	r3, [r3, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b660:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	3302      	adds	r3, #2
 800b666:	61bb      	str	r3, [r7, #24]
 800b668:	e007      	b.n	800b67a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	781a      	ldrb	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	3301      	adds	r3, #1
 800b678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b680:	b29b      	uxth	r3, r3
 800b682:	3b01      	subs	r3, #1
 800b684:	b29a      	uxth	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b692:	b29b      	uxth	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1c8      	bne.n	800b62a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2140      	movs	r1, #64	; 0x40
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f000 fec8 	bl	800c438 <UART_WaitOnFlagUntilTimeout>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d005      	beq.n	800b6ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e006      	b.n	800b6c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e000      	b.n	800b6c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b6c6:	2302      	movs	r3, #2
  }
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3720      	adds	r7, #32
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6d4:	b092      	sub	sp, #72	; 0x48
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	689a      	ldr	r2, [r3, #8]
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	431a      	orrs	r2, r3
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	4bbe      	ldr	r3, [pc, #760]	; (800b9f8 <UART_SetConfig+0x328>)
 800b700:	4013      	ands	r3, r2
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b708:	430b      	orrs	r3, r1
 800b70a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	68da      	ldr	r2, [r3, #12]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	430a      	orrs	r2, r1
 800b720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4ab3      	ldr	r2, [pc, #716]	; (800b9fc <UART_SetConfig+0x32c>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d004      	beq.n	800b73c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b738:	4313      	orrs	r3, r2
 800b73a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689a      	ldr	r2, [r3, #8]
 800b742:	4baf      	ldr	r3, [pc, #700]	; (800ba00 <UART_SetConfig+0x330>)
 800b744:	4013      	ands	r3, r2
 800b746:	697a      	ldr	r2, [r7, #20]
 800b748:	6812      	ldr	r2, [r2, #0]
 800b74a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b74c:	430b      	orrs	r3, r1
 800b74e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	f023 010f 	bic.w	r1, r3, #15
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	430a      	orrs	r2, r1
 800b764:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4aa6      	ldr	r2, [pc, #664]	; (800ba04 <UART_SetConfig+0x334>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d177      	bne.n	800b860 <UART_SetConfig+0x190>
 800b770:	4ba5      	ldr	r3, [pc, #660]	; (800ba08 <UART_SetConfig+0x338>)
 800b772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b778:	2b28      	cmp	r3, #40	; 0x28
 800b77a:	d86d      	bhi.n	800b858 <UART_SetConfig+0x188>
 800b77c:	a201      	add	r2, pc, #4	; (adr r2, 800b784 <UART_SetConfig+0xb4>)
 800b77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b782:	bf00      	nop
 800b784:	0800b829 	.word	0x0800b829
 800b788:	0800b859 	.word	0x0800b859
 800b78c:	0800b859 	.word	0x0800b859
 800b790:	0800b859 	.word	0x0800b859
 800b794:	0800b859 	.word	0x0800b859
 800b798:	0800b859 	.word	0x0800b859
 800b79c:	0800b859 	.word	0x0800b859
 800b7a0:	0800b859 	.word	0x0800b859
 800b7a4:	0800b831 	.word	0x0800b831
 800b7a8:	0800b859 	.word	0x0800b859
 800b7ac:	0800b859 	.word	0x0800b859
 800b7b0:	0800b859 	.word	0x0800b859
 800b7b4:	0800b859 	.word	0x0800b859
 800b7b8:	0800b859 	.word	0x0800b859
 800b7bc:	0800b859 	.word	0x0800b859
 800b7c0:	0800b859 	.word	0x0800b859
 800b7c4:	0800b839 	.word	0x0800b839
 800b7c8:	0800b859 	.word	0x0800b859
 800b7cc:	0800b859 	.word	0x0800b859
 800b7d0:	0800b859 	.word	0x0800b859
 800b7d4:	0800b859 	.word	0x0800b859
 800b7d8:	0800b859 	.word	0x0800b859
 800b7dc:	0800b859 	.word	0x0800b859
 800b7e0:	0800b859 	.word	0x0800b859
 800b7e4:	0800b841 	.word	0x0800b841
 800b7e8:	0800b859 	.word	0x0800b859
 800b7ec:	0800b859 	.word	0x0800b859
 800b7f0:	0800b859 	.word	0x0800b859
 800b7f4:	0800b859 	.word	0x0800b859
 800b7f8:	0800b859 	.word	0x0800b859
 800b7fc:	0800b859 	.word	0x0800b859
 800b800:	0800b859 	.word	0x0800b859
 800b804:	0800b849 	.word	0x0800b849
 800b808:	0800b859 	.word	0x0800b859
 800b80c:	0800b859 	.word	0x0800b859
 800b810:	0800b859 	.word	0x0800b859
 800b814:	0800b859 	.word	0x0800b859
 800b818:	0800b859 	.word	0x0800b859
 800b81c:	0800b859 	.word	0x0800b859
 800b820:	0800b859 	.word	0x0800b859
 800b824:	0800b851 	.word	0x0800b851
 800b828:	2301      	movs	r3, #1
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b82e:	e222      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b830:	2304      	movs	r3, #4
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b836:	e21e      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b838:	2308      	movs	r3, #8
 800b83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b83e:	e21a      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b840:	2310      	movs	r3, #16
 800b842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b846:	e216      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b848:	2320      	movs	r3, #32
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b84e:	e212      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b850:	2340      	movs	r3, #64	; 0x40
 800b852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b856:	e20e      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b858:	2380      	movs	r3, #128	; 0x80
 800b85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b85e:	e20a      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a69      	ldr	r2, [pc, #420]	; (800ba0c <UART_SetConfig+0x33c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d130      	bne.n	800b8cc <UART_SetConfig+0x1fc>
 800b86a:	4b67      	ldr	r3, [pc, #412]	; (800ba08 <UART_SetConfig+0x338>)
 800b86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b86e:	f003 0307 	and.w	r3, r3, #7
 800b872:	2b05      	cmp	r3, #5
 800b874:	d826      	bhi.n	800b8c4 <UART_SetConfig+0x1f4>
 800b876:	a201      	add	r2, pc, #4	; (adr r2, 800b87c <UART_SetConfig+0x1ac>)
 800b878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87c:	0800b895 	.word	0x0800b895
 800b880:	0800b89d 	.word	0x0800b89d
 800b884:	0800b8a5 	.word	0x0800b8a5
 800b888:	0800b8ad 	.word	0x0800b8ad
 800b88c:	0800b8b5 	.word	0x0800b8b5
 800b890:	0800b8bd 	.word	0x0800b8bd
 800b894:	2300      	movs	r3, #0
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b89a:	e1ec      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b89c:	2304      	movs	r3, #4
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8a2:	e1e8      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b8a4:	2308      	movs	r3, #8
 800b8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8aa:	e1e4      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b8ac:	2310      	movs	r3, #16
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8b2:	e1e0      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b8b4:	2320      	movs	r3, #32
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ba:	e1dc      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b8bc:	2340      	movs	r3, #64	; 0x40
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8c2:	e1d8      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b8c4:	2380      	movs	r3, #128	; 0x80
 800b8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ca:	e1d4      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a4f      	ldr	r2, [pc, #316]	; (800ba10 <UART_SetConfig+0x340>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d130      	bne.n	800b938 <UART_SetConfig+0x268>
 800b8d6:	4b4c      	ldr	r3, [pc, #304]	; (800ba08 <UART_SetConfig+0x338>)
 800b8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8da:	f003 0307 	and.w	r3, r3, #7
 800b8de:	2b05      	cmp	r3, #5
 800b8e0:	d826      	bhi.n	800b930 <UART_SetConfig+0x260>
 800b8e2:	a201      	add	r2, pc, #4	; (adr r2, 800b8e8 <UART_SetConfig+0x218>)
 800b8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e8:	0800b901 	.word	0x0800b901
 800b8ec:	0800b909 	.word	0x0800b909
 800b8f0:	0800b911 	.word	0x0800b911
 800b8f4:	0800b919 	.word	0x0800b919
 800b8f8:	0800b921 	.word	0x0800b921
 800b8fc:	0800b929 	.word	0x0800b929
 800b900:	2300      	movs	r3, #0
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b906:	e1b6      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b908:	2304      	movs	r3, #4
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b90e:	e1b2      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b910:	2308      	movs	r3, #8
 800b912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b916:	e1ae      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b918:	2310      	movs	r3, #16
 800b91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b91e:	e1aa      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b920:	2320      	movs	r3, #32
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b926:	e1a6      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b928:	2340      	movs	r3, #64	; 0x40
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92e:	e1a2      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b930:	2380      	movs	r3, #128	; 0x80
 800b932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b936:	e19e      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a35      	ldr	r2, [pc, #212]	; (800ba14 <UART_SetConfig+0x344>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d130      	bne.n	800b9a4 <UART_SetConfig+0x2d4>
 800b942:	4b31      	ldr	r3, [pc, #196]	; (800ba08 <UART_SetConfig+0x338>)
 800b944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b946:	f003 0307 	and.w	r3, r3, #7
 800b94a:	2b05      	cmp	r3, #5
 800b94c:	d826      	bhi.n	800b99c <UART_SetConfig+0x2cc>
 800b94e:	a201      	add	r2, pc, #4	; (adr r2, 800b954 <UART_SetConfig+0x284>)
 800b950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b954:	0800b96d 	.word	0x0800b96d
 800b958:	0800b975 	.word	0x0800b975
 800b95c:	0800b97d 	.word	0x0800b97d
 800b960:	0800b985 	.word	0x0800b985
 800b964:	0800b98d 	.word	0x0800b98d
 800b968:	0800b995 	.word	0x0800b995
 800b96c:	2300      	movs	r3, #0
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b972:	e180      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b974:	2304      	movs	r3, #4
 800b976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b97a:	e17c      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b97c:	2308      	movs	r3, #8
 800b97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b982:	e178      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b984:	2310      	movs	r3, #16
 800b986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b98a:	e174      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b98c:	2320      	movs	r3, #32
 800b98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b992:	e170      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b994:	2340      	movs	r3, #64	; 0x40
 800b996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b99a:	e16c      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b99c:	2380      	movs	r3, #128	; 0x80
 800b99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9a2:	e168      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a1b      	ldr	r2, [pc, #108]	; (800ba18 <UART_SetConfig+0x348>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d142      	bne.n	800ba34 <UART_SetConfig+0x364>
 800b9ae:	4b16      	ldr	r3, [pc, #88]	; (800ba08 <UART_SetConfig+0x338>)
 800b9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b2:	f003 0307 	and.w	r3, r3, #7
 800b9b6:	2b05      	cmp	r3, #5
 800b9b8:	d838      	bhi.n	800ba2c <UART_SetConfig+0x35c>
 800b9ba:	a201      	add	r2, pc, #4	; (adr r2, 800b9c0 <UART_SetConfig+0x2f0>)
 800b9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c0:	0800b9d9 	.word	0x0800b9d9
 800b9c4:	0800b9e1 	.word	0x0800b9e1
 800b9c8:	0800b9e9 	.word	0x0800b9e9
 800b9cc:	0800b9f1 	.word	0x0800b9f1
 800b9d0:	0800ba1d 	.word	0x0800ba1d
 800b9d4:	0800ba25 	.word	0x0800ba25
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9de:	e14a      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b9e0:	2304      	movs	r3, #4
 800b9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9e6:	e146      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b9e8:	2308      	movs	r3, #8
 800b9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ee:	e142      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b9f0:	2310      	movs	r3, #16
 800b9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9f6:	e13e      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800b9f8:	cfff69f3 	.word	0xcfff69f3
 800b9fc:	58000c00 	.word	0x58000c00
 800ba00:	11fff4ff 	.word	0x11fff4ff
 800ba04:	40011000 	.word	0x40011000
 800ba08:	58024400 	.word	0x58024400
 800ba0c:	40004400 	.word	0x40004400
 800ba10:	40004800 	.word	0x40004800
 800ba14:	40004c00 	.word	0x40004c00
 800ba18:	40005000 	.word	0x40005000
 800ba1c:	2320      	movs	r3, #32
 800ba1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba22:	e128      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800ba24:	2340      	movs	r3, #64	; 0x40
 800ba26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba2a:	e124      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800ba2c:	2380      	movs	r3, #128	; 0x80
 800ba2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba32:	e120      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4acb      	ldr	r2, [pc, #812]	; (800bd68 <UART_SetConfig+0x698>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d176      	bne.n	800bb2c <UART_SetConfig+0x45c>
 800ba3e:	4bcb      	ldr	r3, [pc, #812]	; (800bd6c <UART_SetConfig+0x69c>)
 800ba40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba46:	2b28      	cmp	r3, #40	; 0x28
 800ba48:	d86c      	bhi.n	800bb24 <UART_SetConfig+0x454>
 800ba4a:	a201      	add	r2, pc, #4	; (adr r2, 800ba50 <UART_SetConfig+0x380>)
 800ba4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba50:	0800baf5 	.word	0x0800baf5
 800ba54:	0800bb25 	.word	0x0800bb25
 800ba58:	0800bb25 	.word	0x0800bb25
 800ba5c:	0800bb25 	.word	0x0800bb25
 800ba60:	0800bb25 	.word	0x0800bb25
 800ba64:	0800bb25 	.word	0x0800bb25
 800ba68:	0800bb25 	.word	0x0800bb25
 800ba6c:	0800bb25 	.word	0x0800bb25
 800ba70:	0800bafd 	.word	0x0800bafd
 800ba74:	0800bb25 	.word	0x0800bb25
 800ba78:	0800bb25 	.word	0x0800bb25
 800ba7c:	0800bb25 	.word	0x0800bb25
 800ba80:	0800bb25 	.word	0x0800bb25
 800ba84:	0800bb25 	.word	0x0800bb25
 800ba88:	0800bb25 	.word	0x0800bb25
 800ba8c:	0800bb25 	.word	0x0800bb25
 800ba90:	0800bb05 	.word	0x0800bb05
 800ba94:	0800bb25 	.word	0x0800bb25
 800ba98:	0800bb25 	.word	0x0800bb25
 800ba9c:	0800bb25 	.word	0x0800bb25
 800baa0:	0800bb25 	.word	0x0800bb25
 800baa4:	0800bb25 	.word	0x0800bb25
 800baa8:	0800bb25 	.word	0x0800bb25
 800baac:	0800bb25 	.word	0x0800bb25
 800bab0:	0800bb0d 	.word	0x0800bb0d
 800bab4:	0800bb25 	.word	0x0800bb25
 800bab8:	0800bb25 	.word	0x0800bb25
 800babc:	0800bb25 	.word	0x0800bb25
 800bac0:	0800bb25 	.word	0x0800bb25
 800bac4:	0800bb25 	.word	0x0800bb25
 800bac8:	0800bb25 	.word	0x0800bb25
 800bacc:	0800bb25 	.word	0x0800bb25
 800bad0:	0800bb15 	.word	0x0800bb15
 800bad4:	0800bb25 	.word	0x0800bb25
 800bad8:	0800bb25 	.word	0x0800bb25
 800badc:	0800bb25 	.word	0x0800bb25
 800bae0:	0800bb25 	.word	0x0800bb25
 800bae4:	0800bb25 	.word	0x0800bb25
 800bae8:	0800bb25 	.word	0x0800bb25
 800baec:	0800bb25 	.word	0x0800bb25
 800baf0:	0800bb1d 	.word	0x0800bb1d
 800baf4:	2301      	movs	r3, #1
 800baf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bafa:	e0bc      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bafc:	2304      	movs	r3, #4
 800bafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb02:	e0b8      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb04:	2308      	movs	r3, #8
 800bb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb0a:	e0b4      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb0c:	2310      	movs	r3, #16
 800bb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb12:	e0b0      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb14:	2320      	movs	r3, #32
 800bb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb1a:	e0ac      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb1c:	2340      	movs	r3, #64	; 0x40
 800bb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb22:	e0a8      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb24:	2380      	movs	r3, #128	; 0x80
 800bb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb2a:	e0a4      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a8f      	ldr	r2, [pc, #572]	; (800bd70 <UART_SetConfig+0x6a0>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d130      	bne.n	800bb98 <UART_SetConfig+0x4c8>
 800bb36:	4b8d      	ldr	r3, [pc, #564]	; (800bd6c <UART_SetConfig+0x69c>)
 800bb38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	2b05      	cmp	r3, #5
 800bb40:	d826      	bhi.n	800bb90 <UART_SetConfig+0x4c0>
 800bb42:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <UART_SetConfig+0x478>)
 800bb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb48:	0800bb61 	.word	0x0800bb61
 800bb4c:	0800bb69 	.word	0x0800bb69
 800bb50:	0800bb71 	.word	0x0800bb71
 800bb54:	0800bb79 	.word	0x0800bb79
 800bb58:	0800bb81 	.word	0x0800bb81
 800bb5c:	0800bb89 	.word	0x0800bb89
 800bb60:	2300      	movs	r3, #0
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb66:	e086      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb68:	2304      	movs	r3, #4
 800bb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb6e:	e082      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb70:	2308      	movs	r3, #8
 800bb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb76:	e07e      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb78:	2310      	movs	r3, #16
 800bb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb7e:	e07a      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb80:	2320      	movs	r3, #32
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb86:	e076      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb88:	2340      	movs	r3, #64	; 0x40
 800bb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb8e:	e072      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb90:	2380      	movs	r3, #128	; 0x80
 800bb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb96:	e06e      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a75      	ldr	r2, [pc, #468]	; (800bd74 <UART_SetConfig+0x6a4>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d130      	bne.n	800bc04 <UART_SetConfig+0x534>
 800bba2:	4b72      	ldr	r3, [pc, #456]	; (800bd6c <UART_SetConfig+0x69c>)
 800bba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bba6:	f003 0307 	and.w	r3, r3, #7
 800bbaa:	2b05      	cmp	r3, #5
 800bbac:	d826      	bhi.n	800bbfc <UART_SetConfig+0x52c>
 800bbae:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <UART_SetConfig+0x4e4>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bbcd 	.word	0x0800bbcd
 800bbb8:	0800bbd5 	.word	0x0800bbd5
 800bbbc:	0800bbdd 	.word	0x0800bbdd
 800bbc0:	0800bbe5 	.word	0x0800bbe5
 800bbc4:	0800bbed 	.word	0x0800bbed
 800bbc8:	0800bbf5 	.word	0x0800bbf5
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbd2:	e050      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bbd4:	2304      	movs	r3, #4
 800bbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbda:	e04c      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bbdc:	2308      	movs	r3, #8
 800bbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbe2:	e048      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bbe4:	2310      	movs	r3, #16
 800bbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbea:	e044      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bbec:	2320      	movs	r3, #32
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbf2:	e040      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bbf4:	2340      	movs	r3, #64	; 0x40
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbfa:	e03c      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bbfc:	2380      	movs	r3, #128	; 0x80
 800bbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc02:	e038      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a5b      	ldr	r2, [pc, #364]	; (800bd78 <UART_SetConfig+0x6a8>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d130      	bne.n	800bc70 <UART_SetConfig+0x5a0>
 800bc0e:	4b57      	ldr	r3, [pc, #348]	; (800bd6c <UART_SetConfig+0x69c>)
 800bc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc12:	f003 0307 	and.w	r3, r3, #7
 800bc16:	2b05      	cmp	r3, #5
 800bc18:	d826      	bhi.n	800bc68 <UART_SetConfig+0x598>
 800bc1a:	a201      	add	r2, pc, #4	; (adr r2, 800bc20 <UART_SetConfig+0x550>)
 800bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc20:	0800bc39 	.word	0x0800bc39
 800bc24:	0800bc41 	.word	0x0800bc41
 800bc28:	0800bc49 	.word	0x0800bc49
 800bc2c:	0800bc51 	.word	0x0800bc51
 800bc30:	0800bc59 	.word	0x0800bc59
 800bc34:	0800bc61 	.word	0x0800bc61
 800bc38:	2302      	movs	r3, #2
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc3e:	e01a      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bc40:	2304      	movs	r3, #4
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc46:	e016      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bc48:	2308      	movs	r3, #8
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc4e:	e012      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bc50:	2310      	movs	r3, #16
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc56:	e00e      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bc58:	2320      	movs	r3, #32
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc5e:	e00a      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bc60:	2340      	movs	r3, #64	; 0x40
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc66:	e006      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bc68:	2380      	movs	r3, #128	; 0x80
 800bc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc6e:	e002      	b.n	800bc76 <UART_SetConfig+0x5a6>
 800bc70:	2380      	movs	r3, #128	; 0x80
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a3f      	ldr	r2, [pc, #252]	; (800bd78 <UART_SetConfig+0x6a8>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	f040 80f8 	bne.w	800be72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bc86:	2b20      	cmp	r3, #32
 800bc88:	dc46      	bgt.n	800bd18 <UART_SetConfig+0x648>
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	f2c0 8082 	blt.w	800bd94 <UART_SetConfig+0x6c4>
 800bc90:	3b02      	subs	r3, #2
 800bc92:	2b1e      	cmp	r3, #30
 800bc94:	d87e      	bhi.n	800bd94 <UART_SetConfig+0x6c4>
 800bc96:	a201      	add	r2, pc, #4	; (adr r2, 800bc9c <UART_SetConfig+0x5cc>)
 800bc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9c:	0800bd1f 	.word	0x0800bd1f
 800bca0:	0800bd95 	.word	0x0800bd95
 800bca4:	0800bd27 	.word	0x0800bd27
 800bca8:	0800bd95 	.word	0x0800bd95
 800bcac:	0800bd95 	.word	0x0800bd95
 800bcb0:	0800bd95 	.word	0x0800bd95
 800bcb4:	0800bd37 	.word	0x0800bd37
 800bcb8:	0800bd95 	.word	0x0800bd95
 800bcbc:	0800bd95 	.word	0x0800bd95
 800bcc0:	0800bd95 	.word	0x0800bd95
 800bcc4:	0800bd95 	.word	0x0800bd95
 800bcc8:	0800bd95 	.word	0x0800bd95
 800bccc:	0800bd95 	.word	0x0800bd95
 800bcd0:	0800bd95 	.word	0x0800bd95
 800bcd4:	0800bd47 	.word	0x0800bd47
 800bcd8:	0800bd95 	.word	0x0800bd95
 800bcdc:	0800bd95 	.word	0x0800bd95
 800bce0:	0800bd95 	.word	0x0800bd95
 800bce4:	0800bd95 	.word	0x0800bd95
 800bce8:	0800bd95 	.word	0x0800bd95
 800bcec:	0800bd95 	.word	0x0800bd95
 800bcf0:	0800bd95 	.word	0x0800bd95
 800bcf4:	0800bd95 	.word	0x0800bd95
 800bcf8:	0800bd95 	.word	0x0800bd95
 800bcfc:	0800bd95 	.word	0x0800bd95
 800bd00:	0800bd95 	.word	0x0800bd95
 800bd04:	0800bd95 	.word	0x0800bd95
 800bd08:	0800bd95 	.word	0x0800bd95
 800bd0c:	0800bd95 	.word	0x0800bd95
 800bd10:	0800bd95 	.word	0x0800bd95
 800bd14:	0800bd87 	.word	0x0800bd87
 800bd18:	2b40      	cmp	r3, #64	; 0x40
 800bd1a:	d037      	beq.n	800bd8c <UART_SetConfig+0x6bc>
 800bd1c:	e03a      	b.n	800bd94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bd1e:	f7fc ffe3 	bl	8008ce8 <HAL_RCCEx_GetD3PCLK1Freq>
 800bd22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd24:	e03c      	b.n	800bda0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fc fff2 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd34:	e034      	b.n	800bda0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd36:	f107 0318 	add.w	r3, r7, #24
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fd f93e 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd44:	e02c      	b.n	800bda0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd46:	4b09      	ldr	r3, [pc, #36]	; (800bd6c <UART_SetConfig+0x69c>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 0320 	and.w	r3, r3, #32
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d016      	beq.n	800bd80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd52:	4b06      	ldr	r3, [pc, #24]	; (800bd6c <UART_SetConfig+0x69c>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	08db      	lsrs	r3, r3, #3
 800bd58:	f003 0303 	and.w	r3, r3, #3
 800bd5c:	4a07      	ldr	r2, [pc, #28]	; (800bd7c <UART_SetConfig+0x6ac>)
 800bd5e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd64:	e01c      	b.n	800bda0 <UART_SetConfig+0x6d0>
 800bd66:	bf00      	nop
 800bd68:	40011400 	.word	0x40011400
 800bd6c:	58024400 	.word	0x58024400
 800bd70:	40007800 	.word	0x40007800
 800bd74:	40007c00 	.word	0x40007c00
 800bd78:	58000c00 	.word	0x58000c00
 800bd7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bd80:	4b9d      	ldr	r3, [pc, #628]	; (800bff8 <UART_SetConfig+0x928>)
 800bd82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd84:	e00c      	b.n	800bda0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd86:	4b9d      	ldr	r3, [pc, #628]	; (800bffc <UART_SetConfig+0x92c>)
 800bd88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd8a:	e009      	b.n	800bda0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd92:	e005      	b.n	800bda0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bd94:	2300      	movs	r3, #0
 800bd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bd9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 81de 	beq.w	800c164 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdac:	4a94      	ldr	r2, [pc, #592]	; (800c000 <UART_SetConfig+0x930>)
 800bdae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	685a      	ldr	r2, [r3, #4]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	005b      	lsls	r3, r3, #1
 800bdc4:	4413      	add	r3, r2
 800bdc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d305      	bcc.n	800bdd8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d903      	bls.n	800bde0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bdde:	e1c1      	b.n	800c164 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bde0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde2:	2200      	movs	r2, #0
 800bde4:	60bb      	str	r3, [r7, #8]
 800bde6:	60fa      	str	r2, [r7, #12]
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	4a84      	ldr	r2, [pc, #528]	; (800c000 <UART_SetConfig+0x930>)
 800bdee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	603b      	str	r3, [r7, #0]
 800bdf8:	607a      	str	r2, [r7, #4]
 800bdfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800be02:	f7f4 fac5 	bl	8000390 <__aeabi_uldivmod>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	4610      	mov	r0, r2
 800be0c:	4619      	mov	r1, r3
 800be0e:	f04f 0200 	mov.w	r2, #0
 800be12:	f04f 0300 	mov.w	r3, #0
 800be16:	020b      	lsls	r3, r1, #8
 800be18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be1c:	0202      	lsls	r2, r0, #8
 800be1e:	6979      	ldr	r1, [r7, #20]
 800be20:	6849      	ldr	r1, [r1, #4]
 800be22:	0849      	lsrs	r1, r1, #1
 800be24:	2000      	movs	r0, #0
 800be26:	460c      	mov	r4, r1
 800be28:	4605      	mov	r5, r0
 800be2a:	eb12 0804 	adds.w	r8, r2, r4
 800be2e:	eb43 0905 	adc.w	r9, r3, r5
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	469a      	mov	sl, r3
 800be3a:	4693      	mov	fp, r2
 800be3c:	4652      	mov	r2, sl
 800be3e:	465b      	mov	r3, fp
 800be40:	4640      	mov	r0, r8
 800be42:	4649      	mov	r1, r9
 800be44:	f7f4 faa4 	bl	8000390 <__aeabi_uldivmod>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4613      	mov	r3, r2
 800be4e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be56:	d308      	bcc.n	800be6a <UART_SetConfig+0x79a>
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be5e:	d204      	bcs.n	800be6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be66:	60da      	str	r2, [r3, #12]
 800be68:	e17c      	b.n	800c164 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800be70:	e178      	b.n	800c164 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	69db      	ldr	r3, [r3, #28]
 800be76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be7a:	f040 80c5 	bne.w	800c008 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800be7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800be82:	2b20      	cmp	r3, #32
 800be84:	dc48      	bgt.n	800bf18 <UART_SetConfig+0x848>
 800be86:	2b00      	cmp	r3, #0
 800be88:	db7b      	blt.n	800bf82 <UART_SetConfig+0x8b2>
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	d879      	bhi.n	800bf82 <UART_SetConfig+0x8b2>
 800be8e:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <UART_SetConfig+0x7c4>)
 800be90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be94:	0800bf1f 	.word	0x0800bf1f
 800be98:	0800bf27 	.word	0x0800bf27
 800be9c:	0800bf83 	.word	0x0800bf83
 800bea0:	0800bf83 	.word	0x0800bf83
 800bea4:	0800bf2f 	.word	0x0800bf2f
 800bea8:	0800bf83 	.word	0x0800bf83
 800beac:	0800bf83 	.word	0x0800bf83
 800beb0:	0800bf83 	.word	0x0800bf83
 800beb4:	0800bf3f 	.word	0x0800bf3f
 800beb8:	0800bf83 	.word	0x0800bf83
 800bebc:	0800bf83 	.word	0x0800bf83
 800bec0:	0800bf83 	.word	0x0800bf83
 800bec4:	0800bf83 	.word	0x0800bf83
 800bec8:	0800bf83 	.word	0x0800bf83
 800becc:	0800bf83 	.word	0x0800bf83
 800bed0:	0800bf83 	.word	0x0800bf83
 800bed4:	0800bf4f 	.word	0x0800bf4f
 800bed8:	0800bf83 	.word	0x0800bf83
 800bedc:	0800bf83 	.word	0x0800bf83
 800bee0:	0800bf83 	.word	0x0800bf83
 800bee4:	0800bf83 	.word	0x0800bf83
 800bee8:	0800bf83 	.word	0x0800bf83
 800beec:	0800bf83 	.word	0x0800bf83
 800bef0:	0800bf83 	.word	0x0800bf83
 800bef4:	0800bf83 	.word	0x0800bf83
 800bef8:	0800bf83 	.word	0x0800bf83
 800befc:	0800bf83 	.word	0x0800bf83
 800bf00:	0800bf83 	.word	0x0800bf83
 800bf04:	0800bf83 	.word	0x0800bf83
 800bf08:	0800bf83 	.word	0x0800bf83
 800bf0c:	0800bf83 	.word	0x0800bf83
 800bf10:	0800bf83 	.word	0x0800bf83
 800bf14:	0800bf75 	.word	0x0800bf75
 800bf18:	2b40      	cmp	r3, #64	; 0x40
 800bf1a:	d02e      	beq.n	800bf7a <UART_SetConfig+0x8aa>
 800bf1c:	e031      	b.n	800bf82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf1e:	f7fa ff2d 	bl	8006d7c <HAL_RCC_GetPCLK1Freq>
 800bf22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf24:	e033      	b.n	800bf8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf26:	f7fa ff3f 	bl	8006da8 <HAL_RCC_GetPCLK2Freq>
 800bf2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf2c:	e02f      	b.n	800bf8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fc feee 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf3c:	e027      	b.n	800bf8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf3e:	f107 0318 	add.w	r3, r7, #24
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fd f83a 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf4c:	e01f      	b.n	800bf8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf4e:	4b2d      	ldr	r3, [pc, #180]	; (800c004 <UART_SetConfig+0x934>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d009      	beq.n	800bf6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf5a:	4b2a      	ldr	r3, [pc, #168]	; (800c004 <UART_SetConfig+0x934>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	08db      	lsrs	r3, r3, #3
 800bf60:	f003 0303 	and.w	r3, r3, #3
 800bf64:	4a24      	ldr	r2, [pc, #144]	; (800bff8 <UART_SetConfig+0x928>)
 800bf66:	fa22 f303 	lsr.w	r3, r2, r3
 800bf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf6c:	e00f      	b.n	800bf8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bf6e:	4b22      	ldr	r3, [pc, #136]	; (800bff8 <UART_SetConfig+0x928>)
 800bf70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf72:	e00c      	b.n	800bf8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf74:	4b21      	ldr	r3, [pc, #132]	; (800bffc <UART_SetConfig+0x92c>)
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf78:	e009      	b.n	800bf8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf80:	e005      	b.n	800bf8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bf82:	2300      	movs	r3, #0
 800bf84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bf8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 80e7 	beq.w	800c164 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9a:	4a19      	ldr	r2, [pc, #100]	; (800c000 <UART_SetConfig+0x930>)
 800bf9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfa8:	005a      	lsls	r2, r3, #1
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	085b      	lsrs	r3, r3, #1
 800bfb0:	441a      	add	r2, r3
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbe:	2b0f      	cmp	r3, #15
 800bfc0:	d916      	bls.n	800bff0 <UART_SetConfig+0x920>
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc8:	d212      	bcs.n	800bff0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	f023 030f 	bic.w	r3, r3, #15
 800bfd2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	085b      	lsrs	r3, r3, #1
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	f003 0307 	and.w	r3, r3, #7
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bfec:	60da      	str	r2, [r3, #12]
 800bfee:	e0b9      	b.n	800c164 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bff6:	e0b5      	b.n	800c164 <UART_SetConfig+0xa94>
 800bff8:	03d09000 	.word	0x03d09000
 800bffc:	003d0900 	.word	0x003d0900
 800c000:	0800e590 	.word	0x0800e590
 800c004:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c008:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c00c:	2b20      	cmp	r3, #32
 800c00e:	dc49      	bgt.n	800c0a4 <UART_SetConfig+0x9d4>
 800c010:	2b00      	cmp	r3, #0
 800c012:	db7c      	blt.n	800c10e <UART_SetConfig+0xa3e>
 800c014:	2b20      	cmp	r3, #32
 800c016:	d87a      	bhi.n	800c10e <UART_SetConfig+0xa3e>
 800c018:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <UART_SetConfig+0x950>)
 800c01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01e:	bf00      	nop
 800c020:	0800c0ab 	.word	0x0800c0ab
 800c024:	0800c0b3 	.word	0x0800c0b3
 800c028:	0800c10f 	.word	0x0800c10f
 800c02c:	0800c10f 	.word	0x0800c10f
 800c030:	0800c0bb 	.word	0x0800c0bb
 800c034:	0800c10f 	.word	0x0800c10f
 800c038:	0800c10f 	.word	0x0800c10f
 800c03c:	0800c10f 	.word	0x0800c10f
 800c040:	0800c0cb 	.word	0x0800c0cb
 800c044:	0800c10f 	.word	0x0800c10f
 800c048:	0800c10f 	.word	0x0800c10f
 800c04c:	0800c10f 	.word	0x0800c10f
 800c050:	0800c10f 	.word	0x0800c10f
 800c054:	0800c10f 	.word	0x0800c10f
 800c058:	0800c10f 	.word	0x0800c10f
 800c05c:	0800c10f 	.word	0x0800c10f
 800c060:	0800c0db 	.word	0x0800c0db
 800c064:	0800c10f 	.word	0x0800c10f
 800c068:	0800c10f 	.word	0x0800c10f
 800c06c:	0800c10f 	.word	0x0800c10f
 800c070:	0800c10f 	.word	0x0800c10f
 800c074:	0800c10f 	.word	0x0800c10f
 800c078:	0800c10f 	.word	0x0800c10f
 800c07c:	0800c10f 	.word	0x0800c10f
 800c080:	0800c10f 	.word	0x0800c10f
 800c084:	0800c10f 	.word	0x0800c10f
 800c088:	0800c10f 	.word	0x0800c10f
 800c08c:	0800c10f 	.word	0x0800c10f
 800c090:	0800c10f 	.word	0x0800c10f
 800c094:	0800c10f 	.word	0x0800c10f
 800c098:	0800c10f 	.word	0x0800c10f
 800c09c:	0800c10f 	.word	0x0800c10f
 800c0a0:	0800c101 	.word	0x0800c101
 800c0a4:	2b40      	cmp	r3, #64	; 0x40
 800c0a6:	d02e      	beq.n	800c106 <UART_SetConfig+0xa36>
 800c0a8:	e031      	b.n	800c10e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0aa:	f7fa fe67 	bl	8006d7c <HAL_RCC_GetPCLK1Freq>
 800c0ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0b0:	e033      	b.n	800c11a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0b2:	f7fa fe79 	bl	8006da8 <HAL_RCC_GetPCLK2Freq>
 800c0b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0b8:	e02f      	b.n	800c11a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fc fe28 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c8:	e027      	b.n	800c11a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ca:	f107 0318 	add.w	r3, r7, #24
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fc ff74 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d8:	e01f      	b.n	800c11a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0da:	4b2d      	ldr	r3, [pc, #180]	; (800c190 <UART_SetConfig+0xac0>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0320 	and.w	r3, r3, #32
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d009      	beq.n	800c0fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0e6:	4b2a      	ldr	r3, [pc, #168]	; (800c190 <UART_SetConfig+0xac0>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	08db      	lsrs	r3, r3, #3
 800c0ec:	f003 0303 	and.w	r3, r3, #3
 800c0f0:	4a28      	ldr	r2, [pc, #160]	; (800c194 <UART_SetConfig+0xac4>)
 800c0f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0f8:	e00f      	b.n	800c11a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c0fa:	4b26      	ldr	r3, [pc, #152]	; (800c194 <UART_SetConfig+0xac4>)
 800c0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0fe:	e00c      	b.n	800c11a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c100:	4b25      	ldr	r3, [pc, #148]	; (800c198 <UART_SetConfig+0xac8>)
 800c102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c104:	e009      	b.n	800c11a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c10c:	e005      	b.n	800c11a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c118:	bf00      	nop
    }

    if (pclk != 0U)
 800c11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d021      	beq.n	800c164 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c124:	4a1d      	ldr	r2, [pc, #116]	; (800c19c <UART_SetConfig+0xacc>)
 800c126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c12a:	461a      	mov	r2, r3
 800c12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c12e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	085b      	lsrs	r3, r3, #1
 800c138:	441a      	add	r2, r3
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c142:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c146:	2b0f      	cmp	r3, #15
 800c148:	d909      	bls.n	800c15e <UART_SetConfig+0xa8e>
 800c14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c150:	d205      	bcs.n	800c15e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c154:	b29a      	uxth	r2, r3
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	60da      	str	r2, [r3, #12]
 800c15c:	e002      	b.n	800c164 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2201      	movs	r2, #1
 800c168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2201      	movs	r2, #1
 800c170:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	2200      	movs	r2, #0
 800c178:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2200      	movs	r2, #0
 800c17e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c180:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c184:	4618      	mov	r0, r3
 800c186:	3748      	adds	r7, #72	; 0x48
 800c188:	46bd      	mov	sp, r7
 800c18a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c18e:	bf00      	nop
 800c190:	58024400 	.word	0x58024400
 800c194:	03d09000 	.word	0x03d09000
 800c198:	003d0900 	.word	0x003d0900
 800c19c:	0800e590 	.word	0x0800e590

0800c1a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00a      	beq.n	800c1ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	430a      	orrs	r2, r1
 800c1c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ce:	f003 0302 	and.w	r3, r3, #2
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00a      	beq.n	800c1ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	430a      	orrs	r2, r1
 800c1ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f0:	f003 0304 	and.w	r3, r3, #4
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00a      	beq.n	800c20e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	430a      	orrs	r2, r1
 800c20c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c212:	f003 0308 	and.w	r3, r3, #8
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00a      	beq.n	800c230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	430a      	orrs	r2, r1
 800c22e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c234:	f003 0310 	and.w	r3, r3, #16
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00a      	beq.n	800c252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	430a      	orrs	r2, r1
 800c250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c256:	f003 0320 	and.w	r3, r3, #32
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00a      	beq.n	800c274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	430a      	orrs	r2, r1
 800c272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d01a      	beq.n	800c2b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	430a      	orrs	r2, r1
 800c294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c29a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c29e:	d10a      	bne.n	800c2b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00a      	beq.n	800c2d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	605a      	str	r2, [r3, #4]
  }
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b098      	sub	sp, #96	; 0x60
 800c2e8:	af02      	add	r7, sp, #8
 800c2ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2f4:	f7f6 fd50 	bl	8002d98 <HAL_GetTick>
 800c2f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 0308 	and.w	r3, r3, #8
 800c304:	2b08      	cmp	r3, #8
 800c306:	d12f      	bne.n	800c368 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c310:	2200      	movs	r2, #0
 800c312:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f88e 	bl	800c438 <UART_WaitOnFlagUntilTimeout>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d022      	beq.n	800c368 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32a:	e853 3f00 	ldrex	r3, [r3]
 800c32e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c336:	653b      	str	r3, [r7, #80]	; 0x50
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	461a      	mov	r2, r3
 800c33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c340:	647b      	str	r3, [r7, #68]	; 0x44
 800c342:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c344:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c348:	e841 2300 	strex	r3, r2, [r1]
 800c34c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1e6      	bne.n	800c322 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2220      	movs	r2, #32
 800c358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c364:	2303      	movs	r3, #3
 800c366:	e063      	b.n	800c430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 0304 	and.w	r3, r3, #4
 800c372:	2b04      	cmp	r3, #4
 800c374:	d149      	bne.n	800c40a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c376:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c37e:	2200      	movs	r2, #0
 800c380:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f857 	bl	800c438 <UART_WaitOnFlagUntilTimeout>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d03c      	beq.n	800c40a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c398:	e853 3f00 	ldrex	r3, [r3]
 800c39c:	623b      	str	r3, [r7, #32]
   return(result);
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ae:	633b      	str	r3, [r7, #48]	; 0x30
 800c3b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b6:	e841 2300 	strex	r3, r2, [r1]
 800c3ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1e6      	bne.n	800c390 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	e853 3f00 	ldrex	r3, [r3]
 800c3d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f023 0301 	bic.w	r3, r3, #1
 800c3d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3e2:	61fa      	str	r2, [r7, #28]
 800c3e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	69b9      	ldr	r1, [r7, #24]
 800c3e8:	69fa      	ldr	r2, [r7, #28]
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	617b      	str	r3, [r7, #20]
   return(result);
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e5      	bne.n	800c3c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c406:	2303      	movs	r3, #3
 800c408:	e012      	b.n	800c430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2220      	movs	r2, #32
 800c40e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2220      	movs	r2, #32
 800c416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3758      	adds	r7, #88	; 0x58
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	603b      	str	r3, [r7, #0]
 800c444:	4613      	mov	r3, r2
 800c446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c448:	e049      	b.n	800c4de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c450:	d045      	beq.n	800c4de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c452:	f7f6 fca1 	bl	8002d98 <HAL_GetTick>
 800c456:	4602      	mov	r2, r0
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d302      	bcc.n	800c468 <UART_WaitOnFlagUntilTimeout+0x30>
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d101      	bne.n	800c46c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	e048      	b.n	800c4fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0304 	and.w	r3, r3, #4
 800c476:	2b00      	cmp	r3, #0
 800c478:	d031      	beq.n	800c4de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	69db      	ldr	r3, [r3, #28]
 800c480:	f003 0308 	and.w	r3, r3, #8
 800c484:	2b08      	cmp	r3, #8
 800c486:	d110      	bne.n	800c4aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2208      	movs	r2, #8
 800c48e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f000 f839 	bl	800c508 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2208      	movs	r2, #8
 800c49a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e029      	b.n	800c4fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	69db      	ldr	r3, [r3, #28]
 800c4b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4b8:	d111      	bne.n	800c4de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f000 f81f 	bl	800c508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2220      	movs	r2, #32
 800c4ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e00f      	b.n	800c4fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	69da      	ldr	r2, [r3, #28]
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	bf0c      	ite	eq
 800c4ee:	2301      	moveq	r3, #1
 800c4f0:	2300      	movne	r3, #0
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	79fb      	ldrb	r3, [r7, #7]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d0a6      	beq.n	800c44a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
	...

0800c508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c508:	b480      	push	{r7}
 800c50a:	b095      	sub	sp, #84	; 0x54
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c518:	e853 3f00 	ldrex	r3, [r3]
 800c51c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c524:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c52e:	643b      	str	r3, [r7, #64]	; 0x40
 800c530:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c536:	e841 2300 	strex	r3, r2, [r1]
 800c53a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1e6      	bne.n	800c510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	3308      	adds	r3, #8
 800c548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	e853 3f00 	ldrex	r3, [r3]
 800c550:	61fb      	str	r3, [r7, #28]
   return(result);
 800c552:	69fa      	ldr	r2, [r7, #28]
 800c554:	4b1e      	ldr	r3, [pc, #120]	; (800c5d0 <UART_EndRxTransfer+0xc8>)
 800c556:	4013      	ands	r3, r2
 800c558:	64bb      	str	r3, [r7, #72]	; 0x48
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	3308      	adds	r3, #8
 800c560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c562:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c56a:	e841 2300 	strex	r3, r2, [r1]
 800c56e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1e5      	bne.n	800c542 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d118      	bne.n	800c5b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	e853 3f00 	ldrex	r3, [r3]
 800c58a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	f023 0310 	bic.w	r3, r3, #16
 800c592:	647b      	str	r3, [r7, #68]	; 0x44
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	461a      	mov	r2, r3
 800c59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c59c:	61bb      	str	r3, [r7, #24]
 800c59e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a0:	6979      	ldr	r1, [r7, #20]
 800c5a2:	69ba      	ldr	r2, [r7, #24]
 800c5a4:	e841 2300 	strex	r3, r2, [r1]
 800c5a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e6      	bne.n	800c57e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c5c4:	bf00      	nop
 800c5c6:	3754      	adds	r7, #84	; 0x54
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr
 800c5d0:	effffffe 	.word	0xeffffffe

0800c5d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d101      	bne.n	800c5ea <HAL_UARTEx_DisableFifoMode+0x16>
 800c5e6:	2302      	movs	r3, #2
 800c5e8:	e027      	b.n	800c63a <HAL_UARTEx_DisableFifoMode+0x66>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2224      	movs	r2, #36	; 0x24
 800c5f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f022 0201 	bic.w	r2, r2, #1
 800c610:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c618:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2220      	movs	r2, #32
 800c62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c656:	2b01      	cmp	r3, #1
 800c658:	d101      	bne.n	800c65e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c65a:	2302      	movs	r3, #2
 800c65c:	e02d      	b.n	800c6ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2224      	movs	r2, #36	; 0x24
 800c66a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f022 0201 	bic.w	r2, r2, #1
 800c684:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	683a      	ldr	r2, [r7, #0]
 800c696:	430a      	orrs	r2, r1
 800c698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f850 	bl	800c740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d101      	bne.n	800c6da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c6d6:	2302      	movs	r3, #2
 800c6d8:	e02d      	b.n	800c736 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2224      	movs	r2, #36	; 0x24
 800c6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f022 0201 	bic.w	r2, r2, #1
 800c700:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	683a      	ldr	r2, [r7, #0]
 800c712:	430a      	orrs	r2, r1
 800c714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f812 	bl	800c740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2220      	movs	r2, #32
 800c728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
	...

0800c740 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d108      	bne.n	800c762 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c760:	e031      	b.n	800c7c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c762:	2310      	movs	r3, #16
 800c764:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c766:	2310      	movs	r3, #16
 800c768:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	0e5b      	lsrs	r3, r3, #25
 800c772:	b2db      	uxtb	r3, r3
 800c774:	f003 0307 	and.w	r3, r3, #7
 800c778:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	0f5b      	lsrs	r3, r3, #29
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f003 0307 	and.w	r3, r3, #7
 800c788:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
 800c78c:	7b3a      	ldrb	r2, [r7, #12]
 800c78e:	4911      	ldr	r1, [pc, #68]	; (800c7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c790:	5c8a      	ldrb	r2, [r1, r2]
 800c792:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c796:	7b3a      	ldrb	r2, [r7, #12]
 800c798:	490f      	ldr	r1, [pc, #60]	; (800c7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c79a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c79c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	7b7a      	ldrb	r2, [r7, #13]
 800c7ac:	4909      	ldr	r1, [pc, #36]	; (800c7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c7ae:	5c8a      	ldrb	r2, [r1, r2]
 800c7b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c7b4:	7b7a      	ldrb	r2, [r7, #13]
 800c7b6:	4908      	ldr	r1, [pc, #32]	; (800c7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c7b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c7c6:	bf00      	nop
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	0800e5a8 	.word	0x0800e5a8
 800c7d8:	0800e5b0 	.word	0x0800e5b0

0800c7dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d121      	bne.n	800c832 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	4b27      	ldr	r3, [pc, #156]	; (800c890 <FMC_SDRAM_Init+0xb4>)
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	683a      	ldr	r2, [r7, #0]
 800c7f8:	6851      	ldr	r1, [r2, #4]
 800c7fa:	683a      	ldr	r2, [r7, #0]
 800c7fc:	6892      	ldr	r2, [r2, #8]
 800c7fe:	4311      	orrs	r1, r2
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	68d2      	ldr	r2, [r2, #12]
 800c804:	4311      	orrs	r1, r2
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	6912      	ldr	r2, [r2, #16]
 800c80a:	4311      	orrs	r1, r2
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	6952      	ldr	r2, [r2, #20]
 800c810:	4311      	orrs	r1, r2
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	6992      	ldr	r2, [r2, #24]
 800c816:	4311      	orrs	r1, r2
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	69d2      	ldr	r2, [r2, #28]
 800c81c:	4311      	orrs	r1, r2
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	6a12      	ldr	r2, [r2, #32]
 800c822:	4311      	orrs	r1, r2
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c828:	430a      	orrs	r2, r1
 800c82a:	431a      	orrs	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	601a      	str	r2, [r3, #0]
 800c830:	e026      	b.n	800c880 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	69d9      	ldr	r1, [r3, #28]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	6a1b      	ldr	r3, [r3, #32]
 800c842:	4319      	orrs	r1, r3
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c848:	430b      	orrs	r3, r1
 800c84a:	431a      	orrs	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	4b0e      	ldr	r3, [pc, #56]	; (800c890 <FMC_SDRAM_Init+0xb4>)
 800c856:	4013      	ands	r3, r2
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	6851      	ldr	r1, [r2, #4]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	6892      	ldr	r2, [r2, #8]
 800c860:	4311      	orrs	r1, r2
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	68d2      	ldr	r2, [r2, #12]
 800c866:	4311      	orrs	r1, r2
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	6912      	ldr	r2, [r2, #16]
 800c86c:	4311      	orrs	r1, r2
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	6952      	ldr	r2, [r2, #20]
 800c872:	4311      	orrs	r1, r2
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	6992      	ldr	r2, [r2, #24]
 800c878:	430a      	orrs	r2, r1
 800c87a:	431a      	orrs	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	370c      	adds	r7, #12
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	ffff8000 	.word	0xffff8000

0800c894 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d128      	bne.n	800c8f8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	1e59      	subs	r1, r3, #1
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	011b      	lsls	r3, r3, #4
 800c8bc:	4319      	orrs	r1, r3
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	021b      	lsls	r3, r3, #8
 800c8c6:	4319      	orrs	r1, r3
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	031b      	lsls	r3, r3, #12
 800c8d0:	4319      	orrs	r1, r3
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	041b      	lsls	r3, r3, #16
 800c8da:	4319      	orrs	r1, r3
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	051b      	lsls	r3, r3, #20
 800c8e4:	4319      	orrs	r1, r3
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	061b      	lsls	r3, r3, #24
 800c8ee:	430b      	orrs	r3, r1
 800c8f0:	431a      	orrs	r2, r3
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	609a      	str	r2, [r3, #8]
 800c8f6:	e02d      	b.n	800c954 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	689a      	ldr	r2, [r3, #8]
 800c8fc:	4b19      	ldr	r3, [pc, #100]	; (800c964 <FMC_SDRAM_Timing_Init+0xd0>)
 800c8fe:	4013      	ands	r3, r2
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	68d2      	ldr	r2, [r2, #12]
 800c904:	3a01      	subs	r2, #1
 800c906:	0311      	lsls	r1, r2, #12
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	6952      	ldr	r2, [r2, #20]
 800c90c:	3a01      	subs	r2, #1
 800c90e:	0512      	lsls	r2, r2, #20
 800c910:	430a      	orrs	r2, r1
 800c912:	431a      	orrs	r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	1e59      	subs	r1, r3, #1
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	3b01      	subs	r3, #1
 800c92c:	011b      	lsls	r3, r3, #4
 800c92e:	4319      	orrs	r1, r3
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	3b01      	subs	r3, #1
 800c936:	021b      	lsls	r3, r3, #8
 800c938:	4319      	orrs	r1, r3
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	3b01      	subs	r3, #1
 800c940:	041b      	lsls	r3, r3, #16
 800c942:	4319      	orrs	r1, r3
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	699b      	ldr	r3, [r3, #24]
 800c948:	3b01      	subs	r3, #1
 800c94a:	061b      	lsls	r3, r3, #24
 800c94c:	430b      	orrs	r3, r1
 800c94e:	431a      	orrs	r2, r3
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3714      	adds	r7, #20
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop
 800c964:	ff0f0fff 	.word	0xff0f0fff

0800c968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c968:	b084      	sub	sp, #16
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	f107 001c 	add.w	r0, r7, #28
 800c976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d120      	bne.n	800c9c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	68da      	ldr	r2, [r3, #12]
 800c990:	4b2a      	ldr	r3, [pc, #168]	; (800ca3c <USB_CoreInit+0xd4>)
 800c992:	4013      	ands	r3, r2
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d105      	bne.n	800c9b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 faac 	bl	800cf14 <USB_CoreReset>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73fb      	strb	r3, [r7, #15]
 800c9c0:	e01a      	b.n	800c9f8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 faa0 	bl	800cf14 <USB_CoreReset>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d106      	bne.n	800c9ec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	639a      	str	r2, [r3, #56]	; 0x38
 800c9ea:	e005      	b.n	800c9f8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d116      	bne.n	800ca2c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca0c:	4b0c      	ldr	r3, [pc, #48]	; (800ca40 <USB_CoreInit+0xd8>)
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	f043 0206 	orr.w	r2, r3, #6
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	f043 0220 	orr.w	r2, r3, #32
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3710      	adds	r7, #16
 800ca32:	46bd      	mov	sp, r7
 800ca34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca38:	b004      	add	sp, #16
 800ca3a:	4770      	bx	lr
 800ca3c:	ffbdffbf 	.word	0xffbdffbf
 800ca40:	03ee0000 	.word	0x03ee0000

0800ca44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	f023 0201 	bic.w	r2, r3, #1
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca82:	78fb      	ldrb	r3, [r7, #3]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d115      	bne.n	800cab4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ca94:	2001      	movs	r0, #1
 800ca96:	f7f6 f98b 	bl	8002db0 <HAL_Delay>
      ms++;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fa29 	bl	800cef8 <USB_GetMode>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d01e      	beq.n	800caea <USB_SetCurrentMode+0x84>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2b31      	cmp	r3, #49	; 0x31
 800cab0:	d9f0      	bls.n	800ca94 <USB_SetCurrentMode+0x2e>
 800cab2:	e01a      	b.n	800caea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d115      	bne.n	800cae6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cac6:	2001      	movs	r0, #1
 800cac8:	f7f6 f972 	bl	8002db0 <HAL_Delay>
      ms++;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3301      	adds	r3, #1
 800cad0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fa10 	bl	800cef8 <USB_GetMode>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d005      	beq.n	800caea <USB_SetCurrentMode+0x84>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b31      	cmp	r3, #49	; 0x31
 800cae2:	d9f0      	bls.n	800cac6 <USB_SetCurrentMode+0x60>
 800cae4:	e001      	b.n	800caea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e005      	b.n	800caf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b32      	cmp	r3, #50	; 0x32
 800caee:	d101      	bne.n	800caf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e000      	b.n	800caf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
	...

0800cb00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb00:	b084      	sub	sp, #16
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b086      	sub	sp, #24
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	e009      	b.n	800cb34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	3340      	adds	r3, #64	; 0x40
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4413      	add	r3, r2
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	3301      	adds	r3, #1
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	2b0e      	cmp	r3, #14
 800cb38:	d9f2      	bls.n	800cb20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cb3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d11c      	bne.n	800cb7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb4e:	f043 0302 	orr.w	r3, r3, #2
 800cb52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	601a      	str	r2, [r3, #0]
 800cb78:	e005      	b.n	800cb86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	2300      	movs	r3, #0
 800cb90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb98:	4619      	mov	r1, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cba0:	461a      	mov	r2, r3
 800cba2:	680b      	ldr	r3, [r1, #0]
 800cba4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d10c      	bne.n	800cbc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d104      	bne.n	800cbbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f965 	bl	800ce84 <USB_SetDevSpeed>
 800cbba:	e008      	b.n	800cbce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f960 	bl	800ce84 <USB_SetDevSpeed>
 800cbc4:	e003      	b.n	800cbce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cbc6:	2103      	movs	r1, #3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f95b 	bl	800ce84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cbce:	2110      	movs	r1, #16
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f8f3 	bl	800cdbc <USB_FlushTxFifo>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f91f 	bl	800ce24 <USB_FlushRxFifo>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cbec:	2301      	movs	r3, #1
 800cbee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc02:	461a      	mov	r2, r3
 800cc04:	2300      	movs	r3, #0
 800cc06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc0e:	461a      	mov	r2, r3
 800cc10:	2300      	movs	r3, #0
 800cc12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc14:	2300      	movs	r3, #0
 800cc16:	613b      	str	r3, [r7, #16]
 800cc18:	e043      	b.n	800cca2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	015a      	lsls	r2, r3, #5
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	4413      	add	r3, r2
 800cc22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc30:	d118      	bne.n	800cc64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10a      	bne.n	800cc4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	015a      	lsls	r2, r3, #5
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc44:	461a      	mov	r2, r3
 800cc46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc4a:	6013      	str	r3, [r2, #0]
 800cc4c:	e013      	b.n	800cc76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	015a      	lsls	r2, r3, #5
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	4413      	add	r3, r2
 800cc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc60:	6013      	str	r3, [r2, #0]
 800cc62:	e008      	b.n	800cc76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	015a      	lsls	r2, r3, #5
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc70:	461a      	mov	r2, r3
 800cc72:	2300      	movs	r3, #0
 800cc74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	015a      	lsls	r2, r3, #5
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc82:	461a      	mov	r2, r3
 800cc84:	2300      	movs	r3, #0
 800cc86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	015a      	lsls	r2, r3, #5
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc94:	461a      	mov	r2, r3
 800cc96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	613b      	str	r3, [r7, #16]
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d3b7      	bcc.n	800cc1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccaa:	2300      	movs	r3, #0
 800ccac:	613b      	str	r3, [r7, #16]
 800ccae:	e043      	b.n	800cd38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccc6:	d118      	bne.n	800ccfa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10a      	bne.n	800cce4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	015a      	lsls	r2, r3, #5
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	e013      	b.n	800cd0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	015a      	lsls	r2, r3, #5
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	e008      	b.n	800cd0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	015a      	lsls	r2, r3, #5
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	4413      	add	r3, r2
 800cd02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd06:	461a      	mov	r2, r3
 800cd08:	2300      	movs	r3, #0
 800cd0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd18:	461a      	mov	r2, r3
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	015a      	lsls	r2, r3, #5
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	4413      	add	r3, r2
 800cd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	3301      	adds	r3, #1
 800cd36:	613b      	str	r3, [r7, #16]
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	693a      	ldr	r2, [r7, #16]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d3b7      	bcc.n	800ccb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cd60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d105      	bne.n	800cd74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	f043 0210 	orr.w	r2, r3, #16
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	699a      	ldr	r2, [r3, #24]
 800cd78:	4b0e      	ldr	r3, [pc, #56]	; (800cdb4 <USB_DevInit+0x2b4>)
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	f043 0208 	orr.w	r2, r3, #8
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cd92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d105      	bne.n	800cda4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	699a      	ldr	r2, [r3, #24]
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <USB_DevInit+0x2b8>)
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cdb0:	b004      	add	sp, #16
 800cdb2:	4770      	bx	lr
 800cdb4:	803c3800 	.word	0x803c3800
 800cdb8:	40000004 	.word	0x40000004

0800cdbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	4a13      	ldr	r2, [pc, #76]	; (800ce20 <USB_FlushTxFifo+0x64>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d901      	bls.n	800cddc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	e01b      	b.n	800ce14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	daf2      	bge.n	800cdca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	019b      	lsls	r3, r3, #6
 800cdec:	f043 0220 	orr.w	r2, r3, #32
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	4a08      	ldr	r2, [pc, #32]	; (800ce20 <USB_FlushTxFifo+0x64>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d901      	bls.n	800ce06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ce02:	2303      	movs	r3, #3
 800ce04:	e006      	b.n	800ce14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	f003 0320 	and.w	r3, r3, #32
 800ce0e:	2b20      	cmp	r3, #32
 800ce10:	d0f0      	beq.n	800cdf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	00030d40 	.word	0x00030d40

0800ce24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	3301      	adds	r3, #1
 800ce34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	4a11      	ldr	r2, [pc, #68]	; (800ce80 <USB_FlushRxFifo+0x5c>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d901      	bls.n	800ce42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ce3e:	2303      	movs	r3, #3
 800ce40:	e018      	b.n	800ce74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	daf2      	bge.n	800ce30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2210      	movs	r2, #16
 800ce52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	3301      	adds	r3, #1
 800ce58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	4a08      	ldr	r2, [pc, #32]	; (800ce80 <USB_FlushRxFifo+0x5c>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d901      	bls.n	800ce66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ce62:	2303      	movs	r3, #3
 800ce64:	e006      	b.n	800ce74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	f003 0310 	and.w	r3, r3, #16
 800ce6e:	2b10      	cmp	r3, #16
 800ce70:	d0f0      	beq.n	800ce54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	00030d40 	.word	0x00030d40

0800ce84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	78fb      	ldrb	r3, [r7, #3]
 800ce9e:	68f9      	ldr	r1, [r7, #12]
 800cea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cea4:	4313      	orrs	r3, r2
 800cea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cea8:	2300      	movs	r3, #0
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	b085      	sub	sp, #20
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ced0:	f023 0303 	bic.w	r3, r3, #3
 800ced4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cee4:	f043 0302 	orr.w	r3, r3, #2
 800cee8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3714      	adds	r7, #20
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	f003 0301 	and.w	r3, r3, #1
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3301      	adds	r3, #1
 800cf24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	4a13      	ldr	r2, [pc, #76]	; (800cf78 <USB_CoreReset+0x64>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d901      	bls.n	800cf32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	e01b      	b.n	800cf6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	daf2      	bge.n	800cf20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	f043 0201 	orr.w	r2, r3, #1
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4a09      	ldr	r2, [pc, #36]	; (800cf78 <USB_CoreReset+0x64>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d901      	bls.n	800cf5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	e006      	b.n	800cf6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	f003 0301 	and.w	r3, r3, #1
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d0f0      	beq.n	800cf4a <USB_CoreReset+0x36>

  return HAL_OK;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	00030d40 	.word	0x00030d40

0800cf7c <__errno>:
 800cf7c:	4b01      	ldr	r3, [pc, #4]	; (800cf84 <__errno+0x8>)
 800cf7e:	6818      	ldr	r0, [r3, #0]
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	24000038 	.word	0x24000038

0800cf88 <__libc_init_array>:
 800cf88:	b570      	push	{r4, r5, r6, lr}
 800cf8a:	4d0d      	ldr	r5, [pc, #52]	; (800cfc0 <__libc_init_array+0x38>)
 800cf8c:	4c0d      	ldr	r4, [pc, #52]	; (800cfc4 <__libc_init_array+0x3c>)
 800cf8e:	1b64      	subs	r4, r4, r5
 800cf90:	10a4      	asrs	r4, r4, #2
 800cf92:	2600      	movs	r6, #0
 800cf94:	42a6      	cmp	r6, r4
 800cf96:	d109      	bne.n	800cfac <__libc_init_array+0x24>
 800cf98:	4d0b      	ldr	r5, [pc, #44]	; (800cfc8 <__libc_init_array+0x40>)
 800cf9a:	4c0c      	ldr	r4, [pc, #48]	; (800cfcc <__libc_init_array+0x44>)
 800cf9c:	f000 fca2 	bl	800d8e4 <_init>
 800cfa0:	1b64      	subs	r4, r4, r5
 800cfa2:	10a4      	asrs	r4, r4, #2
 800cfa4:	2600      	movs	r6, #0
 800cfa6:	42a6      	cmp	r6, r4
 800cfa8:	d105      	bne.n	800cfb6 <__libc_init_array+0x2e>
 800cfaa:	bd70      	pop	{r4, r5, r6, pc}
 800cfac:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfb0:	4798      	blx	r3
 800cfb2:	3601      	adds	r6, #1
 800cfb4:	e7ee      	b.n	800cf94 <__libc_init_array+0xc>
 800cfb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfba:	4798      	blx	r3
 800cfbc:	3601      	adds	r6, #1
 800cfbe:	e7f2      	b.n	800cfa6 <__libc_init_array+0x1e>
 800cfc0:	0800e5f4 	.word	0x0800e5f4
 800cfc4:	0800e5f4 	.word	0x0800e5f4
 800cfc8:	0800e5f4 	.word	0x0800e5f4
 800cfcc:	0800e5f8 	.word	0x0800e5f8

0800cfd0 <memcpy>:
 800cfd0:	440a      	add	r2, r1
 800cfd2:	4291      	cmp	r1, r2
 800cfd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfd8:	d100      	bne.n	800cfdc <memcpy+0xc>
 800cfda:	4770      	bx	lr
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfe6:	4291      	cmp	r1, r2
 800cfe8:	d1f9      	bne.n	800cfde <memcpy+0xe>
 800cfea:	bd10      	pop	{r4, pc}

0800cfec <memset>:
 800cfec:	4402      	add	r2, r0
 800cfee:	4603      	mov	r3, r0
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d100      	bne.n	800cff6 <memset+0xa>
 800cff4:	4770      	bx	lr
 800cff6:	f803 1b01 	strb.w	r1, [r3], #1
 800cffa:	e7f9      	b.n	800cff0 <memset+0x4>

0800cffc <sniprintf>:
 800cffc:	b40c      	push	{r2, r3}
 800cffe:	b530      	push	{r4, r5, lr}
 800d000:	4b17      	ldr	r3, [pc, #92]	; (800d060 <sniprintf+0x64>)
 800d002:	1e0c      	subs	r4, r1, #0
 800d004:	681d      	ldr	r5, [r3, #0]
 800d006:	b09d      	sub	sp, #116	; 0x74
 800d008:	da08      	bge.n	800d01c <sniprintf+0x20>
 800d00a:	238b      	movs	r3, #139	; 0x8b
 800d00c:	602b      	str	r3, [r5, #0]
 800d00e:	f04f 30ff 	mov.w	r0, #4294967295
 800d012:	b01d      	add	sp, #116	; 0x74
 800d014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d018:	b002      	add	sp, #8
 800d01a:	4770      	bx	lr
 800d01c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d020:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d024:	bf14      	ite	ne
 800d026:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d02a:	4623      	moveq	r3, r4
 800d02c:	9304      	str	r3, [sp, #16]
 800d02e:	9307      	str	r3, [sp, #28]
 800d030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d034:	9002      	str	r0, [sp, #8]
 800d036:	9006      	str	r0, [sp, #24]
 800d038:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d03c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d03e:	ab21      	add	r3, sp, #132	; 0x84
 800d040:	a902      	add	r1, sp, #8
 800d042:	4628      	mov	r0, r5
 800d044:	9301      	str	r3, [sp, #4]
 800d046:	f000 f869 	bl	800d11c <_svfiprintf_r>
 800d04a:	1c43      	adds	r3, r0, #1
 800d04c:	bfbc      	itt	lt
 800d04e:	238b      	movlt	r3, #139	; 0x8b
 800d050:	602b      	strlt	r3, [r5, #0]
 800d052:	2c00      	cmp	r4, #0
 800d054:	d0dd      	beq.n	800d012 <sniprintf+0x16>
 800d056:	9b02      	ldr	r3, [sp, #8]
 800d058:	2200      	movs	r2, #0
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	e7d9      	b.n	800d012 <sniprintf+0x16>
 800d05e:	bf00      	nop
 800d060:	24000038 	.word	0x24000038

0800d064 <__ssputs_r>:
 800d064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d068:	688e      	ldr	r6, [r1, #8]
 800d06a:	429e      	cmp	r6, r3
 800d06c:	4682      	mov	sl, r0
 800d06e:	460c      	mov	r4, r1
 800d070:	4690      	mov	r8, r2
 800d072:	461f      	mov	r7, r3
 800d074:	d838      	bhi.n	800d0e8 <__ssputs_r+0x84>
 800d076:	898a      	ldrh	r2, [r1, #12]
 800d078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d07c:	d032      	beq.n	800d0e4 <__ssputs_r+0x80>
 800d07e:	6825      	ldr	r5, [r4, #0]
 800d080:	6909      	ldr	r1, [r1, #16]
 800d082:	eba5 0901 	sub.w	r9, r5, r1
 800d086:	6965      	ldr	r5, [r4, #20]
 800d088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d08c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d090:	3301      	adds	r3, #1
 800d092:	444b      	add	r3, r9
 800d094:	106d      	asrs	r5, r5, #1
 800d096:	429d      	cmp	r5, r3
 800d098:	bf38      	it	cc
 800d09a:	461d      	movcc	r5, r3
 800d09c:	0553      	lsls	r3, r2, #21
 800d09e:	d531      	bpl.n	800d104 <__ssputs_r+0xa0>
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	f000 fb55 	bl	800d750 <_malloc_r>
 800d0a6:	4606      	mov	r6, r0
 800d0a8:	b950      	cbnz	r0, 800d0c0 <__ssputs_r+0x5c>
 800d0aa:	230c      	movs	r3, #12
 800d0ac:	f8ca 3000 	str.w	r3, [sl]
 800d0b0:	89a3      	ldrh	r3, [r4, #12]
 800d0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0b6:	81a3      	strh	r3, [r4, #12]
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c0:	6921      	ldr	r1, [r4, #16]
 800d0c2:	464a      	mov	r2, r9
 800d0c4:	f7ff ff84 	bl	800cfd0 <memcpy>
 800d0c8:	89a3      	ldrh	r3, [r4, #12]
 800d0ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0d2:	81a3      	strh	r3, [r4, #12]
 800d0d4:	6126      	str	r6, [r4, #16]
 800d0d6:	6165      	str	r5, [r4, #20]
 800d0d8:	444e      	add	r6, r9
 800d0da:	eba5 0509 	sub.w	r5, r5, r9
 800d0de:	6026      	str	r6, [r4, #0]
 800d0e0:	60a5      	str	r5, [r4, #8]
 800d0e2:	463e      	mov	r6, r7
 800d0e4:	42be      	cmp	r6, r7
 800d0e6:	d900      	bls.n	800d0ea <__ssputs_r+0x86>
 800d0e8:	463e      	mov	r6, r7
 800d0ea:	6820      	ldr	r0, [r4, #0]
 800d0ec:	4632      	mov	r2, r6
 800d0ee:	4641      	mov	r1, r8
 800d0f0:	f000 faa8 	bl	800d644 <memmove>
 800d0f4:	68a3      	ldr	r3, [r4, #8]
 800d0f6:	1b9b      	subs	r3, r3, r6
 800d0f8:	60a3      	str	r3, [r4, #8]
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	4433      	add	r3, r6
 800d0fe:	6023      	str	r3, [r4, #0]
 800d100:	2000      	movs	r0, #0
 800d102:	e7db      	b.n	800d0bc <__ssputs_r+0x58>
 800d104:	462a      	mov	r2, r5
 800d106:	f000 fb97 	bl	800d838 <_realloc_r>
 800d10a:	4606      	mov	r6, r0
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d1e1      	bne.n	800d0d4 <__ssputs_r+0x70>
 800d110:	6921      	ldr	r1, [r4, #16]
 800d112:	4650      	mov	r0, sl
 800d114:	f000 fab0 	bl	800d678 <_free_r>
 800d118:	e7c7      	b.n	800d0aa <__ssputs_r+0x46>
	...

0800d11c <_svfiprintf_r>:
 800d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d120:	4698      	mov	r8, r3
 800d122:	898b      	ldrh	r3, [r1, #12]
 800d124:	061b      	lsls	r3, r3, #24
 800d126:	b09d      	sub	sp, #116	; 0x74
 800d128:	4607      	mov	r7, r0
 800d12a:	460d      	mov	r5, r1
 800d12c:	4614      	mov	r4, r2
 800d12e:	d50e      	bpl.n	800d14e <_svfiprintf_r+0x32>
 800d130:	690b      	ldr	r3, [r1, #16]
 800d132:	b963      	cbnz	r3, 800d14e <_svfiprintf_r+0x32>
 800d134:	2140      	movs	r1, #64	; 0x40
 800d136:	f000 fb0b 	bl	800d750 <_malloc_r>
 800d13a:	6028      	str	r0, [r5, #0]
 800d13c:	6128      	str	r0, [r5, #16]
 800d13e:	b920      	cbnz	r0, 800d14a <_svfiprintf_r+0x2e>
 800d140:	230c      	movs	r3, #12
 800d142:	603b      	str	r3, [r7, #0]
 800d144:	f04f 30ff 	mov.w	r0, #4294967295
 800d148:	e0d1      	b.n	800d2ee <_svfiprintf_r+0x1d2>
 800d14a:	2340      	movs	r3, #64	; 0x40
 800d14c:	616b      	str	r3, [r5, #20]
 800d14e:	2300      	movs	r3, #0
 800d150:	9309      	str	r3, [sp, #36]	; 0x24
 800d152:	2320      	movs	r3, #32
 800d154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d158:	f8cd 800c 	str.w	r8, [sp, #12]
 800d15c:	2330      	movs	r3, #48	; 0x30
 800d15e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d308 <_svfiprintf_r+0x1ec>
 800d162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d166:	f04f 0901 	mov.w	r9, #1
 800d16a:	4623      	mov	r3, r4
 800d16c:	469a      	mov	sl, r3
 800d16e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d172:	b10a      	cbz	r2, 800d178 <_svfiprintf_r+0x5c>
 800d174:	2a25      	cmp	r2, #37	; 0x25
 800d176:	d1f9      	bne.n	800d16c <_svfiprintf_r+0x50>
 800d178:	ebba 0b04 	subs.w	fp, sl, r4
 800d17c:	d00b      	beq.n	800d196 <_svfiprintf_r+0x7a>
 800d17e:	465b      	mov	r3, fp
 800d180:	4622      	mov	r2, r4
 800d182:	4629      	mov	r1, r5
 800d184:	4638      	mov	r0, r7
 800d186:	f7ff ff6d 	bl	800d064 <__ssputs_r>
 800d18a:	3001      	adds	r0, #1
 800d18c:	f000 80aa 	beq.w	800d2e4 <_svfiprintf_r+0x1c8>
 800d190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d192:	445a      	add	r2, fp
 800d194:	9209      	str	r2, [sp, #36]	; 0x24
 800d196:	f89a 3000 	ldrb.w	r3, [sl]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f000 80a2 	beq.w	800d2e4 <_svfiprintf_r+0x1c8>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1aa:	f10a 0a01 	add.w	sl, sl, #1
 800d1ae:	9304      	str	r3, [sp, #16]
 800d1b0:	9307      	str	r3, [sp, #28]
 800d1b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1b6:	931a      	str	r3, [sp, #104]	; 0x68
 800d1b8:	4654      	mov	r4, sl
 800d1ba:	2205      	movs	r2, #5
 800d1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c0:	4851      	ldr	r0, [pc, #324]	; (800d308 <_svfiprintf_r+0x1ec>)
 800d1c2:	f7f3 f895 	bl	80002f0 <memchr>
 800d1c6:	9a04      	ldr	r2, [sp, #16]
 800d1c8:	b9d8      	cbnz	r0, 800d202 <_svfiprintf_r+0xe6>
 800d1ca:	06d0      	lsls	r0, r2, #27
 800d1cc:	bf44      	itt	mi
 800d1ce:	2320      	movmi	r3, #32
 800d1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1d4:	0711      	lsls	r1, r2, #28
 800d1d6:	bf44      	itt	mi
 800d1d8:	232b      	movmi	r3, #43	; 0x2b
 800d1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1de:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1e4:	d015      	beq.n	800d212 <_svfiprintf_r+0xf6>
 800d1e6:	9a07      	ldr	r2, [sp, #28]
 800d1e8:	4654      	mov	r4, sl
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	f04f 0c0a 	mov.w	ip, #10
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1f6:	3b30      	subs	r3, #48	; 0x30
 800d1f8:	2b09      	cmp	r3, #9
 800d1fa:	d94e      	bls.n	800d29a <_svfiprintf_r+0x17e>
 800d1fc:	b1b0      	cbz	r0, 800d22c <_svfiprintf_r+0x110>
 800d1fe:	9207      	str	r2, [sp, #28]
 800d200:	e014      	b.n	800d22c <_svfiprintf_r+0x110>
 800d202:	eba0 0308 	sub.w	r3, r0, r8
 800d206:	fa09 f303 	lsl.w	r3, r9, r3
 800d20a:	4313      	orrs	r3, r2
 800d20c:	9304      	str	r3, [sp, #16]
 800d20e:	46a2      	mov	sl, r4
 800d210:	e7d2      	b.n	800d1b8 <_svfiprintf_r+0x9c>
 800d212:	9b03      	ldr	r3, [sp, #12]
 800d214:	1d19      	adds	r1, r3, #4
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	9103      	str	r1, [sp, #12]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	bfbb      	ittet	lt
 800d21e:	425b      	neglt	r3, r3
 800d220:	f042 0202 	orrlt.w	r2, r2, #2
 800d224:	9307      	strge	r3, [sp, #28]
 800d226:	9307      	strlt	r3, [sp, #28]
 800d228:	bfb8      	it	lt
 800d22a:	9204      	strlt	r2, [sp, #16]
 800d22c:	7823      	ldrb	r3, [r4, #0]
 800d22e:	2b2e      	cmp	r3, #46	; 0x2e
 800d230:	d10c      	bne.n	800d24c <_svfiprintf_r+0x130>
 800d232:	7863      	ldrb	r3, [r4, #1]
 800d234:	2b2a      	cmp	r3, #42	; 0x2a
 800d236:	d135      	bne.n	800d2a4 <_svfiprintf_r+0x188>
 800d238:	9b03      	ldr	r3, [sp, #12]
 800d23a:	1d1a      	adds	r2, r3, #4
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	9203      	str	r2, [sp, #12]
 800d240:	2b00      	cmp	r3, #0
 800d242:	bfb8      	it	lt
 800d244:	f04f 33ff 	movlt.w	r3, #4294967295
 800d248:	3402      	adds	r4, #2
 800d24a:	9305      	str	r3, [sp, #20]
 800d24c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d318 <_svfiprintf_r+0x1fc>
 800d250:	7821      	ldrb	r1, [r4, #0]
 800d252:	2203      	movs	r2, #3
 800d254:	4650      	mov	r0, sl
 800d256:	f7f3 f84b 	bl	80002f0 <memchr>
 800d25a:	b140      	cbz	r0, 800d26e <_svfiprintf_r+0x152>
 800d25c:	2340      	movs	r3, #64	; 0x40
 800d25e:	eba0 000a 	sub.w	r0, r0, sl
 800d262:	fa03 f000 	lsl.w	r0, r3, r0
 800d266:	9b04      	ldr	r3, [sp, #16]
 800d268:	4303      	orrs	r3, r0
 800d26a:	3401      	adds	r4, #1
 800d26c:	9304      	str	r3, [sp, #16]
 800d26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d272:	4826      	ldr	r0, [pc, #152]	; (800d30c <_svfiprintf_r+0x1f0>)
 800d274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d278:	2206      	movs	r2, #6
 800d27a:	f7f3 f839 	bl	80002f0 <memchr>
 800d27e:	2800      	cmp	r0, #0
 800d280:	d038      	beq.n	800d2f4 <_svfiprintf_r+0x1d8>
 800d282:	4b23      	ldr	r3, [pc, #140]	; (800d310 <_svfiprintf_r+0x1f4>)
 800d284:	bb1b      	cbnz	r3, 800d2ce <_svfiprintf_r+0x1b2>
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	3307      	adds	r3, #7
 800d28a:	f023 0307 	bic.w	r3, r3, #7
 800d28e:	3308      	adds	r3, #8
 800d290:	9303      	str	r3, [sp, #12]
 800d292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d294:	4433      	add	r3, r6
 800d296:	9309      	str	r3, [sp, #36]	; 0x24
 800d298:	e767      	b.n	800d16a <_svfiprintf_r+0x4e>
 800d29a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d29e:	460c      	mov	r4, r1
 800d2a0:	2001      	movs	r0, #1
 800d2a2:	e7a5      	b.n	800d1f0 <_svfiprintf_r+0xd4>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	3401      	adds	r4, #1
 800d2a8:	9305      	str	r3, [sp, #20]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	f04f 0c0a 	mov.w	ip, #10
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2b6:	3a30      	subs	r2, #48	; 0x30
 800d2b8:	2a09      	cmp	r2, #9
 800d2ba:	d903      	bls.n	800d2c4 <_svfiprintf_r+0x1a8>
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d0c5      	beq.n	800d24c <_svfiprintf_r+0x130>
 800d2c0:	9105      	str	r1, [sp, #20]
 800d2c2:	e7c3      	b.n	800d24c <_svfiprintf_r+0x130>
 800d2c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e7f0      	b.n	800d2b0 <_svfiprintf_r+0x194>
 800d2ce:	ab03      	add	r3, sp, #12
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	462a      	mov	r2, r5
 800d2d4:	4b0f      	ldr	r3, [pc, #60]	; (800d314 <_svfiprintf_r+0x1f8>)
 800d2d6:	a904      	add	r1, sp, #16
 800d2d8:	4638      	mov	r0, r7
 800d2da:	f3af 8000 	nop.w
 800d2de:	1c42      	adds	r2, r0, #1
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	d1d6      	bne.n	800d292 <_svfiprintf_r+0x176>
 800d2e4:	89ab      	ldrh	r3, [r5, #12]
 800d2e6:	065b      	lsls	r3, r3, #25
 800d2e8:	f53f af2c 	bmi.w	800d144 <_svfiprintf_r+0x28>
 800d2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2ee:	b01d      	add	sp, #116	; 0x74
 800d2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f4:	ab03      	add	r3, sp, #12
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	462a      	mov	r2, r5
 800d2fa:	4b06      	ldr	r3, [pc, #24]	; (800d314 <_svfiprintf_r+0x1f8>)
 800d2fc:	a904      	add	r1, sp, #16
 800d2fe:	4638      	mov	r0, r7
 800d300:	f000 f87a 	bl	800d3f8 <_printf_i>
 800d304:	e7eb      	b.n	800d2de <_svfiprintf_r+0x1c2>
 800d306:	bf00      	nop
 800d308:	0800e5b8 	.word	0x0800e5b8
 800d30c:	0800e5c2 	.word	0x0800e5c2
 800d310:	00000000 	.word	0x00000000
 800d314:	0800d065 	.word	0x0800d065
 800d318:	0800e5be 	.word	0x0800e5be

0800d31c <_printf_common>:
 800d31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d320:	4616      	mov	r6, r2
 800d322:	4699      	mov	r9, r3
 800d324:	688a      	ldr	r2, [r1, #8]
 800d326:	690b      	ldr	r3, [r1, #16]
 800d328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d32c:	4293      	cmp	r3, r2
 800d32e:	bfb8      	it	lt
 800d330:	4613      	movlt	r3, r2
 800d332:	6033      	str	r3, [r6, #0]
 800d334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d338:	4607      	mov	r7, r0
 800d33a:	460c      	mov	r4, r1
 800d33c:	b10a      	cbz	r2, 800d342 <_printf_common+0x26>
 800d33e:	3301      	adds	r3, #1
 800d340:	6033      	str	r3, [r6, #0]
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	0699      	lsls	r1, r3, #26
 800d346:	bf42      	ittt	mi
 800d348:	6833      	ldrmi	r3, [r6, #0]
 800d34a:	3302      	addmi	r3, #2
 800d34c:	6033      	strmi	r3, [r6, #0]
 800d34e:	6825      	ldr	r5, [r4, #0]
 800d350:	f015 0506 	ands.w	r5, r5, #6
 800d354:	d106      	bne.n	800d364 <_printf_common+0x48>
 800d356:	f104 0a19 	add.w	sl, r4, #25
 800d35a:	68e3      	ldr	r3, [r4, #12]
 800d35c:	6832      	ldr	r2, [r6, #0]
 800d35e:	1a9b      	subs	r3, r3, r2
 800d360:	42ab      	cmp	r3, r5
 800d362:	dc26      	bgt.n	800d3b2 <_printf_common+0x96>
 800d364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d368:	1e13      	subs	r3, r2, #0
 800d36a:	6822      	ldr	r2, [r4, #0]
 800d36c:	bf18      	it	ne
 800d36e:	2301      	movne	r3, #1
 800d370:	0692      	lsls	r2, r2, #26
 800d372:	d42b      	bmi.n	800d3cc <_printf_common+0xb0>
 800d374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d378:	4649      	mov	r1, r9
 800d37a:	4638      	mov	r0, r7
 800d37c:	47c0      	blx	r8
 800d37e:	3001      	adds	r0, #1
 800d380:	d01e      	beq.n	800d3c0 <_printf_common+0xa4>
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	68e5      	ldr	r5, [r4, #12]
 800d386:	6832      	ldr	r2, [r6, #0]
 800d388:	f003 0306 	and.w	r3, r3, #6
 800d38c:	2b04      	cmp	r3, #4
 800d38e:	bf08      	it	eq
 800d390:	1aad      	subeq	r5, r5, r2
 800d392:	68a3      	ldr	r3, [r4, #8]
 800d394:	6922      	ldr	r2, [r4, #16]
 800d396:	bf0c      	ite	eq
 800d398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d39c:	2500      	movne	r5, #0
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	bfc4      	itt	gt
 800d3a2:	1a9b      	subgt	r3, r3, r2
 800d3a4:	18ed      	addgt	r5, r5, r3
 800d3a6:	2600      	movs	r6, #0
 800d3a8:	341a      	adds	r4, #26
 800d3aa:	42b5      	cmp	r5, r6
 800d3ac:	d11a      	bne.n	800d3e4 <_printf_common+0xc8>
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	e008      	b.n	800d3c4 <_printf_common+0xa8>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	4652      	mov	r2, sl
 800d3b6:	4649      	mov	r1, r9
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	47c0      	blx	r8
 800d3bc:	3001      	adds	r0, #1
 800d3be:	d103      	bne.n	800d3c8 <_printf_common+0xac>
 800d3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c8:	3501      	adds	r5, #1
 800d3ca:	e7c6      	b.n	800d35a <_printf_common+0x3e>
 800d3cc:	18e1      	adds	r1, r4, r3
 800d3ce:	1c5a      	adds	r2, r3, #1
 800d3d0:	2030      	movs	r0, #48	; 0x30
 800d3d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3d6:	4422      	add	r2, r4
 800d3d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3e0:	3302      	adds	r3, #2
 800d3e2:	e7c7      	b.n	800d374 <_printf_common+0x58>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	4622      	mov	r2, r4
 800d3e8:	4649      	mov	r1, r9
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	47c0      	blx	r8
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	d0e6      	beq.n	800d3c0 <_printf_common+0xa4>
 800d3f2:	3601      	adds	r6, #1
 800d3f4:	e7d9      	b.n	800d3aa <_printf_common+0x8e>
	...

0800d3f8 <_printf_i>:
 800d3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3fc:	7e0f      	ldrb	r7, [r1, #24]
 800d3fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d400:	2f78      	cmp	r7, #120	; 0x78
 800d402:	4691      	mov	r9, r2
 800d404:	4680      	mov	r8, r0
 800d406:	460c      	mov	r4, r1
 800d408:	469a      	mov	sl, r3
 800d40a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d40e:	d807      	bhi.n	800d420 <_printf_i+0x28>
 800d410:	2f62      	cmp	r7, #98	; 0x62
 800d412:	d80a      	bhi.n	800d42a <_printf_i+0x32>
 800d414:	2f00      	cmp	r7, #0
 800d416:	f000 80d8 	beq.w	800d5ca <_printf_i+0x1d2>
 800d41a:	2f58      	cmp	r7, #88	; 0x58
 800d41c:	f000 80a3 	beq.w	800d566 <_printf_i+0x16e>
 800d420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d428:	e03a      	b.n	800d4a0 <_printf_i+0xa8>
 800d42a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d42e:	2b15      	cmp	r3, #21
 800d430:	d8f6      	bhi.n	800d420 <_printf_i+0x28>
 800d432:	a101      	add	r1, pc, #4	; (adr r1, 800d438 <_printf_i+0x40>)
 800d434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d438:	0800d491 	.word	0x0800d491
 800d43c:	0800d4a5 	.word	0x0800d4a5
 800d440:	0800d421 	.word	0x0800d421
 800d444:	0800d421 	.word	0x0800d421
 800d448:	0800d421 	.word	0x0800d421
 800d44c:	0800d421 	.word	0x0800d421
 800d450:	0800d4a5 	.word	0x0800d4a5
 800d454:	0800d421 	.word	0x0800d421
 800d458:	0800d421 	.word	0x0800d421
 800d45c:	0800d421 	.word	0x0800d421
 800d460:	0800d421 	.word	0x0800d421
 800d464:	0800d5b1 	.word	0x0800d5b1
 800d468:	0800d4d5 	.word	0x0800d4d5
 800d46c:	0800d593 	.word	0x0800d593
 800d470:	0800d421 	.word	0x0800d421
 800d474:	0800d421 	.word	0x0800d421
 800d478:	0800d5d3 	.word	0x0800d5d3
 800d47c:	0800d421 	.word	0x0800d421
 800d480:	0800d4d5 	.word	0x0800d4d5
 800d484:	0800d421 	.word	0x0800d421
 800d488:	0800d421 	.word	0x0800d421
 800d48c:	0800d59b 	.word	0x0800d59b
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	1d1a      	adds	r2, r3, #4
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	602a      	str	r2, [r5, #0]
 800d498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d49c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e0a3      	b.n	800d5ec <_printf_i+0x1f4>
 800d4a4:	6820      	ldr	r0, [r4, #0]
 800d4a6:	6829      	ldr	r1, [r5, #0]
 800d4a8:	0606      	lsls	r6, r0, #24
 800d4aa:	f101 0304 	add.w	r3, r1, #4
 800d4ae:	d50a      	bpl.n	800d4c6 <_printf_i+0xce>
 800d4b0:	680e      	ldr	r6, [r1, #0]
 800d4b2:	602b      	str	r3, [r5, #0]
 800d4b4:	2e00      	cmp	r6, #0
 800d4b6:	da03      	bge.n	800d4c0 <_printf_i+0xc8>
 800d4b8:	232d      	movs	r3, #45	; 0x2d
 800d4ba:	4276      	negs	r6, r6
 800d4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4c0:	485e      	ldr	r0, [pc, #376]	; (800d63c <_printf_i+0x244>)
 800d4c2:	230a      	movs	r3, #10
 800d4c4:	e019      	b.n	800d4fa <_printf_i+0x102>
 800d4c6:	680e      	ldr	r6, [r1, #0]
 800d4c8:	602b      	str	r3, [r5, #0]
 800d4ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d4ce:	bf18      	it	ne
 800d4d0:	b236      	sxthne	r6, r6
 800d4d2:	e7ef      	b.n	800d4b4 <_printf_i+0xbc>
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	6820      	ldr	r0, [r4, #0]
 800d4d8:	1d19      	adds	r1, r3, #4
 800d4da:	6029      	str	r1, [r5, #0]
 800d4dc:	0601      	lsls	r1, r0, #24
 800d4de:	d501      	bpl.n	800d4e4 <_printf_i+0xec>
 800d4e0:	681e      	ldr	r6, [r3, #0]
 800d4e2:	e002      	b.n	800d4ea <_printf_i+0xf2>
 800d4e4:	0646      	lsls	r6, r0, #25
 800d4e6:	d5fb      	bpl.n	800d4e0 <_printf_i+0xe8>
 800d4e8:	881e      	ldrh	r6, [r3, #0]
 800d4ea:	4854      	ldr	r0, [pc, #336]	; (800d63c <_printf_i+0x244>)
 800d4ec:	2f6f      	cmp	r7, #111	; 0x6f
 800d4ee:	bf0c      	ite	eq
 800d4f0:	2308      	moveq	r3, #8
 800d4f2:	230a      	movne	r3, #10
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4fa:	6865      	ldr	r5, [r4, #4]
 800d4fc:	60a5      	str	r5, [r4, #8]
 800d4fe:	2d00      	cmp	r5, #0
 800d500:	bfa2      	ittt	ge
 800d502:	6821      	ldrge	r1, [r4, #0]
 800d504:	f021 0104 	bicge.w	r1, r1, #4
 800d508:	6021      	strge	r1, [r4, #0]
 800d50a:	b90e      	cbnz	r6, 800d510 <_printf_i+0x118>
 800d50c:	2d00      	cmp	r5, #0
 800d50e:	d04d      	beq.n	800d5ac <_printf_i+0x1b4>
 800d510:	4615      	mov	r5, r2
 800d512:	fbb6 f1f3 	udiv	r1, r6, r3
 800d516:	fb03 6711 	mls	r7, r3, r1, r6
 800d51a:	5dc7      	ldrb	r7, [r0, r7]
 800d51c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d520:	4637      	mov	r7, r6
 800d522:	42bb      	cmp	r3, r7
 800d524:	460e      	mov	r6, r1
 800d526:	d9f4      	bls.n	800d512 <_printf_i+0x11a>
 800d528:	2b08      	cmp	r3, #8
 800d52a:	d10b      	bne.n	800d544 <_printf_i+0x14c>
 800d52c:	6823      	ldr	r3, [r4, #0]
 800d52e:	07de      	lsls	r6, r3, #31
 800d530:	d508      	bpl.n	800d544 <_printf_i+0x14c>
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	6861      	ldr	r1, [r4, #4]
 800d536:	4299      	cmp	r1, r3
 800d538:	bfde      	ittt	le
 800d53a:	2330      	movle	r3, #48	; 0x30
 800d53c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d540:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d544:	1b52      	subs	r2, r2, r5
 800d546:	6122      	str	r2, [r4, #16]
 800d548:	f8cd a000 	str.w	sl, [sp]
 800d54c:	464b      	mov	r3, r9
 800d54e:	aa03      	add	r2, sp, #12
 800d550:	4621      	mov	r1, r4
 800d552:	4640      	mov	r0, r8
 800d554:	f7ff fee2 	bl	800d31c <_printf_common>
 800d558:	3001      	adds	r0, #1
 800d55a:	d14c      	bne.n	800d5f6 <_printf_i+0x1fe>
 800d55c:	f04f 30ff 	mov.w	r0, #4294967295
 800d560:	b004      	add	sp, #16
 800d562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d566:	4835      	ldr	r0, [pc, #212]	; (800d63c <_printf_i+0x244>)
 800d568:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d56c:	6829      	ldr	r1, [r5, #0]
 800d56e:	6823      	ldr	r3, [r4, #0]
 800d570:	f851 6b04 	ldr.w	r6, [r1], #4
 800d574:	6029      	str	r1, [r5, #0]
 800d576:	061d      	lsls	r5, r3, #24
 800d578:	d514      	bpl.n	800d5a4 <_printf_i+0x1ac>
 800d57a:	07df      	lsls	r7, r3, #31
 800d57c:	bf44      	itt	mi
 800d57e:	f043 0320 	orrmi.w	r3, r3, #32
 800d582:	6023      	strmi	r3, [r4, #0]
 800d584:	b91e      	cbnz	r6, 800d58e <_printf_i+0x196>
 800d586:	6823      	ldr	r3, [r4, #0]
 800d588:	f023 0320 	bic.w	r3, r3, #32
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	2310      	movs	r3, #16
 800d590:	e7b0      	b.n	800d4f4 <_printf_i+0xfc>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	f043 0320 	orr.w	r3, r3, #32
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	2378      	movs	r3, #120	; 0x78
 800d59c:	4828      	ldr	r0, [pc, #160]	; (800d640 <_printf_i+0x248>)
 800d59e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5a2:	e7e3      	b.n	800d56c <_printf_i+0x174>
 800d5a4:	0659      	lsls	r1, r3, #25
 800d5a6:	bf48      	it	mi
 800d5a8:	b2b6      	uxthmi	r6, r6
 800d5aa:	e7e6      	b.n	800d57a <_printf_i+0x182>
 800d5ac:	4615      	mov	r5, r2
 800d5ae:	e7bb      	b.n	800d528 <_printf_i+0x130>
 800d5b0:	682b      	ldr	r3, [r5, #0]
 800d5b2:	6826      	ldr	r6, [r4, #0]
 800d5b4:	6961      	ldr	r1, [r4, #20]
 800d5b6:	1d18      	adds	r0, r3, #4
 800d5b8:	6028      	str	r0, [r5, #0]
 800d5ba:	0635      	lsls	r5, r6, #24
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	d501      	bpl.n	800d5c4 <_printf_i+0x1cc>
 800d5c0:	6019      	str	r1, [r3, #0]
 800d5c2:	e002      	b.n	800d5ca <_printf_i+0x1d2>
 800d5c4:	0670      	lsls	r0, r6, #25
 800d5c6:	d5fb      	bpl.n	800d5c0 <_printf_i+0x1c8>
 800d5c8:	8019      	strh	r1, [r3, #0]
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	6123      	str	r3, [r4, #16]
 800d5ce:	4615      	mov	r5, r2
 800d5d0:	e7ba      	b.n	800d548 <_printf_i+0x150>
 800d5d2:	682b      	ldr	r3, [r5, #0]
 800d5d4:	1d1a      	adds	r2, r3, #4
 800d5d6:	602a      	str	r2, [r5, #0]
 800d5d8:	681d      	ldr	r5, [r3, #0]
 800d5da:	6862      	ldr	r2, [r4, #4]
 800d5dc:	2100      	movs	r1, #0
 800d5de:	4628      	mov	r0, r5
 800d5e0:	f7f2 fe86 	bl	80002f0 <memchr>
 800d5e4:	b108      	cbz	r0, 800d5ea <_printf_i+0x1f2>
 800d5e6:	1b40      	subs	r0, r0, r5
 800d5e8:	6060      	str	r0, [r4, #4]
 800d5ea:	6863      	ldr	r3, [r4, #4]
 800d5ec:	6123      	str	r3, [r4, #16]
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5f4:	e7a8      	b.n	800d548 <_printf_i+0x150>
 800d5f6:	6923      	ldr	r3, [r4, #16]
 800d5f8:	462a      	mov	r2, r5
 800d5fa:	4649      	mov	r1, r9
 800d5fc:	4640      	mov	r0, r8
 800d5fe:	47d0      	blx	sl
 800d600:	3001      	adds	r0, #1
 800d602:	d0ab      	beq.n	800d55c <_printf_i+0x164>
 800d604:	6823      	ldr	r3, [r4, #0]
 800d606:	079b      	lsls	r3, r3, #30
 800d608:	d413      	bmi.n	800d632 <_printf_i+0x23a>
 800d60a:	68e0      	ldr	r0, [r4, #12]
 800d60c:	9b03      	ldr	r3, [sp, #12]
 800d60e:	4298      	cmp	r0, r3
 800d610:	bfb8      	it	lt
 800d612:	4618      	movlt	r0, r3
 800d614:	e7a4      	b.n	800d560 <_printf_i+0x168>
 800d616:	2301      	movs	r3, #1
 800d618:	4632      	mov	r2, r6
 800d61a:	4649      	mov	r1, r9
 800d61c:	4640      	mov	r0, r8
 800d61e:	47d0      	blx	sl
 800d620:	3001      	adds	r0, #1
 800d622:	d09b      	beq.n	800d55c <_printf_i+0x164>
 800d624:	3501      	adds	r5, #1
 800d626:	68e3      	ldr	r3, [r4, #12]
 800d628:	9903      	ldr	r1, [sp, #12]
 800d62a:	1a5b      	subs	r3, r3, r1
 800d62c:	42ab      	cmp	r3, r5
 800d62e:	dcf2      	bgt.n	800d616 <_printf_i+0x21e>
 800d630:	e7eb      	b.n	800d60a <_printf_i+0x212>
 800d632:	2500      	movs	r5, #0
 800d634:	f104 0619 	add.w	r6, r4, #25
 800d638:	e7f5      	b.n	800d626 <_printf_i+0x22e>
 800d63a:	bf00      	nop
 800d63c:	0800e5c9 	.word	0x0800e5c9
 800d640:	0800e5da 	.word	0x0800e5da

0800d644 <memmove>:
 800d644:	4288      	cmp	r0, r1
 800d646:	b510      	push	{r4, lr}
 800d648:	eb01 0402 	add.w	r4, r1, r2
 800d64c:	d902      	bls.n	800d654 <memmove+0x10>
 800d64e:	4284      	cmp	r4, r0
 800d650:	4623      	mov	r3, r4
 800d652:	d807      	bhi.n	800d664 <memmove+0x20>
 800d654:	1e43      	subs	r3, r0, #1
 800d656:	42a1      	cmp	r1, r4
 800d658:	d008      	beq.n	800d66c <memmove+0x28>
 800d65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d65e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d662:	e7f8      	b.n	800d656 <memmove+0x12>
 800d664:	4402      	add	r2, r0
 800d666:	4601      	mov	r1, r0
 800d668:	428a      	cmp	r2, r1
 800d66a:	d100      	bne.n	800d66e <memmove+0x2a>
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d676:	e7f7      	b.n	800d668 <memmove+0x24>

0800d678 <_free_r>:
 800d678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d67a:	2900      	cmp	r1, #0
 800d67c:	d044      	beq.n	800d708 <_free_r+0x90>
 800d67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d682:	9001      	str	r0, [sp, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	f1a1 0404 	sub.w	r4, r1, #4
 800d68a:	bfb8      	it	lt
 800d68c:	18e4      	addlt	r4, r4, r3
 800d68e:	f000 f913 	bl	800d8b8 <__malloc_lock>
 800d692:	4a1e      	ldr	r2, [pc, #120]	; (800d70c <_free_r+0x94>)
 800d694:	9801      	ldr	r0, [sp, #4]
 800d696:	6813      	ldr	r3, [r2, #0]
 800d698:	b933      	cbnz	r3, 800d6a8 <_free_r+0x30>
 800d69a:	6063      	str	r3, [r4, #4]
 800d69c:	6014      	str	r4, [r2, #0]
 800d69e:	b003      	add	sp, #12
 800d6a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6a4:	f000 b90e 	b.w	800d8c4 <__malloc_unlock>
 800d6a8:	42a3      	cmp	r3, r4
 800d6aa:	d908      	bls.n	800d6be <_free_r+0x46>
 800d6ac:	6825      	ldr	r5, [r4, #0]
 800d6ae:	1961      	adds	r1, r4, r5
 800d6b0:	428b      	cmp	r3, r1
 800d6b2:	bf01      	itttt	eq
 800d6b4:	6819      	ldreq	r1, [r3, #0]
 800d6b6:	685b      	ldreq	r3, [r3, #4]
 800d6b8:	1949      	addeq	r1, r1, r5
 800d6ba:	6021      	streq	r1, [r4, #0]
 800d6bc:	e7ed      	b.n	800d69a <_free_r+0x22>
 800d6be:	461a      	mov	r2, r3
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	b10b      	cbz	r3, 800d6c8 <_free_r+0x50>
 800d6c4:	42a3      	cmp	r3, r4
 800d6c6:	d9fa      	bls.n	800d6be <_free_r+0x46>
 800d6c8:	6811      	ldr	r1, [r2, #0]
 800d6ca:	1855      	adds	r5, r2, r1
 800d6cc:	42a5      	cmp	r5, r4
 800d6ce:	d10b      	bne.n	800d6e8 <_free_r+0x70>
 800d6d0:	6824      	ldr	r4, [r4, #0]
 800d6d2:	4421      	add	r1, r4
 800d6d4:	1854      	adds	r4, r2, r1
 800d6d6:	42a3      	cmp	r3, r4
 800d6d8:	6011      	str	r1, [r2, #0]
 800d6da:	d1e0      	bne.n	800d69e <_free_r+0x26>
 800d6dc:	681c      	ldr	r4, [r3, #0]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	6053      	str	r3, [r2, #4]
 800d6e2:	4421      	add	r1, r4
 800d6e4:	6011      	str	r1, [r2, #0]
 800d6e6:	e7da      	b.n	800d69e <_free_r+0x26>
 800d6e8:	d902      	bls.n	800d6f0 <_free_r+0x78>
 800d6ea:	230c      	movs	r3, #12
 800d6ec:	6003      	str	r3, [r0, #0]
 800d6ee:	e7d6      	b.n	800d69e <_free_r+0x26>
 800d6f0:	6825      	ldr	r5, [r4, #0]
 800d6f2:	1961      	adds	r1, r4, r5
 800d6f4:	428b      	cmp	r3, r1
 800d6f6:	bf04      	itt	eq
 800d6f8:	6819      	ldreq	r1, [r3, #0]
 800d6fa:	685b      	ldreq	r3, [r3, #4]
 800d6fc:	6063      	str	r3, [r4, #4]
 800d6fe:	bf04      	itt	eq
 800d700:	1949      	addeq	r1, r1, r5
 800d702:	6021      	streq	r1, [r4, #0]
 800d704:	6054      	str	r4, [r2, #4]
 800d706:	e7ca      	b.n	800d69e <_free_r+0x26>
 800d708:	b003      	add	sp, #12
 800d70a:	bd30      	pop	{r4, r5, pc}
 800d70c:	24000edc 	.word	0x24000edc

0800d710 <sbrk_aligned>:
 800d710:	b570      	push	{r4, r5, r6, lr}
 800d712:	4e0e      	ldr	r6, [pc, #56]	; (800d74c <sbrk_aligned+0x3c>)
 800d714:	460c      	mov	r4, r1
 800d716:	6831      	ldr	r1, [r6, #0]
 800d718:	4605      	mov	r5, r0
 800d71a:	b911      	cbnz	r1, 800d722 <sbrk_aligned+0x12>
 800d71c:	f000 f8bc 	bl	800d898 <_sbrk_r>
 800d720:	6030      	str	r0, [r6, #0]
 800d722:	4621      	mov	r1, r4
 800d724:	4628      	mov	r0, r5
 800d726:	f000 f8b7 	bl	800d898 <_sbrk_r>
 800d72a:	1c43      	adds	r3, r0, #1
 800d72c:	d00a      	beq.n	800d744 <sbrk_aligned+0x34>
 800d72e:	1cc4      	adds	r4, r0, #3
 800d730:	f024 0403 	bic.w	r4, r4, #3
 800d734:	42a0      	cmp	r0, r4
 800d736:	d007      	beq.n	800d748 <sbrk_aligned+0x38>
 800d738:	1a21      	subs	r1, r4, r0
 800d73a:	4628      	mov	r0, r5
 800d73c:	f000 f8ac 	bl	800d898 <_sbrk_r>
 800d740:	3001      	adds	r0, #1
 800d742:	d101      	bne.n	800d748 <sbrk_aligned+0x38>
 800d744:	f04f 34ff 	mov.w	r4, #4294967295
 800d748:	4620      	mov	r0, r4
 800d74a:	bd70      	pop	{r4, r5, r6, pc}
 800d74c:	24000ee0 	.word	0x24000ee0

0800d750 <_malloc_r>:
 800d750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d754:	1ccd      	adds	r5, r1, #3
 800d756:	f025 0503 	bic.w	r5, r5, #3
 800d75a:	3508      	adds	r5, #8
 800d75c:	2d0c      	cmp	r5, #12
 800d75e:	bf38      	it	cc
 800d760:	250c      	movcc	r5, #12
 800d762:	2d00      	cmp	r5, #0
 800d764:	4607      	mov	r7, r0
 800d766:	db01      	blt.n	800d76c <_malloc_r+0x1c>
 800d768:	42a9      	cmp	r1, r5
 800d76a:	d905      	bls.n	800d778 <_malloc_r+0x28>
 800d76c:	230c      	movs	r3, #12
 800d76e:	603b      	str	r3, [r7, #0]
 800d770:	2600      	movs	r6, #0
 800d772:	4630      	mov	r0, r6
 800d774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d778:	4e2e      	ldr	r6, [pc, #184]	; (800d834 <_malloc_r+0xe4>)
 800d77a:	f000 f89d 	bl	800d8b8 <__malloc_lock>
 800d77e:	6833      	ldr	r3, [r6, #0]
 800d780:	461c      	mov	r4, r3
 800d782:	bb34      	cbnz	r4, 800d7d2 <_malloc_r+0x82>
 800d784:	4629      	mov	r1, r5
 800d786:	4638      	mov	r0, r7
 800d788:	f7ff ffc2 	bl	800d710 <sbrk_aligned>
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	4604      	mov	r4, r0
 800d790:	d14d      	bne.n	800d82e <_malloc_r+0xde>
 800d792:	6834      	ldr	r4, [r6, #0]
 800d794:	4626      	mov	r6, r4
 800d796:	2e00      	cmp	r6, #0
 800d798:	d140      	bne.n	800d81c <_malloc_r+0xcc>
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	4631      	mov	r1, r6
 800d79e:	4638      	mov	r0, r7
 800d7a0:	eb04 0803 	add.w	r8, r4, r3
 800d7a4:	f000 f878 	bl	800d898 <_sbrk_r>
 800d7a8:	4580      	cmp	r8, r0
 800d7aa:	d13a      	bne.n	800d822 <_malloc_r+0xd2>
 800d7ac:	6821      	ldr	r1, [r4, #0]
 800d7ae:	3503      	adds	r5, #3
 800d7b0:	1a6d      	subs	r5, r5, r1
 800d7b2:	f025 0503 	bic.w	r5, r5, #3
 800d7b6:	3508      	adds	r5, #8
 800d7b8:	2d0c      	cmp	r5, #12
 800d7ba:	bf38      	it	cc
 800d7bc:	250c      	movcc	r5, #12
 800d7be:	4629      	mov	r1, r5
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	f7ff ffa5 	bl	800d710 <sbrk_aligned>
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	d02b      	beq.n	800d822 <_malloc_r+0xd2>
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	442b      	add	r3, r5
 800d7ce:	6023      	str	r3, [r4, #0]
 800d7d0:	e00e      	b.n	800d7f0 <_malloc_r+0xa0>
 800d7d2:	6822      	ldr	r2, [r4, #0]
 800d7d4:	1b52      	subs	r2, r2, r5
 800d7d6:	d41e      	bmi.n	800d816 <_malloc_r+0xc6>
 800d7d8:	2a0b      	cmp	r2, #11
 800d7da:	d916      	bls.n	800d80a <_malloc_r+0xba>
 800d7dc:	1961      	adds	r1, r4, r5
 800d7de:	42a3      	cmp	r3, r4
 800d7e0:	6025      	str	r5, [r4, #0]
 800d7e2:	bf18      	it	ne
 800d7e4:	6059      	strne	r1, [r3, #4]
 800d7e6:	6863      	ldr	r3, [r4, #4]
 800d7e8:	bf08      	it	eq
 800d7ea:	6031      	streq	r1, [r6, #0]
 800d7ec:	5162      	str	r2, [r4, r5]
 800d7ee:	604b      	str	r3, [r1, #4]
 800d7f0:	4638      	mov	r0, r7
 800d7f2:	f104 060b 	add.w	r6, r4, #11
 800d7f6:	f000 f865 	bl	800d8c4 <__malloc_unlock>
 800d7fa:	f026 0607 	bic.w	r6, r6, #7
 800d7fe:	1d23      	adds	r3, r4, #4
 800d800:	1af2      	subs	r2, r6, r3
 800d802:	d0b6      	beq.n	800d772 <_malloc_r+0x22>
 800d804:	1b9b      	subs	r3, r3, r6
 800d806:	50a3      	str	r3, [r4, r2]
 800d808:	e7b3      	b.n	800d772 <_malloc_r+0x22>
 800d80a:	6862      	ldr	r2, [r4, #4]
 800d80c:	42a3      	cmp	r3, r4
 800d80e:	bf0c      	ite	eq
 800d810:	6032      	streq	r2, [r6, #0]
 800d812:	605a      	strne	r2, [r3, #4]
 800d814:	e7ec      	b.n	800d7f0 <_malloc_r+0xa0>
 800d816:	4623      	mov	r3, r4
 800d818:	6864      	ldr	r4, [r4, #4]
 800d81a:	e7b2      	b.n	800d782 <_malloc_r+0x32>
 800d81c:	4634      	mov	r4, r6
 800d81e:	6876      	ldr	r6, [r6, #4]
 800d820:	e7b9      	b.n	800d796 <_malloc_r+0x46>
 800d822:	230c      	movs	r3, #12
 800d824:	603b      	str	r3, [r7, #0]
 800d826:	4638      	mov	r0, r7
 800d828:	f000 f84c 	bl	800d8c4 <__malloc_unlock>
 800d82c:	e7a1      	b.n	800d772 <_malloc_r+0x22>
 800d82e:	6025      	str	r5, [r4, #0]
 800d830:	e7de      	b.n	800d7f0 <_malloc_r+0xa0>
 800d832:	bf00      	nop
 800d834:	24000edc 	.word	0x24000edc

0800d838 <_realloc_r>:
 800d838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d83c:	4680      	mov	r8, r0
 800d83e:	4614      	mov	r4, r2
 800d840:	460e      	mov	r6, r1
 800d842:	b921      	cbnz	r1, 800d84e <_realloc_r+0x16>
 800d844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d848:	4611      	mov	r1, r2
 800d84a:	f7ff bf81 	b.w	800d750 <_malloc_r>
 800d84e:	b92a      	cbnz	r2, 800d85c <_realloc_r+0x24>
 800d850:	f7ff ff12 	bl	800d678 <_free_r>
 800d854:	4625      	mov	r5, r4
 800d856:	4628      	mov	r0, r5
 800d858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d85c:	f000 f838 	bl	800d8d0 <_malloc_usable_size_r>
 800d860:	4284      	cmp	r4, r0
 800d862:	4607      	mov	r7, r0
 800d864:	d802      	bhi.n	800d86c <_realloc_r+0x34>
 800d866:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d86a:	d812      	bhi.n	800d892 <_realloc_r+0x5a>
 800d86c:	4621      	mov	r1, r4
 800d86e:	4640      	mov	r0, r8
 800d870:	f7ff ff6e 	bl	800d750 <_malloc_r>
 800d874:	4605      	mov	r5, r0
 800d876:	2800      	cmp	r0, #0
 800d878:	d0ed      	beq.n	800d856 <_realloc_r+0x1e>
 800d87a:	42bc      	cmp	r4, r7
 800d87c:	4622      	mov	r2, r4
 800d87e:	4631      	mov	r1, r6
 800d880:	bf28      	it	cs
 800d882:	463a      	movcs	r2, r7
 800d884:	f7ff fba4 	bl	800cfd0 <memcpy>
 800d888:	4631      	mov	r1, r6
 800d88a:	4640      	mov	r0, r8
 800d88c:	f7ff fef4 	bl	800d678 <_free_r>
 800d890:	e7e1      	b.n	800d856 <_realloc_r+0x1e>
 800d892:	4635      	mov	r5, r6
 800d894:	e7df      	b.n	800d856 <_realloc_r+0x1e>
	...

0800d898 <_sbrk_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4d06      	ldr	r5, [pc, #24]	; (800d8b4 <_sbrk_r+0x1c>)
 800d89c:	2300      	movs	r3, #0
 800d89e:	4604      	mov	r4, r0
 800d8a0:	4608      	mov	r0, r1
 800d8a2:	602b      	str	r3, [r5, #0]
 800d8a4:	f7f5 f90a 	bl	8002abc <_sbrk>
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	d102      	bne.n	800d8b2 <_sbrk_r+0x1a>
 800d8ac:	682b      	ldr	r3, [r5, #0]
 800d8ae:	b103      	cbz	r3, 800d8b2 <_sbrk_r+0x1a>
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	24000ee4 	.word	0x24000ee4

0800d8b8 <__malloc_lock>:
 800d8b8:	4801      	ldr	r0, [pc, #4]	; (800d8c0 <__malloc_lock+0x8>)
 800d8ba:	f000 b811 	b.w	800d8e0 <__retarget_lock_acquire_recursive>
 800d8be:	bf00      	nop
 800d8c0:	24000ee8 	.word	0x24000ee8

0800d8c4 <__malloc_unlock>:
 800d8c4:	4801      	ldr	r0, [pc, #4]	; (800d8cc <__malloc_unlock+0x8>)
 800d8c6:	f000 b80c 	b.w	800d8e2 <__retarget_lock_release_recursive>
 800d8ca:	bf00      	nop
 800d8cc:	24000ee8 	.word	0x24000ee8

0800d8d0 <_malloc_usable_size_r>:
 800d8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8d4:	1f18      	subs	r0, r3, #4
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	bfbc      	itt	lt
 800d8da:	580b      	ldrlt	r3, [r1, r0]
 800d8dc:	18c0      	addlt	r0, r0, r3
 800d8de:	4770      	bx	lr

0800d8e0 <__retarget_lock_acquire_recursive>:
 800d8e0:	4770      	bx	lr

0800d8e2 <__retarget_lock_release_recursive>:
 800d8e2:	4770      	bx	lr

0800d8e4 <_init>:
 800d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e6:	bf00      	nop
 800d8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ea:	bc08      	pop	{r3}
 800d8ec:	469e      	mov	lr, r3
 800d8ee:	4770      	bx	lr

0800d8f0 <_fini>:
 800d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f2:	bf00      	nop
 800d8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8f6:	bc08      	pop	{r3}
 800d8f8:	469e      	mov	lr, r3
 800d8fa:	4770      	bx	lr


STM32H750B-DK_I2C_TS_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800d38c  0800d38c  0001d38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d4c4  0800d4c4  0001d4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d4cc  0800d4cc  0001d4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d4d0  0800d4d0  0001d4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800d4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800d548  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800d5a8  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dac  24000134  0800d608  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ee0  0800d608  00020ee0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030da5  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000439f  00000000  00000000  00050f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  000552a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002140  00000000  00000000  00057578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c77  00000000  00000000  000596b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c54f  00000000  00000000  0009a32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b7f1  00000000  00000000  000c687e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026206f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e98  00000000  00000000  002620c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d374 	.word	0x0800d374

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800d374 	.word	0x0800d374

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b087      	sub	sp, #28
 8000698:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
int i=0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
uint8_t Space[] = " - ";
 800069e:	4b81      	ldr	r3, [pc, #516]	; (80008a4 <main+0x210>)
 80006a0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f002 faa1 	bl	8002be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f91f 	bl	80008e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006aa:	f000 f9a9 	bl	8000a00 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 ff4d 	bl	800154c <MX_GPIO_Init>
  MX_ADC1_Init();
 80006b2:	f000 f9d5 	bl	8000a60 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006b6:	f000 fa4b 	bl	8000b50 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006ba:	f000 faad 	bl	8000c18 <MX_ADC3_Init>
  MX_ETH_Init();
 80006be:	f000 fb0d 	bl	8000cdc <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006c2:	f000 fb57 	bl	8000d74 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006c6:	f000 fbb9 	bl	8000e3c <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006ca:	f000 fef1 	bl	80014b0 <MX_FMC_Init>
  MX_LTDC_Init();
 80006ce:	f000 fc59 	bl	8000f84 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006d2:	f000 fd09 	bl	80010e8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006d6:	f000 fd33 	bl	8001140 <MX_RTC_Init>
  MX_SAI2_Init();
 80006da:	f000 fd59 	bl	8001190 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006de:	f000 fe15 	bl	800130c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006e2:	f000 fe67 	bl	80013b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e6:	f000 feb1 	bl	800144c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80006ea:	f000 fc0b 	bl	8000f04 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);    // Set LCD_RST to high
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f4:	486c      	ldr	r0, [pc, #432]	; (80008a8 <main+0x214>)
 80006f6:	f004 fe25 	bl	8005344 <HAL_GPIO_WritePin>


  /*-[ I2C Bus Scanning ]-*/
		snprintf(SendBuffer,BUFSIZE,"I2C Scanning started !\n\r");
 80006fa:	4a6c      	ldr	r2, [pc, #432]	; (80008ac <main+0x218>)
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	486b      	ldr	r0, [pc, #428]	; (80008b0 <main+0x21c>)
 8000702:	f00c f9c3 	bl	800ca8c <sniprintf>
		HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000706:	486a      	ldr	r0, [pc, #424]	; (80008b0 <main+0x21c>)
 8000708:	f7ff fdea 	bl	80002e0 <strlen>
 800070c:	4603      	mov	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	4967      	ldr	r1, [pc, #412]	; (80008b0 <main+0x21c>)
 8000714:	4867      	ldr	r0, [pc, #412]	; (80008b4 <main+0x220>)
 8000716:	f00a fc94 	bl	800b042 <HAL_UART_Transmit>

		 for(i=1; i<128; i++)
 800071a:	2301      	movs	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e02f      	b.n	8000780 <main+0xec>
		 {
			 retval = HAL_I2C_IsDeviceReady(&hi2c4, (uint16_t)(i<<1), 3, 5);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	b29b      	uxth	r3, r3
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b299      	uxth	r1, r3
 8000728:	2305      	movs	r3, #5
 800072a:	2203      	movs	r2, #3
 800072c:	4862      	ldr	r0, [pc, #392]	; (80008b8 <main+0x224>)
 800072e:	f005 f8b7 	bl	80058a0 <HAL_I2C_IsDeviceReady>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b61      	ldr	r3, [pc, #388]	; (80008bc <main+0x228>)
 8000738:	701a      	strb	r2, [r3, #0]
			 if (retval != HAL_OK) /* No ACK Received At That Address */
 800073a:	4b60      	ldr	r3, [pc, #384]	; (80008bc <main+0x228>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <main+0xbc>
			 {
				 HAL_UART_Transmit(&huart3, Space, sizeof(Space), 100);
 8000742:	4639      	mov	r1, r7
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	2204      	movs	r2, #4
 8000748:	485a      	ldr	r0, [pc, #360]	; (80008b4 <main+0x220>)
 800074a:	f00a fc7a 	bl	800b042 <HAL_UART_Transmit>
 800074e:	e014      	b.n	800077a <main+0xe6>
			 }
			 else if(retval == HAL_OK)
 8000750:	4b5a      	ldr	r3, [pc, #360]	; (80008bc <main+0x228>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d110      	bne.n	800077a <main+0xe6>
			 {
				 snprintf(SendBuffer,BUFSIZE,"0x%X", i);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a59      	ldr	r2, [pc, #356]	; (80008c0 <main+0x22c>)
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4853      	ldr	r0, [pc, #332]	; (80008b0 <main+0x21c>)
 8000762:	f00c f993 	bl	800ca8c <sniprintf>
				HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),1);
 8000766:	4852      	ldr	r0, [pc, #328]	; (80008b0 <main+0x21c>)
 8000768:	f7ff fdba 	bl	80002e0 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	2301      	movs	r3, #1
 8000772:	494f      	ldr	r1, [pc, #316]	; (80008b0 <main+0x21c>)
 8000774:	484f      	ldr	r0, [pc, #316]	; (80008b4 <main+0x220>)
 8000776:	f00a fc64 	bl	800b042 <HAL_UART_Transmit>
		 for(i=1; i<128; i++)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b7f      	cmp	r3, #127	; 0x7f
 8000784:	ddcc      	ble.n	8000720 <main+0x8c>
			 }
		 }
			snprintf(SendBuffer,BUFSIZE,"I2C Scanning stopped !\n\r");
 8000786:	4a4f      	ldr	r2, [pc, #316]	; (80008c4 <main+0x230>)
 8000788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078c:	4848      	ldr	r0, [pc, #288]	; (80008b0 <main+0x21c>)
 800078e:	f00c f97d 	bl	800ca8c <sniprintf>
			HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000792:	4847      	ldr	r0, [pc, #284]	; (80008b0 <main+0x21c>)
 8000794:	f7ff fda4 	bl	80002e0 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	4944      	ldr	r1, [pc, #272]	; (80008b0 <main+0x21c>)
 80007a0:	4844      	ldr	r0, [pc, #272]	; (80008b4 <main+0x220>)
 80007a2:	f00a fc4e 	bl	800b042 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80007a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007aa:	4847      	ldr	r0, [pc, #284]	; (80008c8 <main+0x234>)
 80007ac:	f004 fde3 	bl	8005376 <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	4845      	ldr	r0, [pc, #276]	; (80008cc <main+0x238>)
 80007b6:	f004 fdad 	bl	8005314 <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	4b44      	ldr	r3, [pc, #272]	; (80008d0 <main+0x23c>)
 80007c0:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, KeyState);
 80007c2:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <main+0x23c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	2104      	movs	r1, #4
 80007cc:	4841      	ldr	r0, [pc, #260]	; (80008d4 <main+0x240>)
 80007ce:	f004 fdb9 	bl	8005344 <HAL_GPIO_WritePin>


		// Reading from address 0x1a register R0 (addr. 0x00) default value should be 0x8994
	    dataBuffer[0] = 0; dataBuffer[1] = 0x00;
 80007d2:	4b41      	ldr	r3, [pc, #260]	; (80008d8 <main+0x244>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <main+0x244>)
 80007da:	2200      	movs	r2, #0
 80007dc:	705a      	strb	r2, [r3, #1]
	    retval = HAL_I2C_Master_Transmit(&hi2c4, (0x1a << 1), dataBuffer, 2, HAL_MAX_DELAY);
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	4a3c      	ldr	r2, [pc, #240]	; (80008d8 <main+0x244>)
 80007e8:	2134      	movs	r1, #52	; 0x34
 80007ea:	4833      	ldr	r0, [pc, #204]	; (80008b8 <main+0x224>)
 80007ec:	f004 fe6e 	bl	80054cc <HAL_I2C_Master_Transmit>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <main+0x228>)
 80007f6:	701a      	strb	r2, [r3, #0]

	    retval = HAL_I2C_Master_Receive(&hi2c4, (0x1a << 1), dataBuffer, 2, HAL_MAX_DELAY);
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2302      	movs	r3, #2
 8000800:	4a35      	ldr	r2, [pc, #212]	; (80008d8 <main+0x244>)
 8000802:	2134      	movs	r1, #52	; 0x34
 8000804:	482c      	ldr	r0, [pc, #176]	; (80008b8 <main+0x224>)
 8000806:	f004 ff55 	bl	80056b4 <HAL_I2C_Master_Receive>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <main+0x228>)
 8000810:	701a      	strb	r2, [r3, #0]

		// Reading from address 0x38 register Device Mode (addr. 0x00) default value should be ???
	    dataBuffer[5] = 0xA8;
 8000812:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <main+0x244>)
 8000814:	22a8      	movs	r2, #168	; 0xa8
 8000816:	715a      	strb	r2, [r3, #5]
	    retval = HAL_I2C_Master_Transmit(&hi2c4, (0x38 << 1), &dataBuffer[5], 1, HAL_MAX_DELAY);
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2301      	movs	r3, #1
 8000820:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <main+0x248>)
 8000822:	2170      	movs	r1, #112	; 0x70
 8000824:	4824      	ldr	r0, [pc, #144]	; (80008b8 <main+0x224>)
 8000826:	f004 fe51 	bl	80054cc <HAL_I2C_Master_Transmit>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <main+0x228>)
 8000830:	701a      	strb	r2, [r3, #0]

	    retval = HAL_I2C_Master_Receive(&hi2c4, (0x38 << 1), &dataBuffer[5], 1, HAL_MAX_DELAY);
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	4a28      	ldr	r2, [pc, #160]	; (80008dc <main+0x248>)
 800083c:	2170      	movs	r1, #112	; 0x70
 800083e:	481e      	ldr	r0, [pc, #120]	; (80008b8 <main+0x224>)
 8000840:	f004 ff38 	bl	80056b4 <HAL_I2C_Master_Receive>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <main+0x228>)
 800084a:	701a      	strb	r2, [r3, #0]


	    snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Reg.value1:0x%4x Reg.value2:0x%2x=%d\n\r",Counter++,KeyState, dataBuffer[0]*256+dataBuffer[1],dataBuffer[5],dataBuffer[5]);
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <main+0x24c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	4923      	ldr	r1, [pc, #140]	; (80008e0 <main+0x24c>)
 8000854:	600a      	str	r2, [r1, #0]
 8000856:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <main+0x23c>)
 8000858:	6812      	ldr	r2, [r2, #0]
 800085a:	491f      	ldr	r1, [pc, #124]	; (80008d8 <main+0x244>)
 800085c:	7809      	ldrb	r1, [r1, #0]
 800085e:	0209      	lsls	r1, r1, #8
 8000860:	481d      	ldr	r0, [pc, #116]	; (80008d8 <main+0x244>)
 8000862:	7840      	ldrb	r0, [r0, #1]
 8000864:	4401      	add	r1, r0
 8000866:	481c      	ldr	r0, [pc, #112]	; (80008d8 <main+0x244>)
 8000868:	7940      	ldrb	r0, [r0, #5]
 800086a:	4604      	mov	r4, r0
 800086c:	481a      	ldr	r0, [pc, #104]	; (80008d8 <main+0x244>)
 800086e:	7940      	ldrb	r0, [r0, #5]
 8000870:	9003      	str	r0, [sp, #12]
 8000872:	9402      	str	r4, [sp, #8]
 8000874:	9101      	str	r1, [sp, #4]
 8000876:	9200      	str	r2, [sp, #0]
 8000878:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <main+0x250>)
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <main+0x21c>)
 8000880:	f00c f904 	bl	800ca8c <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <main+0x21c>)
 8000886:	f7ff fd2b 	bl	80002e0 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	2364      	movs	r3, #100	; 0x64
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <main+0x21c>)
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <main+0x220>)
 8000894:	f00a fbd5 	bl	800b042 <HAL_UART_Transmit>

	    HAL_Delay(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089c:	f002 fa36 	bl	8002d0c <HAL_Delay>
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80008a0:	e781      	b.n	80007a6 <main+0x112>
 80008a2:	bf00      	nop
 80008a4:	00202d20 	.word	0x00202d20
 80008a8:	58020400 	.word	0x58020400
 80008ac:	0800d38c 	.word	0x0800d38c
 80008b0:	24000d9c 	.word	0x24000d9c
 80008b4:	240007c8 	.word	0x240007c8
 80008b8:	240004a4 	.word	0x240004a4
 80008bc:	24000eae 	.word	0x24000eae
 80008c0:	0800d3a8 	.word	0x0800d3a8
 80008c4:	0800d3b0 	.word	0x0800d3b0
 80008c8:	58022000 	.word	0x58022000
 80008cc:	58020800 	.word	0x58020800
 80008d0:	24000ea0 	.word	0x24000ea0
 80008d4:	58022400 	.word	0x58022400
 80008d8:	24000ea4 	.word	0x24000ea4
 80008dc:	24000ea9 	.word	0x24000ea9
 80008e0:	24000e9c 	.word	0x24000e9c
 80008e4:	0800d3cc 	.word	0x0800d3cc

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	; 0x70
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	224c      	movs	r2, #76	; 0x4c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00c f8c0 	bl	800ca7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2220      	movs	r2, #32
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f00c f8ba 	bl	800ca7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000908:	2002      	movs	r0, #2
 800090a:	f005 ffeb 	bl	80068e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <SystemClock_Config+0x10c>)
 8000914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000916:	4a37      	ldr	r2, [pc, #220]	; (80009f4 <SystemClock_Config+0x10c>)
 8000918:	f023 0301 	bic.w	r3, r3, #1
 800091c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <SystemClock_Config+0x10c>)
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <SystemClock_Config+0x110>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000930:	4a31      	ldr	r2, [pc, #196]	; (80009f8 <SystemClock_Config+0x110>)
 8000932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <SystemClock_Config+0x110>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000944:	bf00      	nop
 8000946:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <SystemClock_Config+0x110>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000952:	d1f8      	bne.n	8000946 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <SystemClock_Config+0x114>)
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	f023 0303 	bic.w	r3, r3, #3
 800095c:	4a27      	ldr	r2, [pc, #156]	; (80009fc <SystemClock_Config+0x114>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000964:	230b      	movs	r3, #11
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000968:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800096e:	2301      	movs	r3, #1
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000976:	2301      	movs	r3, #1
 8000978:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	2302      	movs	r3, #2
 8000980:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000982:	2316      	movs	r3, #22
 8000984:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000986:	23a9      	movs	r3, #169	; 0xa9
 8000988:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800098e:	2304      	movs	r3, #4
 8000990:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000996:	2300      	movs	r3, #0
 8000998:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800099a:	2300      	movs	r3, #0
 800099c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4618      	mov	r0, r3
 80009a8:	f006 f8a0 	bl	8006aec <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009b2:	f000 ff75 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	233f      	movs	r3, #63	; 0x3f
 80009b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 fce0 	bl	80073a0 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x102>
  {
    Error_Handler();
 80009e6:	f000 ff5b 	bl	80018a0 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3770      	adds	r7, #112	; 0x70
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	58000400 	.word	0x58000400
 80009f8:	58024800 	.word	0x58024800
 80009fc:	58024400 	.word	0x58024400

08000a00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0b0      	sub	sp, #192	; 0xc0
 8000a04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	22c0      	movs	r2, #192	; 0xc0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f00c f835 	bl	800ca7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a22:	230c      	movs	r3, #12
 8000a24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a26:	2305      	movs	r3, #5
 8000a28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a32:	23c0      	movs	r3, #192	; 0xc0
 8000a34:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a36:	2320      	movs	r3, #32
 8000a38:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4618      	mov	r0, r3
 8000a48:	f007 f836 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a52:	f000 ff25 	bl	80018a0 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	37c0      	adds	r7, #192	; 0xc0
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a84:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000a86:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <MX_ADC1_Init+0xec>)
 8000a88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000a8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae2:	4819      	ldr	r0, [pc, #100]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ae4:	f002 faf8 	bl	80030d8 <HAL_ADC_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000aee:	f000 fed7 	bl	80018a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4812      	ldr	r0, [pc, #72]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000afe:	f003 f90f 	bl	8003d20 <HAL_ADCEx_MultiModeConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b08:	f000 feca 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b10:	2306      	movs	r3, #6
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b18:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000b30:	f002 fc74 	bl	800341c <HAL_ADC_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b3a:	f000 feb1 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	24000188 	.word	0x24000188
 8000b4c:	40022000 	.word	0x40022000

08000b50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	; (8000c14 <MX_ADC2_Init+0xc4>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b74:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b84:	2204      	movs	r2, #4
 8000b86:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bc8:	f002 fa86 	bl	80030d8 <HAL_ADC_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bd2:	f000 fe65 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000be6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be8:	2304      	movs	r3, #4
 8000bea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bfa:	f002 fc0f 	bl	800341c <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000c04:	f000 fe4c 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240001ec 	.word	0x240001ec
 8000c14:	40022100 	.word	0x40022100

08000c18 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]
 8000c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c32:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <MX_ADC3_Init+0xbc>)
 8000c34:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c44:	2204      	movs	r2, #4
 8000c46:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c86:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c88:	f002 fa26 	bl	80030d8 <HAL_ADC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c92:	f000 fe05 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_ADC3_Init+0xc0>)
 8000c98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ca6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000cba:	f002 fbaf 	bl	800341c <HAL_ADC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000cc4:	f000 fdec 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000250 	.word	0x24000250
 8000cd4:	58026000 	.word	0x58026000
 8000cd8:	1d500080 	.word	0x1d500080

08000cdc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_ETH_Init+0x80>)
 8000ce2:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <MX_ETH_Init+0x84>)
 8000ce4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_ETH_Init+0x88>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_ETH_Init+0x88>)
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_ETH_Init+0x88>)
 8000cf4:	22e1      	movs	r2, #225	; 0xe1
 8000cf6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_ETH_Init+0x88>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_ETH_Init+0x88>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_ETH_Init+0x88>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <MX_ETH_Init+0x88>)
 8000d0e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_ETH_Init+0x8c>)
 8000d1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d1e:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <MX_ETH_Init+0x90>)
 8000d20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d2c:	f003 f9ba 	bl	80040a4 <HAL_ETH_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d36:	f000 fdb3 	bl	80018a0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d3a:	2238      	movs	r2, #56	; 0x38
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <MX_ETH_Init+0x94>)
 8000d40:	f00b fe9c 	bl	800ca7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_ETH_Init+0x94>)
 8000d46:	2221      	movs	r2, #33	; 0x21
 8000d48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_ETH_Init+0x94>)
 8000d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_ETH_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	240002b4 	.word	0x240002b4
 8000d60:	40028000 	.word	0x40028000
 8000d64:	24000eb0 	.word	0x24000eb0
 8000d68:	240000d4 	.word	0x240000d4
 8000d6c:	24000074 	.word	0x24000074
 8000d70:	24000150 	.word	0x24000150

08000d74 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d78:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <MX_FDCAN1_Init+0xc4>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d84:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d9c:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d9e:	2210      	movs	r2, #16
 8000da0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000db0:	2202      	movs	r2, #2
 8000db2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000df2:	2204      	movs	r2, #4
 8000df4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dfe:	2204      	movs	r2, #4
 8000e00:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e22:	f003 fd63 	bl	80048ec <HAL_FDCAN_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e2c:	f000 fd38 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	24000364 	.word	0x24000364
 8000e38:	4000a000 	.word	0x4000a000

08000e3c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e42:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <MX_FDCAN2_Init+0xc4>)
 8000e44:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000eae:	2204      	movs	r2, #4
 8000eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000eea:	f003 fcff 	bl	80048ec <HAL_FDCAN_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ef4:	f000 fcd4 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	24000404 	.word	0x24000404
 8000f00:	4000a400 	.word	0x4000a400

08000f04 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <MX_I2C4_Init+0x78>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f10:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <MX_I2C4_Init+0x7c>)
 8000f12:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f3e:	480e      	ldr	r0, [pc, #56]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f40:	f004 fa34 	bl	80053ac <HAL_I2C_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f4a:	f000 fca9 	bl	80018a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f52:	f005 f83f 	bl	8005fd4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f5c:	f000 fca0 	bl	80018a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f64:	f005 f881 	bl	800606a <HAL_I2CEx_ConfigDigitalFilter>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f6e:	f000 fc97 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	240004a4 	.word	0x240004a4
 8000f7c:	58001c00 	.word	0x58001c00
 8000f80:	10707dbc 	.word	0x10707dbc

08000f84 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09a      	sub	sp, #104	; 0x68
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8e:	2234      	movs	r2, #52	; 0x34
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00b fd72 	bl	800ca7c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2234      	movs	r2, #52	; 0x34
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00b fd6c 	bl	800ca7c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000fa4:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fa6:	4a4f      	ldr	r2, [pc, #316]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000faa:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fb0:	4b4b      	ldr	r3, [pc, #300]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fb6:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fbc:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000fc8:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fca:	2203      	movs	r2, #3
 8000fcc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fd0:	220e      	movs	r2, #14
 8000fd2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000fd4:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fdc:	f240 228e 	movw	r2, #654	; 0x28e
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000fe2:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fe4:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fec:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000ff4:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ffa:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001002:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <MX_LTDC_Init+0x15c>)
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001012:	4833      	ldr	r0, [pc, #204]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8001014:	f005 f876 	bl	8006104 <HAL_LTDC_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800101e:	f000 fc3f 	bl	80018a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001032:	2300      	movs	r3, #0
 8001034:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800103e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001042:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001044:	2305      	movs	r3, #5
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8001070:	f005 f918 	bl	80062a4 <HAL_LTDC_ConfigLayer>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800107a:	f000 fc11 	bl	80018a0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80010a0:	2305      	movs	r3, #5
 80010a2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	2201      	movs	r2, #1
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_LTDC_Init+0x15c>)
 80010ca:	f005 f8eb 	bl	80062a4 <HAL_LTDC_ConfigLayer>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80010d4:	f000 fbe4 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3768      	adds	r7, #104	; 0x68
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	240004f8 	.word	0x240004f8
 80010e4:	50001000 	.word	0x50001000

080010e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_QUADSPI_Init+0x50>)
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_QUADSPI_Init+0x54>)
 80010f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_QUADSPI_Init+0x50>)
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_QUADSPI_Init+0x50>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001106:	2201      	movs	r2, #1
 8001108:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_QUADSPI_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_QUADSPI_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001124:	f005 fc28 	bl	8006978 <HAL_QSPI_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 fbb7 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	240005a0 	.word	0x240005a0
 800113c:	52005000 	.word	0x52005000

08001140 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_RTC_Init+0x48>)
 8001146:	4a11      	ldr	r2, [pc, #68]	; (800118c <MX_RTC_Init+0x4c>)
 8001148:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_RTC_Init+0x48>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <MX_RTC_Init+0x48>)
 8001152:	227f      	movs	r2, #127	; 0x7f
 8001154:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_RTC_Init+0x48>)
 8001158:	22ff      	movs	r2, #255	; 0xff
 800115a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_RTC_Init+0x48>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_RTC_Init+0x48>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_RTC_Init+0x48>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_RTC_Init+0x48>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_RTC_Init+0x48>)
 8001176:	f009 f99d 	bl	800a4b4 <HAL_RTC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001180:	f000 fb8e 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	240005ec 	.word	0x240005ec
 800118c:	58004000 	.word	0x58004000

08001190 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001196:	4a59      	ldr	r2, [pc, #356]	; (80012fc <MX_SAI2_Init+0x16c>)
 8001198:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800119a:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <MX_SAI2_Init+0x168>)
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80011a0:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80011a6:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011ac:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011b2:	4b51      	ldr	r3, [pc, #324]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011b8:	4b4f      	ldr	r3, [pc, #316]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011be:	4b4e      	ldr	r3, [pc, #312]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011ca:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011d0:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011d2:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <MX_SAI2_Init+0x170>)
 80011d4:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011de:	2200      	movs	r2, #0
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011e2:	4b45      	ldr	r3, [pc, #276]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80011ee:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80011f6:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011fc:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001204:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001206:	2208      	movs	r2, #8
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800120a:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <MX_SAI2_Init+0x168>)
 800120c:	2201      	movs	r2, #1
 800120e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001210:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001212:	2200      	movs	r2, #0
 8001214:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001218:	2200      	movs	r2, #0
 800121a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <MX_SAI2_Init+0x168>)
 800121e:	2200      	movs	r2, #0
 8001220:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001224:	2200      	movs	r2, #0
 8001226:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001228:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <MX_SAI2_Init+0x168>)
 800122a:	2200      	movs	r2, #0
 800122c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001230:	2201      	movs	r2, #1
 8001232:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001236:	2200      	movs	r2, #0
 8001238:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800123a:	482f      	ldr	r0, [pc, #188]	; (80012f8 <MX_SAI2_Init+0x168>)
 800123c:	f009 fa52 	bl	800a6e4 <HAL_SAI_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001246:	f000 fb2b 	bl	80018a0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <MX_SAI2_Init+0x174>)
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <MX_SAI2_Init+0x178>)
 800124e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <MX_SAI2_Init+0x174>)
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_SAI2_Init+0x174>)
 8001258:	2203      	movs	r2, #3
 800125a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <MX_SAI2_Init+0x174>)
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <MX_SAI2_Init+0x174>)
 8001264:	2200      	movs	r2, #0
 8001266:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_SAI2_Init+0x174>)
 800126a:	2200      	movs	r2, #0
 800126c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <MX_SAI2_Init+0x174>)
 8001270:	2201      	movs	r2, #1
 8001272:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <MX_SAI2_Init+0x174>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_SAI2_Init+0x174>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_SAI2_Init+0x174>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_SAI2_Init+0x174>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_SAI2_Init+0x174>)
 800128e:	2200      	movs	r2, #0
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_SAI2_Init+0x174>)
 8001294:	2200      	movs	r2, #0
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_SAI2_Init+0x174>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_SAI2_Init+0x174>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_SAI2_Init+0x174>)
 80012a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_SAI2_Init+0x174>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_SAI2_Init+0x174>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_SAI2_Init+0x174>)
 80012bc:	2200      	movs	r2, #0
 80012be:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_SAI2_Init+0x174>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_SAI2_Init+0x174>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_SAI2_Init+0x174>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_SAI2_Init+0x174>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_SAI2_Init+0x174>)
 80012da:	2201      	movs	r2, #1
 80012dc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_SAI2_Init+0x174>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012e4:	4807      	ldr	r0, [pc, #28]	; (8001304 <MX_SAI2_Init+0x174>)
 80012e6:	f009 f9fd 	bl	800a6e4 <HAL_SAI_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80012f0:	f000 fad6 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	24000610 	.word	0x24000610
 80012fc:	40015c04 	.word	0x40015c04
 8001300:	0002ee00 	.word	0x0002ee00
 8001304:	240006a8 	.word	0x240006a8
 8001308:	40015c24 	.word	0x40015c24

0800130c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001312:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <MX_SPI2_Init+0xa4>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001318:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800131c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001326:	2203      	movs	r2, #3
 8001328:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_SPI2_Init+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_SPI2_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_SPI2_Init+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI2_Init+0xa0>)
 800135c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001360:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001364:	2200      	movs	r2, #0
 8001366:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_SPI2_Init+0xa0>)
 800136a:	2200      	movs	r2, #0
 800136c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI2_Init+0xa0>)
 800137c:	2200      	movs	r2, #0
 800137e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001382:	2200      	movs	r2, #0
 8001384:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001388:	2200      	movs	r2, #0
 800138a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_SPI2_Init+0xa0>)
 800138e:	2200      	movs	r2, #0
 8001390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001394:	2200      	movs	r2, #0
 8001396:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_SPI2_Init+0xa0>)
 800139a:	f009 fcc3 	bl	800ad24 <HAL_SPI_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80013a4:	f000 fa7c 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	24000740 	.word	0x24000740
 80013b0:	40003800 	.word	0x40003800

080013b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <MX_USART3_UART_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013fe:	f009 fdd0 	bl	800afa2 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 fa4a 	bl	80018a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_USART3_UART_Init+0x90>)
 8001410:	f00a fe61 	bl	800c0d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 fa41 	bl	80018a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <MX_USART3_UART_Init+0x90>)
 8001422:	f00a fe96 	bl	800c152 <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800142c:	f000 fa38 	bl	80018a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_USART3_UART_Init+0x90>)
 8001432:	f00a fe17 	bl	800c064 <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 fa30 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	240007c8 	.word	0x240007c8
 8001448:	40004800 	.word	0x40004800

0800144c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001452:	4a16      	ldr	r2, [pc, #88]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001454:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001458:	2209      	movs	r2, #9
 800145a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800145e:	2202      	movs	r2, #2
 8001460:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800146a:	2202      	movs	r2, #2
 800146c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001482:	2201      	movs	r2, #1
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001488:	2201      	movs	r2, #1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800148e:	2200      	movs	r2, #0
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001494:	f005 f8de 	bl	8006654 <HAL_PCD_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800149e:	f000 f9ff 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2400085c 	.word	0x2400085c
 80014ac:	40080000 	.word	0x40080000

080014b0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_FMC_Init+0x94>)
 80014ca:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <MX_FMC_Init+0x98>)
 80014cc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_FMC_Init+0x94>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_FMC_Init+0x94>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_FMC_Init+0x94>)
 80014dc:	2204      	movs	r2, #4
 80014de:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_FMC_Init+0x94>)
 80014e2:	2210      	movs	r2, #16
 80014e4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_FMC_Init+0x94>)
 80014e8:	2240      	movs	r2, #64	; 0x40
 80014ea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_FMC_Init+0x94>)
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_FMC_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_FMC_Init+0x94>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_FMC_Init+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_FMC_Init+0x94>)
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800150a:	2310      	movs	r3, #16
 800150c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800150e:	2310      	movs	r3, #16
 8001510:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001512:	2310      	movs	r3, #16
 8001514:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001516:	2310      	movs	r3, #16
 8001518:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800151a:	2310      	movs	r3, #16
 800151c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800151e:	2310      	movs	r3, #16
 8001520:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001522:	2310      	movs	r3, #16
 8001524:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_FMC_Init+0x94>)
 800152c:	f009 fbbe 	bl	800acac <HAL_SDRAM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001536:	f000 f9b3 	bl	80018a0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800153a:	bf00      	nop
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000d68 	.word	0x24000d68
 8001548:	52004140 	.word	0x52004140

0800154c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b090      	sub	sp, #64	; 0x40
 8001550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001562:	4bbf      	ldr	r3, [pc, #764]	; (8001860 <MX_GPIO_Init+0x314>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	4abd      	ldr	r2, [pc, #756]	; (8001860 <MX_GPIO_Init+0x314>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001572:	4bbb      	ldr	r3, [pc, #748]	; (8001860 <MX_GPIO_Init+0x314>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4bb7      	ldr	r3, [pc, #732]	; (8001860 <MX_GPIO_Init+0x314>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	4ab6      	ldr	r2, [pc, #728]	; (8001860 <MX_GPIO_Init+0x314>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001590:	4bb3      	ldr	r3, [pc, #716]	; (8001860 <MX_GPIO_Init+0x314>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800159e:	4bb0      	ldr	r3, [pc, #704]	; (8001860 <MX_GPIO_Init+0x314>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	4aae      	ldr	r2, [pc, #696]	; (8001860 <MX_GPIO_Init+0x314>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ae:	4bac      	ldr	r3, [pc, #688]	; (8001860 <MX_GPIO_Init+0x314>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	623b      	str	r3, [r7, #32]
 80015ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015bc:	4ba8      	ldr	r3, [pc, #672]	; (8001860 <MX_GPIO_Init+0x314>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c2:	4aa7      	ldr	r2, [pc, #668]	; (8001860 <MX_GPIO_Init+0x314>)
 80015c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015cc:	4ba4      	ldr	r3, [pc, #656]	; (8001860 <MX_GPIO_Init+0x314>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4ba1      	ldr	r3, [pc, #644]	; (8001860 <MX_GPIO_Init+0x314>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e0:	4a9f      	ldr	r2, [pc, #636]	; (8001860 <MX_GPIO_Init+0x314>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ea:	4b9d      	ldr	r3, [pc, #628]	; (8001860 <MX_GPIO_Init+0x314>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b99      	ldr	r3, [pc, #612]	; (8001860 <MX_GPIO_Init+0x314>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	4a98      	ldr	r2, [pc, #608]	; (8001860 <MX_GPIO_Init+0x314>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001608:	4b95      	ldr	r3, [pc, #596]	; (8001860 <MX_GPIO_Init+0x314>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001616:	4b92      	ldr	r3, [pc, #584]	; (8001860 <MX_GPIO_Init+0x314>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	4a90      	ldr	r2, [pc, #576]	; (8001860 <MX_GPIO_Init+0x314>)
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001626:	4b8e      	ldr	r3, [pc, #568]	; (8001860 <MX_GPIO_Init+0x314>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001634:	4b8a      	ldr	r3, [pc, #552]	; (8001860 <MX_GPIO_Init+0x314>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	4a89      	ldr	r2, [pc, #548]	; (8001860 <MX_GPIO_Init+0x314>)
 800163c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001644:	4b86      	ldr	r3, [pc, #536]	; (8001860 <MX_GPIO_Init+0x314>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001652:	4b83      	ldr	r3, [pc, #524]	; (8001860 <MX_GPIO_Init+0x314>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	4a81      	ldr	r2, [pc, #516]	; (8001860 <MX_GPIO_Init+0x314>)
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001662:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <MX_GPIO_Init+0x314>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001670:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <MX_GPIO_Init+0x314>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	4a7a      	ldr	r2, [pc, #488]	; (8001860 <MX_GPIO_Init+0x314>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001680:	4b77      	ldr	r3, [pc, #476]	; (8001860 <MX_GPIO_Init+0x314>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168e:	4b74      	ldr	r3, [pc, #464]	; (8001860 <MX_GPIO_Init+0x314>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	4a72      	ldr	r2, [pc, #456]	; (8001860 <MX_GPIO_Init+0x314>)
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <MX_GPIO_Init+0x314>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b2:	486c      	ldr	r0, [pc, #432]	; (8001864 <MX_GPIO_Init+0x318>)
 80016b4:	f003 fe46 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f241 0104 	movw	r1, #4100	; 0x1004
 80016be:	486a      	ldr	r0, [pc, #424]	; (8001868 <MX_GPIO_Init+0x31c>)
 80016c0:	f003 fe40 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2104      	movs	r1, #4
 80016c8:	4868      	ldr	r0, [pc, #416]	; (800186c <MX_GPIO_Init+0x320>)
 80016ca:	f003 fe3b 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016e0:	2303      	movs	r3, #3
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e8:	4619      	mov	r1, r3
 80016ea:	4861      	ldr	r0, [pc, #388]	; (8001870 <MX_GPIO_Init+0x324>)
 80016ec:	f003 fc62 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001700:	4619      	mov	r1, r3
 8001702:	485c      	ldr	r0, [pc, #368]	; (8001874 <MX_GPIO_Init+0x328>)
 8001704:	f003 fc56 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001708:	2330      	movs	r3, #48	; 0x30
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001718:	230a      	movs	r3, #10
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001720:	4619      	mov	r1, r3
 8001722:	4855      	ldr	r0, [pc, #340]	; (8001878 <MX_GPIO_Init+0x32c>)
 8001724:	f003 fc46 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001728:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	484f      	ldr	r0, [pc, #316]	; (800187c <MX_GPIO_Init+0x330>)
 800173e:	f003 fc39 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	4619      	mov	r1, r3
 8001756:	484a      	ldr	r0, [pc, #296]	; (8001880 <MX_GPIO_Init+0x334>)
 8001758:	f003 fc2c 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800175c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800176e:	2301      	movs	r3, #1
 8001770:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	4840      	ldr	r0, [pc, #256]	; (800187c <MX_GPIO_Init+0x330>)
 800177a:	f003 fc1b 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800178e:	2306      	movs	r3, #6
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	483a      	ldr	r0, [pc, #232]	; (8001884 <MX_GPIO_Init+0x338>)
 800179a:	f003 fc0b 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b4:	4619      	mov	r1, r3
 80017b6:	482b      	ldr	r0, [pc, #172]	; (8001864 <MX_GPIO_Init+0x318>)
 80017b8:	f003 fbfc 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80017bc:	2304      	movs	r3, #4
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	482c      	ldr	r0, [pc, #176]	; (8001884 <MX_GPIO_Init+0x338>)
 80017d2:	f003 fbef 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80017d6:	2301      	movs	r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	4827      	ldr	r0, [pc, #156]	; (8001888 <MX_GPIO_Init+0x33c>)
 80017ea:	f003 fbe3 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80017ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001802:	4619      	mov	r1, r3
 8001804:	481a      	ldr	r0, [pc, #104]	; (8001870 <MX_GPIO_Init+0x324>)
 8001806:	f003 fbd5 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800180a:	2340      	movs	r3, #64	; 0x40
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800181a:	2309      	movs	r3, #9
 800181c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001822:	4619      	mov	r1, r3
 8001824:	4815      	ldr	r0, [pc, #84]	; (800187c <MX_GPIO_Init+0x330>)
 8001826:	f003 fbc5 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 800182a:	f241 0304 	movw	r3, #4100	; 0x1004
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	4809      	ldr	r0, [pc, #36]	; (8001868 <MX_GPIO_Init+0x31c>)
 8001844:	f003 fbb6 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001848:	2304      	movs	r3, #4
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	4619      	mov	r1, r3
 800185e:	e015      	b.n	800188c <MX_GPIO_Init+0x340>
 8001860:	58024400 	.word	0x58024400
 8001864:	58022000 	.word	0x58022000
 8001868:	58020400 	.word	0x58020400
 800186c:	58022400 	.word	0x58022400
 8001870:	58021c00 	.word	0x58021c00
 8001874:	58020c00 	.word	0x58020c00
 8001878:	58021000 	.word	0x58021000
 800187c:	58020000 	.word	0x58020000
 8001880:	58020800 	.word	0x58020800
 8001884:	58021800 	.word	0x58021800
 8001888:	58022800 	.word	0x58022800
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <MX_GPIO_Init+0x350>)
 800188e:	f003 fb91 	bl	8004fb4 <HAL_GPIO_Init>

}
 8001892:	bf00      	nop
 8001894:	3740      	adds	r7, #64	; 0x40
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	58022400 	.word	0x58022400

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <Error_Handler+0x8>
	...

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_MspInit+0x30>)
 80018b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018b8:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x30>)
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x30>)
 80018c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	58024400 	.word	0x58024400

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b090      	sub	sp, #64	; 0x40
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a72      	ldr	r2, [pc, #456]	; (8001ac8 <HAL_ADC_MspInit+0x1e8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d14e      	bne.n	80019a0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001902:	4b72      	ldr	r3, [pc, #456]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a70      	ldr	r2, [pc, #448]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 800190a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800190c:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d10e      	bne.n	8001932 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001914:	4b6e      	ldr	r3, [pc, #440]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001916:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800191a:	4a6d      	ldr	r2, [pc, #436]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 800191c:	f043 0320 	orr.w	r3, r3, #32
 8001920:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001924:	4b6a      	ldr	r3, [pc, #424]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001926:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001938:	4a65      	ldr	r2, [pc, #404]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001956:	4a5e      	ldr	r2, [pc, #376]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	623b      	str	r3, [r7, #32]
 800196c:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800196e:	2301      	movs	r3, #1
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001972:	2303      	movs	r3, #3
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	4854      	ldr	r0, [pc, #336]	; (8001ad4 <HAL_ADC_MspInit+0x1f4>)
 8001982:	f003 fb17 	bl	8004fb4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001986:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800198a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800198e:	f001 fa01 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001992:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001996:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800199a:	f001 f9fb 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800199e:	e08f      	b.n	8001ac0 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <HAL_ADC_MspInit+0x1f8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d133      	bne.n	8001a12 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019aa:	4b48      	ldr	r3, [pc, #288]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a46      	ldr	r2, [pc, #280]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 80019b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10e      	bne.n	80019da <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019bc:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c2:	4a43      	ldr	r2, [pc, #268]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e0:	4a3b      	ldr	r2, [pc, #236]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ea:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80019f8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019fc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001a00:	f001 f9c8 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001a04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a08:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a0c:	f001 f9c2 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001a10:	e056      	b.n	8001ac0 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a31      	ldr	r2, [pc, #196]	; (8001adc <HAL_ADC_MspInit+0x1fc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d151      	bne.n	8001ac0 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a22:	4a2b      	ldr	r2, [pc, #172]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <HAL_ADC_MspInit+0x200>)
 8001a8c:	f003 fa92 	bl	8004fb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a90:	2301      	movs	r3, #1
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a94:	2303      	movs	r3, #3
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <HAL_ADC_MspInit+0x1f4>)
 8001aa4:	f003 fa86 	bl	8004fb4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001aa8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001aac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001ab0:	f001 f970 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001ab4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001ab8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001abc:	f001 f96a 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001ac0:	bf00      	nop
 8001ac2:	3740      	adds	r7, #64	; 0x40
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	24000eb8 	.word	0x24000eb8
 8001ad0:	58024400 	.word	0x58024400
 8001ad4:	58020800 	.word	0x58020800
 8001ad8:	40022100 	.word	0x40022100
 8001adc:	58026000 	.word	0x58026000
 8001ae0:	58021400 	.word	0x58021400

08001ae4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b092      	sub	sp, #72	; 0x48
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a87      	ldr	r2, [pc, #540]	; (8001d20 <HAL_ETH_MspInit+0x23c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	f040 8108 	bne.w	8001d18 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001b08:	4b86      	ldr	r3, [pc, #536]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b0e:	4a85      	ldr	r2, [pc, #532]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b18:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001b26:	4b7f      	ldr	r3, [pc, #508]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b2c:	4a7d      	ldr	r2, [pc, #500]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b36:	4b7b      	ldr	r3, [pc, #492]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001b44:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b4a:	4a76      	ldr	r2, [pc, #472]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b54:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b68:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b72:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b80:	4b68      	ldr	r3, [pc, #416]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b86:	4a67      	ldr	r2, [pc, #412]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b90:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	4a5f      	ldr	r2, [pc, #380]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc2:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	4b52      	ldr	r3, [pc, #328]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be0:	4a50      	ldr	r2, [pc, #320]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bea:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c08:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001c34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c46:	230b      	movs	r3, #11
 8001c48:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4835      	ldr	r0, [pc, #212]	; (8001d28 <HAL_ETH_MspInit+0x244>)
 8001c52:	f003 f9af 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001c56:	2304      	movs	r3, #4
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c66:	230b      	movs	r3, #11
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c6e:	4619      	mov	r1, r3
 8001c70:	482e      	ldr	r0, [pc, #184]	; (8001d2c <HAL_ETH_MspInit+0x248>)
 8001c72:	f003 f99f 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c88:	230b      	movs	r3, #11
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c90:	4619      	mov	r1, r3
 8001c92:	4827      	ldr	r0, [pc, #156]	; (8001d30 <HAL_ETH_MspInit+0x24c>)
 8001c94:	f003 f98e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001c98:	233e      	movs	r3, #62	; 0x3e
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ca8:	230b      	movs	r3, #11
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4820      	ldr	r0, [pc, #128]	; (8001d34 <HAL_ETH_MspInit+0x250>)
 8001cb4:	f003 f97e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001cb8:	230c      	movs	r3, #12
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cc8:	230b      	movs	r3, #11
 8001cca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ccc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4819      	ldr	r0, [pc, #100]	; (8001d38 <HAL_ETH_MspInit+0x254>)
 8001cd4:	f003 f96e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001cd8:	2386      	movs	r3, #134	; 0x86
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ce8:	230b      	movs	r3, #11
 8001cea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4812      	ldr	r0, [pc, #72]	; (8001d3c <HAL_ETH_MspInit+0x258>)
 8001cf4:	f003 f95e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d08:	230b      	movs	r3, #11
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d10:	4619      	mov	r1, r3
 8001d12:	480b      	ldr	r0, [pc, #44]	; (8001d40 <HAL_ETH_MspInit+0x25c>)
 8001d14:	f003 f94e 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	3748      	adds	r7, #72	; 0x48
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40028000 	.word	0x40028000
 8001d24:	58024400 	.word	0x58024400
 8001d28:	58021800 	.word	0x58021800
 8001d2c:	58021000 	.word	0x58021000
 8001d30:	58022000 	.word	0x58022000
 8001d34:	58020800 	.word	0x58020800
 8001d38:	58021c00 	.word	0x58021c00
 8001d3c:	58020000 	.word	0x58020000
 8001d40:	58020400 	.word	0x58020400

08001d44 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0bc      	sub	sp, #240	; 0xf0
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d5c:	f107 0318 	add.w	r3, r7, #24
 8001d60:	22c0      	movs	r2, #192	; 0xc0
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f00a fe89 	bl	800ca7c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_FDCAN_MspInit+0x188>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d151      	bne.n	8001e18 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d88:	f107 0318 	add.w	r3, r7, #24
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f005 fe93 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001d98:	f7ff fd82 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d9c:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a4b      	ldr	r2, [pc, #300]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001da4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001da6:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10e      	bne.n	8001dcc <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001dae:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001db0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001db4:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001dbe:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001dc0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dcc:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	4a40      	ldr	r2, [pc, #256]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001dea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e04:	2309      	movs	r3, #9
 8001e06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4831      	ldr	r0, [pc, #196]	; (8001ed8 <HAL_FDCAN_MspInit+0x194>)
 8001e12:	f003 f8cf 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001e16:	e055      	b.n	8001ec4 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2f      	ldr	r2, [pc, #188]	; (8001edc <HAL_FDCAN_MspInit+0x198>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d150      	bne.n	8001ec4 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f005 fe3c 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001e46:	f7ff fd2b 	bl	80018a0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001e52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10e      	bne.n	8001e7a <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e62:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001e98:	f242 0320 	movw	r3, #8224	; 0x2020
 8001e9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <HAL_FDCAN_MspInit+0x19c>)
 8001ec0:	f003 f878 	bl	8004fb4 <HAL_GPIO_Init>
}
 8001ec4:	bf00      	nop
 8001ec6:	37f0      	adds	r7, #240	; 0xf0
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	4000a000 	.word	0x4000a000
 8001ed0:	24000ebc 	.word	0x24000ebc
 8001ed4:	58024400 	.word	0x58024400
 8001ed8:	58021c00 	.word	0x58021c00
 8001edc:	4000a400 	.word	0x4000a400
 8001ee0:	58020400 	.word	0x58020400

08001ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0ba      	sub	sp, #232	; 0xe8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	22c0      	movs	r2, #192	; 0xc0
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f00a fdb9 	bl	800ca7c <memset>
  if(hi2c->Instance==I2C4)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a27      	ldr	r2, [pc, #156]	; (8001fac <HAL_I2C_MspInit+0xc8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d146      	bne.n	8001fa2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001f14:	f04f 0210 	mov.w	r2, #16
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 fdc4 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f36:	f7ff fcb3 	bl	80018a0 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f58:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f60:	2312      	movs	r3, #18
 8001f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001f72:	2304      	movs	r3, #4
 8001f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <HAL_I2C_MspInit+0xd0>)
 8001f80:	f003 f818 	bl	8004fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	37e8      	adds	r7, #232	; 0xe8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	58001c00 	.word	0x58001c00
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	58020c00 	.word	0x58020c00

08001fb8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0be      	sub	sp, #248	; 0xf8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd0:	f107 0320 	add.w	r3, r7, #32
 8001fd4:	22c0      	movs	r2, #192	; 0xc0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00a fd4f 	bl	800ca7c <memset>
  if(hltdc->Instance==LTDC)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a66      	ldr	r2, [pc, #408]	; (800217c <HAL_LTDC_MspInit+0x1c4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f040 80c4 	bne.w	8002172 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001ffa:	23c0      	movs	r3, #192	; 0xc0
 8001ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002002:	2302      	movs	r3, #2
 8002004:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002006:	2302      	movs	r3, #2
 8002008:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800200a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800200e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002014:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201a:	f107 0320 	add.w	r3, r7, #32
 800201e:	4618      	mov	r0, r3
 8002020:	f005 fd4a 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 800202a:	f7ff fc39 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800202e:	4b54      	ldr	r3, [pc, #336]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002034:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002036:	f043 0308 	orr.w	r3, r3, #8
 800203a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800203e:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800204c:	4b4c      	ldr	r3, [pc, #304]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002052:	4a4b      	ldr	r2, [pc, #300]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002054:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205c:	4b48      	ldr	r3, [pc, #288]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800206a:	4b45      	ldr	r3, [pc, #276]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002070:	4a43      	ldr	r2, [pc, #268]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	4a3c      	ldr	r2, [pc, #240]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ac:	4a34      	ldr	r2, [pc, #208]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 80020ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80020c4:	23fc      	movs	r3, #252	; 0xfc
 80020c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020dc:	230e      	movs	r3, #14
 80020de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020e6:	4619      	mov	r1, r3
 80020e8:	4826      	ldr	r0, [pc, #152]	; (8002184 <HAL_LTDC_MspInit+0x1cc>)
 80020ea:	f002 ff63 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80020ee:	f24d 2303 	movw	r3, #53763	; 0xd203
 80020f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002108:	230e      	movs	r3, #14
 800210a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800210e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002112:	4619      	mov	r1, r3
 8002114:	481c      	ldr	r0, [pc, #112]	; (8002188 <HAL_LTDC_MspInit+0x1d0>)
 8002116:	f002 ff4d 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800211a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002134:	230e      	movs	r3, #14
 8002136:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800213a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800213e:	4619      	mov	r1, r3
 8002140:	4812      	ldr	r0, [pc, #72]	; (800218c <HAL_LTDC_MspInit+0x1d4>)
 8002142:	f002 ff37 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800214a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002160:	230e      	movs	r3, #14
 8002162:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002166:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800216a:	4619      	mov	r1, r3
 800216c:	4808      	ldr	r0, [pc, #32]	; (8002190 <HAL_LTDC_MspInit+0x1d8>)
 800216e:	f002 ff21 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	37f8      	adds	r7, #248	; 0xf8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	50001000 	.word	0x50001000
 8002180:	58024400 	.word	0x58024400
 8002184:	58022800 	.word	0x58022800
 8002188:	58022000 	.word	0x58022000
 800218c:	58022400 	.word	0x58022400
 8002190:	58021c00 	.word	0x58021c00

08002194 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0bc      	sub	sp, #240	; 0xf0
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ac:	f107 0318 	add.w	r3, r7, #24
 80021b0:	22c0      	movs	r2, #192	; 0xc0
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f00a fc61 	bl	800ca7c <memset>
  if(hqspi->Instance==QUADSPI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a56      	ldr	r2, [pc, #344]	; (8002318 <HAL_QSPI_MspInit+0x184>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	f040 80a5 	bne.w	8002310 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80021c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d6:	f107 0318 	add.w	r3, r7, #24
 80021da:	4618      	mov	r0, r3
 80021dc:	f005 fc6c 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80021e6:	f7ff fb5b 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021ea:	4b4c      	ldr	r3, [pc, #304]	; (800231c <HAL_QSPI_MspInit+0x188>)
 80021ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021f0:	4a4a      	ldr	r2, [pc, #296]	; (800231c <HAL_QSPI_MspInit+0x188>)
 80021f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80021fa:	4b48      	ldr	r3, [pc, #288]	; (800231c <HAL_QSPI_MspInit+0x188>)
 80021fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	4b44      	ldr	r3, [pc, #272]	; (800231c <HAL_QSPI_MspInit+0x188>)
 800220a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220e:	4a43      	ldr	r2, [pc, #268]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_QSPI_MspInit+0x188>)
 800221a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222c:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_QSPI_MspInit+0x188>)
 800222e:	f043 0320 	orr.w	r3, r3, #32
 8002232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224a:	4a34      	ldr	r2, [pc, #208]	; (800231c <HAL_QSPI_MspInit+0x188>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800227a:	230a      	movs	r3, #10
 800227c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002284:	4619      	mov	r1, r3
 8002286:	4826      	ldr	r0, [pc, #152]	; (8002320 <HAL_QSPI_MspInit+0x18c>)
 8002288:	f002 fe94 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800228c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022a6:	2309      	movs	r3, #9
 80022a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022b0:	4619      	mov	r1, r3
 80022b2:	481c      	ldr	r0, [pc, #112]	; (8002324 <HAL_QSPI_MspInit+0x190>)
 80022b4:	f002 fe7e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80022d2:	230a      	movs	r3, #10
 80022d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022dc:	4619      	mov	r1, r3
 80022de:	4811      	ldr	r0, [pc, #68]	; (8002324 <HAL_QSPI_MspInit+0x190>)
 80022e0:	f002 fe68 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022fe:	2309      	movs	r3, #9
 8002300:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002304:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002308:	4619      	mov	r1, r3
 800230a:	4807      	ldr	r0, [pc, #28]	; (8002328 <HAL_QSPI_MspInit+0x194>)
 800230c:	f002 fe52 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002310:	bf00      	nop
 8002312:	37f0      	adds	r7, #240	; 0xf0
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	52005000 	.word	0x52005000
 800231c:	58024400 	.word	0x58024400
 8002320:	58020400 	.word	0x58020400
 8002324:	58021400 	.word	0x58021400
 8002328:	58020c00 	.word	0x58020c00

0800232c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0b2      	sub	sp, #200	; 0xc8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	22c0      	movs	r2, #192	; 0xc0
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f00a fb9d 	bl	800ca7c <memset>
  if(hrtc->Instance==RTC)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_RTC_MspInit+0x5c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d119      	bne.n	8002380 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800234c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800235c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	4618      	mov	r0, r3
 8002366:	f005 fba7 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002370:	f7ff fa96 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RTC_MspInit+0x60>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_RTC_MspInit+0x60>)
 800237a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	37c8      	adds	r7, #200	; 0xc8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	58004000 	.word	0x58004000
 800238c:	58024400 	.word	0x58024400

08002390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0bc      	sub	sp, #240	; 0xf0
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a8:	f107 0318 	add.w	r3, r7, #24
 80023ac:	22c0      	movs	r2, #192	; 0xc0
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00a fb63 	bl	800ca7c <memset>
  if(hspi->Instance==SPI2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a55      	ldr	r2, [pc, #340]	; (8002510 <HAL_SPI_MspInit+0x180>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 80a3 	bne.w	8002508 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80023c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d2:	f107 0318 	add.w	r3, r7, #24
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 fb6e 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80023e2:	f7ff fa5d 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023e6:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_SPI_MspInit+0x184>)
 80023e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ec:	4a49      	ldr	r2, [pc, #292]	; (8002514 <HAL_SPI_MspInit+0x184>)
 80023ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_SPI_MspInit+0x184>)
 80023f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240a:	4a42      	ldr	r2, [pc, #264]	; (8002514 <HAL_SPI_MspInit+0x184>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002414:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002422:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002428:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <HAL_SPI_MspInit+0x184>)
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002440:	4b34      	ldr	r3, [pc, #208]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002446:	4a33      	ldr	r2, [pc, #204]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002450:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800245e:	2310      	movs	r3, #16
 8002460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002476:	2307      	movs	r3, #7
 8002478:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002480:	4619      	mov	r1, r3
 8002482:	4825      	ldr	r0, [pc, #148]	; (8002518 <HAL_SPI_MspInit+0x188>)
 8002484:	f002 fd96 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002488:	2308      	movs	r3, #8
 800248a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024a0:	2305      	movs	r3, #5
 80024a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024aa:	4619      	mov	r1, r3
 80024ac:	481b      	ldr	r0, [pc, #108]	; (800251c <HAL_SPI_MspInit+0x18c>)
 80024ae:	f002 fd81 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024b2:	2304      	movs	r3, #4
 80024b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ca:	2305      	movs	r3, #5
 80024cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024d4:	4619      	mov	r1, r3
 80024d6:	4812      	ldr	r0, [pc, #72]	; (8002520 <HAL_SPI_MspInit+0x190>)
 80024d8:	f002 fd6c 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f6:	2305      	movs	r3, #5
 80024f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002500:	4619      	mov	r1, r3
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_SPI_MspInit+0x188>)
 8002504:	f002 fd56 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002508:	bf00      	nop
 800250a:	37f0      	adds	r7, #240	; 0xf0
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40003800 	.word	0x40003800
 8002514:	58024400 	.word	0x58024400
 8002518:	58020400 	.word	0x58020400
 800251c:	58020c00 	.word	0x58020c00
 8002520:	58022000 	.word	0x58022000

08002524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0ba      	sub	sp, #232	; 0xe8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	22c0      	movs	r2, #192	; 0xc0
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f00a fa99 	bl	800ca7c <memset>
  if(huart->Instance==USART3)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a27      	ldr	r2, [pc, #156]	; (80025ec <HAL_UART_MspInit+0xc8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d146      	bne.n	80025e2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002554:	f04f 0202 	mov.w	r2, #2
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f005 faa4 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002576:	f7ff f993 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 800257c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 8002582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002586:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 800258c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 800259a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80025b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025d0:	2307      	movs	r3, #7
 80025d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	; (80025f4 <HAL_UART_MspInit+0xd0>)
 80025de:	f002 fce9 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025e2:	bf00      	nop
 80025e4:	37e8      	adds	r7, #232	; 0xe8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40004800 	.word	0x40004800
 80025f0:	58024400 	.word	0x58024400
 80025f4:	58020400 	.word	0x58020400

080025f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0ba      	sub	sp, #232	; 0xe8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	22c0      	movs	r2, #192	; 0xc0
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f00a fa2f 	bl	800ca7c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a30      	ldr	r2, [pc, #192]	; (80026e4 <HAL_PCD_MspInit+0xec>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d159      	bne.n	80026dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002628:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002634:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	4618      	mov	r0, r3
 8002642:	f005 fa39 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800264c:	f7ff f928 	bl	80018a0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002650:	f004 f982 	bl	8006958 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 8002656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265a:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8002686:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800268a:	4619      	mov	r1, r3
 800268c:	4817      	ldr	r0, [pc, #92]	; (80026ec <HAL_PCD_MspInit+0xf4>)
 800268e:	f002 fc91 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002692:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80026ac:	230a      	movs	r3, #10
 80026ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026b6:	4619      	mov	r1, r3
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <HAL_PCD_MspInit+0xf4>)
 80026ba:	f002 fc7b 	bl	8004fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 80026c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026c4:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 80026c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 80026d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80026dc:	bf00      	nop
 80026de:	37e8      	adds	r7, #232	; 0xe8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40080000 	.word	0x40080000
 80026e8:	58024400 	.word	0x58024400
 80026ec:	58020000 	.word	0x58020000

080026f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b0b8      	sub	sp, #224	; 0xe0
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <HAL_FMC_MspInit+0x15c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 8099 	bne.w	8002842 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002710:	4b4e      	ldr	r3, [pc, #312]	; (800284c <HAL_FMC_MspInit+0x15c>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	22c0      	movs	r2, #192	; 0xc0
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f00a f9ac 	bl	800ca7c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002730:	2300      	movs	r3, #0
 8002732:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	4618      	mov	r0, r3
 800273a:	f005 f9bd 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002744:	f7ff f8ac 	bl	80018a0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002748:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_FMC_MspInit+0x160>)
 800274a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800274e:	4a40      	ldr	r2, [pc, #256]	; (8002850 <HAL_FMC_MspInit+0x160>)
 8002750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002754:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002758:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_FMC_MspInit+0x160>)
 800275a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800275e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002766:	f64f 7383 	movw	r3, #65411	; 0xff83
 800276a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002780:	230c      	movs	r3, #12
 8002782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002786:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800278a:	4619      	mov	r1, r3
 800278c:	4831      	ldr	r0, [pc, #196]	; (8002854 <HAL_FMC_MspInit+0x164>)
 800278e:	f002 fc11 	bl	8004fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002792:	f248 1333 	movw	r3, #33075	; 0x8133
 8002796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ac:	230c      	movs	r3, #12
 80027ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027b6:	4619      	mov	r1, r3
 80027b8:	4827      	ldr	r0, [pc, #156]	; (8002858 <HAL_FMC_MspInit+0x168>)
 80027ba:	f002 fbfb 	bl	8004fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80027be:	f24c 7303 	movw	r3, #50947	; 0xc703
 80027c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027d8:	230c      	movs	r3, #12
 80027da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027e2:	4619      	mov	r1, r3
 80027e4:	481d      	ldr	r0, [pc, #116]	; (800285c <HAL_FMC_MspInit+0x16c>)
 80027e6:	f002 fbe5 	bl	8004fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80027ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80027ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002804:	230c      	movs	r3, #12
 8002806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800280a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800280e:	4619      	mov	r1, r3
 8002810:	4813      	ldr	r0, [pc, #76]	; (8002860 <HAL_FMC_MspInit+0x170>)
 8002812:	f002 fbcf 	bl	8004fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002816:	23e0      	movs	r3, #224	; 0xe0
 8002818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800282e:	230c      	movs	r3, #12
 8002830:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002838:	4619      	mov	r1, r3
 800283a:	480a      	ldr	r0, [pc, #40]	; (8002864 <HAL_FMC_MspInit+0x174>)
 800283c:	f002 fbba 	bl	8004fb4 <HAL_GPIO_Init>
 8002840:	e000      	b.n	8002844 <HAL_FMC_MspInit+0x154>
    return;
 8002842:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002844:	37e0      	adds	r7, #224	; 0xe0
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	24000ec0 	.word	0x24000ec0
 8002850:	58024400 	.word	0x58024400
 8002854:	58021000 	.word	0x58021000
 8002858:	58021800 	.word	0x58021800
 800285c:	58020c00 	.word	0x58020c00
 8002860:	58021400 	.word	0x58021400
 8002864:	58021c00 	.word	0x58021c00

08002868 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002870:	f7ff ff3e 	bl	80026f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0ba      	sub	sp, #232	; 0xe8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	22c0      	movs	r2, #192	; 0xc0
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f00a f8f5 	bl	800ca7c <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a45      	ldr	r2, [pc, #276]	; (80029ac <HAL_SAI_MspInit+0x130>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d13e      	bne.n	800291a <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800289c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	4618      	mov	r0, r3
 80028b2:	f005 f901 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80028bc:	f7fe fff0 	bl	80018a0 <Error_Handler>
    }

    if (SAI2_client == 0)
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10e      	bne.n	80028e6 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80028c8:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 80028ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ce:	4a39      	ldr	r2, [pc, #228]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 80028d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 80028da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80028e6:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	4a30      	ldr	r2, [pc, #192]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 80028ee:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80028f0:	23f0      	movs	r3, #240	; 0xf0
 80028f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002908:	230a      	movs	r3, #10
 800290a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800290e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002912:	4619      	mov	r1, r3
 8002914:	4828      	ldr	r0, [pc, #160]	; (80029b8 <HAL_SAI_MspInit+0x13c>)
 8002916:	f002 fb4d 	bl	8004fb4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a27      	ldr	r2, [pc, #156]	; (80029bc <HAL_SAI_MspInit+0x140>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d13f      	bne.n	80029a4 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002930:	2300      	movs	r3, #0
 8002932:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4618      	mov	r0, r3
 800293a:	f005 f8bd 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002944:	f7fe ffac 	bl	80018a0 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10e      	bne.n	800296e <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 8002952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 8002958:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800295c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 8002962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 8002976:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002992:	230a      	movs	r3, #10
 8002994:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002998:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800299c:	4619      	mov	r1, r3
 800299e:	4808      	ldr	r0, [pc, #32]	; (80029c0 <HAL_SAI_MspInit+0x144>)
 80029a0:	f002 fb08 	bl	8004fb4 <HAL_GPIO_Init>

    }
}
 80029a4:	bf00      	nop
 80029a6:	37e8      	adds	r7, #232	; 0xe8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40015c04 	.word	0x40015c04
 80029b0:	24000ec4 	.word	0x24000ec4
 80029b4:	58024400 	.word	0x58024400
 80029b8:	58022000 	.word	0x58022000
 80029bc:	40015c24 	.word	0x40015c24
 80029c0:	58021800 	.word	0x58021800

080029c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <NMI_Handler+0x4>

080029ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <HardFault_Handler+0x4>

080029d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <MemManage_Handler+0x4>

080029d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029da:	e7fe      	b.n	80029da <BusFault_Handler+0x4>

080029dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <UsageFault_Handler+0x4>

080029e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a10:	f000 f95c 	bl	8002ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <_sbrk+0x5c>)
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <_sbrk+0x60>)
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <_sbrk+0x64>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <_sbrk+0x68>)
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <_sbrk+0x64>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d207      	bcs.n	8002a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a48:	f009 ffe0 	bl	800ca0c <__errno>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	220c      	movs	r2, #12
 8002a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	e009      	b.n	8002a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <_sbrk+0x64>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <_sbrk+0x64>)
 8002a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	24080000 	.word	0x24080000
 8002a78:	00000400 	.word	0x00000400
 8002a7c:	24000ec8 	.word	0x24000ec8
 8002a80:	24000ee0 	.word	0x24000ee0

08002a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a88:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <SystemInit+0xe4>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	4a36      	ldr	r2, [pc, #216]	; (8002b68 <SystemInit+0xe4>)
 8002a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <SystemInit+0xe8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d807      	bhi.n	8002ab4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002aa4:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <SystemInit+0xe8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 030f 	bic.w	r3, r3, #15
 8002aac:	4a2f      	ldr	r2, [pc, #188]	; (8002b6c <SystemInit+0xe8>)
 8002aae:	f043 0307 	orr.w	r3, r3, #7
 8002ab2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <SystemInit+0xec>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <SystemInit+0xec>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <SystemInit+0xec>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <SystemInit+0xec>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4929      	ldr	r1, [pc, #164]	; (8002b70 <SystemInit+0xec>)
 8002acc:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <SystemInit+0xf0>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ad2:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <SystemInit+0xe8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <SystemInit+0xe8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 030f 	bic.w	r3, r3, #15
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <SystemInit+0xe8>)
 8002ae8:	f043 0307 	orr.w	r3, r3, #7
 8002aec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <SystemInit+0xec>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <SystemInit+0xec>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <SystemInit+0xec>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <SystemInit+0xec>)
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <SystemInit+0xf4>)
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <SystemInit+0xec>)
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <SystemInit+0xf8>)
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <SystemInit+0xec>)
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <SystemInit+0xfc>)
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <SystemInit+0xec>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <SystemInit+0xec>)
 8002b1a:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <SystemInit+0xfc>)
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <SystemInit+0xec>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <SystemInit+0xec>)
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <SystemInit+0xfc>)
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <SystemInit+0xec>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <SystemInit+0xec>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <SystemInit+0xec>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <SystemInit+0xec>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <SystemInit+0x100>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <SystemInit+0x104>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4e:	d202      	bcs.n	8002b56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <SystemInit+0x108>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <SystemInit+0x10c>)
 8002b58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00
 8002b6c:	52002000 	.word	0x52002000
 8002b70:	58024400 	.word	0x58024400
 8002b74:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b78:	02020200 	.word	0x02020200
 8002b7c:	01ff0000 	.word	0x01ff0000
 8002b80:	01010280 	.word	0x01010280
 8002b84:	5c001000 	.word	0x5c001000
 8002b88:	ffff0000 	.word	0xffff0000
 8002b8c:	51008108 	.word	0x51008108
 8002b90:	52004000 	.word	0x52004000

08002b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b98:	f7ff ff74 	bl	8002a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b9e:	490d      	ldr	r1, [pc, #52]	; (8002bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bb4:	4c0a      	ldr	r4, [pc, #40]	; (8002be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f009 ff29 	bl	800ca18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc6:	f7fd fd65 	bl	8000694 <main>
  bx  lr
 8002bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002bd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bd4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002bd8:	0800d4d4 	.word	0x0800d4d4
  ldr r2, =_sbss
 8002bdc:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8002be0:	24000ee0 	.word	0x24000ee0

08002be4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be4:	e7fe      	b.n	8002be4 <ADC3_IRQHandler>
	...

08002be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bee:	2003      	movs	r0, #3
 8002bf0:	f001 fa26 	bl	8004040 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bf4:	f004 fd8a 	bl	800770c <HAL_RCC_GetSysClockFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_Init+0x68>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	4913      	ldr	r1, [pc, #76]	; (8002c54 <HAL_Init+0x6c>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_Init+0x68>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <HAL_Init+0x6c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_Init+0x70>)
 8002c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <HAL_Init+0x74>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c32:	2000      	movs	r0, #0
 8002c34:	f000 f814 	bl	8002c60 <HAL_InitTick>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e002      	b.n	8002c48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c42:	f7fe fe33 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	58024400 	.word	0x58024400
 8002c54:	0800d458 	.word	0x0800d458
 8002c58:	24000004 	.word	0x24000004
 8002c5c:	24000000 	.word	0x24000000

08002c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_InitTick+0x60>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e021      	b.n	8002cb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_InitTick+0x64>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_InitTick+0x60>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 f9fd 	bl	800408a <HAL_SYSTICK_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00e      	b.n	8002cb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d80a      	bhi.n	8002cb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f001 f9d5 	bl	8004056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cac:	4a06      	ldr	r2, [pc, #24]	; (8002cc8 <HAL_InitTick+0x68>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2400000c 	.word	0x2400000c
 8002cc4:	24000000 	.word	0x24000000
 8002cc8:	24000008 	.word	0x24000008

08002ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x20>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_IncTick+0x24>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <HAL_IncTick+0x24>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	2400000c 	.word	0x2400000c
 8002cf0:	24000ecc 	.word	0x24000ecc

08002cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_GetTick+0x14>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	24000ecc 	.word	0x24000ecc

08002d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff ffee 	bl	8002cf4 <HAL_GetTick>
 8002d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d005      	beq.n	8002d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_Delay+0x44>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4413      	add	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d32:	bf00      	nop
 8002d34:	f7ff ffde 	bl	8002cf4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d8f7      	bhi.n	8002d34 <HAL_Delay+0x28>
  {
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2400000c 	.word	0x2400000c

08002d54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_GetREVID+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	5c001000 	.word	0x5c001000

08002d6c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d7c:	4904      	ldr	r1, [pc, #16]	; (8002d90 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	58000400 	.word	0x58000400

08002d94 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	401a      	ands	r2, r3
 8002da8:	4904      	ldr	r1, [pc, #16]	; (8002dbc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	58000400 	.word	0x58000400

08002dc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	611a      	str	r2, [r3, #16]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b087      	sub	sp, #28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3360      	adds	r3, #96	; 0x60
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	601a      	str	r2, [r3, #0]
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3330      	adds	r3, #48	; 0x30
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	4413      	add	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	211f      	movs	r1, #31
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	f003 011f 	and.w	r1, r3, #31
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	431a      	orrs	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3314      	adds	r3, #20
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0e5b      	lsrs	r3, r3, #25
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	4413      	add	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	0d1b      	lsrs	r3, r3, #20
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2107      	movs	r1, #7
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	0d1b      	lsrs	r3, r3, #20
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0318 	and.w	r3, r3, #24
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fa4:	40d9      	lsrs	r1, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	400b      	ands	r3, r1
 8002faa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	000fffff 	.word	0x000fffff

08002fc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6093      	str	r3, [r2, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	5fffffc0 	.word	0x5fffffc0

08002fec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003000:	d101      	bne.n	8003006 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <LL_ADC_EnableInternalRegulator+0x24>)
 8003022:	4013      	ands	r3, r2
 8003024:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	6fffffc0 	.word	0x6fffffc0

0800303c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003050:	d101      	bne.n	8003056 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <LL_ADC_IsEnabled+0x18>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <LL_ADC_IsEnabled+0x1a>
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b04      	cmp	r3, #4
 800309c:	d101      	bne.n	80030a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e18f      	b.n	8003412 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7fe fbed 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff67 	bl	8002fec <LL_ADC_IsDeepPowerDownEnabled>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff4d 	bl	8002fc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff82 	bl	800303c <LL_ADC_IsInternalRegulatorEnabled>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d114      	bne.n	8003168 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff66 	bl	8003014 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003148:	4b87      	ldr	r3, [pc, #540]	; (8003368 <HAL_ADC_Init+0x290>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	4a87      	ldr	r2, [pc, #540]	; (800336c <HAL_ADC_Init+0x294>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	3301      	adds	r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800315a:	e002      	b.n	8003162 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3b01      	subs	r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff65 	bl	800303c <LL_ADC_IsInternalRegulatorEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10d      	bne.n	8003194 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	f043 0210 	orr.w	r2, r3, #16
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff76 	bl	800308a <LL_ADC_REG_IsConversionOngoing>
 800319e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f040 8129 	bne.w	8003400 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 8125 	bne.w	8003400 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff4a 	bl	8003064 <LL_ADC_IsEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d136      	bne.n	8003244 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a65      	ldr	r2, [pc, #404]	; (8003370 <HAL_ADC_Init+0x298>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_ADC_Init+0x112>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a63      	ldr	r2, [pc, #396]	; (8003374 <HAL_ADC_Init+0x29c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10e      	bne.n	8003208 <HAL_ADC_Init+0x130>
 80031ea:	4861      	ldr	r0, [pc, #388]	; (8003370 <HAL_ADC_Init+0x298>)
 80031ec:	f7ff ff3a 	bl	8003064 <LL_ADC_IsEnabled>
 80031f0:	4604      	mov	r4, r0
 80031f2:	4860      	ldr	r0, [pc, #384]	; (8003374 <HAL_ADC_Init+0x29c>)
 80031f4:	f7ff ff36 	bl	8003064 <LL_ADC_IsEnabled>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4323      	orrs	r3, r4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e008      	b.n	800321a <HAL_ADC_Init+0x142>
 8003208:	485b      	ldr	r0, [pc, #364]	; (8003378 <HAL_ADC_Init+0x2a0>)
 800320a:	f7ff ff2b 	bl	8003064 <LL_ADC_IsEnabled>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d012      	beq.n	8003244 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a53      	ldr	r2, [pc, #332]	; (8003370 <HAL_ADC_Init+0x298>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_ADC_Init+0x15a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a51      	ldr	r2, [pc, #324]	; (8003374 <HAL_ADC_Init+0x29c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_ADC_Init+0x15e>
 8003232:	4a52      	ldr	r2, [pc, #328]	; (800337c <HAL_ADC_Init+0x2a4>)
 8003234:	e000      	b.n	8003238 <HAL_ADC_Init+0x160>
 8003236:	4a52      	ldr	r2, [pc, #328]	; (8003380 <HAL_ADC_Init+0x2a8>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7ff fdbe 	bl	8002dc0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003244:	f7ff fd86 	bl	8002d54 <HAL_GetREVID>
 8003248:	4603      	mov	r3, r0
 800324a:	f241 0203 	movw	r2, #4099	; 0x1003
 800324e:	4293      	cmp	r3, r2
 8003250:	d914      	bls.n	800327c <HAL_ADC_Init+0x1a4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b10      	cmp	r3, #16
 8003258:	d110      	bne.n	800327c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7d5b      	ldrb	r3, [r3, #21]
 800325e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003264:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800326a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7f1b      	ldrb	r3, [r3, #28]
 8003270:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003272:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003274:	f043 030c 	orr.w	r3, r3, #12
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e00d      	b.n	8003298 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7d5b      	ldrb	r3, [r3, #21]
 8003280:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003286:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800328c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7f1b      	ldrb	r3, [r3, #28]
 8003292:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7f1b      	ldrb	r3, [r3, #28]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d106      	bne.n	80032ae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	045b      	lsls	r3, r3, #17
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <HAL_ADC_Init+0x2ac>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	69b9      	ldr	r1, [r7, #24]
 80032da:	430b      	orrs	r3, r1
 80032dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fed1 	bl	800308a <LL_ADC_REG_IsConversionOngoing>
 80032e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fede 	bl	80030b0 <LL_ADC_INJ_IsConversionOngoing>
 80032f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d15f      	bne.n	80033bc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d15c      	bne.n	80033bc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7d1b      	ldrb	r3, [r3, #20]
 8003306:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_ADC_Init+0x2b0>)
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	430b      	orrs	r3, r1
 8003322:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800332a:	2b01      	cmp	r3, #1
 800332c:	d130      	bne.n	8003390 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_ADC_Init+0x2b4>)
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003342:	3a01      	subs	r2, #1
 8003344:	0411      	lsls	r1, r2, #16
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003350:	4311      	orrs	r1, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003356:	430a      	orrs	r2, r1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	611a      	str	r2, [r3, #16]
 8003364:	e01c      	b.n	80033a0 <HAL_ADC_Init+0x2c8>
 8003366:	bf00      	nop
 8003368:	24000000 	.word	0x24000000
 800336c:	053e2d63 	.word	0x053e2d63
 8003370:	40022000 	.word	0x40022000
 8003374:	40022100 	.word	0x40022100
 8003378:	58026000 	.word	0x58026000
 800337c:	40022300 	.word	0x40022300
 8003380:	58026300 	.word	0x58026300
 8003384:	fff0c003 	.word	0xfff0c003
 8003388:	ffffbffc 	.word	0xffffbffc
 800338c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fb80 	bl	8003abc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10c      	bne.n	80033de <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f023 010f 	bic.w	r1, r3, #15
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	1e5a      	subs	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
 80033dc:	e007      	b.n	80033ee <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 020f 	bic.w	r2, r2, #15
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	f043 0201 	orr.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
 80033fe:	e007      	b.n	8003410 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0210 	orr.w	r2, r3, #16
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003410:	7ffb      	ldrb	r3, [r7, #31]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}
 800341a:	bf00      	nop

0800341c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b0a1      	sub	sp, #132	; 0x84
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a9d      	ldr	r2, [pc, #628]	; (80036ac <HAL_ADC_ConfigChannel+0x290>)
 8003436:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x2a>
 8003442:	2302      	movs	r3, #2
 8003444:	e321      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x66e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fe19 	bl	800308a <LL_ADC_REG_IsConversionOngoing>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 8306 	bne.w	8003a6c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003468:	2b00      	cmp	r3, #0
 800346a:	d108      	bne.n	800347e <HAL_ADC_ConfigChannel+0x62>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	2201      	movs	r2, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	e016      	b.n	80034ac <HAL_ADC_ConfigChannel+0x90>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800348c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800348e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003496:	2320      	movs	r3, #32
 8003498:	e003      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800349a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	69d1      	ldr	r1, [r2, #28]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	430b      	orrs	r3, r1
 80034b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f7ff fd02 	bl	8002ed0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fdda 	bl	800308a <LL_ADC_REG_IsConversionOngoing>
 80034d6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fde7 	bl	80030b0 <LL_ADC_INJ_IsConversionOngoing>
 80034e2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 80b3 	bne.w	8003652 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 80af 	bne.w	8003652 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6819      	ldr	r1, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	461a      	mov	r2, r3
 8003502:	f7ff fd11 	bl	8002f28 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003506:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_ADC_ConfigChannel+0x294>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800350e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003512:	d10b      	bne.n	800352c <HAL_ADC_ConfigChannel+0x110>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	e01d      	b.n	8003568 <HAL_ADC_ConfigChannel+0x14c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10b      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x136>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	e00a      	b.n	8003568 <HAL_ADC_ConfigChannel+0x14c>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d027      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6919      	ldr	r1, [r3, #16]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003580:	f7ff fc52 	bl	8002e28 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6919      	ldr	r1, [r3, #16]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	7e5b      	ldrb	r3, [r3, #25]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d102      	bne.n	800359a <HAL_ADC_ConfigChannel+0x17e>
 8003594:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003598:	e000      	b.n	800359c <HAL_ADC_ConfigChannel+0x180>
 800359a:	2300      	movs	r3, #0
 800359c:	461a      	mov	r2, r3
 800359e:	f7ff fc7c 	bl	8002e9a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6919      	ldr	r1, [r3, #16]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	7e1b      	ldrb	r3, [r3, #24]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d102      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x19c>
 80035b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035b6:	e000      	b.n	80035ba <HAL_ADC_ConfigChannel+0x19e>
 80035b8:	2300      	movs	r3, #0
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7ff fc54 	bl	8002e68 <LL_ADC_SetDataRightShift>
 80035c0:	e047      	b.n	8003652 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	069b      	lsls	r3, r3, #26
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d107      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	069b      	lsls	r3, r3, #26
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d107      	bne.n	800360a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003608:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003610:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	069b      	lsls	r3, r3, #26
 800361a:	429a      	cmp	r2, r3
 800361c:	d107      	bne.n	800362e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800362c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003634:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	069b      	lsls	r3, r3, #26
 800363e:	429a      	cmp	r2, r3
 8003640:	d107      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003650:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fd04 	bl	8003064 <LL_ADC_IsEnabled>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 820d 	bne.w	8003a7e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	461a      	mov	r2, r3
 8003672:	f7ff fc85 	bl	8002f80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <HAL_ADC_ConfigChannel+0x290>)
 800367c:	4293      	cmp	r3, r2
 800367e:	f040 8133 	bne.w	80038e8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800368e:	2b00      	cmp	r3, #0
 8003690:	d110      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x298>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	3301      	adds	r3, #1
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2b09      	cmp	r3, #9
 80036a0:	bf94      	ite	ls
 80036a2:	2301      	movls	r3, #1
 80036a4:	2300      	movhi	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e01e      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x2cc>
 80036aa:	bf00      	nop
 80036ac:	47ff0000 	.word	0x47ff0000
 80036b0:	5c001000 	.word	0x5c001000
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80036c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80036c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80036cc:	2320      	movs	r3, #32
 80036ce:	e003      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80036d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2b09      	cmp	r3, #9
 80036e0:	bf94      	ite	ls
 80036e2:	2301      	movls	r3, #1
 80036e4:	2300      	movhi	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d079      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x2ec>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0e9b      	lsrs	r3, r3, #26
 80036fe:	3301      	adds	r3, #1
 8003700:	069b      	lsls	r3, r3, #26
 8003702:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003706:	e015      	b.n	8003734 <HAL_ADC_ConfigChannel+0x318>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003718:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800371a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003720:	2320      	movs	r3, #32
 8003722:	e003      	b.n	800372c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3301      	adds	r3, #1
 800372e:	069b      	lsls	r3, r3, #26
 8003730:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x338>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0e9b      	lsrs	r3, r3, #26
 8003746:	3301      	adds	r3, #1
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	2101      	movs	r1, #1
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	e017      	b.n	8003784 <HAL_ADC_ConfigChannel+0x368>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800376c:	2320      	movs	r3, #32
 800376e:	e003      	b.n	8003778 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	ea42 0103 	orr.w	r1, r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x38e>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	3301      	adds	r3, #1
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	051b      	lsls	r3, r3, #20
 80037a8:	e018      	b.n	80037dc <HAL_ADC_ConfigChannel+0x3c0>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80037bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e003      	b.n	80037ce <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037dc:	430b      	orrs	r3, r1
 80037de:	e07e      	b.n	80038de <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d107      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x3e0>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0e9b      	lsrs	r3, r3, #26
 80037f2:	3301      	adds	r3, #1
 80037f4:	069b      	lsls	r3, r3, #26
 80037f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037fa:	e015      	b.n	8003828 <HAL_ADC_ConfigChannel+0x40c>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003814:	2320      	movs	r3, #32
 8003816:	e003      	b.n	8003820 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3301      	adds	r3, #1
 8003822:	069b      	lsls	r3, r3, #26
 8003824:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x42c>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	3301      	adds	r3, #1
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2101      	movs	r1, #1
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	e017      	b.n	8003878 <HAL_ADC_ConfigChannel+0x45c>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	61bb      	str	r3, [r7, #24]
  return result;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e003      	b.n	800386c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	ea42 0103 	orr.w	r1, r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10d      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x488>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	3301      	adds	r3, #1
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4613      	mov	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	3b1e      	subs	r3, #30
 800389c:	051b      	lsls	r3, r3, #20
 800389e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038a2:	e01b      	b.n	80038dc <HAL_ADC_ConfigChannel+0x4c0>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	60fb      	str	r3, [r7, #12]
  return result;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e003      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	3b1e      	subs	r3, #30
 80038d6:	051b      	lsls	r3, r3, #20
 80038d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038dc:	430b      	orrs	r3, r1
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	6892      	ldr	r2, [r2, #8]
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7ff fb20 	bl	8002f28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f280 80c6 	bge.w	8003a7e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a67      	ldr	r2, [pc, #412]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_ADC_ConfigChannel+0x4ea>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a65      	ldr	r2, [pc, #404]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_ADC_ConfigChannel+0x4ee>
 8003906:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_ADC_ConfigChannel+0x680>)
 8003908:	e000      	b.n	800390c <HAL_ADC_ConfigChannel+0x4f0>
 800390a:	4b65      	ldr	r3, [pc, #404]	; (8003aa0 <HAL_ADC_ConfigChannel+0x684>)
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fa7d 	bl	8002e0c <LL_ADC_GetCommonPathInternalCh>
 8003912:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5e      	ldr	r2, [pc, #376]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x50c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5d      	ldr	r2, [pc, #372]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d10e      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x52a>
 8003928:	485a      	ldr	r0, [pc, #360]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 800392a:	f7ff fb9b 	bl	8003064 <LL_ADC_IsEnabled>
 800392e:	4604      	mov	r4, r0
 8003930:	4859      	ldr	r0, [pc, #356]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 8003932:	f7ff fb97 	bl	8003064 <LL_ADC_IsEnabled>
 8003936:	4603      	mov	r3, r0
 8003938:	4323      	orrs	r3, r4
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e008      	b.n	8003958 <HAL_ADC_ConfigChannel+0x53c>
 8003946:	4857      	ldr	r0, [pc, #348]	; (8003aa4 <HAL_ADC_ConfigChannel+0x688>)
 8003948:	f7ff fb8c 	bl	8003064 <LL_ADC_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d07d      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a51      	ldr	r2, [pc, #324]	; (8003aa8 <HAL_ADC_ConfigChannel+0x68c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d130      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x5ac>
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d12b      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a4b      	ldr	r2, [pc, #300]	; (8003aa4 <HAL_ADC_ConfigChannel+0x688>)
 8003976:	4293      	cmp	r3, r2
 8003978:	f040 8081 	bne.w	8003a7e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a44      	ldr	r2, [pc, #272]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_ADC_ConfigChannel+0x574>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a43      	ldr	r2, [pc, #268]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x578>
 8003990:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <HAL_ADC_ConfigChannel+0x680>)
 8003992:	e000      	b.n	8003996 <HAL_ADC_ConfigChannel+0x57a>
 8003994:	4a42      	ldr	r2, [pc, #264]	; (8003aa0 <HAL_ADC_ConfigChannel+0x684>)
 8003996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f7ff fa21 	bl	8002de6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039a4:	4b41      	ldr	r3, [pc, #260]	; (8003aac <HAL_ADC_ConfigChannel+0x690>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	4a41      	ldr	r2, [pc, #260]	; (8003ab0 <HAL_ADC_ConfigChannel+0x694>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	3301      	adds	r3, #1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039b8:	e002      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	3b01      	subs	r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f9      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039c6:	e05a      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a39      	ldr	r2, [pc, #228]	; (8003ab4 <HAL_ADC_ConfigChannel+0x698>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d11e      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x5f4>
 80039d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d119      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a30      	ldr	r2, [pc, #192]	; (8003aa4 <HAL_ADC_ConfigChannel+0x688>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d14b      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2a      	ldr	r2, [pc, #168]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_ADC_ConfigChannel+0x5de>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x5e2>
 80039fa:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <HAL_ADC_ConfigChannel+0x680>)
 80039fc:	e000      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x5e4>
 80039fe:	4a28      	ldr	r2, [pc, #160]	; (8003aa0 <HAL_ADC_ConfigChannel+0x684>)
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7ff f9ec 	bl	8002de6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a0e:	e036      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <HAL_ADC_ConfigChannel+0x69c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d131      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d12c      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <HAL_ADC_ConfigChannel+0x688>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d127      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_ADC_ConfigChannel+0x626>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x62a>
 8003a42:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <HAL_ADC_ConfigChannel+0x680>)
 8003a44:	e000      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x62c>
 8003a46:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_ADC_ConfigChannel+0x684>)
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4610      	mov	r0, r2
 8003a52:	f7ff f9c8 	bl	8002de6 <LL_ADC_SetCommonPathInternalCh>
 8003a56:	e012      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a6a:	e008      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3784      	adds	r7, #132	; 0x84
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd90      	pop	{r4, r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40022100 	.word	0x40022100
 8003a9c:	40022300 	.word	0x40022300
 8003aa0:	58026300 	.word	0x58026300
 8003aa4:	58026000 	.word	0x58026000
 8003aa8:	cb840000 	.word	0xcb840000
 8003aac:	24000000 	.word	0x24000000
 8003ab0:	053e2d63 	.word	0x053e2d63
 8003ab4:	c7520000 	.word	0xc7520000
 8003ab8:	cfb80000 	.word	0xcfb80000

08003abc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7a      	ldr	r2, [pc, #488]	; (8003cb4 <ADC_ConfigureBoostMode+0x1f8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <ADC_ConfigureBoostMode+0x1c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a79      	ldr	r2, [pc, #484]	; (8003cb8 <ADC_ConfigureBoostMode+0x1fc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d109      	bne.n	8003aec <ADC_ConfigureBoostMode+0x30>
 8003ad8:	4b78      	ldr	r3, [pc, #480]	; (8003cbc <ADC_ConfigureBoostMode+0x200>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e008      	b.n	8003afe <ADC_ConfigureBoostMode+0x42>
 8003aec:	4b74      	ldr	r3, [pc, #464]	; (8003cc0 <ADC_ConfigureBoostMode+0x204>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01c      	beq.n	8003b3c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b02:	f003 ff7d 	bl	8007a00 <HAL_RCC_GetHCLKFreq>
 8003b06:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b10:	d010      	beq.n	8003b34 <ADC_ConfigureBoostMode+0x78>
 8003b12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b16:	d873      	bhi.n	8003c00 <ADC_ConfigureBoostMode+0x144>
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d002      	beq.n	8003b24 <ADC_ConfigureBoostMode+0x68>
 8003b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b22:	d16d      	bne.n	8003c00 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	60fb      	str	r3, [r7, #12]
        break;
 8003b32:	e068      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	60fb      	str	r3, [r7, #12]
        break;
 8003b3a:	e064      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	f005 f9c2 	bl	8008ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8003b48:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b52:	d051      	beq.n	8003bf8 <ADC_ConfigureBoostMode+0x13c>
 8003b54:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b58:	d854      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b5a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b5e:	d047      	beq.n	8003bf0 <ADC_ConfigureBoostMode+0x134>
 8003b60:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b64:	d84e      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b66:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b6a:	d03d      	beq.n	8003be8 <ADC_ConfigureBoostMode+0x12c>
 8003b6c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b70:	d848      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b76:	d033      	beq.n	8003be0 <ADC_ConfigureBoostMode+0x124>
 8003b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b7c:	d842      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b7e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b82:	d029      	beq.n	8003bd8 <ADC_ConfigureBoostMode+0x11c>
 8003b84:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b88:	d83c      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b8a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b8e:	d01a      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003b90:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b94:	d836      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b96:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b9a:	d014      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003b9c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ba0:	d830      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba6:	d00e      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bac:	d82a      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003bae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003bb2:	d008      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003bb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003bb8:	d824      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bbe:	d002      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003bc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bc4:	d11e      	bne.n	8003c04 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	0c9b      	lsrs	r3, r3, #18
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	60fb      	str	r3, [r7, #12]
        break;
 8003bd6:	e016      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
        break;
 8003bde:	e012      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	60fb      	str	r3, [r7, #12]
        break;
 8003be6:	e00e      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	60fb      	str	r3, [r7, #12]
        break;
 8003bee:	e00a      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	09db      	lsrs	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
        break;
 8003bf6:	e006      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	60fb      	str	r3, [r7, #12]
        break;
 8003bfe:	e002      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c00:	bf00      	nop
 8003c02:	e000      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003c04:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003c06:	f7ff f8a5 	bl	8002d54 <HAL_GetREVID>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d815      	bhi.n	8003c40 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a2b      	ldr	r2, [pc, #172]	; (8003cc4 <ADC_ConfigureBoostMode+0x208>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d908      	bls.n	8003c2e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003c2c:	e03e      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c3c:	609a      	str	r2, [r3, #8]
}
 8003c3e:	e035      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <ADC_ConfigureBoostMode+0x20c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d808      	bhi.n	8003c60 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	e025      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <ADC_ConfigureBoostMode+0x210>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d80a      	bhi.n	8003c7e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	e016      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <ADC_ConfigureBoostMode+0x214>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d80a      	bhi.n	8003c9c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	e007      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40022000 	.word	0x40022000
 8003cb8:	40022100 	.word	0x40022100
 8003cbc:	40022300 	.word	0x40022300
 8003cc0:	58026300 	.word	0x58026300
 8003cc4:	01312d00 	.word	0x01312d00
 8003cc8:	005f5e10 	.word	0x005f5e10
 8003ccc:	00bebc20 	.word	0x00bebc20
 8003cd0:	017d7840 	.word	0x017d7840

08003cd4 <LL_ADC_IsEnabled>:
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <LL_ADC_IsEnabled+0x18>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <LL_ADC_IsEnabled+0x1a>
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_ADC_REG_IsConversionOngoing>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d101      	bne.n	8003d12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b09f      	sub	sp, #124	; 0x7c
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0be      	b.n	8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a5c      	ldr	r2, [pc, #368]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d102      	bne.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d58:	4b5b      	ldr	r3, [pc, #364]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	e001      	b.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e09d      	b.n	8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ffb9 	bl	8003cfa <LL_ADC_REG_IsConversionOngoing>
 8003d88:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ffb3 	bl	8003cfa <LL_ADC_REG_IsConversionOngoing>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d17f      	bne.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d17c      	bne.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a47      	ldr	r2, [pc, #284]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a46      	ldr	r2, [pc, #280]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d101      	bne.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003db4:	4b45      	ldr	r3, [pc, #276]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003db6:	e000      	b.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003db8:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003dba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d039      	beq.n	8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a3a      	ldr	r2, [pc, #232]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a38      	ldr	r2, [pc, #224]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10e      	bne.n	8003e08 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003dea:	4836      	ldr	r0, [pc, #216]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dec:	f7ff ff72 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003df0:	4604      	mov	r4, r0
 8003df2:	4835      	ldr	r0, [pc, #212]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003df4:	f7ff ff6e 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4323      	orrs	r3, r4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e008      	b.n	8003e1a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003e08:	4832      	ldr	r0, [pc, #200]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e0a:	f7ff ff63 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d047      	beq.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	6811      	ldr	r1, [r2, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	6892      	ldr	r2, [r2, #8]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	431a      	orrs	r2, r3
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e36:	e03a      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10e      	bne.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e58:	481a      	ldr	r0, [pc, #104]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e5a:	f7ff ff3b 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4819      	ldr	r0, [pc, #100]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e62:	f7ff ff37 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003e66:	4603      	mov	r3, r0
 8003e68:	4323      	orrs	r3, r4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	e008      	b.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e76:	4817      	ldr	r0, [pc, #92]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e78:	f7ff ff2c 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e96:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e98:	e009      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003eac:	e000      	b.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003eb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	377c      	adds	r7, #124	; 0x7c
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd90      	pop	{r4, r7, pc}
 8003ec4:	40022000 	.word	0x40022000
 8003ec8:	40022100 	.word	0x40022100
 8003ecc:	40022300 	.word	0x40022300
 8003ed0:	58026300 	.word	0x58026300
 8003ed4:	58026000 	.word	0x58026000
 8003ed8:	fffff0e0 	.word	0xfffff0e0

08003edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <__NVIC_SetPriorityGrouping+0x40>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <__NVIC_SetPriorityGrouping+0x44>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f0a:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <__NVIC_SetPriorityGrouping+0x40>)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	60d3      	str	r3, [r2, #12]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00
 8003f20:	05fa0000 	.word	0x05fa0000

08003f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <__NVIC_GetPriorityGrouping+0x18>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 0307 	and.w	r3, r3, #7
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
         );
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800400c:	d301      	bcc.n	8004012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400e:	2301      	movs	r3, #1
 8004010:	e00f      	b.n	8004032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <SysTick_Config+0x40>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401a:	210f      	movs	r1, #15
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	f7ff ff8e 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <SysTick_Config+0x40>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <SysTick_Config+0x40>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	e000e010 	.word	0xe000e010

08004040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff47 	bl	8003edc <__NVIC_SetPriorityGrouping>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	4603      	mov	r3, r0
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004064:	f7ff ff5e 	bl	8003f24 <__NVIC_GetPriorityGrouping>
 8004068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff90 	bl	8003f94 <NVIC_EncodePriority>
 8004074:	4602      	mov	r2, r0
 8004076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff5f 	bl	8003f40 <__NVIC_SetPriority>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffb2 	bl	8003ffc <SysTick_Config>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0cf      	b.n	8004256 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2223      	movs	r2, #35	; 0x23
 80040c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fd fd0b 	bl	8001ae4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ce:	4b64      	ldr	r3, [pc, #400]	; (8004260 <HAL_ETH_Init+0x1bc>)
 80040d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040d4:	4a62      	ldr	r2, [pc, #392]	; (8004260 <HAL_ETH_Init+0x1bc>)
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040de:	4b60      	ldr	r3, [pc, #384]	; (8004260 <HAL_ETH_Init+0x1bc>)
 80040e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7a1b      	ldrb	r3, [r3, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fe fe39 	bl	8002d6c <HAL_SYSCFG_ETHInterfaceSelect>
 80040fa:	e003      	b.n	8004104 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80040fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004100:	f7fe fe34 	bl	8002d6c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004104:	4b57      	ldr	r3, [pc, #348]	; (8004264 <HAL_ETH_Init+0x1c0>)
 8004106:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800411e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004120:	f7fe fde8 	bl	8002cf4 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004126:	e011      	b.n	800414c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004128:	f7fe fde4 	bl	8002cf4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004136:	d909      	bls.n	800414c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2204      	movs	r2, #4
 800413c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	22e0      	movs	r2, #224	; 0xe0
 8004144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e084      	b.n	8004256 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e4      	bne.n	8004128 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f886 	bl	8004270 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004164:	f003 fc4c 	bl	8007a00 <HAL_RCC_GetHCLKFreq>
 8004168:	4603      	mov	r3, r0
 800416a:	4a3f      	ldr	r2, [pc, #252]	; (8004268 <HAL_ETH_Init+0x1c4>)
 800416c:	fba2 2303 	umull	r2, r3, r2, r3
 8004170:	0c9a      	lsrs	r2, r3, #18
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3a01      	subs	r2, #1
 8004178:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fa71 	bl	8004664 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800418e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800419a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800419e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	22e0      	movs	r2, #224	; 0xe0
 80041ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e049      	b.n	8004256 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80041ce:	4b27      	ldr	r3, [pc, #156]	; (800426c <HAL_ETH_Init+0x1c8>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6952      	ldr	r2, [r2, #20]
 80041d6:	0051      	lsls	r1, r2, #1
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	430b      	orrs	r3, r1
 80041de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fad9 	bl	800479e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fb1f 	bl	8004830 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	3305      	adds	r3, #5
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	3304      	adds	r3, #4
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	3303      	adds	r3, #3
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	061a      	lsls	r2, r3, #24
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	3302      	adds	r3, #2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	3301      	adds	r3, #1
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004230:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800423e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004240:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2210      	movs	r2, #16
 8004250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	58024400 	.word	0x58024400
 8004264:	58000400 	.word	0x58000400
 8004268:	431bde83 	.word	0x431bde83
 800426c:	ffff8001 	.word	0xffff8001

08004270 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004280:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004288:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800428a:	f003 fbb9 	bl	8007a00 <HAL_RCC_GetHCLKFreq>
 800428e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d908      	bls.n	80042aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d804      	bhi.n	80042aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e027      	b.n	80042fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d908      	bls.n	80042c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4a17      	ldr	r2, [pc, #92]	; (8004314 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d204      	bcs.n	80042c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e01a      	b.n	80042fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a13      	ldr	r2, [pc, #76]	; (8004314 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d303      	bcc.n	80042d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a12      	ldr	r2, [pc, #72]	; (8004318 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d911      	bls.n	80042f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d908      	bls.n	80042ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4a0f      	ldr	r2, [pc, #60]	; (800431c <HAL_ETH_SetMDIOClockRange+0xac>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d804      	bhi.n	80042ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e005      	b.n	80042fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e000      	b.n	80042fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80042f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	01312cff 	.word	0x01312cff
 8004310:	02160ebf 	.word	0x02160ebf
 8004314:	03938700 	.word	0x03938700
 8004318:	05f5e0ff 	.word	0x05f5e0ff
 800431c:	08f0d17f 	.word	0x08f0d17f

08004320 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004332:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	791b      	ldrb	r3, [r3, #4]
 8004338:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800433a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	7b1b      	ldrb	r3, [r3, #12]
 8004340:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004342:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	7b5b      	ldrb	r3, [r3, #13]
 8004348:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800434a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	7b9b      	ldrb	r3, [r3, #14]
 8004350:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004352:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	7bdb      	ldrb	r3, [r3, #15]
 8004358:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800435a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	7c12      	ldrb	r2, [r2, #16]
 8004360:	2a00      	cmp	r2, #0
 8004362:	d102      	bne.n	800436a <ETH_SetMACConfig+0x4a>
 8004364:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004368:	e000      	b.n	800436c <ETH_SetMACConfig+0x4c>
 800436a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800436c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	7c52      	ldrb	r2, [r2, #17]
 8004372:	2a00      	cmp	r2, #0
 8004374:	d102      	bne.n	800437c <ETH_SetMACConfig+0x5c>
 8004376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800437a:	e000      	b.n	800437e <ETH_SetMACConfig+0x5e>
 800437c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800437e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	7c9b      	ldrb	r3, [r3, #18]
 8004384:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004386:	431a      	orrs	r2, r3
               macconf->Speed |
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800438c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004392:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	7f1b      	ldrb	r3, [r3, #28]
 8004398:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800439a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	7f5b      	ldrb	r3, [r3, #29]
 80043a0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80043a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	7f92      	ldrb	r2, [r2, #30]
 80043a8:	2a00      	cmp	r2, #0
 80043aa:	d102      	bne.n	80043b2 <ETH_SetMACConfig+0x92>
 80043ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043b0:	e000      	b.n	80043b4 <ETH_SetMACConfig+0x94>
 80043b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80043b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	7fdb      	ldrb	r3, [r3, #31]
 80043ba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80043bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80043c4:	2a00      	cmp	r2, #0
 80043c6:	d102      	bne.n	80043ce <ETH_SetMACConfig+0xae>
 80043c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043cc:	e000      	b.n	80043d0 <ETH_SetMACConfig+0xb0>
 80043ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80043d0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80043d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043de:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80043e0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b56      	ldr	r3, [pc, #344]	; (800454c <ETH_SetMACConfig+0x22c>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	68f9      	ldr	r1, [r7, #12]
 80043fa:	430b      	orrs	r3, r1
 80043fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800440a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800440c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004414:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004416:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800441e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004420:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004428:	2a00      	cmp	r2, #0
 800442a:	d102      	bne.n	8004432 <ETH_SetMACConfig+0x112>
 800442c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004430:	e000      	b.n	8004434 <ETH_SetMACConfig+0x114>
 8004432:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004434:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4b42      	ldr	r3, [pc, #264]	; (8004550 <ETH_SetMACConfig+0x230>)
 8004446:	4013      	ands	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	430b      	orrs	r3, r1
 8004450:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004458:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <ETH_SetMACConfig+0x234>)
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	68f9      	ldr	r1, [r7, #12]
 8004472:	430b      	orrs	r3, r1
 8004474:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800447c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004482:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800448a:	2a00      	cmp	r2, #0
 800448c:	d101      	bne.n	8004492 <ETH_SetMACConfig+0x172>
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	e000      	b.n	8004494 <ETH_SetMACConfig+0x174>
 8004492:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004494:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80044aa:	4013      	ands	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	68f9      	ldr	r1, [r7, #12]
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80044bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80044c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f023 0103 	bic.w	r1, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	430a      	orrs	r2, r1
 80044de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80044ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004506:	2a00      	cmp	r2, #0
 8004508:	d101      	bne.n	800450e <ETH_SetMACConfig+0x1ee>
 800450a:	2240      	movs	r2, #64	; 0x40
 800450c:	e000      	b.n	8004510 <ETH_SetMACConfig+0x1f0>
 800450e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004510:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004518:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800451a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004522:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004530:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	430a      	orrs	r2, r1
 800453c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	00048083 	.word	0x00048083
 8004550:	c0f88000 	.word	0xc0f88000
 8004554:	fffffef0 	.word	0xfffffef0

08004558 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b38      	ldr	r3, [pc, #224]	; (8004650 <ETH_SetDMAConfig+0xf8>)
 800456e:	4013      	ands	r3, r2
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6811      	ldr	r1, [r2, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	430b      	orrs	r3, r1
 800457a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800457e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	791b      	ldrb	r3, [r3, #4]
 8004584:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800458a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	7b1b      	ldrb	r3, [r3, #12]
 8004590:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <ETH_SetDMAConfig+0xfc>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	68f9      	ldr	r1, [r7, #12]
 80045aa:	430b      	orrs	r3, r1
 80045ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045b0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	7b5b      	ldrb	r3, [r3, #13]
 80045b6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80045cc:	4b22      	ldr	r3, [pc, #136]	; (8004658 <ETH_SetDMAConfig+0x100>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	68f9      	ldr	r1, [r7, #12]
 80045d6:	430b      	orrs	r3, r1
 80045d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	7d1b      	ldrb	r3, [r3, #20]
 80045e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80045ea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	7f5b      	ldrb	r3, [r3, #29]
 80045f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004602:	4b16      	ldr	r3, [pc, #88]	; (800465c <ETH_SetDMAConfig+0x104>)
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	430b      	orrs	r3, r1
 800460e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004612:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	7f1b      	ldrb	r3, [r3, #28]
 800461a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <ETH_SetDMAConfig+0x108>)
 8004632:	4013      	ands	r3, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	68f9      	ldr	r1, [r7, #12]
 800463a:	430b      	orrs	r3, r1
 800463c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004640:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	ffff87fd 	.word	0xffff87fd
 8004654:	ffff2ffe 	.word	0xffff2ffe
 8004658:	fffec000 	.word	0xfffec000
 800465c:	ffc0efef 	.word	0xffc0efef
 8004660:	7fc0ffff 	.word	0x7fc0ffff

08004664 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b0a4      	sub	sp, #144	; 0x90
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004672:	2300      	movs	r3, #0
 8004674:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004676:	2300      	movs	r3, #0
 8004678:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80046a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80046bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80046c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80046c8:	2300      	movs	r3, #0
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80046de:	2300      	movs	r3, #0
 80046e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80046e6:	2300      	movs	r3, #0
 80046e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80046fc:	2320      	movs	r3, #32
 80046fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800470e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004718:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004720:	2302      	movs	r3, #2
 8004722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800472c:	2300      	movs	r3, #0
 800472e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800473e:	2300      	movs	r3, #0
 8004740:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fde6 	bl	8004320 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004754:	2301      	movs	r3, #1
 8004756:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004758:	2301      	movs	r3, #1
 800475a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004760:	2300      	movs	r3, #0
 8004762:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004766:	2300      	movs	r3, #0
 8004768:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800476a:	2300      	movs	r3, #0
 800476c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800476e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004772:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004778:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800477c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800477e:	2300      	movs	r3, #0
 8004780:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004784:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fee1 	bl	8004558 <ETH_SetDMAConfig>
}
 8004796:	bf00      	nop
 8004798:	3790      	adds	r7, #144	; 0x90
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e01d      	b.n	80047e8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68d9      	ldr	r1, [r3, #12]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4613      	mov	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	440b      	add	r3, r1
 80047bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2200      	movs	r2, #0
 80047c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2200      	movs	r2, #0
 80047d4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	3206      	adds	r2, #6
 80047de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d9de      	bls.n	80047ac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fc:	461a      	mov	r2, r3
 80047fe:	2303      	movs	r3, #3
 8004800:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004820:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e023      	b.n	8004886 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6919      	ldr	r1, [r3, #16]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	440b      	add	r3, r1
 800484e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2200      	movs	r2, #0
 800485a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	3212      	adds	r2, #18
 800487c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d9d8      	bls.n	800483e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b2:	461a      	mov	r2, r3
 80048b4:	2303      	movs	r3, #3
 80048b6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b098      	sub	sp, #96	; 0x60
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80048f4:	4a84      	ldr	r2, [pc, #528]	; (8004b08 <HAL_FDCAN_Init+0x21c>)
 80048f6:	f107 030c 	add.w	r3, r7, #12
 80048fa:	4611      	mov	r1, r2
 80048fc:	224c      	movs	r2, #76	; 0x4c
 80048fe:	4618      	mov	r0, r3
 8004900:	f008 f8ae 	bl	800ca60 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e1c6      	b.n	8004c9c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7e      	ldr	r2, [pc, #504]	; (8004b0c <HAL_FDCAN_Init+0x220>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d106      	bne.n	8004926 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004920:	461a      	mov	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fd fa02 	bl	8001d44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0210 	bic.w	r2, r2, #16
 800494e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004950:	f7fe f9d0 	bl	8002cf4 <HAL_GetTick>
 8004954:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004956:	e014      	b.n	8004982 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004958:	f7fe f9cc 	bl	8002cf4 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b0a      	cmp	r3, #10
 8004964:	d90d      	bls.n	8004982 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e18c      	b.n	8004c9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b08      	cmp	r3, #8
 800498e:	d0e3      	beq.n	8004958 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a0:	f7fe f9a8 	bl	8002cf4 <HAL_GetTick>
 80049a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80049a6:	e014      	b.n	80049d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80049a8:	f7fe f9a4 	bl	8002cf4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b0a      	cmp	r3, #10
 80049b4:	d90d      	bls.n	80049d2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049bc:	f043 0201 	orr.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2203      	movs	r2, #3
 80049ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e164      	b.n	8004c9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0e3      	beq.n	80049a8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0202 	orr.w	r2, r2, #2
 80049ee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	7c1b      	ldrb	r3, [r3, #16]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d108      	bne.n	8004a0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a06:	619a      	str	r2, [r3, #24]
 8004a08:	e007      	b.n	8004a1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7c5b      	ldrb	r3, [r3, #17]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d108      	bne.n	8004a34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699a      	ldr	r2, [r3, #24]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a30:	619a      	str	r2, [r3, #24]
 8004a32:	e007      	b.n	8004a44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7c9b      	ldrb	r3, [r3, #18]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d108      	bne.n	8004a5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a5a:	619a      	str	r2, [r3, #24]
 8004a5c:	e007      	b.n	8004a6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004a92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0210 	bic.w	r2, r2, #16
 8004aa2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d108      	bne.n	8004abe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0204 	orr.w	r2, r2, #4
 8004aba:	619a      	str	r2, [r3, #24]
 8004abc:	e030      	b.n	8004b20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02c      	beq.n	8004b20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d020      	beq.n	8004b10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004adc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0210 	orr.w	r2, r2, #16
 8004aec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d114      	bne.n	8004b20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699a      	ldr	r2, [r3, #24]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0220 	orr.w	r2, r2, #32
 8004b04:	619a      	str	r2, [r3, #24]
 8004b06:	e00b      	b.n	8004b20 <HAL_FDCAN_Init+0x234>
 8004b08:	0800d40c 	.word	0x0800d40c
 8004b0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0220 	orr.w	r2, r2, #32
 8004b1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b54:	d115      	bne.n	8004b82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	3b01      	subs	r3, #1
 8004b62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	3b01      	subs	r3, #1
 8004b78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba8:	4413      	add	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d011      	beq.n	8004bd2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004bb6:	f023 0107 	bic.w	r1, r3, #7
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	3360      	adds	r3, #96	; 0x60
 8004bc2:	443b      	add	r3, r7
 8004bc4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d011      	beq.n	8004bfe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004be2:	f023 0107 	bic.w	r1, r3, #7
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	3360      	adds	r3, #96	; 0x60
 8004bee:	443b      	add	r3, r7
 8004bf0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d012      	beq.n	8004c2c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c0e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	3360      	adds	r3, #96	; 0x60
 8004c1a:	443b      	add	r3, r7
 8004c1c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d012      	beq.n	8004c5a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c3c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	3360      	adds	r3, #96	; 0x60
 8004c48:	443b      	add	r3, r7
 8004c4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c4e:	021a      	lsls	r2, r3, #8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <HAL_FDCAN_Init+0x3b8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d107      	bne.n	8004c74 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f022 0203 	bic.w	r2, r2, #3
 8004c72:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f80b 	bl	8004ca8 <FDCAN_CalcultateRamBlockAddresses>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004c98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3760      	adds	r7, #96	; 0x60
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	4000a000 	.word	0x4000a000

08004ca8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004cbe:	4ba7      	ldr	r3, [pc, #668]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	0091      	lsls	r1, r2, #2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	041a      	lsls	r2, r3, #16
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cfe:	4b97      	ldr	r3, [pc, #604]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	0091      	lsls	r1, r2, #2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	041a      	lsls	r2, r3, #16
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004d40:	4b86      	ldr	r3, [pc, #536]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	0091      	lsls	r1, r2, #2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	041a      	lsls	r2, r3, #16
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d88:	4b74      	ldr	r3, [pc, #464]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	0091      	lsls	r1, r2, #2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004da2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004daa:	041a      	lsls	r2, r3, #16
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004dd0:	4b62      	ldr	r3, [pc, #392]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	0091      	lsls	r1, r2, #2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	4413      	add	r3, r2
 8004df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004dfc:	4b57      	ldr	r3, [pc, #348]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	0091      	lsls	r1, r2, #2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e16:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	041a      	lsls	r2, r3, #16
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4413      	add	r3, r2
 8004e34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004e3e:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	0091      	lsls	r1, r2, #2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e58:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e60:	041a      	lsls	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e74:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7c:	061a      	lsls	r2, r3, #24
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8c:	4b34      	ldr	r3, [pc, #208]	; (8004f60 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004e8e:	4413      	add	r3, r2
 8004e90:	009a      	lsls	r2, r3, #2
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004ec2:	fb01 f303 	mul.w	r3, r1, r3
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	441a      	add	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d915      	bls.n	8004f84 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004f58:	e006      	b.n	8004f68 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004f5a:	bf00      	nop
 8004f5c:	ffff0003 	.word	0xffff0003
 8004f60:	10002b00 	.word	0x10002b00
 8004f64:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e010      	b.n	8004fa6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e005      	b.n	8004f98 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3304      	adds	r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d3f3      	bcc.n	8004f8c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop

08004fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004fc2:	4b89      	ldr	r3, [pc, #548]	; (80051e8 <HAL_GPIO_Init+0x234>)
 8004fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fc6:	e194      	b.n	80052f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	2101      	movs	r1, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 8186 	beq.w	80052ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d005      	beq.n	8004ff8 <HAL_GPIO_Init+0x44>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d130      	bne.n	800505a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	2203      	movs	r2, #3
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800502e:	2201      	movs	r2, #1
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	f003 0201 	and.w	r2, r3, #1
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b03      	cmp	r3, #3
 8005064:	d017      	beq.n	8005096 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	2203      	movs	r2, #3
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d123      	bne.n	80050ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	08da      	lsrs	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3208      	adds	r2, #8
 80050aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	220f      	movs	r2, #15
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	08da      	lsrs	r2, r3, #3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3208      	adds	r2, #8
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	2203      	movs	r2, #3
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f003 0203 	and.w	r2, r3, #3
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80e0 	beq.w	80052ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800512c:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <HAL_GPIO_Init+0x238>)
 800512e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005132:	4a2e      	ldr	r2, [pc, #184]	; (80051ec <HAL_GPIO_Init+0x238>)
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800513c:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <HAL_GPIO_Init+0x238>)
 800513e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800514a:	4a29      	ldr	r2, [pc, #164]	; (80051f0 <HAL_GPIO_Init+0x23c>)
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	3302      	adds	r3, #2
 8005152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	220f      	movs	r2, #15
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <HAL_GPIO_Init+0x240>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d052      	beq.n	800521c <HAL_GPIO_Init+0x268>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HAL_GPIO_Init+0x244>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <HAL_GPIO_Init+0x22e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_GPIO_Init+0x248>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d02b      	beq.n	80051de <HAL_GPIO_Init+0x22a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <HAL_GPIO_Init+0x24c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d025      	beq.n	80051da <HAL_GPIO_Init+0x226>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <HAL_GPIO_Init+0x250>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01f      	beq.n	80051d6 <HAL_GPIO_Init+0x222>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <HAL_GPIO_Init+0x254>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d019      	beq.n	80051d2 <HAL_GPIO_Init+0x21e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1a      	ldr	r2, [pc, #104]	; (800520c <HAL_GPIO_Init+0x258>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_GPIO_Init+0x21a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a19      	ldr	r2, [pc, #100]	; (8005210 <HAL_GPIO_Init+0x25c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00d      	beq.n	80051ca <HAL_GPIO_Init+0x216>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <HAL_GPIO_Init+0x260>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <HAL_GPIO_Init+0x212>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <HAL_GPIO_Init+0x264>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <HAL_GPIO_Init+0x20e>
 80051be:	2309      	movs	r3, #9
 80051c0:	e02d      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051c2:	230a      	movs	r3, #10
 80051c4:	e02b      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051c6:	2308      	movs	r3, #8
 80051c8:	e029      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051ca:	2307      	movs	r3, #7
 80051cc:	e027      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051ce:	2306      	movs	r3, #6
 80051d0:	e025      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051d2:	2305      	movs	r3, #5
 80051d4:	e023      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051d6:	2304      	movs	r3, #4
 80051d8:	e021      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051da:	2303      	movs	r3, #3
 80051dc:	e01f      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051de:	2302      	movs	r3, #2
 80051e0:	e01d      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e01b      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051e6:	bf00      	nop
 80051e8:	58000080 	.word	0x58000080
 80051ec:	58024400 	.word	0x58024400
 80051f0:	58000400 	.word	0x58000400
 80051f4:	58020000 	.word	0x58020000
 80051f8:	58020400 	.word	0x58020400
 80051fc:	58020800 	.word	0x58020800
 8005200:	58020c00 	.word	0x58020c00
 8005204:	58021000 	.word	0x58021000
 8005208:	58021400 	.word	0x58021400
 800520c:	58021800 	.word	0x58021800
 8005210:	58021c00 	.word	0x58021c00
 8005214:	58022000 	.word	0x58022000
 8005218:	58022400 	.word	0x58022400
 800521c:	2300      	movs	r3, #0
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	f002 0203 	and.w	r2, r2, #3
 8005224:	0092      	lsls	r2, r2, #2
 8005226:	4093      	lsls	r3, r2
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800522e:	4938      	ldr	r1, [pc, #224]	; (8005310 <HAL_GPIO_Init+0x35c>)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	3302      	adds	r3, #2
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	43db      	mvns	r3, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800526a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	43db      	mvns	r3, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	43db      	mvns	r3, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4013      	ands	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3301      	adds	r3, #1
 80052f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f47f ae63 	bne.w	8004fc8 <HAL_GPIO_Init+0x14>
  }
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	3724      	adds	r7, #36	; 0x24
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	58000400 	.word	0x58000400

08005314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	887b      	ldrh	r3, [r7, #2]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
 8005330:	e001      	b.n	8005336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	807b      	strh	r3, [r7, #2]
 8005350:	4613      	mov	r3, r2
 8005352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005354:	787b      	ldrb	r3, [r7, #1]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800535a:	887a      	ldrh	r2, [r7, #2]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005360:	e003      	b.n	800536a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005362:	887b      	ldrh	r3, [r7, #2]
 8005364:	041a      	lsls	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	619a      	str	r2, [r3, #24]
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005388:	887a      	ldrh	r2, [r7, #2]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4013      	ands	r3, r2
 800538e:	041a      	lsls	r2, r3, #16
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	43d9      	mvns	r1, r3
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	400b      	ands	r3, r1
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	619a      	str	r2, [r3, #24]
}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e07f      	b.n	80054be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fc fd86 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2224      	movs	r2, #36	; 0x24
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800540c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	e006      	b.n	8005434 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005432:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d104      	bne.n	8005446 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <HAL_I2C_Init+0x11c>)
 8005452:	430b      	orrs	r3, r1
 8005454:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005464:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	02008000 	.word	0x02008000

080054cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	460b      	mov	r3, r1
 80054da:	817b      	strh	r3, [r7, #10]
 80054dc:	4613      	mov	r3, r2
 80054de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	f040 80da 	bne.w	80056a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_I2C_Master_Transmit+0x30>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e0d3      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005504:	f7fd fbf6 	bl	8002cf4 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2319      	movs	r3, #25
 8005510:	2201      	movs	r2, #1
 8005512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 faee 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e0be      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2221      	movs	r2, #33	; 0x21
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2210      	movs	r2, #16
 8005532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	893a      	ldrh	r2, [r7, #8]
 8005546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	2bff      	cmp	r3, #255	; 0xff
 8005556:	d90e      	bls.n	8005576 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	22ff      	movs	r2, #255	; 0xff
 800555c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	b2da      	uxtb	r2, r3
 8005564:	8979      	ldrh	r1, [r7, #10]
 8005566:	4b51      	ldr	r3, [pc, #324]	; (80056ac <HAL_I2C_Master_Transmit+0x1e0>)
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fcfe 	bl	8005f70 <I2C_TransferConfig>
 8005574:	e06c      	b.n	8005650 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005584:	b2da      	uxtb	r2, r3
 8005586:	8979      	ldrh	r1, [r7, #10]
 8005588:	4b48      	ldr	r3, [pc, #288]	; (80056ac <HAL_I2C_Master_Transmit+0x1e0>)
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fced 	bl	8005f70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005596:	e05b      	b.n	8005650 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	6a39      	ldr	r1, [r7, #32]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fafa 	bl	8005b96 <I2C_WaitOnTXISFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e07b      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d034      	beq.n	8005650 <HAL_I2C_Master_Transmit+0x184>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d130      	bne.n	8005650 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	2200      	movs	r2, #0
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 fa7d 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e04d      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	2bff      	cmp	r3, #255	; 0xff
 8005610:	d90e      	bls.n	8005630 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561c:	b2da      	uxtb	r2, r3
 800561e:	8979      	ldrh	r1, [r7, #10]
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fca1 	bl	8005f70 <I2C_TransferConfig>
 800562e:	e00f      	b.n	8005650 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563e:	b2da      	uxtb	r2, r3
 8005640:	8979      	ldrh	r1, [r7, #10]
 8005642:	2300      	movs	r3, #0
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fc90 	bl	8005f70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d19e      	bne.n	8005598 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	6a39      	ldr	r1, [r7, #32]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fae0 	bl	8005c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e01a      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2220      	movs	r2, #32
 8005674:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6859      	ldr	r1, [r3, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8005682:	400b      	ands	r3, r1
 8005684:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80056a2:	2302      	movs	r3, #2
  }
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	80002000 	.word	0x80002000
 80056b0:	fe00e800 	.word	0xfe00e800

080056b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	461a      	mov	r2, r3
 80056c0:	460b      	mov	r3, r1
 80056c2:	817b      	strh	r3, [r7, #10]
 80056c4:	4613      	mov	r3, r2
 80056c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	f040 80db 	bne.w	800588c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_I2C_Master_Receive+0x30>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e0d4      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056ec:	f7fd fb02 	bl	8002cf4 <HAL_GetTick>
 80056f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	2319      	movs	r3, #25
 80056f8:	2201      	movs	r2, #1
 80056fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f9fa 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e0bf      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2222      	movs	r2, #34	; 0x22
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2210      	movs	r2, #16
 800571a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	893a      	ldrh	r2, [r7, #8]
 800572e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	2bff      	cmp	r3, #255	; 0xff
 800573e:	d90e      	bls.n	800575e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	b2da      	uxtb	r2, r3
 800574c:	8979      	ldrh	r1, [r7, #10]
 800574e:	4b52      	ldr	r3, [pc, #328]	; (8005898 <HAL_I2C_Master_Receive+0x1e4>)
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fc0a 	bl	8005f70 <I2C_TransferConfig>
 800575c:	e06d      	b.n	800583a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	b2da      	uxtb	r2, r3
 800576e:	8979      	ldrh	r1, [r7, #10]
 8005770:	4b49      	ldr	r3, [pc, #292]	; (8005898 <HAL_I2C_Master_Receive+0x1e4>)
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fbf9 	bl	8005f70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800577e:	e05c      	b.n	800583a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	6a39      	ldr	r1, [r7, #32]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fa91 	bl	8005cac <I2C_WaitOnRXNEFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e07c      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d034      	beq.n	800583a <HAL_I2C_Master_Receive+0x186>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d130      	bne.n	800583a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	2200      	movs	r2, #0
 80057e0:	2180      	movs	r1, #128	; 0x80
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f988 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e04d      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2bff      	cmp	r3, #255	; 0xff
 80057fa:	d90e      	bls.n	800581a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	22ff      	movs	r2, #255	; 0xff
 8005800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005806:	b2da      	uxtb	r2, r3
 8005808:	8979      	ldrh	r1, [r7, #10]
 800580a:	2300      	movs	r3, #0
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fbac 	bl	8005f70 <I2C_TransferConfig>
 8005818:	e00f      	b.n	800583a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005828:	b2da      	uxtb	r2, r3
 800582a:	8979      	ldrh	r1, [r7, #10]
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fb9b 	bl	8005f70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d19d      	bne.n	8005780 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	6a39      	ldr	r1, [r7, #32]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f9eb 	bl	8005c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e01a      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2220      	movs	r2, #32
 800585e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <HAL_I2C_Master_Receive+0x1e8>)
 800586c:	400b      	ands	r3, r1
 800586e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e000      	b.n	800588e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800588c:	2302      	movs	r3, #2
  }
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	80002400 	.word	0x80002400
 800589c:	fe00e800 	.word	0xfe00e800

080058a0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	; 0x28
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	607a      	str	r2, [r7, #4]
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	460b      	mov	r3, r1
 80058ae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b20      	cmp	r3, #32
 80058be:	f040 80ef 	bne.w	8005aa0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d0:	d101      	bne.n	80058d6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80058d2:	2302      	movs	r3, #2
 80058d4:	e0e5      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_I2C_IsDeviceReady+0x44>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e0de      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x202>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2224      	movs	r2, #36	; 0x24
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d105      	bne.n	800590e <HAL_I2C_IsDeviceReady+0x6e>
 8005902:	897b      	ldrh	r3, [r7, #10]
 8005904:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005908:	4b68      	ldr	r3, [pc, #416]	; (8005aac <HAL_I2C_IsDeviceReady+0x20c>)
 800590a:	4313      	orrs	r3, r2
 800590c:	e004      	b.n	8005918 <HAL_I2C_IsDeviceReady+0x78>
 800590e:	897b      	ldrh	r3, [r7, #10]
 8005910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005914:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800591e:	f7fd f9e9 	bl	8002cf4 <HAL_GetTick>
 8005922:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b20      	cmp	r3, #32
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b10      	cmp	r3, #16
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005950:	e034      	b.n	80059bc <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d01a      	beq.n	8005990 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800595a:	f7fd f9cb 	bl	8002cf4 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d302      	bcc.n	8005970 <HAL_I2C_IsDeviceReady+0xd0>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10f      	bne.n	8005990 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	f043 0220 	orr.w	r2, r3, #32
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e088      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b20      	cmp	r3, #32
 800599c:	bf0c      	ite	eq
 800599e:	2301      	moveq	r3, #1
 80059a0:	2300      	movne	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80059bc:	7ffb      	ldrb	r3, [r7, #31]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <HAL_I2C_IsDeviceReady+0x128>
 80059c2:	7fbb      	ldrb	r3, [r7, #30]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0c4      	beq.n	8005952 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d01a      	beq.n	8005a0c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2200      	movs	r2, #0
 80059de:	2120      	movs	r1, #32
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f889 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e058      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2220      	movs	r2, #32
 80059f6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e04a      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	2120      	movs	r1, #32
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f86e 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e03d      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2210      	movs	r2, #16
 8005a2c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2220      	movs	r2, #32
 8005a34:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d118      	bne.n	8005a70 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a4c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	2120      	movs	r1, #32
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f84d 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e01c      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3301      	adds	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	f63f af3d 	bhi.w	80058fa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005aa0:	2302      	movs	r3, #2
  }
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	02002000 	.word	0x02002000

08005ab0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d103      	bne.n	8005ace <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d007      	beq.n	8005aec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	619a      	str	r2, [r3, #24]
  }
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	4613      	mov	r3, r2
 8005b06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b08:	e031      	b.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d02d      	beq.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b12:	f7fd f8ef 	bl	8002cf4 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d122      	bne.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d113      	bne.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	f043 0220 	orr.w	r2, r3, #32
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e00f      	b.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4013      	ands	r3, r2
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d0be      	beq.n	8005b0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ba2:	e033      	b.n	8005c0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f901 	bl	8005db0 <I2C_IsErrorOccurred>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e031      	b.n	8005c1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d025      	beq.n	8005c0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc0:	f7fd f898 	bl	8002cf4 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d302      	bcc.n	8005bd6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d11a      	bne.n	8005c0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d013      	beq.n	8005c0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e007      	b.n	8005c1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d1c4      	bne.n	8005ba4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c30:	e02f      	b.n	8005c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f8ba 	bl	8005db0 <I2C_IsErrorOccurred>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e02d      	b.n	8005ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c46:	f7fd f855 	bl	8002cf4 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d302      	bcc.n	8005c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d11a      	bne.n	8005c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d013      	beq.n	8005c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e007      	b.n	8005ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d1c8      	bne.n	8005c32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cb8:	e06b      	b.n	8005d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f876 	bl	8005db0 <I2C_IsErrorOccurred>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e069      	b.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d138      	bne.n	8005d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d105      	bne.n	8005cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e055      	b.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d107      	bne.n	8005d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2210      	movs	r2, #16
 8005d0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2204      	movs	r2, #4
 8005d10:	645a      	str	r2, [r3, #68]	; 0x44
 8005d12:	e002      	b.n	8005d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6859      	ldr	r1, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005d2e:	400b      	ands	r3, r1
 8005d30:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e029      	b.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fc ffd1 	bl	8002cf4 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d116      	bne.n	8005d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d00f      	beq.n	8005d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	f043 0220 	orr.w	r2, r3, #32
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e007      	b.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d18c      	bne.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	fe00e800 	.word	0xfe00e800

08005db0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08a      	sub	sp, #40	; 0x28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d068      	beq.n	8005eae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2210      	movs	r2, #16
 8005de2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005de4:	e049      	b.n	8005e7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d045      	beq.n	8005e7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dee:	f7fc ff81 	bl	8002cf4 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <I2C_IsErrorOccurred+0x54>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d13a      	bne.n	8005e7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e26:	d121      	bne.n	8005e6c <I2C_IsErrorOccurred+0xbc>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e2e:	d01d      	beq.n	8005e6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e30:	7cfb      	ldrb	r3, [r7, #19]
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	d01a      	beq.n	8005e6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e46:	f7fc ff55 	bl	8002cf4 <HAL_GetTick>
 8005e4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e4c:	e00e      	b.n	8005e6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e4e:	f7fc ff51 	bl	8002cf4 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b19      	cmp	r3, #25
 8005e5a:	d907      	bls.n	8005e6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f043 0320 	orr.w	r3, r3, #32
 8005e62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005e6a:	e006      	b.n	8005e7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d1e9      	bne.n	8005e4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d003      	beq.n	8005e90 <I2C_IsErrorOccurred+0xe0>
 8005e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0aa      	beq.n	8005de6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d103      	bne.n	8005ea0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f043 0304 	orr.w	r3, r3, #4
 8005ea6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ed0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00b      	beq.n	8005efa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f043 0308 	orr.w	r3, r3, #8
 8005ee8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ef2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	f043 0302 	orr.w	r3, r3, #2
 8005f0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01c      	beq.n	8005f5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff fdc3 	bl	8005ab0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6859      	ldr	r1, [r3, #4]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <I2C_IsErrorOccurred+0x1bc>)
 8005f36:	400b      	ands	r3, r1
 8005f38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3728      	adds	r7, #40	; 0x28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	fe00e800 	.word	0xfe00e800

08005f70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	817b      	strh	r3, [r7, #10]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f82:	897b      	ldrh	r3, [r7, #10]
 8005f84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f88:	7a7b      	ldrb	r3, [r7, #9]
 8005f8a:	041b      	lsls	r3, r3, #16
 8005f8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	0d5b      	lsrs	r3, r3, #21
 8005faa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005fae:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <I2C_TransferConfig+0x60>)
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	ea02 0103 	and.w	r1, r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	03ff63ff 	.word	0x03ff63ff

08005fd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d138      	bne.n	800605c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e032      	b.n	800605e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2224      	movs	r2, #36	; 0x24
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006026:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6819      	ldr	r1, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	e000      	b.n	800605e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800605c:	2302      	movs	r3, #2
  }
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b20      	cmp	r3, #32
 800607e:	d139      	bne.n	80060f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800608a:	2302      	movs	r3, #2
 800608c:	e033      	b.n	80060f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2224      	movs	r2, #36	; 0x24
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e000      	b.n	80060f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060f4:	2302      	movs	r3, #2
  }
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0bf      	b.n	8006296 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fb ff44 	bl	8001fb8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006146:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6999      	ldr	r1, [r3, #24]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800615c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6899      	ldr	r1, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b4a      	ldr	r3, [pc, #296]	; (80062a0 <HAL_LTDC_Init+0x19c>)
 8006178:	400b      	ands	r3, r1
 800617a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	041b      	lsls	r3, r3, #16
 8006182:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6899      	ldr	r1, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68d9      	ldr	r1, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b3e      	ldr	r3, [pc, #248]	; (80062a0 <HAL_LTDC_Init+0x19c>)
 80061a6:	400b      	ands	r3, r1
 80061a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	041b      	lsls	r3, r3, #16
 80061b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68d9      	ldr	r1, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6919      	ldr	r1, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b33      	ldr	r3, [pc, #204]	; (80062a0 <HAL_LTDC_Init+0x19c>)
 80061d4:	400b      	ands	r3, r1
 80061d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	041b      	lsls	r3, r3, #16
 80061de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6919      	ldr	r1, [r3, #16]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6959      	ldr	r1, [r3, #20]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <HAL_LTDC_Init+0x19c>)
 8006202:	400b      	ands	r3, r1
 8006204:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6959      	ldr	r1, [r3, #20]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006234:	041b      	lsls	r3, r3, #16
 8006236:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006246:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0206 	orr.w	r2, r2, #6
 8006272:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	f000f800 	.word	0xf000f800

080062a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062a4:	b5b0      	push	{r4, r5, r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_LTDC_ConfigLayer+0x1a>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e02c      	b.n	8006318 <HAL_LTDC_ConfigLayer+0x74>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2134      	movs	r1, #52	; 0x34
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	4413      	add	r3, r2
 80062da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4614      	mov	r4, r2
 80062e2:	461d      	mov	r5, r3
 80062e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f811 	bl	8006320 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2201      	movs	r2, #1
 8006304:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bdb0      	pop	{r4, r5, r7, pc}

08006320 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006320:	b480      	push	{r7}
 8006322:	b089      	sub	sp, #36	; 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	0c1b      	lsrs	r3, r3, #16
 8006338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633c:	4413      	add	r3, r2
 800633e:	041b      	lsls	r3, r3, #16
 8006340:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	01db      	lsls	r3, r3, #7
 800634c:	4413      	add	r3, r2
 800634e:	3384      	adds	r3, #132	; 0x84
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	4611      	mov	r1, r2
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	01d2      	lsls	r2, r2, #7
 800635c:	440a      	add	r2, r1
 800635e:	3284      	adds	r2, #132	; 0x84
 8006360:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006364:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006376:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006378:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4619      	mov	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	440b      	add	r3, r1
 8006386:	3384      	adds	r3, #132	; 0x84
 8006388:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800638e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800639e:	4413      	add	r3, r2
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	01db      	lsls	r3, r3, #7
 80063ae:	4413      	add	r3, r2
 80063b0:	3384      	adds	r3, #132	; 0x84
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	4611      	mov	r1, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	01d2      	lsls	r2, r2, #7
 80063be:	440a      	add	r2, r1
 80063c0:	3284      	adds	r2, #132	; 0x84
 80063c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063d6:	4413      	add	r3, r2
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4619      	mov	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	440b      	add	r3, r1
 80063e6:	3384      	adds	r3, #132	; 0x84
 80063e8:	4619      	mov	r1, r3
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	01db      	lsls	r3, r3, #7
 80063fa:	4413      	add	r3, r2
 80063fc:	3384      	adds	r3, #132	; 0x84
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	4611      	mov	r1, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	01d2      	lsls	r2, r2, #7
 800640a:	440a      	add	r2, r1
 800640c:	3284      	adds	r2, #132	; 0x84
 800640e:	f023 0307 	bic.w	r3, r3, #7
 8006412:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	01db      	lsls	r3, r3, #7
 800641e:	4413      	add	r3, r2
 8006420:	3384      	adds	r3, #132	; 0x84
 8006422:	461a      	mov	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800643a:	041b      	lsls	r3, r3, #16
 800643c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	061b      	lsls	r3, r3, #24
 8006444:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	01db      	lsls	r3, r3, #7
 8006450:	4413      	add	r3, r2
 8006452:	3384      	adds	r3, #132	; 0x84
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	01db      	lsls	r3, r3, #7
 8006460:	4413      	add	r3, r2
 8006462:	3384      	adds	r3, #132	; 0x84
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006470:	461a      	mov	r2, r3
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	431a      	orrs	r2, r3
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	431a      	orrs	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4619      	mov	r1, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	01db      	lsls	r3, r3, #7
 8006484:	440b      	add	r3, r1
 8006486:	3384      	adds	r3, #132	; 0x84
 8006488:	4619      	mov	r1, r3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	01db      	lsls	r3, r3, #7
 800649a:	4413      	add	r3, r2
 800649c:	3384      	adds	r3, #132	; 0x84
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	4611      	mov	r1, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	01d2      	lsls	r2, r2, #7
 80064aa:	440a      	add	r2, r1
 80064ac:	3284      	adds	r2, #132	; 0x84
 80064ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	01db      	lsls	r3, r3, #7
 80064be:	4413      	add	r3, r2
 80064c0:	3384      	adds	r3, #132	; 0x84
 80064c2:	461a      	mov	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	01db      	lsls	r3, r3, #7
 80064d4:	4413      	add	r3, r2
 80064d6:	3384      	adds	r3, #132	; 0x84
 80064d8:	69da      	ldr	r2, [r3, #28]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4619      	mov	r1, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	01db      	lsls	r3, r3, #7
 80064e4:	440b      	add	r3, r1
 80064e6:	3384      	adds	r3, #132	; 0x84
 80064e8:	4619      	mov	r1, r3
 80064ea:	4b58      	ldr	r3, [pc, #352]	; (800664c <LTDC_SetConfig+0x32c>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	68f9      	ldr	r1, [r7, #12]
 80064fa:	6809      	ldr	r1, [r1, #0]
 80064fc:	4608      	mov	r0, r1
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	01c9      	lsls	r1, r1, #7
 8006502:	4401      	add	r1, r0
 8006504:	3184      	adds	r1, #132	; 0x84
 8006506:	4313      	orrs	r3, r2
 8006508:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	01db      	lsls	r3, r3, #7
 8006514:	4413      	add	r3, r2
 8006516:	3384      	adds	r3, #132	; 0x84
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	01db      	lsls	r3, r3, #7
 8006524:	4413      	add	r3, r2
 8006526:	3384      	adds	r3, #132	; 0x84
 8006528:	461a      	mov	r2, r3
 800652a:	2300      	movs	r3, #0
 800652c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	01db      	lsls	r3, r3, #7
 8006538:	4413      	add	r3, r2
 800653a:	3384      	adds	r3, #132	; 0x84
 800653c:	461a      	mov	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800654c:	2304      	movs	r3, #4
 800654e:	61fb      	str	r3, [r7, #28]
 8006550:	e01b      	b.n	800658a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d102      	bne.n	8006560 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800655a:	2303      	movs	r3, #3
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	e014      	b.n	800658a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b04      	cmp	r3, #4
 8006566:	d00b      	beq.n	8006580 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800656c:	2b02      	cmp	r3, #2
 800656e:	d007      	beq.n	8006580 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006574:	2b03      	cmp	r3, #3
 8006576:	d003      	beq.n	8006580 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800657c:	2b07      	cmp	r3, #7
 800657e:	d102      	bne.n	8006586 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006580:	2302      	movs	r3, #2
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	e001      	b.n	800658a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006586:	2301      	movs	r3, #1
 8006588:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	01db      	lsls	r3, r3, #7
 8006594:	4413      	add	r3, r2
 8006596:	3384      	adds	r3, #132	; 0x84
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	4611      	mov	r1, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	01d2      	lsls	r2, r2, #7
 80065a4:	440a      	add	r2, r1
 80065a6:	3284      	adds	r2, #132	; 0x84
 80065a8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80065ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	fb02 f303 	mul.w	r3, r2, r3
 80065b8:	041a      	lsls	r2, r3, #16
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6859      	ldr	r1, [r3, #4]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	1acb      	subs	r3, r1, r3
 80065c4:	69f9      	ldr	r1, [r7, #28]
 80065c6:	fb01 f303 	mul.w	r3, r1, r3
 80065ca:	3307      	adds	r3, #7
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	6809      	ldr	r1, [r1, #0]
 80065d0:	4608      	mov	r0, r1
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	01c9      	lsls	r1, r1, #7
 80065d6:	4401      	add	r1, r0
 80065d8:	3184      	adds	r1, #132	; 0x84
 80065da:	4313      	orrs	r3, r2
 80065dc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	01db      	lsls	r3, r3, #7
 80065e8:	4413      	add	r3, r2
 80065ea:	3384      	adds	r3, #132	; 0x84
 80065ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	01db      	lsls	r3, r3, #7
 80065f8:	440b      	add	r3, r1
 80065fa:	3384      	adds	r3, #132	; 0x84
 80065fc:	4619      	mov	r1, r3
 80065fe:	4b14      	ldr	r3, [pc, #80]	; (8006650 <LTDC_SetConfig+0x330>)
 8006600:	4013      	ands	r3, r2
 8006602:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	01db      	lsls	r3, r3, #7
 800660e:	4413      	add	r3, r2
 8006610:	3384      	adds	r3, #132	; 0x84
 8006612:	461a      	mov	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	01db      	lsls	r3, r3, #7
 8006624:	4413      	add	r3, r2
 8006626:	3384      	adds	r3, #132	; 0x84
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	4611      	mov	r1, r2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	01d2      	lsls	r2, r2, #7
 8006634:	440a      	add	r2, r1
 8006636:	3284      	adds	r2, #132	; 0x84
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	6013      	str	r3, [r2, #0]
}
 800663e:	bf00      	nop
 8006640:	3724      	adds	r7, #36	; 0x24
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	fffff8f8 	.word	0xfffff8f8
 8006650:	fffff800 	.word	0xfffff800

08006654 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006656:	b08f      	sub	sp, #60	; 0x3c
 8006658:	af0a      	add	r7, sp, #40	; 0x28
 800665a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e116      	b.n	8006894 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fb ffb9 	bl	80025f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2203      	movs	r2, #3
 800668a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f005 ff15 	bl	800c4d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	687e      	ldr	r6, [r7, #4]
 80066b2:	466d      	mov	r5, sp
 80066b4:	f106 0410 	add.w	r4, r6, #16
 80066b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80066c8:	1d33      	adds	r3, r6, #4
 80066ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066cc:	6838      	ldr	r0, [r7, #0]
 80066ce:	f005 fe93 	bl	800c3f8 <USB_CoreInit>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e0d7      	b.n	8006894 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f005 ff03 	bl	800c4f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066f0:	2300      	movs	r3, #0
 80066f2:	73fb      	strb	r3, [r7, #15]
 80066f4:	e04a      	b.n	800678c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80066f6:	7bfa      	ldrb	r2, [r7, #15]
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	333d      	adds	r3, #61	; 0x3d
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800670a:	7bfa      	ldrb	r2, [r7, #15]
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	333c      	adds	r3, #60	; 0x3c
 800671a:	7bfa      	ldrb	r2, [r7, #15]
 800671c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800671e:	7bfa      	ldrb	r2, [r7, #15]
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	b298      	uxth	r0, r3
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	3356      	adds	r3, #86	; 0x56
 8006732:	4602      	mov	r2, r0
 8006734:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006736:	7bfa      	ldrb	r2, [r7, #15]
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	3340      	adds	r3, #64	; 0x40
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800674a:	7bfa      	ldrb	r2, [r7, #15]
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3344      	adds	r3, #68	; 0x44
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800675e:	7bfa      	ldrb	r2, [r7, #15]
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	3348      	adds	r3, #72	; 0x48
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006772:	7bfa      	ldrb	r2, [r7, #15]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	334c      	adds	r3, #76	; 0x4c
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	3301      	adds	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
 800678c:	7bfa      	ldrb	r2, [r7, #15]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	429a      	cmp	r2, r3
 8006794:	d3af      	bcc.n	80066f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
 800679a:	e044      	b.n	8006826 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800679c:	7bfa      	ldrb	r2, [r7, #15]
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	4613      	mov	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	440b      	add	r3, r1
 80067aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80067ae:	2200      	movs	r2, #0
 80067b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067b2:	7bfa      	ldrb	r2, [r7, #15]
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	4613      	mov	r3, r2
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80067c4:	7bfa      	ldrb	r2, [r7, #15]
 80067c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80067c8:	7bfa      	ldrb	r2, [r7, #15]
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	4613      	mov	r3, r2
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	440b      	add	r3, r1
 80067d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80067de:	7bfa      	ldrb	r2, [r7, #15]
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	440b      	add	r3, r1
 80067ec:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80067f4:	7bfa      	ldrb	r2, [r7, #15]
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800680a:	7bfa      	ldrb	r2, [r7, #15]
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	4613      	mov	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	440b      	add	r3, r1
 8006818:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	3301      	adds	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
 8006826:	7bfa      	ldrb	r2, [r7, #15]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d3b5      	bcc.n	800679c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	687e      	ldr	r6, [r7, #4]
 8006838:	466d      	mov	r5, sp
 800683a:	f106 0410 	add.w	r4, r6, #16
 800683e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800684a:	e885 0003 	stmia.w	r5, {r0, r1}
 800684e:	1d33      	adds	r3, r6, #4
 8006850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006852:	6838      	ldr	r0, [r7, #0]
 8006854:	f005 fe9c 	bl	800c590 <USB_DevInit>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e014      	b.n	8006894 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2b01      	cmp	r3, #1
 8006880:	d102      	bne.n	8006888 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f80a 	bl	800689c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f006 f85a 	bl	800c946 <USB_DevDisconnect>

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800689c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ca:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	10000003 	.word	0x10000003

080068e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80068ec:	4b19      	ldr	r3, [pc, #100]	; (8006954 <HAL_PWREx_ConfigSupply+0x70>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d00a      	beq.n	800690e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068f8:	4b16      	ldr	r3, [pc, #88]	; (8006954 <HAL_PWREx_ConfigSupply+0x70>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	429a      	cmp	r2, r3
 8006904:	d001      	beq.n	800690a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e01f      	b.n	800694a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	e01d      	b.n	800694a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800690e:	4b11      	ldr	r3, [pc, #68]	; (8006954 <HAL_PWREx_ConfigSupply+0x70>)
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f023 0207 	bic.w	r2, r3, #7
 8006916:	490f      	ldr	r1, [pc, #60]	; (8006954 <HAL_PWREx_ConfigSupply+0x70>)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4313      	orrs	r3, r2
 800691c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800691e:	f7fc f9e9 	bl	8002cf4 <HAL_GetTick>
 8006922:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006924:	e009      	b.n	800693a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006926:	f7fc f9e5 	bl	8002cf4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006934:	d901      	bls.n	800693a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e007      	b.n	800694a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800693a:	4b06      	ldr	r3, [pc, #24]	; (8006954 <HAL_PWREx_ConfigSupply+0x70>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006946:	d1ee      	bne.n	8006926 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	58024800 	.word	0x58024800

08006958 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4a04      	ldr	r2, [pc, #16]	; (8006974 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006966:	60d3      	str	r3, [r2, #12]
}
 8006968:	bf00      	nop
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	58024800 	.word	0x58024800

08006978 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af02      	add	r7, sp, #8
 800697e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006980:	f7fc f9b8 	bl	8002cf4 <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e05f      	b.n	8006a50 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d107      	bne.n	80069ac <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7fb fbf9 	bl	8002194 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80069a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f85a 	bl	8006a60 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	021a      	lsls	r2, r3, #8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	2120      	movs	r1, #32
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f852 	bl	8006a7c <QSPI_WaitFlagStateUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d135      	bne.n	8006a4e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <HAL_QSPI_Init+0xe0>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6852      	ldr	r2, [r2, #4]
 80069f0:	0611      	lsls	r1, r2, #24
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68d2      	ldr	r2, [r2, #12]
 80069f6:	4311      	orrs	r1, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	69d2      	ldr	r2, [r2, #28]
 80069fc:	4311      	orrs	r1, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6a12      	ldr	r2, [r2, #32]
 8006a02:	4311      	orrs	r1, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	4b12      	ldr	r3, [pc, #72]	; (8006a5c <HAL_QSPI_Init+0xe4>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6912      	ldr	r2, [r2, #16]
 8006a1a:	0411      	lsls	r1, r2, #16
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6952      	ldr	r2, [r2, #20]
 8006a20:	4311      	orrs	r1, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6992      	ldr	r2, [r2, #24]
 8006a26:	4311      	orrs	r1, r2
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	00ffff2f 	.word	0x00ffff2f
 8006a5c:	ffe0f8fe 	.word	0xffe0f8fe

08006a60 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006a8c:	e01a      	b.n	8006ac4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d016      	beq.n	8006ac4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a96:	f7fc f92d 	bl	8002cf4 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d302      	bcc.n	8006aac <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	f043 0201 	orr.w	r2, r3, #1
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e00e      	b.n	8006ae2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4013      	ands	r3, r2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bf14      	ite	ne
 8006ad2:	2301      	movne	r3, #1
 8006ad4:	2300      	moveq	r3, #0
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d1d6      	bne.n	8006a8e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d102      	bne.n	8006b00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f000 bc48 	b.w	8007390 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8088 	beq.w	8006c1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b0e:	4b99      	ldr	r3, [pc, #612]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b18:	4b96      	ldr	r3, [pc, #600]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	2b10      	cmp	r3, #16
 8006b22:	d007      	beq.n	8006b34 <HAL_RCC_OscConfig+0x48>
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	2b18      	cmp	r3, #24
 8006b28:	d111      	bne.n	8006b4e <HAL_RCC_OscConfig+0x62>
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	f003 0303 	and.w	r3, r3, #3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d10c      	bne.n	8006b4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b34:	4b8f      	ldr	r3, [pc, #572]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d06d      	beq.n	8006c1c <HAL_RCC_OscConfig+0x130>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d169      	bne.n	8006c1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f000 bc21 	b.w	8007390 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b56:	d106      	bne.n	8006b66 <HAL_RCC_OscConfig+0x7a>
 8006b58:	4b86      	ldr	r3, [pc, #536]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a85      	ldr	r2, [pc, #532]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	e02e      	b.n	8006bc4 <HAL_RCC_OscConfig+0xd8>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10c      	bne.n	8006b88 <HAL_RCC_OscConfig+0x9c>
 8006b6e:	4b81      	ldr	r3, [pc, #516]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a80      	ldr	r2, [pc, #512]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	4b7e      	ldr	r3, [pc, #504]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a7d      	ldr	r2, [pc, #500]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e01d      	b.n	8006bc4 <HAL_RCC_OscConfig+0xd8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b90:	d10c      	bne.n	8006bac <HAL_RCC_OscConfig+0xc0>
 8006b92:	4b78      	ldr	r3, [pc, #480]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a77      	ldr	r2, [pc, #476]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	4b75      	ldr	r3, [pc, #468]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a74      	ldr	r2, [pc, #464]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e00b      	b.n	8006bc4 <HAL_RCC_OscConfig+0xd8>
 8006bac:	4b71      	ldr	r3, [pc, #452]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a70      	ldr	r2, [pc, #448]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	4b6e      	ldr	r3, [pc, #440]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a6d      	ldr	r2, [pc, #436]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d013      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bcc:	f7fc f892 	bl	8002cf4 <HAL_GetTick>
 8006bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bd4:	f7fc f88e 	bl	8002cf4 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b64      	cmp	r3, #100	; 0x64
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e3d4      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006be6:	4b63      	ldr	r3, [pc, #396]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCC_OscConfig+0xe8>
 8006bf2:	e014      	b.n	8006c1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf4:	f7fc f87e 	bl	8002cf4 <HAL_GetTick>
 8006bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bfc:	f7fc f87a 	bl	8002cf4 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b64      	cmp	r3, #100	; 0x64
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e3c0      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c0e:	4b59      	ldr	r3, [pc, #356]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1f0      	bne.n	8006bfc <HAL_RCC_OscConfig+0x110>
 8006c1a:	e000      	b.n	8006c1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80ca 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c2c:	4b51      	ldr	r3, [pc, #324]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c36:	4b4f      	ldr	r3, [pc, #316]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d007      	beq.n	8006c52 <HAL_RCC_OscConfig+0x166>
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	2b18      	cmp	r3, #24
 8006c46:	d156      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x20a>
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d151      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c52:	4b48      	ldr	r3, [pc, #288]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d005      	beq.n	8006c6a <HAL_RCC_OscConfig+0x17e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e392      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c6a:	4b42      	ldr	r3, [pc, #264]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 0219 	bic.w	r2, r3, #25
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	493f      	ldr	r1, [pc, #252]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7c:	f7fc f83a 	bl	8002cf4 <HAL_GetTick>
 8006c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c84:	f7fc f836 	bl	8002cf4 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e37c      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c96:	4b37      	ldr	r3, [pc, #220]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca2:	f7fc f857 	bl	8002d54 <HAL_GetREVID>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d817      	bhi.n	8006ce0 <HAL_RCC_OscConfig+0x1f4>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d108      	bne.n	8006cca <HAL_RCC_OscConfig+0x1de>
 8006cb8:	4b2e      	ldr	r3, [pc, #184]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006cc0:	4a2c      	ldr	r2, [pc, #176]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cc8:	e07a      	b.n	8006dc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cca:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	031b      	lsls	r3, r3, #12
 8006cd8:	4926      	ldr	r1, [pc, #152]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cde:	e06f      	b.n	8006dc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce0:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	061b      	lsls	r3, r3, #24
 8006cee:	4921      	ldr	r1, [pc, #132]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cf4:	e064      	b.n	8006dc0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d047      	beq.n	8006d8e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f023 0219 	bic.w	r2, r3, #25
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	491a      	ldr	r1, [pc, #104]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fb fff0 	bl	8002cf4 <HAL_GetTick>
 8006d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d18:	f7fb ffec 	bl	8002cf4 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e332      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d2a:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d36:	f7fc f80d 	bl	8002d54 <HAL_GetREVID>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d819      	bhi.n	8006d78 <HAL_RCC_OscConfig+0x28c>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	d108      	bne.n	8006d5e <HAL_RCC_OscConfig+0x272>
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006d54:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d5a:	6053      	str	r3, [r2, #4]
 8006d5c:	e030      	b.n	8006dc0 <HAL_RCC_OscConfig+0x2d4>
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	031b      	lsls	r3, r3, #12
 8006d6c:	4901      	ldr	r1, [pc, #4]	; (8006d74 <HAL_RCC_OscConfig+0x288>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	604b      	str	r3, [r1, #4]
 8006d72:	e025      	b.n	8006dc0 <HAL_RCC_OscConfig+0x2d4>
 8006d74:	58024400 	.word	0x58024400
 8006d78:	4b9a      	ldr	r3, [pc, #616]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	061b      	lsls	r3, r3, #24
 8006d86:	4997      	ldr	r1, [pc, #604]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	604b      	str	r3, [r1, #4]
 8006d8c:	e018      	b.n	8006dc0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d8e:	4b95      	ldr	r3, [pc, #596]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a94      	ldr	r2, [pc, #592]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9a:	f7fb ffab 	bl	8002cf4 <HAL_GetTick>
 8006d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006da2:	f7fb ffa7 	bl	8002cf4 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e2ed      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006db4:	4b8b      	ldr	r3, [pc, #556]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1f0      	bne.n	8006da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 80a9 	beq.w	8006f20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dce:	4b85      	ldr	r3, [pc, #532]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dd8:	4b82      	ldr	r3, [pc, #520]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d007      	beq.n	8006df4 <HAL_RCC_OscConfig+0x308>
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	2b18      	cmp	r3, #24
 8006de8:	d13a      	bne.n	8006e60 <HAL_RCC_OscConfig+0x374>
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f003 0303 	and.w	r3, r3, #3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d135      	bne.n	8006e60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006df4:	4b7b      	ldr	r3, [pc, #492]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_RCC_OscConfig+0x320>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	2b80      	cmp	r3, #128	; 0x80
 8006e06:	d001      	beq.n	8006e0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e2c1      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e0c:	f7fb ffa2 	bl	8002d54 <HAL_GetREVID>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d817      	bhi.n	8006e4a <HAL_RCC_OscConfig+0x35e>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	2b20      	cmp	r3, #32
 8006e20:	d108      	bne.n	8006e34 <HAL_RCC_OscConfig+0x348>
 8006e22:	4b70      	ldr	r3, [pc, #448]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e2a:	4a6e      	ldr	r2, [pc, #440]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e30:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e32:	e075      	b.n	8006f20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e34:	4b6b      	ldr	r3, [pc, #428]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	069b      	lsls	r3, r3, #26
 8006e42:	4968      	ldr	r1, [pc, #416]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e48:	e06a      	b.n	8006f20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e4a:	4b66      	ldr	r3, [pc, #408]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	061b      	lsls	r3, r3, #24
 8006e58:	4962      	ldr	r1, [pc, #392]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e5e:	e05f      	b.n	8006f20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d042      	beq.n	8006eee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e68:	4b5e      	ldr	r3, [pc, #376]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5d      	ldr	r2, [pc, #372]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e74:	f7fb ff3e 	bl	8002cf4 <HAL_GetTick>
 8006e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e7c:	f7fb ff3a 	bl	8002cf4 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e280      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e8e:	4b55      	ldr	r3, [pc, #340]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e9a:	f7fb ff5b 	bl	8002d54 <HAL_GetREVID>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d817      	bhi.n	8006ed8 <HAL_RCC_OscConfig+0x3ec>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d108      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x3d6>
 8006eb0:	4b4c      	ldr	r3, [pc, #304]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006eb8:	4a4a      	ldr	r2, [pc, #296]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006eba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ebe:	6053      	str	r3, [r2, #4]
 8006ec0:	e02e      	b.n	8006f20 <HAL_RCC_OscConfig+0x434>
 8006ec2:	4b48      	ldr	r3, [pc, #288]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	069b      	lsls	r3, r3, #26
 8006ed0:	4944      	ldr	r1, [pc, #272]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	604b      	str	r3, [r1, #4]
 8006ed6:	e023      	b.n	8006f20 <HAL_RCC_OscConfig+0x434>
 8006ed8:	4b42      	ldr	r3, [pc, #264]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	061b      	lsls	r3, r3, #24
 8006ee6:	493f      	ldr	r1, [pc, #252]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60cb      	str	r3, [r1, #12]
 8006eec:	e018      	b.n	8006f20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006eee:	4b3d      	ldr	r3, [pc, #244]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a3c      	ldr	r2, [pc, #240]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efa:	f7fb fefb 	bl	8002cf4 <HAL_GetTick>
 8006efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f00:	e008      	b.n	8006f14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f02:	f7fb fef7 	bl	8002cf4 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e23d      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f14:	4b33      	ldr	r3, [pc, #204]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1f0      	bne.n	8006f02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d036      	beq.n	8006f9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d019      	beq.n	8006f68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f34:	4b2b      	ldr	r3, [pc, #172]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f38:	4a2a      	ldr	r2, [pc, #168]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006f3a:	f043 0301 	orr.w	r3, r3, #1
 8006f3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f40:	f7fb fed8 	bl	8002cf4 <HAL_GetTick>
 8006f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f48:	f7fb fed4 	bl	8002cf4 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e21a      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f5a:	4b22      	ldr	r3, [pc, #136]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f0      	beq.n	8006f48 <HAL_RCC_OscConfig+0x45c>
 8006f66:	e018      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f68:	4b1e      	ldr	r3, [pc, #120]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6c:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f74:	f7fb febe 	bl	8002cf4 <HAL_GetTick>
 8006f78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f7c:	f7fb feba 	bl	8002cf4 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e200      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f8e:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d039      	beq.n	800701a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01c      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fae:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a0c      	ldr	r2, [pc, #48]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006fb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fba:	f7fb fe9b 	bl	8002cf4 <HAL_GetTick>
 8006fbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fc2:	f7fb fe97 	bl	8002cf4 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e1dd      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fd4:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <HAL_RCC_OscConfig+0x4f8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0f0      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x4d6>
 8006fe0:	e01b      	b.n	800701a <HAL_RCC_OscConfig+0x52e>
 8006fe2:	bf00      	nop
 8006fe4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fe8:	4b9b      	ldr	r3, [pc, #620]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a9a      	ldr	r2, [pc, #616]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8006fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ff2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ff4:	f7fb fe7e 	bl	8002cf4 <HAL_GetTick>
 8006ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ffc:	f7fb fe7a 	bl	8002cf4 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e1c0      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800700e:	4b92      	ldr	r3, [pc, #584]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f0      	bne.n	8006ffc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 8081 	beq.w	800712a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007028:	4b8c      	ldr	r3, [pc, #560]	; (800725c <HAL_RCC_OscConfig+0x770>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a8b      	ldr	r2, [pc, #556]	; (800725c <HAL_RCC_OscConfig+0x770>)
 800702e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007034:	f7fb fe5e 	bl	8002cf4 <HAL_GetTick>
 8007038:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800703c:	f7fb fe5a 	bl	8002cf4 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b64      	cmp	r3, #100	; 0x64
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e1a0      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800704e:	4b83      	ldr	r3, [pc, #524]	; (800725c <HAL_RCC_OscConfig+0x770>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d106      	bne.n	8007070 <HAL_RCC_OscConfig+0x584>
 8007062:	4b7d      	ldr	r3, [pc, #500]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	4a7c      	ldr	r2, [pc, #496]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007068:	f043 0301 	orr.w	r3, r3, #1
 800706c:	6713      	str	r3, [r2, #112]	; 0x70
 800706e:	e02d      	b.n	80070cc <HAL_RCC_OscConfig+0x5e0>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10c      	bne.n	8007092 <HAL_RCC_OscConfig+0x5a6>
 8007078:	4b77      	ldr	r3, [pc, #476]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 800707a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707c:	4a76      	ldr	r2, [pc, #472]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 800707e:	f023 0301 	bic.w	r3, r3, #1
 8007082:	6713      	str	r3, [r2, #112]	; 0x70
 8007084:	4b74      	ldr	r3, [pc, #464]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007088:	4a73      	ldr	r2, [pc, #460]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 800708a:	f023 0304 	bic.w	r3, r3, #4
 800708e:	6713      	str	r3, [r2, #112]	; 0x70
 8007090:	e01c      	b.n	80070cc <HAL_RCC_OscConfig+0x5e0>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b05      	cmp	r3, #5
 8007098:	d10c      	bne.n	80070b4 <HAL_RCC_OscConfig+0x5c8>
 800709a:	4b6f      	ldr	r3, [pc, #444]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	4a6e      	ldr	r2, [pc, #440]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80070a0:	f043 0304 	orr.w	r3, r3, #4
 80070a4:	6713      	str	r3, [r2, #112]	; 0x70
 80070a6:	4b6c      	ldr	r3, [pc, #432]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	4a6b      	ldr	r2, [pc, #428]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80070ac:	f043 0301 	orr.w	r3, r3, #1
 80070b0:	6713      	str	r3, [r2, #112]	; 0x70
 80070b2:	e00b      	b.n	80070cc <HAL_RCC_OscConfig+0x5e0>
 80070b4:	4b68      	ldr	r3, [pc, #416]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80070b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b8:	4a67      	ldr	r2, [pc, #412]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80070ba:	f023 0301 	bic.w	r3, r3, #1
 80070be:	6713      	str	r3, [r2, #112]	; 0x70
 80070c0:	4b65      	ldr	r3, [pc, #404]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80070c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c4:	4a64      	ldr	r2, [pc, #400]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80070c6:	f023 0304 	bic.w	r3, r3, #4
 80070ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d015      	beq.n	8007100 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070d4:	f7fb fe0e 	bl	8002cf4 <HAL_GetTick>
 80070d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070da:	e00a      	b.n	80070f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070dc:	f7fb fe0a 	bl	8002cf4 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e14e      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070f2:	4b59      	ldr	r3, [pc, #356]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80070f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0ee      	beq.n	80070dc <HAL_RCC_OscConfig+0x5f0>
 80070fe:	e014      	b.n	800712a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007100:	f7fb fdf8 	bl	8002cf4 <HAL_GetTick>
 8007104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007106:	e00a      	b.n	800711e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007108:	f7fb fdf4 	bl	8002cf4 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	f241 3288 	movw	r2, #5000	; 0x1388
 8007116:	4293      	cmp	r3, r2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e138      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800711e:	4b4e      	ldr	r3, [pc, #312]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1ee      	bne.n	8007108 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 812d 	beq.w	800738e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007134:	4b48      	ldr	r3, [pc, #288]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800713c:	2b18      	cmp	r3, #24
 800713e:	f000 80bd 	beq.w	80072bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	2b02      	cmp	r3, #2
 8007148:	f040 809e 	bne.w	8007288 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800714c:	4b42      	ldr	r3, [pc, #264]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a41      	ldr	r2, [pc, #260]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fb fdcc 	bl	8002cf4 <HAL_GetTick>
 800715c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007160:	f7fb fdc8 	bl	8002cf4 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e10e      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007172:	4b39      	ldr	r3, [pc, #228]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f0      	bne.n	8007160 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800717e:	4b36      	ldr	r3, [pc, #216]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007182:	4b37      	ldr	r3, [pc, #220]	; (8007260 <HAL_RCC_OscConfig+0x774>)
 8007184:	4013      	ands	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800718e:	0112      	lsls	r2, r2, #4
 8007190:	430a      	orrs	r2, r1
 8007192:	4931      	ldr	r1, [pc, #196]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007194:	4313      	orrs	r3, r2
 8007196:	628b      	str	r3, [r1, #40]	; 0x28
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	3b01      	subs	r3, #1
 800719e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	3b01      	subs	r3, #1
 80071a8:	025b      	lsls	r3, r3, #9
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	3b01      	subs	r3, #1
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	3b01      	subs	r3, #1
 80071c2:	061b      	lsls	r3, r3, #24
 80071c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071c8:	4923      	ldr	r1, [pc, #140]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80071ce:	4b22      	ldr	r3, [pc, #136]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	4a21      	ldr	r2, [pc, #132]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071da:	4b1f      	ldr	r3, [pc, #124]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80071dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071de:	4b21      	ldr	r3, [pc, #132]	; (8007264 <HAL_RCC_OscConfig+0x778>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071e6:	00d2      	lsls	r2, r2, #3
 80071e8:	491b      	ldr	r1, [pc, #108]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	f023 020c 	bic.w	r2, r3, #12
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	4917      	ldr	r1, [pc, #92]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007200:	4b15      	ldr	r3, [pc, #84]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	f023 0202 	bic.w	r2, r3, #2
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720c:	4912      	ldr	r1, [pc, #72]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 800720e:	4313      	orrs	r3, r2
 8007210:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	4a10      	ldr	r2, [pc, #64]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800721e:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007228:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800722a:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 800722c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722e:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007234:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007236:	4b08      	ldr	r3, [pc, #32]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	4a07      	ldr	r2, [pc, #28]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 800723c:	f043 0301 	orr.w	r3, r3, #1
 8007240:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a04      	ldr	r2, [pc, #16]	; (8007258 <HAL_RCC_OscConfig+0x76c>)
 8007248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800724c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724e:	f7fb fd51 	bl	8002cf4 <HAL_GetTick>
 8007252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007254:	e011      	b.n	800727a <HAL_RCC_OscConfig+0x78e>
 8007256:	bf00      	nop
 8007258:	58024400 	.word	0x58024400
 800725c:	58024800 	.word	0x58024800
 8007260:	fffffc0c 	.word	0xfffffc0c
 8007264:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007268:	f7fb fd44 	bl	8002cf4 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e08a      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800727a:	4b47      	ldr	r3, [pc, #284]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCC_OscConfig+0x77c>
 8007286:	e082      	b.n	800738e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007288:	4b43      	ldr	r3, [pc, #268]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a42      	ldr	r2, [pc, #264]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 800728e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fb fd2e 	bl	8002cf4 <HAL_GetTick>
 8007298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800729c:	f7fb fd2a 	bl	8002cf4 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e070      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072ae:	4b3a      	ldr	r3, [pc, #232]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f0      	bne.n	800729c <HAL_RCC_OscConfig+0x7b0>
 80072ba:	e068      	b.n	800738e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072bc:	4b36      	ldr	r3, [pc, #216]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 80072be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072c2:	4b35      	ldr	r3, [pc, #212]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d031      	beq.n	8007334 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f003 0203 	and.w	r2, r3, #3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072da:	429a      	cmp	r2, r3
 80072dc:	d12a      	bne.n	8007334 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	091b      	lsrs	r3, r3, #4
 80072e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d122      	bne.n	8007334 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d11a      	bne.n	8007334 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	0a5b      	lsrs	r3, r3, #9
 8007302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800730c:	429a      	cmp	r2, r3
 800730e:	d111      	bne.n	8007334 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	0c1b      	lsrs	r3, r3, #16
 8007314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800731e:	429a      	cmp	r2, r3
 8007320:	d108      	bne.n	8007334 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	0e1b      	lsrs	r3, r3, #24
 8007326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007330:	429a      	cmp	r2, r3
 8007332:	d001      	beq.n	8007338 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e02b      	b.n	8007390 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007338:	4b17      	ldr	r3, [pc, #92]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 800733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733c:	08db      	lsrs	r3, r3, #3
 800733e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007342:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d01f      	beq.n	800738e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800734e:	4b12      	ldr	r3, [pc, #72]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	4a11      	ldr	r2, [pc, #68]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800735a:	f7fb fccb 	bl	8002cf4 <HAL_GetTick>
 800735e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007360:	bf00      	nop
 8007362:	f7fb fcc7 	bl	8002cf4 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	4293      	cmp	r3, r2
 800736c:	d0f9      	beq.n	8007362 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800736e:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 8007370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007372:	4b0a      	ldr	r3, [pc, #40]	; (800739c <HAL_RCC_OscConfig+0x8b0>)
 8007374:	4013      	ands	r3, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800737a:	00d2      	lsls	r2, r2, #3
 800737c:	4906      	ldr	r1, [pc, #24]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 800737e:	4313      	orrs	r3, r2
 8007380:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007382:	4b05      	ldr	r3, [pc, #20]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	4a04      	ldr	r2, [pc, #16]	; (8007398 <HAL_RCC_OscConfig+0x8ac>)
 8007388:	f043 0301 	orr.w	r3, r3, #1
 800738c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3730      	adds	r7, #48	; 0x30
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	58024400 	.word	0x58024400
 800739c:	ffff0007 	.word	0xffff0007

080073a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e19c      	b.n	80076ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073b4:	4b8a      	ldr	r3, [pc, #552]	; (80075e0 <HAL_RCC_ClockConfig+0x240>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d910      	bls.n	80073e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073c2:	4b87      	ldr	r3, [pc, #540]	; (80075e0 <HAL_RCC_ClockConfig+0x240>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f023 020f 	bic.w	r2, r3, #15
 80073ca:	4985      	ldr	r1, [pc, #532]	; (80075e0 <HAL_RCC_ClockConfig+0x240>)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073d2:	4b83      	ldr	r3, [pc, #524]	; (80075e0 <HAL_RCC_ClockConfig+0x240>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d001      	beq.n	80073e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e184      	b.n	80076ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d010      	beq.n	8007412 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	4b7b      	ldr	r3, [pc, #492]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d908      	bls.n	8007412 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007400:	4b78      	ldr	r3, [pc, #480]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	4975      	ldr	r1, [pc, #468]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 800740e:	4313      	orrs	r3, r2
 8007410:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0308 	and.w	r3, r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d010      	beq.n	8007440 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695a      	ldr	r2, [r3, #20]
 8007422:	4b70      	ldr	r3, [pc, #448]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800742a:	429a      	cmp	r2, r3
 800742c:	d908      	bls.n	8007440 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800742e:	4b6d      	ldr	r3, [pc, #436]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	496a      	ldr	r1, [pc, #424]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 800743c:	4313      	orrs	r3, r2
 800743e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d010      	beq.n	800746e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699a      	ldr	r2, [r3, #24]
 8007450:	4b64      	ldr	r3, [pc, #400]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007458:	429a      	cmp	r2, r3
 800745a:	d908      	bls.n	800746e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800745c:	4b61      	ldr	r3, [pc, #388]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	495e      	ldr	r1, [pc, #376]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 800746a:	4313      	orrs	r3, r2
 800746c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d010      	beq.n	800749c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69da      	ldr	r2, [r3, #28]
 800747e:	4b59      	ldr	r3, [pc, #356]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007486:	429a      	cmp	r2, r3
 8007488:	d908      	bls.n	800749c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800748a:	4b56      	ldr	r3, [pc, #344]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	4953      	ldr	r1, [pc, #332]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007498:	4313      	orrs	r3, r2
 800749a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d010      	beq.n	80074ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	4b4d      	ldr	r3, [pc, #308]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d908      	bls.n	80074ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074b8:	4b4a      	ldr	r3, [pc, #296]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	f023 020f 	bic.w	r2, r3, #15
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	4947      	ldr	r1, [pc, #284]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d055      	beq.n	8007582 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074d6:	4b43      	ldr	r3, [pc, #268]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	4940      	ldr	r1, [pc, #256]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d107      	bne.n	8007500 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074f0:	4b3c      	ldr	r3, [pc, #240]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d121      	bne.n	8007540 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0f6      	b.n	80076ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b03      	cmp	r3, #3
 8007506:	d107      	bne.n	8007518 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007508:	4b36      	ldr	r3, [pc, #216]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d115      	bne.n	8007540 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e0ea      	b.n	80076ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d107      	bne.n	8007530 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007520:	4b30      	ldr	r3, [pc, #192]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0de      	b.n	80076ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007530:	4b2c      	ldr	r3, [pc, #176]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0d6      	b.n	80076ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007540:	4b28      	ldr	r3, [pc, #160]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	f023 0207 	bic.w	r2, r3, #7
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4925      	ldr	r1, [pc, #148]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 800754e:	4313      	orrs	r3, r2
 8007550:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007552:	f7fb fbcf 	bl	8002cf4 <HAL_GetTick>
 8007556:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007558:	e00a      	b.n	8007570 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800755a:	f7fb fbcb 	bl	8002cf4 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	f241 3288 	movw	r2, #5000	; 0x1388
 8007568:	4293      	cmp	r3, r2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e0be      	b.n	80076ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007570:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	429a      	cmp	r2, r3
 8007580:	d1eb      	bne.n	800755a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d010      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	4b14      	ldr	r3, [pc, #80]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	429a      	cmp	r2, r3
 800759c:	d208      	bcs.n	80075b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800759e:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	f023 020f 	bic.w	r2, r3, #15
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	490e      	ldr	r1, [pc, #56]	; (80075e4 <HAL_RCC_ClockConfig+0x244>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <HAL_RCC_ClockConfig+0x240>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d214      	bcs.n	80075e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075be:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <HAL_RCC_ClockConfig+0x240>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f023 020f 	bic.w	r2, r3, #15
 80075c6:	4906      	ldr	r1, [pc, #24]	; (80075e0 <HAL_RCC_ClockConfig+0x240>)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ce:	4b04      	ldr	r3, [pc, #16]	; (80075e0 <HAL_RCC_ClockConfig+0x240>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d005      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e086      	b.n	80076ee <HAL_RCC_ClockConfig+0x34e>
 80075e0:	52002000 	.word	0x52002000
 80075e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d010      	beq.n	8007616 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	4b3f      	ldr	r3, [pc, #252]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007600:	429a      	cmp	r2, r3
 8007602:	d208      	bcs.n	8007616 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007604:	4b3c      	ldr	r3, [pc, #240]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	4939      	ldr	r1, [pc, #228]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 8007612:	4313      	orrs	r3, r2
 8007614:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d010      	beq.n	8007644 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695a      	ldr	r2, [r3, #20]
 8007626:	4b34      	ldr	r3, [pc, #208]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800762e:	429a      	cmp	r2, r3
 8007630:	d208      	bcs.n	8007644 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007632:	4b31      	ldr	r3, [pc, #196]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	492e      	ldr	r1, [pc, #184]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 8007640:	4313      	orrs	r3, r2
 8007642:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0310 	and.w	r3, r3, #16
 800764c:	2b00      	cmp	r3, #0
 800764e:	d010      	beq.n	8007672 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	4b28      	ldr	r3, [pc, #160]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800765c:	429a      	cmp	r2, r3
 800765e:	d208      	bcs.n	8007672 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007660:	4b25      	ldr	r3, [pc, #148]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	4922      	ldr	r1, [pc, #136]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 800766e:	4313      	orrs	r3, r2
 8007670:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d010      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800768a:	429a      	cmp	r2, r3
 800768c:	d208      	bcs.n	80076a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800768e:	4b1a      	ldr	r3, [pc, #104]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	4917      	ldr	r1, [pc, #92]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 800769c:	4313      	orrs	r3, r2
 800769e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076a0:	f000 f834 	bl	800770c <HAL_RCC_GetSysClockFreq>
 80076a4:	4602      	mov	r2, r0
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	4912      	ldr	r1, [pc, #72]	; (80076fc <HAL_RCC_ClockConfig+0x35c>)
 80076b2:	5ccb      	ldrb	r3, [r1, r3]
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	fa22 f303 	lsr.w	r3, r2, r3
 80076bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076be:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <HAL_RCC_ClockConfig+0x358>)
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	4a0d      	ldr	r2, [pc, #52]	; (80076fc <HAL_RCC_ClockConfig+0x35c>)
 80076c8:	5cd3      	ldrb	r3, [r2, r3]
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
 80076d4:	4a0a      	ldr	r2, [pc, #40]	; (8007700 <HAL_RCC_ClockConfig+0x360>)
 80076d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076d8:	4a0a      	ldr	r2, [pc, #40]	; (8007704 <HAL_RCC_ClockConfig+0x364>)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <HAL_RCC_ClockConfig+0x368>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fb fabc 	bl	8002c60 <HAL_InitTick>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	58024400 	.word	0x58024400
 80076fc:	0800d458 	.word	0x0800d458
 8007700:	24000004 	.word	0x24000004
 8007704:	24000000 	.word	0x24000000
 8007708:	24000008 	.word	0x24000008

0800770c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800770c:	b480      	push	{r7}
 800770e:	b089      	sub	sp, #36	; 0x24
 8007710:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007712:	4bb3      	ldr	r3, [pc, #716]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800771a:	2b18      	cmp	r3, #24
 800771c:	f200 8155 	bhi.w	80079ca <HAL_RCC_GetSysClockFreq+0x2be>
 8007720:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	0800778d 	.word	0x0800778d
 800772c:	080079cb 	.word	0x080079cb
 8007730:	080079cb 	.word	0x080079cb
 8007734:	080079cb 	.word	0x080079cb
 8007738:	080079cb 	.word	0x080079cb
 800773c:	080079cb 	.word	0x080079cb
 8007740:	080079cb 	.word	0x080079cb
 8007744:	080079cb 	.word	0x080079cb
 8007748:	080077b3 	.word	0x080077b3
 800774c:	080079cb 	.word	0x080079cb
 8007750:	080079cb 	.word	0x080079cb
 8007754:	080079cb 	.word	0x080079cb
 8007758:	080079cb 	.word	0x080079cb
 800775c:	080079cb 	.word	0x080079cb
 8007760:	080079cb 	.word	0x080079cb
 8007764:	080079cb 	.word	0x080079cb
 8007768:	080077b9 	.word	0x080077b9
 800776c:	080079cb 	.word	0x080079cb
 8007770:	080079cb 	.word	0x080079cb
 8007774:	080079cb 	.word	0x080079cb
 8007778:	080079cb 	.word	0x080079cb
 800777c:	080079cb 	.word	0x080079cb
 8007780:	080079cb 	.word	0x080079cb
 8007784:	080079cb 	.word	0x080079cb
 8007788:	080077bf 	.word	0x080077bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800778c:	4b94      	ldr	r3, [pc, #592]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0320 	and.w	r3, r3, #32
 8007794:	2b00      	cmp	r3, #0
 8007796:	d009      	beq.n	80077ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007798:	4b91      	ldr	r3, [pc, #580]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	08db      	lsrs	r3, r3, #3
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	4a90      	ldr	r2, [pc, #576]	; (80079e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077a4:	fa22 f303 	lsr.w	r3, r2, r3
 80077a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80077aa:	e111      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80077ac:	4b8d      	ldr	r3, [pc, #564]	; (80079e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077ae:	61bb      	str	r3, [r7, #24]
      break;
 80077b0:	e10e      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80077b2:	4b8d      	ldr	r3, [pc, #564]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077b4:	61bb      	str	r3, [r7, #24]
      break;
 80077b6:	e10b      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80077b8:	4b8c      	ldr	r3, [pc, #560]	; (80079ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80077ba:	61bb      	str	r3, [r7, #24]
      break;
 80077bc:	e108      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077be:	4b88      	ldr	r3, [pc, #544]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80077c8:	4b85      	ldr	r3, [pc, #532]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077cc:	091b      	lsrs	r3, r3, #4
 80077ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077d4:	4b82      	ldr	r3, [pc, #520]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80077de:	4b80      	ldr	r3, [pc, #512]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e2:	08db      	lsrs	r3, r3, #3
 80077e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80e1 	beq.w	80079c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b02      	cmp	r3, #2
 8007806:	f000 8083 	beq.w	8007910 <HAL_RCC_GetSysClockFreq+0x204>
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b02      	cmp	r3, #2
 800780e:	f200 80a1 	bhi.w	8007954 <HAL_RCC_GetSysClockFreq+0x248>
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_RCC_GetSysClockFreq+0x114>
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d056      	beq.n	80078cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800781e:	e099      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007820:	4b6f      	ldr	r3, [pc, #444]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d02d      	beq.n	8007888 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800782c:	4b6c      	ldr	r3, [pc, #432]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	08db      	lsrs	r3, r3, #3
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	4a6b      	ldr	r2, [pc, #428]	; (80079e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
 800783c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	ee07 3a90 	vmov	s15, r3
 8007844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007856:	4b62      	ldr	r3, [pc, #392]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007866:	ed97 6a02 	vldr	s12, [r7, #8]
 800786a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80079f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800786e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800787a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800787e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007882:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007886:	e087      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007892:	eddf 6a58 	vldr	s13, [pc, #352]	; 80079f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789a:	4b51      	ldr	r3, [pc, #324]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80078ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80079f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078ca:	e065      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80079f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078de:	4b40      	ldr	r3, [pc, #256]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80078f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80079f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800790e:	e043      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80079fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800791e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007922:	4b2f      	ldr	r3, [pc, #188]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007932:	ed97 6a02 	vldr	s12, [r7, #8]
 8007936:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80079f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800793a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007952:	e021      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80079f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007966:	4b1e      	ldr	r3, [pc, #120]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007976:	ed97 6a02 	vldr	s12, [r7, #8]
 800797a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80079f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800797e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800798a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007992:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007996:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007998:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799c:	0a5b      	lsrs	r3, r3, #9
 800799e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a2:	3301      	adds	r3, #1
 80079a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	ee07 3a90 	vmov	s15, r3
 80079ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079bc:	ee17 3a90 	vmov	r3, s15
 80079c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80079c2:	e005      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61bb      	str	r3, [r7, #24]
      break;
 80079c8:	e002      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079cc:	61bb      	str	r3, [r7, #24]
      break;
 80079ce:	bf00      	nop
  }

  return sysclockfreq;
 80079d0:	69bb      	ldr	r3, [r7, #24]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3724      	adds	r7, #36	; 0x24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	58024400 	.word	0x58024400
 80079e4:	03d09000 	.word	0x03d09000
 80079e8:	003d0900 	.word	0x003d0900
 80079ec:	017d7840 	.word	0x017d7840
 80079f0:	46000000 	.word	0x46000000
 80079f4:	4c742400 	.word	0x4c742400
 80079f8:	4a742400 	.word	0x4a742400
 80079fc:	4bbebc20 	.word	0x4bbebc20

08007a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a06:	f7ff fe81 	bl	800770c <HAL_RCC_GetSysClockFreq>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	0a1b      	lsrs	r3, r3, #8
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	490f      	ldr	r1, [pc, #60]	; (8007a54 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a18:	5ccb      	ldrb	r3, [r1, r3]
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a22:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a24:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a2e:	5cd3      	ldrb	r3, [r2, r3]
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3a:	4a07      	ldr	r2, [pc, #28]	; (8007a58 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a3c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a3e:	4a07      	ldr	r2, [pc, #28]	; (8007a5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a44:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a46:	681b      	ldr	r3, [r3, #0]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	58024400 	.word	0x58024400
 8007a54:	0800d458 	.word	0x0800d458
 8007a58:	24000004 	.word	0x24000004
 8007a5c:	24000000 	.word	0x24000000

08007a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a64:	f7ff ffcc 	bl	8007a00 <HAL_RCC_GetHCLKFreq>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	091b      	lsrs	r3, r3, #4
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	4904      	ldr	r1, [pc, #16]	; (8007a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a76:	5ccb      	ldrb	r3, [r1, r3]
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	58024400 	.word	0x58024400
 8007a88:	0800d458 	.word	0x0800d458

08007a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a90:	f7ff ffb6 	bl	8007a00 <HAL_RCC_GetHCLKFreq>
 8007a94:	4602      	mov	r2, r0
 8007a96:	4b06      	ldr	r3, [pc, #24]	; (8007ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	0a1b      	lsrs	r3, r3, #8
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	4904      	ldr	r1, [pc, #16]	; (8007ab4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aa2:	5ccb      	ldrb	r3, [r1, r3]
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	58024400 	.word	0x58024400
 8007ab4:	0800d458 	.word	0x0800d458

08007ab8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007abc:	b0ca      	sub	sp, #296	; 0x128
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007aca:	2300      	movs	r3, #0
 8007acc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007adc:	2500      	movs	r5, #0
 8007ade:	ea54 0305 	orrs.w	r3, r4, r5
 8007ae2:	d049      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aee:	d02f      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007af0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007af4:	d828      	bhi.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007afa:	d01a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b00:	d822      	bhi.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b0a:	d007      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b0c:	e01c      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b0e:	4bb8      	ldr	r3, [pc, #736]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	4ab7      	ldr	r2, [pc, #732]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b1a:	e01a      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b20:	3308      	adds	r3, #8
 8007b22:	2102      	movs	r1, #2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f002 fb61 	bl	800a1ec <RCCEx_PLL2_Config>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b30:	e00f      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b36:	3328      	adds	r3, #40	; 0x28
 8007b38:	2102      	movs	r1, #2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f002 fc08 	bl	800a350 <RCCEx_PLL3_Config>
 8007b40:	4603      	mov	r3, r0
 8007b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b46:	e004      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b4e:	e000      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b5a:	4ba5      	ldr	r3, [pc, #660]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b68:	4aa1      	ldr	r2, [pc, #644]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	6513      	str	r3, [r2, #80]	; 0x50
 8007b6e:	e003      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007b84:	f04f 0900 	mov.w	r9, #0
 8007b88:	ea58 0309 	orrs.w	r3, r8, r9
 8007b8c:	d047      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d82a      	bhi.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bb5 	.word	0x08007bb5
 8007ba4:	08007bc3 	.word	0x08007bc3
 8007ba8:	08007bd9 	.word	0x08007bd9
 8007bac:	08007bf7 	.word	0x08007bf7
 8007bb0:	08007bf7 	.word	0x08007bf7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb4:	4b8e      	ldr	r3, [pc, #568]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a8d      	ldr	r2, [pc, #564]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bc0:	e01a      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	2100      	movs	r1, #0
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f002 fb0e 	bl	800a1ec <RCCEx_PLL2_Config>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bd6:	e00f      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bdc:	3328      	adds	r3, #40	; 0x28
 8007bde:	2100      	movs	r1, #0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f002 fbb5 	bl	800a350 <RCCEx_PLL3_Config>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bec:	e004      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bf4:	e000      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c00:	4b7b      	ldr	r3, [pc, #492]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c04:	f023 0107 	bic.w	r1, r3, #7
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0e:	4a78      	ldr	r2, [pc, #480]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c10:	430b      	orrs	r3, r1
 8007c12:	6513      	str	r3, [r2, #80]	; 0x50
 8007c14:	e003      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007c2a:	f04f 0b00 	mov.w	fp, #0
 8007c2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007c32:	d04c      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c3e:	d030      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c44:	d829      	bhi.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c46:	2bc0      	cmp	r3, #192	; 0xc0
 8007c48:	d02d      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c4c:	d825      	bhi.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c4e:	2b80      	cmp	r3, #128	; 0x80
 8007c50:	d018      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007c52:	2b80      	cmp	r3, #128	; 0x80
 8007c54:	d821      	bhi.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d007      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007c5e:	e01c      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c60:	4b63      	ldr	r3, [pc, #396]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	4a62      	ldr	r2, [pc, #392]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c6c:	e01c      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c72:	3308      	adds	r3, #8
 8007c74:	2100      	movs	r1, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f002 fab8 	bl	800a1ec <RCCEx_PLL2_Config>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c82:	e011      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c88:	3328      	adds	r3, #40	; 0x28
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f002 fb5f 	bl	800a350 <RCCEx_PLL3_Config>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c98:	e006      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ca0:	e002      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007ca2:	bf00      	nop
 8007ca4:	e000      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007cb0:	4b4f      	ldr	r3, [pc, #316]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cbe:	4a4c      	ldr	r2, [pc, #304]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	6513      	str	r3, [r2, #80]	; 0x50
 8007cc4:	e003      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007cda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ce4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4313      	orrs	r3, r2
 8007cec:	d053      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007cf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cfa:	d035      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007cfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d00:	d82e      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d06:	d031      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007d08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d0c:	d828      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d12:	d01a      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d18:	d822      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d22:	d007      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007d24:	e01c      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d26:	4b32      	ldr	r3, [pc, #200]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	4a31      	ldr	r2, [pc, #196]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d32:	e01c      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d38:	3308      	adds	r3, #8
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f002 fa55 	bl	800a1ec <RCCEx_PLL2_Config>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d48:	e011      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4e:	3328      	adds	r3, #40	; 0x28
 8007d50:	2100      	movs	r1, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f002 fafc 	bl	800a350 <RCCEx_PLL3_Config>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d5e:	e006      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d66:	e002      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007d68:	bf00      	nop
 8007d6a:	e000      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10b      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d76:	4b1e      	ldr	r3, [pc, #120]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d86:	4a1a      	ldr	r2, [pc, #104]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d8c:	e003      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007da2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007da6:	2300      	movs	r3, #0
 8007da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007dac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007db0:	460b      	mov	r3, r1
 8007db2:	4313      	orrs	r3, r2
 8007db4:	d056      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dc2:	d038      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dc8:	d831      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007dca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dce:	d034      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007dd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dd4:	d82b      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007dd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dda:	d01d      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007ddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007de0:	d825      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d006      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007de6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007dea:	d00a      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007dec:	e01f      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007dee:	bf00      	nop
 8007df0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df4:	4ba2      	ldr	r3, [pc, #648]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	4aa1      	ldr	r2, [pc, #644]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e00:	e01c      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e06:	3308      	adds	r3, #8
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f002 f9ee 	bl	800a1ec <RCCEx_PLL2_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007e16:	e011      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1c:	3328      	adds	r3, #40	; 0x28
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4618      	mov	r0, r3
 8007e22:	f002 fa95 	bl	800a350 <RCCEx_PLL3_Config>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e2c:	e006      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e34:	e002      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007e36:	bf00      	nop
 8007e38:	e000      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10b      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007e44:	4b8e      	ldr	r3, [pc, #568]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e48:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e54:	4a8a      	ldr	r2, [pc, #552]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e56:	430b      	orrs	r3, r1
 8007e58:	6593      	str	r3, [r2, #88]	; 0x58
 8007e5a:	e003      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e74:	2300      	movs	r3, #0
 8007e76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4313      	orrs	r3, r2
 8007e82:	d03a      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	2b30      	cmp	r3, #48	; 0x30
 8007e8c:	d01f      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007e8e:	2b30      	cmp	r3, #48	; 0x30
 8007e90:	d819      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	d00c      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d815      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d019      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007e9e:	2b10      	cmp	r3, #16
 8007ea0:	d111      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea2:	4b77      	ldr	r3, [pc, #476]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	4a76      	ldr	r2, [pc, #472]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007eae:	e011      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 f997 	bl	800a1ec <RCCEx_PLL2_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007ec4:	e006      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007edc:	4b68      	ldr	r3, [pc, #416]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eea:	4a65      	ldr	r2, [pc, #404]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eec:	430b      	orrs	r3, r1
 8007eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ef0:	e003      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007f06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4313      	orrs	r3, r2
 8007f18:	d051      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f24:	d035      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f2a:	d82e      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f30:	d031      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007f32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f36:	d828      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f3c:	d01a      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f42:	d822      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4c:	d007      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007f4e:	e01c      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f50:	4b4b      	ldr	r3, [pc, #300]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	4a4a      	ldr	r2, [pc, #296]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f5c:	e01c      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f62:	3308      	adds	r3, #8
 8007f64:	2100      	movs	r1, #0
 8007f66:	4618      	mov	r0, r3
 8007f68:	f002 f940 	bl	800a1ec <RCCEx_PLL2_Config>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f72:	e011      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f78:	3328      	adds	r3, #40	; 0x28
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f002 f9e7 	bl	800a350 <RCCEx_PLL3_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f88:	e006      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f90:	e002      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f92:	bf00      	nop
 8007f94:	e000      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007fa0:	4b37      	ldr	r3, [pc, #220]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fae:	4a34      	ldr	r2, [pc, #208]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	6513      	str	r3, [r2, #80]	; 0x50
 8007fb4:	e003      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fd4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	d056      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fe8:	d033      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fee:	d82c      	bhi.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ff4:	d02f      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007ff6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ffa:	d826      	bhi.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ffc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008000:	d02b      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008002:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008006:	d820      	bhi.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800800c:	d012      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800800e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008012:	d81a      	bhi.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d022      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800801c:	d115      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008022:	3308      	adds	r3, #8
 8008024:	2101      	movs	r1, #1
 8008026:	4618      	mov	r0, r3
 8008028:	f002 f8e0 	bl	800a1ec <RCCEx_PLL2_Config>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008032:	e015      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008038:	3328      	adds	r3, #40	; 0x28
 800803a:	2101      	movs	r1, #1
 800803c:	4618      	mov	r0, r3
 800803e:	f002 f987 	bl	800a350 <RCCEx_PLL3_Config>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008048:	e00a      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008050:	e006      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008052:	bf00      	nop
 8008054:	e004      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008056:	bf00      	nop
 8008058:	e002      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800805a:	bf00      	nop
 800805c:	e000      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800805e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008060:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008068:	4b05      	ldr	r3, [pc, #20]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800806a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008076:	4a02      	ldr	r2, [pc, #8]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008078:	430b      	orrs	r3, r1
 800807a:	6513      	str	r3, [r2, #80]	; 0x50
 800807c:	e006      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800807e:	bf00      	nop
 8008080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008088:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800809c:	2300      	movs	r3, #0
 800809e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4313      	orrs	r3, r2
 80080aa:	d055      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080b8:	d033      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80080ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080be:	d82c      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80080c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c4:	d02f      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80080c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ca:	d826      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80080cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080d0:	d02b      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80080d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080d6:	d820      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80080d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080dc:	d012      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80080de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e2:	d81a      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d022      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80080e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ec:	d115      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f2:	3308      	adds	r3, #8
 80080f4:	2101      	movs	r1, #1
 80080f6:	4618      	mov	r0, r3
 80080f8:	f002 f878 	bl	800a1ec <RCCEx_PLL2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008102:	e015      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008108:	3328      	adds	r3, #40	; 0x28
 800810a:	2101      	movs	r1, #1
 800810c:	4618      	mov	r0, r3
 800810e:	f002 f91f 	bl	800a350 <RCCEx_PLL3_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008118:	e00a      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008120:	e006      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008122:	bf00      	nop
 8008124:	e004      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008126:	bf00      	nop
 8008128:	e002      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800812e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008138:	4ba3      	ldr	r3, [pc, #652]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800813a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008148:	4a9f      	ldr	r2, [pc, #636]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814a:	430b      	orrs	r3, r1
 800814c:	6593      	str	r3, [r2, #88]	; 0x58
 800814e:	e003      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008154:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800816e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008172:	460b      	mov	r3, r1
 8008174:	4313      	orrs	r3, r2
 8008176:	d037      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008182:	d00e      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008188:	d816      	bhi.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d018      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800818e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008192:	d111      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008194:	4b8c      	ldr	r3, [pc, #560]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	4a8b      	ldr	r2, [pc, #556]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800819e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80081a0:	e00f      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a6:	3308      	adds	r3, #8
 80081a8:	2101      	movs	r1, #1
 80081aa:	4618      	mov	r0, r3
 80081ac:	f002 f81e 	bl	800a1ec <RCCEx_PLL2_Config>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80081b6:	e004      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081be:	e000      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80081c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081ca:	4b7f      	ldr	r3, [pc, #508]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d8:	4a7b      	ldr	r2, [pc, #492]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081da:	430b      	orrs	r3, r1
 80081dc:	6513      	str	r3, [r2, #80]	; 0x50
 80081de:	e003      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80081e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80081f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081f8:	2300      	movs	r3, #0
 80081fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008202:	460b      	mov	r3, r1
 8008204:	4313      	orrs	r3, r2
 8008206:	d039      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800820e:	2b03      	cmp	r3, #3
 8008210:	d81c      	bhi.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	08008255 	.word	0x08008255
 800821c:	08008229 	.word	0x08008229
 8008220:	08008237 	.word	0x08008237
 8008224:	08008255 	.word	0x08008255
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008228:	4b67      	ldr	r3, [pc, #412]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	4a66      	ldr	r2, [pc, #408]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800822e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008232:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008234:	e00f      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823a:	3308      	adds	r3, #8
 800823c:	2102      	movs	r1, #2
 800823e:	4618      	mov	r0, r3
 8008240:	f001 ffd4 	bl	800a1ec <RCCEx_PLL2_Config>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800824a:	e004      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008252:	e000      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10a      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800825e:	4b5a      	ldr	r3, [pc, #360]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008262:	f023 0103 	bic.w	r1, r3, #3
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826c:	4a56      	ldr	r2, [pc, #344]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800826e:	430b      	orrs	r3, r1
 8008270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008272:	e003      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008278:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800827c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800828c:	2300      	movs	r3, #0
 800828e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008292:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008296:	460b      	mov	r3, r1
 8008298:	4313      	orrs	r3, r2
 800829a:	f000 809f 	beq.w	80083dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800829e:	4b4b      	ldr	r3, [pc, #300]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a4a      	ldr	r2, [pc, #296]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80082a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082aa:	f7fa fd23 	bl	8002cf4 <HAL_GetTick>
 80082ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082b2:	e00b      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082b4:	f7fa fd1e 	bl	8002cf4 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b64      	cmp	r3, #100	; 0x64
 80082c2:	d903      	bls.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082ca:	e005      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082cc:	4b3f      	ldr	r3, [pc, #252]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0ed      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80082d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d179      	bne.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082e0:	4b39      	ldr	r3, [pc, #228]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082ec:	4053      	eors	r3, r2
 80082ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d015      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082f6:	4b34      	ldr	r3, [pc, #208]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008302:	4b31      	ldr	r3, [pc, #196]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008306:	4a30      	ldr	r2, [pc, #192]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800830e:	4b2e      	ldr	r3, [pc, #184]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	4a2d      	ldr	r2, [pc, #180]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008318:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800831a:	4a2b      	ldr	r2, [pc, #172]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800831c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008320:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008326:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800832a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800832e:	d118      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008330:	f7fa fce0 	bl	8002cf4 <HAL_GetTick>
 8008334:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008338:	e00d      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800833a:	f7fa fcdb 	bl	8002cf4 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008344:	1ad2      	subs	r2, r2, r3
 8008346:	f241 3388 	movw	r3, #5000	; 0x1388
 800834a:	429a      	cmp	r2, r3
 800834c:	d903      	bls.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008354:	e005      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008356:	4b1c      	ldr	r3, [pc, #112]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0eb      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008366:	2b00      	cmp	r3, #0
 8008368:	d129      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800837a:	d10e      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800837c:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008388:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800838c:	091a      	lsrs	r2, r3, #4
 800838e:	4b10      	ldr	r3, [pc, #64]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008390:	4013      	ands	r3, r2
 8008392:	4a0d      	ldr	r2, [pc, #52]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008394:	430b      	orrs	r3, r1
 8008396:	6113      	str	r3, [r2, #16]
 8008398:	e005      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800839a:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	4a0a      	ldr	r2, [pc, #40]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80083a4:	6113      	str	r3, [r2, #16]
 80083a6:	4b08      	ldr	r3, [pc, #32]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80083aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083b6:	4a04      	ldr	r2, [pc, #16]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083b8:	430b      	orrs	r3, r1
 80083ba:	6713      	str	r3, [r2, #112]	; 0x70
 80083bc:	e00e      	b.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80083c6:	e009      	b.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80083c8:	58024400 	.word	0x58024400
 80083cc:	58024800 	.word	0x58024800
 80083d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	f002 0301 	and.w	r3, r2, #1
 80083e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4313      	orrs	r3, r2
 80083fa:	f000 8089 	beq.w	8008510 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008404:	2b28      	cmp	r3, #40	; 0x28
 8008406:	d86b      	bhi.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008408:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800840a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840e:	bf00      	nop
 8008410:	080084e9 	.word	0x080084e9
 8008414:	080084e1 	.word	0x080084e1
 8008418:	080084e1 	.word	0x080084e1
 800841c:	080084e1 	.word	0x080084e1
 8008420:	080084e1 	.word	0x080084e1
 8008424:	080084e1 	.word	0x080084e1
 8008428:	080084e1 	.word	0x080084e1
 800842c:	080084e1 	.word	0x080084e1
 8008430:	080084b5 	.word	0x080084b5
 8008434:	080084e1 	.word	0x080084e1
 8008438:	080084e1 	.word	0x080084e1
 800843c:	080084e1 	.word	0x080084e1
 8008440:	080084e1 	.word	0x080084e1
 8008444:	080084e1 	.word	0x080084e1
 8008448:	080084e1 	.word	0x080084e1
 800844c:	080084e1 	.word	0x080084e1
 8008450:	080084cb 	.word	0x080084cb
 8008454:	080084e1 	.word	0x080084e1
 8008458:	080084e1 	.word	0x080084e1
 800845c:	080084e1 	.word	0x080084e1
 8008460:	080084e1 	.word	0x080084e1
 8008464:	080084e1 	.word	0x080084e1
 8008468:	080084e1 	.word	0x080084e1
 800846c:	080084e1 	.word	0x080084e1
 8008470:	080084e9 	.word	0x080084e9
 8008474:	080084e1 	.word	0x080084e1
 8008478:	080084e1 	.word	0x080084e1
 800847c:	080084e1 	.word	0x080084e1
 8008480:	080084e1 	.word	0x080084e1
 8008484:	080084e1 	.word	0x080084e1
 8008488:	080084e1 	.word	0x080084e1
 800848c:	080084e1 	.word	0x080084e1
 8008490:	080084e9 	.word	0x080084e9
 8008494:	080084e1 	.word	0x080084e1
 8008498:	080084e1 	.word	0x080084e1
 800849c:	080084e1 	.word	0x080084e1
 80084a0:	080084e1 	.word	0x080084e1
 80084a4:	080084e1 	.word	0x080084e1
 80084a8:	080084e1 	.word	0x080084e1
 80084ac:	080084e1 	.word	0x080084e1
 80084b0:	080084e9 	.word	0x080084e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b8:	3308      	adds	r3, #8
 80084ba:	2101      	movs	r1, #1
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 fe95 	bl	800a1ec <RCCEx_PLL2_Config>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80084c8:	e00f      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ce:	3328      	adds	r3, #40	; 0x28
 80084d0:	2101      	movs	r1, #1
 80084d2:	4618      	mov	r0, r3
 80084d4:	f001 ff3c 	bl	800a350 <RCCEx_PLL3_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80084de:	e004      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084e6:	e000      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80084e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084f2:	4bbf      	ldr	r3, [pc, #764]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008500:	4abb      	ldr	r2, [pc, #748]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008502:	430b      	orrs	r3, r1
 8008504:	6553      	str	r3, [r2, #84]	; 0x54
 8008506:	e003      	b.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800850c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f002 0302 	and.w	r3, r2, #2
 800851c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008520:	2300      	movs	r3, #0
 8008522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008526:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800852a:	460b      	mov	r3, r1
 800852c:	4313      	orrs	r3, r2
 800852e:	d041      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008536:	2b05      	cmp	r3, #5
 8008538:	d824      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800853a:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800853c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008540:	0800858d 	.word	0x0800858d
 8008544:	08008559 	.word	0x08008559
 8008548:	0800856f 	.word	0x0800856f
 800854c:	0800858d 	.word	0x0800858d
 8008550:	0800858d 	.word	0x0800858d
 8008554:	0800858d 	.word	0x0800858d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800855c:	3308      	adds	r3, #8
 800855e:	2101      	movs	r1, #1
 8008560:	4618      	mov	r0, r3
 8008562:	f001 fe43 	bl	800a1ec <RCCEx_PLL2_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800856c:	e00f      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008572:	3328      	adds	r3, #40	; 0x28
 8008574:	2101      	movs	r1, #1
 8008576:	4618      	mov	r0, r3
 8008578:	f001 feea 	bl	800a350 <RCCEx_PLL3_Config>
 800857c:	4603      	mov	r3, r0
 800857e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008582:	e004      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800858a:	e000      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800858c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800858e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008596:	4b96      	ldr	r3, [pc, #600]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859a:	f023 0107 	bic.w	r1, r3, #7
 800859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085a4:	4a92      	ldr	r2, [pc, #584]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085a6:	430b      	orrs	r3, r1
 80085a8:	6553      	str	r3, [r2, #84]	; 0x54
 80085aa:	e003      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f002 0304 	and.w	r3, r2, #4
 80085c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4313      	orrs	r3, r2
 80085d2:	d044      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80085d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085dc:	2b05      	cmp	r3, #5
 80085de:	d825      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80085e0:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	08008635 	.word	0x08008635
 80085ec:	08008601 	.word	0x08008601
 80085f0:	08008617 	.word	0x08008617
 80085f4:	08008635 	.word	0x08008635
 80085f8:	08008635 	.word	0x08008635
 80085fc:	08008635 	.word	0x08008635
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008604:	3308      	adds	r3, #8
 8008606:	2101      	movs	r1, #1
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fdef 	bl	800a1ec <RCCEx_PLL2_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008614:	e00f      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861a:	3328      	adds	r3, #40	; 0x28
 800861c:	2101      	movs	r1, #1
 800861e:	4618      	mov	r0, r3
 8008620:	f001 fe96 	bl	800a350 <RCCEx_PLL3_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800862a:	e004      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800863e:	4b6c      	ldr	r3, [pc, #432]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008642:	f023 0107 	bic.w	r1, r3, #7
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800864e:	4a68      	ldr	r2, [pc, #416]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008650:	430b      	orrs	r3, r1
 8008652:	6593      	str	r3, [r2, #88]	; 0x58
 8008654:	e003      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800865a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f002 0320 	and.w	r3, r2, #32
 800866a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800866e:	2300      	movs	r3, #0
 8008670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008678:	460b      	mov	r3, r1
 800867a:	4313      	orrs	r3, r2
 800867c:	d055      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800868a:	d033      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800868c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008690:	d82c      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008696:	d02f      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869c:	d826      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800869e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086a2:	d02b      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80086a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086a8:	d820      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80086aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ae:	d012      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80086b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086b4:	d81a      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d022      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80086ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086be:	d115      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c4:	3308      	adds	r3, #8
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 fd8f 	bl	800a1ec <RCCEx_PLL2_Config>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80086d4:	e015      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086da:	3328      	adds	r3, #40	; 0x28
 80086dc:	2102      	movs	r1, #2
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 fe36 	bl	800a350 <RCCEx_PLL3_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80086ea:	e00a      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086f2:	e006      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086f4:	bf00      	nop
 80086f6:	e004      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086f8:	bf00      	nop
 80086fa:	e002      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086fc:	bf00      	nop
 80086fe:	e000      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800870a:	4b39      	ldr	r3, [pc, #228]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871a:	4a35      	ldr	r2, [pc, #212]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800871c:	430b      	orrs	r3, r1
 800871e:	6553      	str	r3, [r2, #84]	; 0x54
 8008720:	e003      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800873a:	2300      	movs	r3, #0
 800873c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008740:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008744:	460b      	mov	r3, r1
 8008746:	4313      	orrs	r3, r2
 8008748:	d058      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008752:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008756:	d033      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008758:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800875c:	d82c      	bhi.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800875e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008762:	d02f      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008768:	d826      	bhi.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800876a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800876e:	d02b      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008774:	d820      	bhi.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800877a:	d012      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800877c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008780:	d81a      	bhi.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d022      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800878a:	d115      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800878c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008790:	3308      	adds	r3, #8
 8008792:	2100      	movs	r1, #0
 8008794:	4618      	mov	r0, r3
 8008796:	f001 fd29 	bl	800a1ec <RCCEx_PLL2_Config>
 800879a:	4603      	mov	r3, r0
 800879c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80087a0:	e015      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a6:	3328      	adds	r3, #40	; 0x28
 80087a8:	2102      	movs	r1, #2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 fdd0 	bl	800a350 <RCCEx_PLL3_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80087b6:	e00a      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087be:	e006      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80087c0:	bf00      	nop
 80087c2:	e004      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80087c4:	bf00      	nop
 80087c6:	e002      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80087c8:	bf00      	nop
 80087ca:	e000      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80087cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10e      	bne.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087d6:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087da:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80087de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087e6:	4a02      	ldr	r2, [pc, #8]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6593      	str	r3, [r2, #88]	; 0x58
 80087ec:	e006      	b.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80087ee:	bf00      	nop
 80087f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80087fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800880c:	2300      	movs	r3, #0
 800880e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008812:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008816:	460b      	mov	r3, r1
 8008818:	4313      	orrs	r3, r2
 800881a:	d055      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800881c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008824:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008828:	d033      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800882a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800882e:	d82c      	bhi.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008834:	d02f      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800883a:	d826      	bhi.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800883c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008840:	d02b      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008842:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008846:	d820      	bhi.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800884c:	d012      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800884e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008852:	d81a      	bhi.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d022      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885c:	d115      	bne.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008862:	3308      	adds	r3, #8
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f001 fcc0 	bl	800a1ec <RCCEx_PLL2_Config>
 800886c:	4603      	mov	r3, r0
 800886e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008872:	e015      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008878:	3328      	adds	r3, #40	; 0x28
 800887a:	2102      	movs	r1, #2
 800887c:	4618      	mov	r0, r3
 800887e:	f001 fd67 	bl	800a350 <RCCEx_PLL3_Config>
 8008882:	4603      	mov	r3, r0
 8008884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008888:	e00a      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008890:	e006      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008892:	bf00      	nop
 8008894:	e004      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008896:	bf00      	nop
 8008898:	e002      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800889a:	bf00      	nop
 800889c:	e000      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800889e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10b      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80088a8:	4ba1      	ldr	r3, [pc, #644]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80088b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088b8:	4a9d      	ldr	r2, [pc, #628]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ba:	430b      	orrs	r3, r1
 80088bc:	6593      	str	r3, [r2, #88]	; 0x58
 80088be:	e003      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f002 0308 	and.w	r3, r2, #8
 80088d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088d8:	2300      	movs	r3, #0
 80088da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80088e2:	460b      	mov	r3, r1
 80088e4:	4313      	orrs	r3, r2
 80088e6:	d01e      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f4:	d10c      	bne.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fa:	3328      	adds	r3, #40	; 0x28
 80088fc:	2102      	movs	r1, #2
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fd26 	bl	800a350 <RCCEx_PLL3_Config>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008910:	4b87      	ldr	r3, [pc, #540]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008914:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800891c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008920:	4a83      	ldr	r2, [pc, #524]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008922:	430b      	orrs	r3, r1
 8008924:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	f002 0310 	and.w	r3, r2, #16
 8008932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008936:	2300      	movs	r3, #0
 8008938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800893c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008940:	460b      	mov	r3, r1
 8008942:	4313      	orrs	r3, r2
 8008944:	d01e      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800894a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800894e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008952:	d10c      	bne.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008958:	3328      	adds	r3, #40	; 0x28
 800895a:	2102      	movs	r1, #2
 800895c:	4618      	mov	r0, r3
 800895e:	f001 fcf7 	bl	800a350 <RCCEx_PLL3_Config>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800896e:	4b70      	ldr	r3, [pc, #448]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008972:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800897a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800897e:	4a6c      	ldr	r2, [pc, #432]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008980:	430b      	orrs	r3, r1
 8008982:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008994:	2300      	movs	r3, #0
 8008996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800899a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800899e:	460b      	mov	r3, r1
 80089a0:	4313      	orrs	r3, r2
 80089a2:	d03e      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80089a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089b0:	d022      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80089b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089b6:	d81b      	bhi.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80089bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c0:	d00b      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80089c2:	e015      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c8:	3308      	adds	r3, #8
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 fc0d 	bl	800a1ec <RCCEx_PLL2_Config>
 80089d2:	4603      	mov	r3, r0
 80089d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80089d8:	e00f      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089de:	3328      	adds	r3, #40	; 0x28
 80089e0:	2102      	movs	r1, #2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 fcb4 	bl	800a350 <RCCEx_PLL3_Config>
 80089e8:	4603      	mov	r3, r0
 80089ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80089ee:	e004      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089f6:	e000      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80089f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10b      	bne.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a02:	4b4b      	ldr	r3, [pc, #300]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a06:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a12:	4a47      	ldr	r2, [pc, #284]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a14:	430b      	orrs	r3, r1
 8008a16:	6593      	str	r3, [r2, #88]	; 0x58
 8008a18:	e003      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008a2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a30:	2300      	movs	r3, #0
 8008a32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a34:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	d03b      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a4a:	d01f      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008a4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a50:	d818      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a56:	d003      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a5c:	d007      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008a5e:	e011      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a60:	4b33      	ldr	r3, [pc, #204]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	4a32      	ldr	r2, [pc, #200]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a6c:	e00f      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a72:	3328      	adds	r3, #40	; 0x28
 8008a74:	2101      	movs	r1, #1
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 fc6a 	bl	800a350 <RCCEx_PLL3_Config>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a82:	e004      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a8a:	e000      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10b      	bne.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a96:	4b26      	ldr	r3, [pc, #152]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa6:	4a22      	ldr	r2, [pc, #136]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aa8:	430b      	orrs	r3, r1
 8008aaa:	6553      	str	r3, [r2, #84]	; 0x54
 8008aac:	e003      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ab2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	677b      	str	r3, [r7, #116]	; 0x74
 8008ac8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008acc:	460b      	mov	r3, r1
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	d034      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae0:	d007      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008ae2:	e011      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae4:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	4a11      	ldr	r2, [pc, #68]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008af0:	e00e      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af6:	3308      	adds	r3, #8
 8008af8:	2102      	movs	r1, #2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 fb76 	bl	800a1ec <RCCEx_PLL2_Config>
 8008b00:	4603      	mov	r3, r0
 8008b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b06:	e003      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10d      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008b18:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b26:	4a02      	ldr	r2, [pc, #8]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b2c:	e006      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008b2e:	bf00      	nop
 8008b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b4e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008b52:	460b      	mov	r3, r1
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d00c      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5c:	3328      	adds	r3, #40	; 0x28
 8008b5e:	2102      	movs	r1, #2
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 fbf5 	bl	800a350 <RCCEx_PLL3_Config>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b80:	2300      	movs	r3, #0
 8008b82:	667b      	str	r3, [r7, #100]	; 0x64
 8008b84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	d038      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b9a:	d018      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ba0:	d811      	bhi.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba6:	d014      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bac:	d80b      	bhi.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d011      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb6:	d106      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bb8:	4bc3      	ldr	r3, [pc, #780]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	4ac2      	ldr	r2, [pc, #776]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008bc4:	e008      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bcc:	e004      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008bce:	bf00      	nop
 8008bd0:	e002      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008bd2:	bf00      	nop
 8008bd4:	e000      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10b      	bne.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008be0:	4bb9      	ldr	r3, [pc, #740]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bf0:	4ab5      	ldr	r2, [pc, #724]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	6553      	str	r3, [r2, #84]	; 0x54
 8008bf6:	e003      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c0e:	2300      	movs	r3, #0
 8008c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008c16:	460b      	mov	r3, r1
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	d009      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c1c:	4baa      	ldr	r3, [pc, #680]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c2a:	4aa7      	ldr	r2, [pc, #668]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008c3c:	653b      	str	r3, [r7, #80]	; 0x50
 8008c3e:	2300      	movs	r3, #0
 8008c40:	657b      	str	r3, [r7, #84]	; 0x54
 8008c42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008c46:	460b      	mov	r3, r1
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	d00a      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008c4c:	4b9e      	ldr	r3, [pc, #632]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008c5c:	4a9a      	ldr	r2, [pc, #616]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c70:	2300      	movs	r3, #0
 8008c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	d009      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c7e:	4b92      	ldr	r3, [pc, #584]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c82:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c8c:	4a8e      	ldr	r2, [pc, #568]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ca4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4313      	orrs	r3, r2
 8008cac:	d00e      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008cae:	4b86      	ldr	r3, [pc, #536]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	4a85      	ldr	r2, [pc, #532]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cb8:	6113      	str	r3, [r2, #16]
 8008cba:	4b83      	ldr	r3, [pc, #524]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cbc:	6919      	ldr	r1, [r3, #16]
 8008cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008cc6:	4a80      	ldr	r2, [pc, #512]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cda:	2300      	movs	r3, #0
 8008cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cde:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	d009      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ce8:	4b77      	ldr	r3, [pc, #476]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf6:	4a74      	ldr	r2, [pc, #464]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008d08:	633b      	str	r3, [r7, #48]	; 0x30
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d0e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008d12:	460b      	mov	r3, r1
 8008d14:	4313      	orrs	r3, r2
 8008d16:	d00a      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d18:	4b6b      	ldr	r3, [pc, #428]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d28:	4a67      	ldr	r2, [pc, #412]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d2a:	430b      	orrs	r3, r1
 8008d2c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	2100      	movs	r1, #0
 8008d38:	62b9      	str	r1, [r7, #40]	; 0x28
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008d44:	460b      	mov	r3, r1
 8008d46:	4313      	orrs	r3, r2
 8008d48:	d011      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4e:	3308      	adds	r3, #8
 8008d50:	2100      	movs	r1, #0
 8008d52:	4618      	mov	r0, r3
 8008d54:	f001 fa4a 	bl	800a1ec <RCCEx_PLL2_Config>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	2100      	movs	r1, #0
 8008d78:	6239      	str	r1, [r7, #32]
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d80:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008d84:	460b      	mov	r3, r1
 8008d86:	4313      	orrs	r3, r2
 8008d88:	d011      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d8e:	3308      	adds	r3, #8
 8008d90:	2101      	movs	r1, #1
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 fa2a 	bl	800a1ec <RCCEx_PLL2_Config>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008daa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	2100      	movs	r1, #0
 8008db8:	61b9      	str	r1, [r7, #24]
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	61fb      	str	r3, [r7, #28]
 8008dc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	d011      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dce:	3308      	adds	r3, #8
 8008dd0:	2102      	movs	r1, #2
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f001 fa0a 	bl	800a1ec <RCCEx_PLL2_Config>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	2100      	movs	r1, #0
 8008df8:	6139      	str	r1, [r7, #16]
 8008dfa:	f003 0308 	and.w	r3, r3, #8
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008e04:	460b      	mov	r3, r1
 8008e06:	4313      	orrs	r3, r2
 8008e08:	d011      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0e:	3328      	adds	r3, #40	; 0x28
 8008e10:	2100      	movs	r1, #0
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 fa9c 	bl	800a350 <RCCEx_PLL3_Config>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	2100      	movs	r1, #0
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	f003 0310 	and.w	r3, r3, #16
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e44:	460b      	mov	r3, r1
 8008e46:	4313      	orrs	r3, r2
 8008e48:	d011      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e4e:	3328      	adds	r3, #40	; 0x28
 8008e50:	2101      	movs	r1, #1
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 fa7c 	bl	800a350 <RCCEx_PLL3_Config>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	2100      	movs	r1, #0
 8008e78:	6039      	str	r1, [r7, #0]
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008e84:	460b      	mov	r3, r1
 8008e86:	4313      	orrs	r3, r2
 8008e88:	d011      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8e:	3328      	adds	r3, #40	; 0x28
 8008e90:	2102      	movs	r1, #2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 fa5c 	bl	800a350 <RCCEx_PLL3_Config>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008eae:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e000      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ec8:	58024400 	.word	0x58024400

08008ecc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b090      	sub	sp, #64	; 0x40
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eda:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	f040 8094 	bne.w	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008ee4:	4b9e      	ldr	r3, [pc, #632]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	f200 8087 	bhi.w	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008ef6:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f11 	.word	0x08008f11
 8008f00:	08008f39 	.word	0x08008f39
 8008f04:	08008f61 	.word	0x08008f61
 8008f08:	08008ffd 	.word	0x08008ffd
 8008f0c:	08008f89 	.word	0x08008f89
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f10:	4b93      	ldr	r3, [pc, #588]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f1c:	d108      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 f810 	bl	8009f48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f2c:	f000 bd45 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f34:	f000 bd41 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f38:	4b89      	ldr	r3, [pc, #548]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f44:	d108      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f46:	f107 0318 	add.w	r3, r7, #24
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fd54 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f54:	f000 bd31 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f5c:	f000 bd2d 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f60:	4b7f      	ldr	r3, [pc, #508]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f6c:	d108      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f6e:	f107 030c 	add.w	r3, r7, #12
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fe94 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f7c:	f000 bd1d 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f84:	f000 bd19 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f88:	4b75      	ldr	r3, [pc, #468]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f92:	4b73      	ldr	r3, [pc, #460]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0304 	and.w	r3, r3, #4
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d109      	bne.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fa4:	4b6e      	ldr	r3, [pc, #440]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	08db      	lsrs	r3, r3, #3
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	4a6d      	ldr	r2, [pc, #436]	; (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fb6:	e01f      	b.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fb8:	4b69      	ldr	r3, [pc, #420]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc4:	d106      	bne.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fcc:	d102      	bne.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fce:	4b66      	ldr	r3, [pc, #408]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fd2:	e011      	b.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fd4:	4b62      	ldr	r3, [pc, #392]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fe0:	d106      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe8:	d102      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fea:	4b60      	ldr	r3, [pc, #384]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fee:	e003      	b.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008ff4:	f000 bce1 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ff8:	f000 bcdf 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ffc:	4b5c      	ldr	r3, [pc, #368]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009000:	f000 bcdb 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009008:	f000 bcd7 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800900c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009010:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009014:	430b      	orrs	r3, r1
 8009016:	f040 80ad 	bne.w	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800901a:	4b51      	ldr	r3, [pc, #324]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800901c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009022:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800902a:	d056      	beq.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009032:	f200 8090 	bhi.w	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	2bc0      	cmp	r3, #192	; 0xc0
 800903a:	f000 8088 	beq.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	2bc0      	cmp	r3, #192	; 0xc0
 8009042:	f200 8088 	bhi.w	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	2b80      	cmp	r3, #128	; 0x80
 800904a:	d032      	beq.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	2b80      	cmp	r3, #128	; 0x80
 8009050:	f200 8081 	bhi.w	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	2b40      	cmp	r3, #64	; 0x40
 800905e:	d014      	beq.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009060:	e079      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009062:	4b3f      	ldr	r3, [pc, #252]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800906e:	d108      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009074:	4618      	mov	r0, r3
 8009076:	f000 ff67 	bl	8009f48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800907e:	f000 bc9c 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009086:	f000 bc98 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800908a:	4b35      	ldr	r3, [pc, #212]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009096:	d108      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009098:	f107 0318 	add.w	r3, r7, #24
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fcab 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090a6:	f000 bc88 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ae:	f000 bc84 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090b2:	4b2b      	ldr	r3, [pc, #172]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090be:	d108      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090c0:	f107 030c 	add.w	r3, r7, #12
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fdeb 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090ce:	f000 bc74 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090d6:	f000 bc70 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090da:	4b21      	ldr	r3, [pc, #132]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090e4:	4b1e      	ldr	r3, [pc, #120]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d10c      	bne.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80090f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090f6:	4b1a      	ldr	r3, [pc, #104]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	08db      	lsrs	r3, r3, #3
 80090fc:	f003 0303 	and.w	r3, r3, #3
 8009100:	4a18      	ldr	r2, [pc, #96]	; (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009102:	fa22 f303 	lsr.w	r3, r2, r3
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009108:	e01f      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800910a:	4b15      	ldr	r3, [pc, #84]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009116:	d106      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800911e:	d102      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009120:	4b11      	ldr	r3, [pc, #68]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009124:	e011      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009126:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009132:	d106      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913a:	d102      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800913c:	4b0b      	ldr	r3, [pc, #44]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009140:	e003      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009146:	f000 bc38 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800914a:	f000 bc36 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800914e:	4b08      	ldr	r3, [pc, #32]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009152:	f000 bc32 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800915a:	f000 bc2e 	b.w	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800915e:	bf00      	nop
 8009160:	58024400 	.word	0x58024400
 8009164:	03d09000 	.word	0x03d09000
 8009168:	003d0900 	.word	0x003d0900
 800916c:	017d7840 	.word	0x017d7840
 8009170:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009178:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800917c:	430b      	orrs	r3, r1
 800917e:	f040 809c 	bne.w	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009182:	4b9e      	ldr	r3, [pc, #632]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009186:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800918a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009192:	d054      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800919a:	f200 808b 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091a4:	f000 8083 	beq.w	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091ae:	f200 8081 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091b8:	d02f      	beq.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091c0:	d878      	bhi.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091ce:	d012      	beq.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80091d0:	e070      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091d2:	4b8a      	ldr	r3, [pc, #552]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091de:	d107      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 feaf 	bl	8009f48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ee:	e3e4      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f4:	e3e1      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091f6:	4b81      	ldr	r3, [pc, #516]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009202:	d107      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009204:	f107 0318 	add.w	r3, r7, #24
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fbf5 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009212:	e3d2      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009218:	e3cf      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800921a:	4b78      	ldr	r3, [pc, #480]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009226:	d107      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009228:	f107 030c 	add.w	r3, r7, #12
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fd37 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009236:	e3c0      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800923c:	e3bd      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800923e:	4b6f      	ldr	r3, [pc, #444]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009246:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009248:	4b6c      	ldr	r3, [pc, #432]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b04      	cmp	r3, #4
 8009252:	d10c      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009256:	2b00      	cmp	r3, #0
 8009258:	d109      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800925a:	4b68      	ldr	r3, [pc, #416]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	08db      	lsrs	r3, r3, #3
 8009260:	f003 0303 	and.w	r3, r3, #3
 8009264:	4a66      	ldr	r2, [pc, #408]	; (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009266:	fa22 f303 	lsr.w	r3, r2, r3
 800926a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800926c:	e01e      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800926e:	4b63      	ldr	r3, [pc, #396]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927a:	d106      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800927c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009282:	d102      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009284:	4b5f      	ldr	r3, [pc, #380]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009288:	e010      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800928a:	4b5c      	ldr	r3, [pc, #368]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009296:	d106      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800929e:	d102      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092a0:	4b59      	ldr	r3, [pc, #356]	; (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a4:	e002      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80092aa:	e386      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092ac:	e385      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092ae:	4b57      	ldr	r3, [pc, #348]	; (800940c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b2:	e382      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b8:	e37f      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80092ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092be:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80092c2:	430b      	orrs	r3, r1
 80092c4:	f040 80a7 	bne.w	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80092c8:	4b4c      	ldr	r3, [pc, #304]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80092d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092d8:	d055      	beq.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092e0:	f200 8096 	bhi.w	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092ea:	f000 8084 	beq.w	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092f4:	f200 808c 	bhi.w	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092fe:	d030      	beq.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009306:	f200 8083 	bhi.w	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009312:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009316:	d012      	beq.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009318:	e07a      	b.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800931a:	4b38      	ldr	r3, [pc, #224]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009326:	d107      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fe0b 	bl	8009f48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009336:	e340      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800933c:	e33d      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800933e:	4b2f      	ldr	r3, [pc, #188]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800934a:	d107      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800934c:	f107 0318 	add.w	r3, r7, #24
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fb51 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800935a:	e32e      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009360:	e32b      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009362:	4b26      	ldr	r3, [pc, #152]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800936a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800936e:	d107      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009370:	f107 030c 	add.w	r3, r7, #12
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fc93 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800937e:	e31c      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009384:	e319      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009386:	4b1d      	ldr	r3, [pc, #116]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800938a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800938e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009390:	4b1a      	ldr	r3, [pc, #104]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b04      	cmp	r3, #4
 800939a:	d10c      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800939c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d109      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093a2:	4b16      	ldr	r3, [pc, #88]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f003 0303 	and.w	r3, r3, #3
 80093ac:	4a14      	ldr	r2, [pc, #80]	; (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80093ae:	fa22 f303 	lsr.w	r3, r2, r3
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b4:	e01e      	b.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093b6:	4b11      	ldr	r3, [pc, #68]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c2:	d106      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80093c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ca:	d102      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093cc:	4b0d      	ldr	r3, [pc, #52]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d0:	e010      	b.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093d2:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093de:	d106      	bne.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80093e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093e6:	d102      	bne.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093e8:	4b07      	ldr	r3, [pc, #28]	; (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ec:	e002      	b.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093ee:	2300      	movs	r3, #0
 80093f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093f2:	e2e2      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093f4:	e2e1      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093fa:	e2de      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093fc:	58024400 	.word	0x58024400
 8009400:	03d09000 	.word	0x03d09000
 8009404:	003d0900 	.word	0x003d0900
 8009408:	017d7840 	.word	0x017d7840
 800940c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009414:	e2d1      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800941e:	430b      	orrs	r3, r1
 8009420:	f040 809c 	bne.w	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009424:	4b93      	ldr	r3, [pc, #588]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009428:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800942c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009434:	d054      	beq.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800943c:	f200 808b 	bhi.w	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009446:	f000 8083 	beq.w	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009450:	f200 8081 	bhi.w	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800945a:	d02f      	beq.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009462:	d878      	bhi.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009470:	d012      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009472:	e070      	b.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009474:	4b7f      	ldr	r3, [pc, #508]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800947c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009480:	d107      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fd5e 	bl	8009f48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009490:	e293      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009496:	e290      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009498:	4b76      	ldr	r3, [pc, #472]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094a4:	d107      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094a6:	f107 0318 	add.w	r3, r7, #24
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 faa4 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b4:	e281      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094ba:	e27e      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094bc:	4b6d      	ldr	r3, [pc, #436]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094c8:	d107      	bne.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ca:	f107 030c 	add.w	r3, r7, #12
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fbe6 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d8:	e26f      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094de:	e26c      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094e0:	4b64      	ldr	r3, [pc, #400]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094ea:	4b62      	ldr	r3, [pc, #392]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0304 	and.w	r3, r3, #4
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d10c      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80094f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d109      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094fc:	4b5d      	ldr	r3, [pc, #372]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	08db      	lsrs	r3, r3, #3
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	4a5c      	ldr	r2, [pc, #368]	; (8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009508:	fa22 f303 	lsr.w	r3, r2, r3
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800950e:	e01e      	b.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009510:	4b58      	ldr	r3, [pc, #352]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800951c:	d106      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800951e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009520:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009524:	d102      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009526:	4b55      	ldr	r3, [pc, #340]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800952a:	e010      	b.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800952c:	4b51      	ldr	r3, [pc, #324]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009538:	d106      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800953a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009540:	d102      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009542:	4b4f      	ldr	r3, [pc, #316]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009546:	e002      	b.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800954c:	e235      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800954e:	e234      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009550:	4b4c      	ldr	r3, [pc, #304]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009554:	e231      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800955a:	e22e      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800955c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009560:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009564:	430b      	orrs	r3, r1
 8009566:	f040 808f 	bne.w	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800956a:	4b42      	ldr	r3, [pc, #264]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800956c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009572:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800957a:	d06b      	beq.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009582:	d874      	bhi.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800958a:	d056      	beq.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800958c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009592:	d86c      	bhi.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800959a:	d03b      	beq.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095a2:	d864      	bhi.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095aa:	d021      	beq.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80095ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095b2:	d85c      	bhi.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d004      	beq.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095c0:	d004      	beq.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80095c2:	e054      	b.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80095c4:	f7fe fa4c 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 80095c8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095ca:	e1f6      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095cc:	4b29      	ldr	r3, [pc, #164]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095d8:	d107      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095da:	f107 0318 	add.w	r3, r7, #24
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fa0a 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e8:	e1e7      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ee:	e1e4      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095f0:	4b20      	ldr	r3, [pc, #128]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095fc:	d107      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095fe:	f107 030c 	add.w	r3, r7, #12
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fb4c 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800960c:	e1d5      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009612:	e1d2      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009614:	4b17      	ldr	r3, [pc, #92]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b04      	cmp	r3, #4
 800961e:	d109      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009620:	4b14      	ldr	r3, [pc, #80]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	08db      	lsrs	r3, r3, #3
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	4a13      	ldr	r2, [pc, #76]	; (8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800962c:	fa22 f303 	lsr.w	r3, r2, r3
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009632:	e1c2      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009634:	2300      	movs	r3, #0
 8009636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009638:	e1bf      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800963a:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009646:	d102      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009648:	4b0c      	ldr	r3, [pc, #48]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800964a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964c:	e1b5      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009652:	e1b2      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009654:	4b07      	ldr	r3, [pc, #28]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800965c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009660:	d102      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009666:	e1a8      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800966c:	e1a5      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009672:	e1a2      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009674:	58024400 	.word	0x58024400
 8009678:	03d09000 	.word	0x03d09000
 800967c:	003d0900 	.word	0x003d0900
 8009680:	017d7840 	.word	0x017d7840
 8009684:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009690:	430b      	orrs	r3, r1
 8009692:	d173      	bne.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009694:	4b9c      	ldr	r3, [pc, #624]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800969c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096a4:	d02f      	beq.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096ac:	d863      	bhi.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d004      	beq.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ba:	d012      	beq.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80096bc:	e05b      	b.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096be:	4b92      	ldr	r3, [pc, #584]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096ca:	d107      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096cc:	f107 0318 	add.w	r3, r7, #24
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f991 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096da:	e16e      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096e0:	e16b      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096e2:	4b89      	ldr	r3, [pc, #548]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ee:	d107      	bne.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f0:	f107 030c 	add.w	r3, r7, #12
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 fad3 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096fe:	e15c      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009704:	e159      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009706:	4b80      	ldr	r3, [pc, #512]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800970a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800970e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009710:	4b7d      	ldr	r3, [pc, #500]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b04      	cmp	r3, #4
 800971a:	d10c      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971e:	2b00      	cmp	r3, #0
 8009720:	d109      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009722:	4b79      	ldr	r3, [pc, #484]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	08db      	lsrs	r3, r3, #3
 8009728:	f003 0303 	and.w	r3, r3, #3
 800972c:	4a77      	ldr	r2, [pc, #476]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800972e:	fa22 f303 	lsr.w	r3, r2, r3
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009734:	e01e      	b.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009736:	4b74      	ldr	r3, [pc, #464]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009742:	d106      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800974a:	d102      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800974c:	4b70      	ldr	r3, [pc, #448]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009750:	e010      	b.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009752:	4b6d      	ldr	r3, [pc, #436]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800975a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800975e:	d106      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009766:	d102      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009768:	4b6a      	ldr	r3, [pc, #424]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800976c:	e002      	b.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009772:	e122      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009774:	e121      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800977a:	e11e      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800977c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009780:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009784:	430b      	orrs	r3, r1
 8009786:	d133      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009788:	4b5f      	ldr	r3, [pc, #380]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800978a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009790:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	2b00      	cmp	r3, #0
 8009796:	d004      	beq.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800979e:	d012      	beq.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80097a0:	e023      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097a2:	4b59      	ldr	r3, [pc, #356]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097ae:	d107      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 fbc7 	bl	8009f48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097be:	e0fc      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097c4:	e0f9      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097c6:	4b50      	ldr	r3, [pc, #320]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097d2:	d107      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097d4:	f107 0318 	add.w	r3, r7, #24
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 f90d 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e2:	e0ea      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097e8:	e0e7      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097ee:	e0e4      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80097f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80097f8:	430b      	orrs	r3, r1
 80097fa:	f040 808d 	bne.w	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80097fe:	4b42      	ldr	r3, [pc, #264]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009802:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009806:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800980e:	d06b      	beq.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009816:	d874      	bhi.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800981e:	d056      	beq.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009826:	d86c      	bhi.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800982e:	d03b      	beq.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009836:	d864      	bhi.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800983e:	d021      	beq.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009846:	d85c      	bhi.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	2b00      	cmp	r3, #0
 800984c:	d004      	beq.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800984e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009854:	d004      	beq.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009856:	e054      	b.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009858:	f000 f8b8 	bl	80099cc <HAL_RCCEx_GetD3PCLK1Freq>
 800985c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800985e:	e0ac      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009860:	4b29      	ldr	r3, [pc, #164]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800986c:	d107      	bne.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800986e:	f107 0318 	add.w	r3, r7, #24
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f8c0 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800987c:	e09d      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009882:	e09a      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009884:	4b20      	ldr	r3, [pc, #128]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800988c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009890:	d107      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009892:	f107 030c 	add.w	r3, r7, #12
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fa02 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a0:	e08b      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098a6:	e088      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098a8:	4b17      	ldr	r3, [pc, #92]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d109      	bne.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b4:	4b14      	ldr	r3, [pc, #80]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	08db      	lsrs	r3, r3, #3
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	4a13      	ldr	r2, [pc, #76]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
 80098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098c6:	e078      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098cc:	e075      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098ce:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098da:	d102      	bne.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80098dc:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80098de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098e0:	e06b      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098e2:	2300      	movs	r3, #0
 80098e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098e6:	e068      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098f4:	d102      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80098f6:	4b07      	ldr	r3, [pc, #28]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80098f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098fa:	e05e      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009900:	e05b      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009906:	e058      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009908:	58024400 	.word	0x58024400
 800990c:	03d09000 	.word	0x03d09000
 8009910:	003d0900 	.word	0x003d0900
 8009914:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800991c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009920:	430b      	orrs	r3, r1
 8009922:	d148      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009924:	4b27      	ldr	r3, [pc, #156]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800992c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800992e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009934:	d02a      	beq.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800993c:	d838      	bhi.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	2b00      	cmp	r3, #0
 8009942:	d004      	beq.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800994a:	d00d      	beq.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800994c:	e030      	b.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800994e:	4b1d      	ldr	r3, [pc, #116]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800995a:	d102      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800995c:	4b1a      	ldr	r3, [pc, #104]	; (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800995e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009960:	e02b      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009966:	e028      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009968:	4b16      	ldr	r3, [pc, #88]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009974:	d107      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fae4 	bl	8009f48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009984:	e019      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800998a:	e016      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800998c:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009998:	d107      	bne.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800999a:	f107 0318 	add.w	r3, r7, #24
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 f82a 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a8:	e007      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099ae:	e004      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099b4:	e001      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80099ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3740      	adds	r7, #64	; 0x40
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	58024400 	.word	0x58024400
 80099c8:	017d7840 	.word	0x017d7840

080099cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80099d0:	f7fe f816 	bl	8007a00 <HAL_RCC_GetHCLKFreq>
 80099d4:	4602      	mov	r2, r0
 80099d6:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	091b      	lsrs	r3, r3, #4
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	4904      	ldr	r1, [pc, #16]	; (80099f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099e2:	5ccb      	ldrb	r3, [r1, r3]
 80099e4:	f003 031f 	and.w	r3, r3, #31
 80099e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	58024400 	.word	0x58024400
 80099f4:	0800d458 	.word	0x0800d458

080099f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b089      	sub	sp, #36	; 0x24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a00:	4ba1      	ldr	r3, [pc, #644]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a04:	f003 0303 	and.w	r3, r3, #3
 8009a08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009a0a:	4b9f      	ldr	r3, [pc, #636]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	0b1b      	lsrs	r3, r3, #12
 8009a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a16:	4b9c      	ldr	r3, [pc, #624]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	091b      	lsrs	r3, r3, #4
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009a22:	4b99      	ldr	r3, [pc, #612]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a26:	08db      	lsrs	r3, r3, #3
 8009a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 8111 	beq.w	8009c68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	f000 8083 	beq.w	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	f200 80a1 	bhi.w	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d056      	beq.n	8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a62:	e099      	b.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a64:	4b88      	ldr	r3, [pc, #544]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d02d      	beq.n	8009acc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a70:	4b85      	ldr	r3, [pc, #532]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	08db      	lsrs	r3, r3, #3
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	4a84      	ldr	r2, [pc, #528]	; (8009c8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	ee07 3a90 	vmov	s15, r3
 8009a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9a:	4b7b      	ldr	r3, [pc, #492]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009aca:	e087      	b.n	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ade:	4b6a      	ldr	r3, [pc, #424]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009af2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b0e:	e065      	b.n	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b22:	4b59      	ldr	r3, [pc, #356]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b52:	e043      	b.n	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b66:	4b48      	ldr	r3, [pc, #288]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b96:	e021      	b.n	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009baa:	4b37      	ldr	r3, [pc, #220]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009bdc:	4b2a      	ldr	r3, [pc, #168]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be0:	0a5b      	lsrs	r3, r3, #9
 8009be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c02:	ee17 2a90 	vmov	r2, s15
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009c0a:	4b1f      	ldr	r3, [pc, #124]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0e:	0c1b      	lsrs	r3, r3, #16
 8009c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c14:	ee07 3a90 	vmov	s15, r3
 8009c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c24:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c30:	ee17 2a90 	vmov	r2, s15
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009c38:	4b13      	ldr	r3, [pc, #76]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3c:	0e1b      	lsrs	r3, r3, #24
 8009c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c5e:	ee17 2a90 	vmov	r2, s15
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c66:	e008      	b.n	8009c7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	609a      	str	r2, [r3, #8]
}
 8009c7a:	bf00      	nop
 8009c7c:	3724      	adds	r7, #36	; 0x24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	58024400 	.word	0x58024400
 8009c8c:	03d09000 	.word	0x03d09000
 8009c90:	46000000 	.word	0x46000000
 8009c94:	4c742400 	.word	0x4c742400
 8009c98:	4a742400 	.word	0x4a742400
 8009c9c:	4bbebc20 	.word	0x4bbebc20

08009ca0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b089      	sub	sp, #36	; 0x24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ca8:	4ba1      	ldr	r3, [pc, #644]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cac:	f003 0303 	and.w	r3, r3, #3
 8009cb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009cb2:	4b9f      	ldr	r3, [pc, #636]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb6:	0d1b      	lsrs	r3, r3, #20
 8009cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009cbe:	4b9c      	ldr	r3, [pc, #624]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	0a1b      	lsrs	r3, r3, #8
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009cca:	4b99      	ldr	r3, [pc, #612]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cce:	08db      	lsrs	r3, r3, #3
 8009cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	fb02 f303 	mul.w	r3, r2, r3
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 8111 	beq.w	8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	f000 8083 	beq.w	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	f200 80a1 	bhi.w	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d003      	beq.n	8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d056      	beq.n	8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d0a:	e099      	b.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d0c:	4b88      	ldr	r3, [pc, #544]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0320 	and.w	r3, r3, #32
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d02d      	beq.n	8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d18:	4b85      	ldr	r3, [pc, #532]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	08db      	lsrs	r3, r3, #3
 8009d1e:	f003 0303 	and.w	r3, r3, #3
 8009d22:	4a84      	ldr	r2, [pc, #528]	; (8009f34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d24:	fa22 f303 	lsr.w	r3, r2, r3
 8009d28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	ee07 3a90 	vmov	s15, r3
 8009d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	ee07 3a90 	vmov	s15, r3
 8009d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d42:	4b7b      	ldr	r3, [pc, #492]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d72:	e087      	b.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d86:	4b6a      	ldr	r3, [pc, #424]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009db6:	e065      	b.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dca:	4b59      	ldr	r3, [pc, #356]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dde:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dfa:	e043      	b.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0e:	4b48      	ldr	r3, [pc, #288]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e3e:	e021      	b.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e52:	4b37      	ldr	r3, [pc, #220]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009e84:	4b2a      	ldr	r3, [pc, #168]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	0a5b      	lsrs	r3, r3, #9
 8009e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eaa:	ee17 2a90 	vmov	r2, s15
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009eb2:	4b1f      	ldr	r3, [pc, #124]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	0c1b      	lsrs	r3, r3, #16
 8009eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ebc:	ee07 3a90 	vmov	s15, r3
 8009ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ed8:	ee17 2a90 	vmov	r2, s15
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ee0:	4b13      	ldr	r3, [pc, #76]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee4:	0e1b      	lsrs	r3, r3, #24
 8009ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eea:	ee07 3a90 	vmov	s15, r3
 8009eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f06:	ee17 2a90 	vmov	r2, s15
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f0e:	e008      	b.n	8009f22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	609a      	str	r2, [r3, #8]
}
 8009f22:	bf00      	nop
 8009f24:	3724      	adds	r7, #36	; 0x24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	58024400 	.word	0x58024400
 8009f34:	03d09000 	.word	0x03d09000
 8009f38:	46000000 	.word	0x46000000
 8009f3c:	4c742400 	.word	0x4c742400
 8009f40:	4a742400 	.word	0x4a742400
 8009f44:	4bbebc20 	.word	0x4bbebc20

08009f48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b089      	sub	sp, #36	; 0x24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f50:	4ba0      	ldr	r3, [pc, #640]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	f003 0303 	and.w	r3, r3, #3
 8009f58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009f5a:	4b9e      	ldr	r3, [pc, #632]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5e:	091b      	lsrs	r3, r3, #4
 8009f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f66:	4b9b      	ldr	r3, [pc, #620]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f70:	4b98      	ldr	r3, [pc, #608]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f74:	08db      	lsrs	r3, r3, #3
 8009f76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	fb02 f303 	mul.w	r3, r2, r3
 8009f80:	ee07 3a90 	vmov	s15, r3
 8009f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 8111 	beq.w	800a1b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	f000 8083 	beq.w	800a0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	f200 80a1 	bhi.w	800a0e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d056      	beq.n	800a05e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009fb0:	e099      	b.n	800a0e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fb2:	4b88      	ldr	r3, [pc, #544]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0320 	and.w	r3, r3, #32
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d02d      	beq.n	800a01a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fbe:	4b85      	ldr	r3, [pc, #532]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	08db      	lsrs	r3, r3, #3
 8009fc4:	f003 0303 	and.w	r3, r3, #3
 8009fc8:	4a83      	ldr	r2, [pc, #524]	; (800a1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009fca:	fa22 f303 	lsr.w	r3, r2, r3
 8009fce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	ee07 3a90 	vmov	s15, r3
 8009fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	ee07 3a90 	vmov	s15, r3
 8009fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe8:	4b7a      	ldr	r3, [pc, #488]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ffc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a014:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a018:	e087      	b.n	800a12a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a024:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02c:	4b69      	ldr	r3, [pc, #420]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a034:	ee07 3a90 	vmov	s15, r3
 800a038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a040:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a058:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a05c:	e065      	b.n	800a12a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a068:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a06c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a070:	4b58      	ldr	r3, [pc, #352]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a080:	ed97 6a03 	vldr	s12, [r7, #12]
 800a084:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0a0:	e043      	b.n	800a12a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a0b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b4:	4b47      	ldr	r3, [pc, #284]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0bc:	ee07 3a90 	vmov	s15, r3
 800a0c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0e4:	e021      	b.n	800a12a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	ee07 3a90 	vmov	s15, r3
 800a0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0f8:	4b36      	ldr	r3, [pc, #216]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a100:	ee07 3a90 	vmov	s15, r3
 800a104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a108:	ed97 6a03 	vldr	s12, [r7, #12]
 800a10c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a11c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a120:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a124:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a128:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a12a:	4b2a      	ldr	r3, [pc, #168]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	0a5b      	lsrs	r3, r3, #9
 800a130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a140:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a144:	edd7 6a07 	vldr	s13, [r7, #28]
 800a148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a14c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a150:	ee17 2a90 	vmov	r2, s15
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a158:	4b1e      	ldr	r3, [pc, #120]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15c:	0c1b      	lsrs	r3, r3, #16
 800a15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a16e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a172:	edd7 6a07 	vldr	s13, [r7, #28]
 800a176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a17a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a17e:	ee17 2a90 	vmov	r2, s15
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a186:	4b13      	ldr	r3, [pc, #76]	; (800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	0e1b      	lsrs	r3, r3, #24
 800a18c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a190:	ee07 3a90 	vmov	s15, r3
 800a194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a19c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ac:	ee17 2a90 	vmov	r2, s15
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	609a      	str	r2, [r3, #8]
}
 800a1c8:	bf00      	nop
 800a1ca:	3724      	adds	r7, #36	; 0x24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	58024400 	.word	0x58024400
 800a1d8:	03d09000 	.word	0x03d09000
 800a1dc:	46000000 	.word	0x46000000
 800a1e0:	4c742400 	.word	0x4c742400
 800a1e4:	4a742400 	.word	0x4a742400
 800a1e8:	4bbebc20 	.word	0x4bbebc20

0800a1ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1fa:	4b53      	ldr	r3, [pc, #332]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fe:	f003 0303 	and.w	r3, r3, #3
 800a202:	2b03      	cmp	r3, #3
 800a204:	d101      	bne.n	800a20a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e099      	b.n	800a33e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a20a:	4b4f      	ldr	r3, [pc, #316]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a4e      	ldr	r2, [pc, #312]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a210:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a216:	f7f8 fd6d 	bl	8002cf4 <HAL_GetTick>
 800a21a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a21c:	e008      	b.n	800a230 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a21e:	f7f8 fd69 	bl	8002cf4 <HAL_GetTick>
 800a222:	4602      	mov	r2, r0
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d901      	bls.n	800a230 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e086      	b.n	800a33e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a230:	4b45      	ldr	r3, [pc, #276]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1f0      	bne.n	800a21e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a23c:	4b42      	ldr	r3, [pc, #264]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a240:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	031b      	lsls	r3, r3, #12
 800a24a:	493f      	ldr	r1, [pc, #252]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a24c:	4313      	orrs	r3, r2
 800a24e:	628b      	str	r3, [r1, #40]	; 0x28
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	3b01      	subs	r3, #1
 800a256:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	3b01      	subs	r3, #1
 800a260:	025b      	lsls	r3, r3, #9
 800a262:	b29b      	uxth	r3, r3
 800a264:	431a      	orrs	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	041b      	lsls	r3, r3, #16
 800a26e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a272:	431a      	orrs	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	3b01      	subs	r3, #1
 800a27a:	061b      	lsls	r3, r3, #24
 800a27c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a280:	4931      	ldr	r1, [pc, #196]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a282:	4313      	orrs	r3, r2
 800a284:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a286:	4b30      	ldr	r3, [pc, #192]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	492d      	ldr	r1, [pc, #180]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a294:	4313      	orrs	r3, r2
 800a296:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a298:	4b2b      	ldr	r3, [pc, #172]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	f023 0220 	bic.w	r2, r3, #32
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	4928      	ldr	r1, [pc, #160]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a2aa:	4b27      	ldr	r3, [pc, #156]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	4a26      	ldr	r2, [pc, #152]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2b0:	f023 0310 	bic.w	r3, r3, #16
 800a2b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a2b6:	4b24      	ldr	r3, [pc, #144]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ba:	4b24      	ldr	r3, [pc, #144]	; (800a34c <RCCEx_PLL2_Config+0x160>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	69d2      	ldr	r2, [r2, #28]
 800a2c2:	00d2      	lsls	r2, r2, #3
 800a2c4:	4920      	ldr	r1, [pc, #128]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a2ca:	4b1f      	ldr	r3, [pc, #124]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ce:	4a1e      	ldr	r2, [pc, #120]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2d0:	f043 0310 	orr.w	r3, r3, #16
 800a2d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a2dc:	4b1a      	ldr	r3, [pc, #104]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	4a19      	ldr	r2, [pc, #100]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2e8:	e00f      	b.n	800a30a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d106      	bne.n	800a2fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a2f0:	4b15      	ldr	r3, [pc, #84]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	4a14      	ldr	r2, [pc, #80]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a2f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2fc:	e005      	b.n	800a30a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2fe:	4b12      	ldr	r3, [pc, #72]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a302:	4a11      	ldr	r2, [pc, #68]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a308:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a30a:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a0e      	ldr	r2, [pc, #56]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a310:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a316:	f7f8 fced 	bl	8002cf4 <HAL_GetTick>
 800a31a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a31c:	e008      	b.n	800a330 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a31e:	f7f8 fce9 	bl	8002cf4 <HAL_GetTick>
 800a322:	4602      	mov	r2, r0
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d901      	bls.n	800a330 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e006      	b.n	800a33e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a330:	4b05      	ldr	r3, [pc, #20]	; (800a348 <RCCEx_PLL2_Config+0x15c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d0f0      	beq.n	800a31e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	58024400 	.word	0x58024400
 800a34c:	ffff0007 	.word	0xffff0007

0800a350 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a35e:	4b53      	ldr	r3, [pc, #332]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a362:	f003 0303 	and.w	r3, r3, #3
 800a366:	2b03      	cmp	r3, #3
 800a368:	d101      	bne.n	800a36e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e099      	b.n	800a4a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a36e:	4b4f      	ldr	r3, [pc, #316]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a4e      	ldr	r2, [pc, #312]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a37a:	f7f8 fcbb 	bl	8002cf4 <HAL_GetTick>
 800a37e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a380:	e008      	b.n	800a394 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a382:	f7f8 fcb7 	bl	8002cf4 <HAL_GetTick>
 800a386:	4602      	mov	r2, r0
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d901      	bls.n	800a394 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e086      	b.n	800a4a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a394:	4b45      	ldr	r3, [pc, #276]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1f0      	bne.n	800a382 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3a0:	4b42      	ldr	r3, [pc, #264]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	051b      	lsls	r3, r3, #20
 800a3ae:	493f      	ldr	r1, [pc, #252]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	628b      	str	r3, [r1, #40]	; 0x28
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	025b      	lsls	r3, r3, #9
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	041b      	lsls	r3, r3, #16
 800a3d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	061b      	lsls	r3, r3, #24
 800a3e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3e4:	4931      	ldr	r1, [pc, #196]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3ea:	4b30      	ldr	r3, [pc, #192]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	492d      	ldr	r1, [pc, #180]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3fc:	4b2b      	ldr	r3, [pc, #172]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	4928      	ldr	r1, [pc, #160]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a40e:	4b27      	ldr	r3, [pc, #156]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	4a26      	ldr	r2, [pc, #152]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a418:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a41a:	4b24      	ldr	r3, [pc, #144]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a41c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a41e:	4b24      	ldr	r3, [pc, #144]	; (800a4b0 <RCCEx_PLL3_Config+0x160>)
 800a420:	4013      	ands	r3, r2
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	69d2      	ldr	r2, [r2, #28]
 800a426:	00d2      	lsls	r2, r2, #3
 800a428:	4920      	ldr	r1, [pc, #128]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a42e:	4b1f      	ldr	r3, [pc, #124]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	4a1e      	ldr	r2, [pc, #120]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d106      	bne.n	800a44e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a440:	4b1a      	ldr	r3, [pc, #104]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a444:	4a19      	ldr	r2, [pc, #100]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a44a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a44c:	e00f      	b.n	800a46e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d106      	bne.n	800a462 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a454:	4b15      	ldr	r3, [pc, #84]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	4a14      	ldr	r2, [pc, #80]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a45a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a45e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a460:	e005      	b.n	800a46e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a462:	4b12      	ldr	r3, [pc, #72]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	4a11      	ldr	r2, [pc, #68]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a46c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a46e:	4b0f      	ldr	r3, [pc, #60]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a0e      	ldr	r2, [pc, #56]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a47a:	f7f8 fc3b 	bl	8002cf4 <HAL_GetTick>
 800a47e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a480:	e008      	b.n	800a494 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a482:	f7f8 fc37 	bl	8002cf4 <HAL_GetTick>
 800a486:	4602      	mov	r2, r0
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d901      	bls.n	800a494 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a490:	2303      	movs	r3, #3
 800a492:	e006      	b.n	800a4a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a494:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <RCCEx_PLL3_Config+0x15c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d0f0      	beq.n	800a482 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	58024400 	.word	0x58024400
 800a4b0:	ffff0007 	.word	0xffff0007

0800a4b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d071      	beq.n	800a5aa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d106      	bne.n	800a4e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7f7 ff26 	bl	800232c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f003 0310 	and.w	r3, r3, #16
 800a4f2:	2b10      	cmp	r3, #16
 800a4f4:	d050      	beq.n	800a598 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	22ca      	movs	r2, #202	; 0xca
 800a4fc:	625a      	str	r2, [r3, #36]	; 0x24
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2253      	movs	r2, #83	; 0x53
 800a504:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f87a 	bl	800a600 <RTC_EnterInitMode>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d124      	bne.n	800a560 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6899      	ldr	r1, [r3, #8]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	4b24      	ldr	r3, [pc, #144]	; (800a5b4 <HAL_RTC_Init+0x100>)
 800a522:	400b      	ands	r3, r1
 800a524:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6899      	ldr	r1, [r3, #8]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	431a      	orrs	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	431a      	orrs	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	0419      	lsls	r1, r3, #16
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68da      	ldr	r2, [r3, #12]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f886 	bl	800a668 <RTC_ExitInitMode>
 800a55c:	4603      	mov	r3, r0
 800a55e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d113      	bne.n	800a58e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 0203 	bic.w	r2, r2, #3
 800a574:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	69da      	ldr	r2, [r3, #28]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	431a      	orrs	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	22ff      	movs	r2, #255	; 0xff
 800a594:	625a      	str	r2, [r3, #36]	; 0x24
 800a596:	e001      	b.n	800a59c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d103      	bne.n	800a5aa <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	ff8fffbf 	.word	0xff8fffbf

0800a5b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a0d      	ldr	r2, [pc, #52]	; (800a5fc <HAL_RTC_WaitForSynchro+0x44>)
 800a5c6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a5c8:	f7f8 fb94 	bl	8002cf4 <HAL_GetTick>
 800a5cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a5ce:	e009      	b.n	800a5e4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a5d0:	f7f8 fb90 	bl	8002cf4 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5de:	d901      	bls.n	800a5e4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e007      	b.n	800a5f4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f003 0320 	and.w	r3, r3, #32
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0ee      	beq.n	800a5d0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	0003ff5f 	.word	0x0003ff5f

0800a600 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a616:	2b00      	cmp	r3, #0
 800a618:	d120      	bne.n	800a65c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a624:	f7f8 fb66 	bl	8002cf4 <HAL_GetTick>
 800a628:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a62a:	e00d      	b.n	800a648 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a62c:	f7f8 fb62 	bl	8002cf4 <HAL_GetTick>
 800a630:	4602      	mov	r2, r0
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a63a:	d905      	bls.n	800a648 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2203      	movs	r2, #3
 800a644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a652:	2b00      	cmp	r3, #0
 800a654:	d102      	bne.n	800a65c <RTC_EnterInitMode+0x5c>
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d1e7      	bne.n	800a62c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a674:	4b1a      	ldr	r3, [pc, #104]	; (800a6e0 <RTC_ExitInitMode+0x78>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	4a19      	ldr	r2, [pc, #100]	; (800a6e0 <RTC_ExitInitMode+0x78>)
 800a67a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a67e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a680:	4b17      	ldr	r3, [pc, #92]	; (800a6e0 <RTC_ExitInitMode+0x78>)
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f003 0320 	and.w	r3, r3, #32
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10c      	bne.n	800a6a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff ff93 	bl	800a5b8 <HAL_RTC_WaitForSynchro>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01e      	beq.n	800a6d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2203      	movs	r2, #3
 800a69c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	73fb      	strb	r3, [r7, #15]
 800a6a4:	e017      	b.n	800a6d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a6a6:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <RTC_ExitInitMode+0x78>)
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	4a0d      	ldr	r2, [pc, #52]	; (800a6e0 <RTC_ExitInitMode+0x78>)
 800a6ac:	f023 0320 	bic.w	r3, r3, #32
 800a6b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff ff80 	bl	800a5b8 <HAL_RTC_WaitForSynchro>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d005      	beq.n	800a6ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a6ca:	4b05      	ldr	r3, [pc, #20]	; (800a6e0 <RTC_ExitInitMode+0x78>)
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	4a04      	ldr	r2, [pc, #16]	; (800a6e0 <RTC_ExitInitMode+0x78>)
 800a6d0:	f043 0320 	orr.w	r3, r3, #32
 800a6d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	58004000 	.word	0x58004000

0800a6e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08a      	sub	sp, #40	; 0x28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e28e      	b.n	800ac14 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a6f6:	f7f8 fb2d 	bl	8002d54 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a700:	2b01      	cmp	r3, #1
 800a702:	d113      	bne.n	800a72c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a96      	ldr	r2, [pc, #600]	; (800a964 <HAL_SAI_Init+0x280>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d004      	beq.n	800a718 <HAL_SAI_Init+0x34>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a95      	ldr	r2, [pc, #596]	; (800a968 <HAL_SAI_Init+0x284>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d107      	bne.n	800a728 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d103      	bne.n	800a728 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e273      	b.n	800ac14 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a8c      	ldr	r2, [pc, #560]	; (800a964 <HAL_SAI_Init+0x280>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d004      	beq.n	800a740 <HAL_SAI_Init+0x5c>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a8c      	ldr	r2, [pc, #560]	; (800a96c <HAL_SAI_Init+0x288>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d102      	bne.n	800a746 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a740:	4b8b      	ldr	r3, [pc, #556]	; (800a970 <HAL_SAI_Init+0x28c>)
 800a742:	61bb      	str	r3, [r7, #24]
 800a744:	e028      	b.n	800a798 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a8a      	ldr	r2, [pc, #552]	; (800a974 <HAL_SAI_Init+0x290>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d004      	beq.n	800a75a <HAL_SAI_Init+0x76>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a88      	ldr	r2, [pc, #544]	; (800a978 <HAL_SAI_Init+0x294>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d102      	bne.n	800a760 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a75a:	4b88      	ldr	r3, [pc, #544]	; (800a97c <HAL_SAI_Init+0x298>)
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	e01b      	b.n	800a798 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a86      	ldr	r2, [pc, #536]	; (800a980 <HAL_SAI_Init+0x29c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d004      	beq.n	800a774 <HAL_SAI_Init+0x90>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a85      	ldr	r2, [pc, #532]	; (800a984 <HAL_SAI_Init+0x2a0>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d102      	bne.n	800a77a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a774:	4b84      	ldr	r3, [pc, #528]	; (800a988 <HAL_SAI_Init+0x2a4>)
 800a776:	61bb      	str	r3, [r7, #24]
 800a778:	e00e      	b.n	800a798 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a7a      	ldr	r2, [pc, #488]	; (800a968 <HAL_SAI_Init+0x284>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d004      	beq.n	800a78e <HAL_SAI_Init+0xaa>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a80      	ldr	r2, [pc, #512]	; (800a98c <HAL_SAI_Init+0x2a8>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d102      	bne.n	800a794 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a78e:	4b80      	ldr	r3, [pc, #512]	; (800a990 <HAL_SAI_Init+0x2ac>)
 800a790:	61bb      	str	r3, [r7, #24]
 800a792:	e001      	b.n	800a798 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e23d      	b.n	800ac14 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d106      	bne.n	800a7b2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7f8 f865 	bl	800287c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fa40 	bl	800ac38 <SAI_Disable>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e228      	b.n	800ac14 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d00c      	beq.n	800a7ec <HAL_SAI_Init+0x108>
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d80d      	bhi.n	800a7f2 <HAL_SAI_Init+0x10e>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d002      	beq.n	800a7e0 <HAL_SAI_Init+0xfc>
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d003      	beq.n	800a7e6 <HAL_SAI_Init+0x102>
 800a7de:	e008      	b.n	800a7f2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7e4:	e008      	b.n	800a7f8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a7e6:	2310      	movs	r3, #16
 800a7e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7ea:	e005      	b.n	800a7f8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a7ec:	2320      	movs	r3, #32
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7f0:	e002      	b.n	800a7f8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7f6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	2b05      	cmp	r3, #5
 800a7fe:	d832      	bhi.n	800a866 <HAL_SAI_Init+0x182>
 800a800:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <HAL_SAI_Init+0x124>)
 800a802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a806:	bf00      	nop
 800a808:	0800a821 	.word	0x0800a821
 800a80c:	0800a827 	.word	0x0800a827
 800a810:	0800a82f 	.word	0x0800a82f
 800a814:	0800a837 	.word	0x0800a837
 800a818:	0800a847 	.word	0x0800a847
 800a81c:	0800a857 	.word	0x0800a857
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	61fb      	str	r3, [r7, #28]
      break;
 800a824:	e022      	b.n	800a86c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a82a:	61fb      	str	r3, [r7, #28]
      break;
 800a82c:	e01e      	b.n	800a86c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a82e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a832:	61fb      	str	r3, [r7, #28]
      break;
 800a834:	e01a      	b.n	800a86c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a83a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	f043 0301 	orr.w	r3, r3, #1
 800a842:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a844:	e012      	b.n	800a86c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a84a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	f043 0302 	orr.w	r3, r3, #2
 800a852:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a854:	e00a      	b.n	800a86c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a85a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	f043 0303 	orr.w	r3, r3, #3
 800a862:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a864:	e002      	b.n	800a86c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	61fb      	str	r3, [r7, #28]
      break;
 800a86a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a870:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	2b00      	cmp	r3, #0
 800a878:	f000 80c5 	beq.w	800aa06 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a37      	ldr	r2, [pc, #220]	; (800a964 <HAL_SAI_Init+0x280>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d004      	beq.n	800a894 <HAL_SAI_Init+0x1b0>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a37      	ldr	r2, [pc, #220]	; (800a96c <HAL_SAI_Init+0x288>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d106      	bne.n	800a8a2 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a894:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a898:	f04f 0100 	mov.w	r1, #0
 800a89c:	f7fe fb16 	bl	8008ecc <HAL_RCCEx_GetPeriphCLKFreq>
 800a8a0:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a33      	ldr	r2, [pc, #204]	; (800a974 <HAL_SAI_Init+0x290>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d004      	beq.n	800a8b6 <HAL_SAI_Init+0x1d2>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a31      	ldr	r2, [pc, #196]	; (800a978 <HAL_SAI_Init+0x294>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d106      	bne.n	800a8c4 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a8b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a8ba:	f04f 0100 	mov.w	r1, #0
 800a8be:	f7fe fb05 	bl	8008ecc <HAL_RCCEx_GetPeriphCLKFreq>
 800a8c2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a2d      	ldr	r2, [pc, #180]	; (800a980 <HAL_SAI_Init+0x29c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d004      	beq.n	800a8d8 <HAL_SAI_Init+0x1f4>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a2c      	ldr	r2, [pc, #176]	; (800a984 <HAL_SAI_Init+0x2a0>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d106      	bne.n	800a8e6 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a8d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a8dc:	f04f 0100 	mov.w	r1, #0
 800a8e0:	f7fe faf4 	bl	8008ecc <HAL_RCCEx_GetPeriphCLKFreq>
 800a8e4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a1f      	ldr	r2, [pc, #124]	; (800a968 <HAL_SAI_Init+0x284>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d106      	bne.n	800a8fe <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a8f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a8f4:	f04f 0100 	mov.w	r1, #0
 800a8f8:	f7fe fae8 	bl	8008ecc <HAL_RCCEx_GetPeriphCLKFreq>
 800a8fc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a22      	ldr	r2, [pc, #136]	; (800a98c <HAL_SAI_Init+0x2a8>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d106      	bne.n	800a916 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a908:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a90c:	f04f 0100 	mov.w	r1, #0
 800a910:	f7fe fadc 	bl	8008ecc <HAL_RCCEx_GetPeriphCLKFreq>
 800a914:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a91e:	d139      	bne.n	800a994 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a924:	2b04      	cmp	r3, #4
 800a926:	d102      	bne.n	800a92e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a928:	2340      	movs	r3, #64	; 0x40
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	e00a      	b.n	800a944 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a932:	2b08      	cmp	r3, #8
 800a934:	d103      	bne.n	800a93e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	e002      	b.n	800a944 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a942:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	4613      	mov	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	005b      	lsls	r3, r3, #1
 800a94e:	4619      	mov	r1, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	fb02 f303 	mul.w	r3, r2, r3
 800a95a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a95e:	613b      	str	r3, [r7, #16]
 800a960:	e030      	b.n	800a9c4 <HAL_SAI_Init+0x2e0>
 800a962:	bf00      	nop
 800a964:	40015804 	.word	0x40015804
 800a968:	58005404 	.word	0x58005404
 800a96c:	40015824 	.word	0x40015824
 800a970:	40015800 	.word	0x40015800
 800a974:	40015c04 	.word	0x40015c04
 800a978:	40015c24 	.word	0x40015c24
 800a97c:	40015c00 	.word	0x40015c00
 800a980:	40016004 	.word	0x40016004
 800a984:	40016024 	.word	0x40016024
 800a988:	40016000 	.word	0x40016000
 800a98c:	58005424 	.word	0x58005424
 800a990:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a99c:	d101      	bne.n	800a9a2 <HAL_SAI_Init+0x2be>
 800a99e:	2302      	movs	r3, #2
 800a9a0:	e000      	b.n	800a9a4 <HAL_SAI_Init+0x2c0>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	fb02 f303 	mul.w	r3, r2, r3
 800a9bc:	021b      	lsls	r3, r3, #8
 800a9be:	fbb1 f3f3 	udiv	r3, r1, r3
 800a9c2:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	4a95      	ldr	r2, [pc, #596]	; (800ac1c <HAL_SAI_Init+0x538>)
 800a9c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9cc:	08da      	lsrs	r2, r3, #3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a9d2:	6939      	ldr	r1, [r7, #16]
 800a9d4:	4b91      	ldr	r3, [pc, #580]	; (800ac1c <HAL_SAI_Init+0x538>)
 800a9d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a9da:	08da      	lsrs	r2, r3, #3
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	1aca      	subs	r2, r1, r3
 800a9e6:	2a08      	cmp	r2, #8
 800a9e8:	d904      	bls.n	800a9f4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f8:	2b04      	cmp	r3, #4
 800a9fa:	d104      	bne.n	800aa06 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	085a      	lsrs	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <HAL_SAI_Init+0x332>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d109      	bne.n	800aa2a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d101      	bne.n	800aa22 <HAL_SAI_Init+0x33e>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	e001      	b.n	800aa26 <HAL_SAI_Init+0x342>
 800aa22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa26:	623b      	str	r3, [r7, #32]
 800aa28:	e008      	b.n	800aa3c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d102      	bne.n	800aa38 <HAL_SAI_Init+0x354>
 800aa32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa36:	e000      	b.n	800aa3a <HAL_SAI_Init+0x356>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800aa3c:	f7f8 f98a 	bl	8002d54 <HAL_GetREVID>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa46:	d331      	bcc.n	800aaac <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6819      	ldr	r1, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	4b73      	ldr	r3, [pc, #460]	; (800ac20 <HAL_SAI_Init+0x53c>)
 800aa54:	400b      	ands	r3, r1
 800aa56:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6819      	ldr	r1, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa66:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa6c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa72:	431a      	orrs	r2, r3
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800aa80:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa8c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	051b      	lsls	r3, r3, #20
 800aa94:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa9a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	e02d      	b.n	800ab08 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6819      	ldr	r1, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	4b5b      	ldr	r3, [pc, #364]	; (800ac24 <HAL_SAI_Init+0x540>)
 800aab8:	400b      	ands	r3, r1
 800aaba:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6819      	ldr	r1, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaca:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aad0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aad6:	431a      	orrs	r2, r3
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800aae4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aaf0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	051b      	lsls	r3, r3, #20
 800aaf8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aafe:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	430a      	orrs	r2, r1
 800ab06:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6859      	ldr	r1, [r3, #4]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4b45      	ldr	r3, [pc, #276]	; (800ac28 <HAL_SAI_Init+0x544>)
 800ab14:	400b      	ands	r3, r1
 800ab16:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6859      	ldr	r1, [r3, #4]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	69da      	ldr	r2, [r3, #28]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab26:	431a      	orrs	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6899      	ldr	r1, [r3, #8]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	4b3a      	ldr	r3, [pc, #232]	; (800ac2c <HAL_SAI_Init+0x548>)
 800ab42:	400b      	ands	r3, r1
 800ab44:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6899      	ldr	r1, [r3, #8]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab50:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ab56:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800ab5c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800ab62:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ab6c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68d9      	ldr	r1, [r3, #12]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ab84:	400b      	ands	r3, r1
 800ab86:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68d9      	ldr	r1, [r3, #12]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab96:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab9c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ab9e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba4:	3b01      	subs	r3, #1
 800aba6:	021b      	lsls	r3, r3, #8
 800aba8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a1e      	ldr	r2, [pc, #120]	; (800ac30 <HAL_SAI_Init+0x54c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d004      	beq.n	800abc6 <HAL_SAI_Init+0x4e2>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a1c      	ldr	r2, [pc, #112]	; (800ac34 <HAL_SAI_Init+0x550>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d119      	bne.n	800abfa <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abca:	f023 0201 	bic.w	r2, r3, #1
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d10e      	bne.n	800abfa <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe4:	3b01      	subs	r3, #1
 800abe6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800abe8:	431a      	orrs	r2, r3
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf2:	f043 0201 	orr.w	r2, r3, #1
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3728      	adds	r7, #40	; 0x28
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	cccccccd 	.word	0xcccccccd
 800ac20:	f005c010 	.word	0xf005c010
 800ac24:	f805c010 	.word	0xf805c010
 800ac28:	ffff1ff0 	.word	0xffff1ff0
 800ac2c:	fff88000 	.word	0xfff88000
 800ac30:	40015804 	.word	0x40015804
 800ac34:	58005404 	.word	0x58005404

0800ac38 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ac40:	4b18      	ldr	r3, [pc, #96]	; (800aca4 <SAI_Disable+0x6c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a18      	ldr	r2, [pc, #96]	; (800aca8 <SAI_Disable+0x70>)
 800ac46:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4a:	0b1b      	lsrs	r3, r3, #12
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ac62:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10a      	bne.n	800ac80 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	72fb      	strb	r3, [r7, #11]
      break;
 800ac7e:	e009      	b.n	800ac94 <SAI_Disable+0x5c>
    }
    count--;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3b01      	subs	r3, #1
 800ac84:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e7      	bne.n	800ac64 <SAI_Disable+0x2c>

  return status;
 800ac94:	7afb      	ldrb	r3, [r7, #11]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	24000000 	.word	0x24000000
 800aca8:	95cbec1b 	.word	0x95cbec1b

0800acac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d101      	bne.n	800acc0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e02b      	b.n	800ad18 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d106      	bne.n	800acda <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7f7 fdc7 	bl	8002868 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2202      	movs	r2, #2
 800acde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3304      	adds	r3, #4
 800acea:	4619      	mov	r1, r3
 800acec:	4610      	mov	r0, r2
 800acee:	f001 fabd 	bl	800c26c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6818      	ldr	r0, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	461a      	mov	r2, r3
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	f001 fb11 	bl	800c324 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <HAL_SDRAM_Init+0x74>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a06      	ldr	r2, [pc, #24]	; (800ad20 <HAL_SDRAM_Init+0x74>)
 800ad08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad0c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	52004000 	.word	0x52004000

0800ad24 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e10f      	b.n	800af56 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a87      	ldr	r2, [pc, #540]	; (800af60 <HAL_SPI_Init+0x23c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d00f      	beq.n	800ad66 <HAL_SPI_Init+0x42>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a86      	ldr	r2, [pc, #536]	; (800af64 <HAL_SPI_Init+0x240>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d00a      	beq.n	800ad66 <HAL_SPI_Init+0x42>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a84      	ldr	r2, [pc, #528]	; (800af68 <HAL_SPI_Init+0x244>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d005      	beq.n	800ad66 <HAL_SPI_Init+0x42>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	2b0f      	cmp	r3, #15
 800ad60:	d901      	bls.n	800ad66 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e0f7      	b.n	800af56 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f900 	bl	800af6c <SPI_GetPacketSize>
 800ad6c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a7b      	ldr	r2, [pc, #492]	; (800af60 <HAL_SPI_Init+0x23c>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d00c      	beq.n	800ad92 <HAL_SPI_Init+0x6e>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a79      	ldr	r2, [pc, #484]	; (800af64 <HAL_SPI_Init+0x240>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d007      	beq.n	800ad92 <HAL_SPI_Init+0x6e>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a78      	ldr	r2, [pc, #480]	; (800af68 <HAL_SPI_Init+0x244>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d002      	beq.n	800ad92 <HAL_SPI_Init+0x6e>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b08      	cmp	r3, #8
 800ad90:	d811      	bhi.n	800adb6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad96:	4a72      	ldr	r2, [pc, #456]	; (800af60 <HAL_SPI_Init+0x23c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d009      	beq.n	800adb0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a70      	ldr	r2, [pc, #448]	; (800af64 <HAL_SPI_Init+0x240>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d004      	beq.n	800adb0 <HAL_SPI_Init+0x8c>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a6f      	ldr	r2, [pc, #444]	; (800af68 <HAL_SPI_Init+0x244>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d104      	bne.n	800adba <HAL_SPI_Init+0x96>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b10      	cmp	r3, #16
 800adb4:	d901      	bls.n	800adba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e0cd      	b.n	800af56 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d106      	bne.n	800add4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7f7 fade 	bl	8002390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2202      	movs	r2, #2
 800add8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0201 	bic.w	r2, r2, #1
 800adea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800adf6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae00:	d119      	bne.n	800ae36 <HAL_SPI_Init+0x112>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae0a:	d103      	bne.n	800ae14 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d008      	beq.n	800ae26 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10c      	bne.n	800ae36 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ae20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae24:	d107      	bne.n	800ae36 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00f      	beq.n	800ae62 <HAL_SPI_Init+0x13e>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	2b06      	cmp	r3, #6
 800ae48:	d90b      	bls.n	800ae62 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	e007      	b.n	800ae72 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	69da      	ldr	r2, [r3, #28]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae84:	ea42 0103 	orr.w	r1, r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	430a      	orrs	r2, r1
 800ae92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9c:	431a      	orrs	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea2:	431a      	orrs	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	431a      	orrs	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec6:	431a      	orrs	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	431a      	orrs	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aed2:	ea42 0103 	orr.w	r1, r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	430a      	orrs	r2, r1
 800aee0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d113      	bne.n	800af12 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aefc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 0201 	bic.w	r2, r2, #1
 800af20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00a      	beq.n	800af44 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	40013000 	.word	0x40013000
 800af64:	40003800 	.word	0x40003800
 800af68:	40003c00 	.word	0x40003c00

0800af6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af78:	095b      	lsrs	r3, r3, #5
 800af7a:	3301      	adds	r3, #1
 800af7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	3301      	adds	r3, #1
 800af84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	3307      	adds	r3, #7
 800af8a:	08db      	lsrs	r3, r3, #3
 800af8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	fb02 f303 	mul.w	r3, r2, r3
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b082      	sub	sp, #8
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e042      	b.n	800b03a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7f7 faac 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2224      	movs	r2, #36	; 0x24
 800afd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f022 0201 	bic.w	r2, r2, #1
 800afe2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f8bb 	bl	800b160 <UART_SetConfig>
 800afea:	4603      	mov	r3, r0
 800afec:	2b01      	cmp	r3, #1
 800afee:	d101      	bne.n	800aff4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e022      	b.n	800b03a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fe17 	bl	800bc30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	685a      	ldr	r2, [r3, #4]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b010:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	689a      	ldr	r2, [r3, #8]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b020:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f042 0201 	orr.w	r2, r2, #1
 800b030:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fe9e 	bl	800bd74 <UART_CheckIdleState>
 800b038:	4603      	mov	r3, r0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b08a      	sub	sp, #40	; 0x28
 800b046:	af02      	add	r7, sp, #8
 800b048:	60f8      	str	r0, [r7, #12]
 800b04a:	60b9      	str	r1, [r7, #8]
 800b04c:	603b      	str	r3, [r7, #0]
 800b04e:	4613      	mov	r3, r2
 800b050:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b058:	2b20      	cmp	r3, #32
 800b05a:	d17b      	bne.n	800b154 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d002      	beq.n	800b068 <HAL_UART_Transmit+0x26>
 800b062:	88fb      	ldrh	r3, [r7, #6]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e074      	b.n	800b156 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2221      	movs	r2, #33	; 0x21
 800b078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b07c:	f7f7 fe3a 	bl	8002cf4 <HAL_GetTick>
 800b080:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	88fa      	ldrh	r2, [r7, #6]
 800b086:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	88fa      	ldrh	r2, [r7, #6]
 800b08e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b09a:	d108      	bne.n	800b0ae <HAL_UART_Transmit+0x6c>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d104      	bne.n	800b0ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	61bb      	str	r3, [r7, #24]
 800b0ac:	e003      	b.n	800b0b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0b6:	e030      	b.n	800b11a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2180      	movs	r1, #128	; 0x80
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f000 ff00 	bl	800bec8 <UART_WaitOnFlagUntilTimeout>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d005      	beq.n	800b0da <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e03d      	b.n	800b156 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10b      	bne.n	800b0f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	3302      	adds	r3, #2
 800b0f4:	61bb      	str	r3, [r7, #24]
 800b0f6:	e007      	b.n	800b108 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	781a      	ldrb	r2, [r3, #0]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	3301      	adds	r3, #1
 800b106:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b10e:	b29b      	uxth	r3, r3
 800b110:	3b01      	subs	r3, #1
 800b112:	b29a      	uxth	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b120:	b29b      	uxth	r3, r3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1c8      	bne.n	800b0b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2200      	movs	r2, #0
 800b12e:	2140      	movs	r1, #64	; 0x40
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f000 fec9 	bl	800bec8 <UART_WaitOnFlagUntilTimeout>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d005      	beq.n	800b148 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2220      	movs	r2, #32
 800b140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b144:	2303      	movs	r3, #3
 800b146:	e006      	b.n	800b156 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	e000      	b.n	800b156 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b154:	2302      	movs	r3, #2
  }
}
 800b156:	4618      	mov	r0, r3
 800b158:	3720      	adds	r7, #32
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
	...

0800b160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b164:	b092      	sub	sp, #72	; 0x48
 800b166:	af00      	add	r7, sp, #0
 800b168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	689a      	ldr	r2, [r3, #8]
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	431a      	orrs	r2, r3
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	431a      	orrs	r2, r3
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	69db      	ldr	r3, [r3, #28]
 800b184:	4313      	orrs	r3, r2
 800b186:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	4bbe      	ldr	r3, [pc, #760]	; (800b488 <UART_SetConfig+0x328>)
 800b190:	4013      	ands	r3, r2
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	6812      	ldr	r2, [r2, #0]
 800b196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b198:	430b      	orrs	r3, r1
 800b19a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	68da      	ldr	r2, [r3, #12]
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4ab3      	ldr	r2, [pc, #716]	; (800b48c <UART_SetConfig+0x32c>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d004      	beq.n	800b1cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689a      	ldr	r2, [r3, #8]
 800b1d2:	4baf      	ldr	r3, [pc, #700]	; (800b490 <UART_SetConfig+0x330>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	697a      	ldr	r2, [r7, #20]
 800b1d8:	6812      	ldr	r2, [r2, #0]
 800b1da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1dc:	430b      	orrs	r3, r1
 800b1de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e6:	f023 010f 	bic.w	r1, r3, #15
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4aa6      	ldr	r2, [pc, #664]	; (800b494 <UART_SetConfig+0x334>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d177      	bne.n	800b2f0 <UART_SetConfig+0x190>
 800b200:	4ba5      	ldr	r3, [pc, #660]	; (800b498 <UART_SetConfig+0x338>)
 800b202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b208:	2b28      	cmp	r3, #40	; 0x28
 800b20a:	d86d      	bhi.n	800b2e8 <UART_SetConfig+0x188>
 800b20c:	a201      	add	r2, pc, #4	; (adr r2, 800b214 <UART_SetConfig+0xb4>)
 800b20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b212:	bf00      	nop
 800b214:	0800b2b9 	.word	0x0800b2b9
 800b218:	0800b2e9 	.word	0x0800b2e9
 800b21c:	0800b2e9 	.word	0x0800b2e9
 800b220:	0800b2e9 	.word	0x0800b2e9
 800b224:	0800b2e9 	.word	0x0800b2e9
 800b228:	0800b2e9 	.word	0x0800b2e9
 800b22c:	0800b2e9 	.word	0x0800b2e9
 800b230:	0800b2e9 	.word	0x0800b2e9
 800b234:	0800b2c1 	.word	0x0800b2c1
 800b238:	0800b2e9 	.word	0x0800b2e9
 800b23c:	0800b2e9 	.word	0x0800b2e9
 800b240:	0800b2e9 	.word	0x0800b2e9
 800b244:	0800b2e9 	.word	0x0800b2e9
 800b248:	0800b2e9 	.word	0x0800b2e9
 800b24c:	0800b2e9 	.word	0x0800b2e9
 800b250:	0800b2e9 	.word	0x0800b2e9
 800b254:	0800b2c9 	.word	0x0800b2c9
 800b258:	0800b2e9 	.word	0x0800b2e9
 800b25c:	0800b2e9 	.word	0x0800b2e9
 800b260:	0800b2e9 	.word	0x0800b2e9
 800b264:	0800b2e9 	.word	0x0800b2e9
 800b268:	0800b2e9 	.word	0x0800b2e9
 800b26c:	0800b2e9 	.word	0x0800b2e9
 800b270:	0800b2e9 	.word	0x0800b2e9
 800b274:	0800b2d1 	.word	0x0800b2d1
 800b278:	0800b2e9 	.word	0x0800b2e9
 800b27c:	0800b2e9 	.word	0x0800b2e9
 800b280:	0800b2e9 	.word	0x0800b2e9
 800b284:	0800b2e9 	.word	0x0800b2e9
 800b288:	0800b2e9 	.word	0x0800b2e9
 800b28c:	0800b2e9 	.word	0x0800b2e9
 800b290:	0800b2e9 	.word	0x0800b2e9
 800b294:	0800b2d9 	.word	0x0800b2d9
 800b298:	0800b2e9 	.word	0x0800b2e9
 800b29c:	0800b2e9 	.word	0x0800b2e9
 800b2a0:	0800b2e9 	.word	0x0800b2e9
 800b2a4:	0800b2e9 	.word	0x0800b2e9
 800b2a8:	0800b2e9 	.word	0x0800b2e9
 800b2ac:	0800b2e9 	.word	0x0800b2e9
 800b2b0:	0800b2e9 	.word	0x0800b2e9
 800b2b4:	0800b2e1 	.word	0x0800b2e1
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2be:	e222      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b2c0:	2304      	movs	r3, #4
 800b2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2c6:	e21e      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b2c8:	2308      	movs	r3, #8
 800b2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ce:	e21a      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b2d0:	2310      	movs	r3, #16
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d6:	e216      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b2d8:	2320      	movs	r3, #32
 800b2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2de:	e212      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b2e0:	2340      	movs	r3, #64	; 0x40
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e6:	e20e      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b2e8:	2380      	movs	r3, #128	; 0x80
 800b2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ee:	e20a      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a69      	ldr	r2, [pc, #420]	; (800b49c <UART_SetConfig+0x33c>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d130      	bne.n	800b35c <UART_SetConfig+0x1fc>
 800b2fa:	4b67      	ldr	r3, [pc, #412]	; (800b498 <UART_SetConfig+0x338>)
 800b2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2fe:	f003 0307 	and.w	r3, r3, #7
 800b302:	2b05      	cmp	r3, #5
 800b304:	d826      	bhi.n	800b354 <UART_SetConfig+0x1f4>
 800b306:	a201      	add	r2, pc, #4	; (adr r2, 800b30c <UART_SetConfig+0x1ac>)
 800b308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30c:	0800b325 	.word	0x0800b325
 800b310:	0800b32d 	.word	0x0800b32d
 800b314:	0800b335 	.word	0x0800b335
 800b318:	0800b33d 	.word	0x0800b33d
 800b31c:	0800b345 	.word	0x0800b345
 800b320:	0800b34d 	.word	0x0800b34d
 800b324:	2300      	movs	r3, #0
 800b326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b32a:	e1ec      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b32c:	2304      	movs	r3, #4
 800b32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b332:	e1e8      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b334:	2308      	movs	r3, #8
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33a:	e1e4      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b33c:	2310      	movs	r3, #16
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b342:	e1e0      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b344:	2320      	movs	r3, #32
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34a:	e1dc      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b34c:	2340      	movs	r3, #64	; 0x40
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b352:	e1d8      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b354:	2380      	movs	r3, #128	; 0x80
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35a:	e1d4      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a4f      	ldr	r2, [pc, #316]	; (800b4a0 <UART_SetConfig+0x340>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d130      	bne.n	800b3c8 <UART_SetConfig+0x268>
 800b366:	4b4c      	ldr	r3, [pc, #304]	; (800b498 <UART_SetConfig+0x338>)
 800b368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36a:	f003 0307 	and.w	r3, r3, #7
 800b36e:	2b05      	cmp	r3, #5
 800b370:	d826      	bhi.n	800b3c0 <UART_SetConfig+0x260>
 800b372:	a201      	add	r2, pc, #4	; (adr r2, 800b378 <UART_SetConfig+0x218>)
 800b374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b378:	0800b391 	.word	0x0800b391
 800b37c:	0800b399 	.word	0x0800b399
 800b380:	0800b3a1 	.word	0x0800b3a1
 800b384:	0800b3a9 	.word	0x0800b3a9
 800b388:	0800b3b1 	.word	0x0800b3b1
 800b38c:	0800b3b9 	.word	0x0800b3b9
 800b390:	2300      	movs	r3, #0
 800b392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b396:	e1b6      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b398:	2304      	movs	r3, #4
 800b39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b39e:	e1b2      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b3a0:	2308      	movs	r3, #8
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a6:	e1ae      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b3a8:	2310      	movs	r3, #16
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ae:	e1aa      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b3b0:	2320      	movs	r3, #32
 800b3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b6:	e1a6      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b3b8:	2340      	movs	r3, #64	; 0x40
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3be:	e1a2      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b3c0:	2380      	movs	r3, #128	; 0x80
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c6:	e19e      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a35      	ldr	r2, [pc, #212]	; (800b4a4 <UART_SetConfig+0x344>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d130      	bne.n	800b434 <UART_SetConfig+0x2d4>
 800b3d2:	4b31      	ldr	r3, [pc, #196]	; (800b498 <UART_SetConfig+0x338>)
 800b3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d6:	f003 0307 	and.w	r3, r3, #7
 800b3da:	2b05      	cmp	r3, #5
 800b3dc:	d826      	bhi.n	800b42c <UART_SetConfig+0x2cc>
 800b3de:	a201      	add	r2, pc, #4	; (adr r2, 800b3e4 <UART_SetConfig+0x284>)
 800b3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e4:	0800b3fd 	.word	0x0800b3fd
 800b3e8:	0800b405 	.word	0x0800b405
 800b3ec:	0800b40d 	.word	0x0800b40d
 800b3f0:	0800b415 	.word	0x0800b415
 800b3f4:	0800b41d 	.word	0x0800b41d
 800b3f8:	0800b425 	.word	0x0800b425
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b402:	e180      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b404:	2304      	movs	r3, #4
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b40a:	e17c      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b40c:	2308      	movs	r3, #8
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b412:	e178      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b414:	2310      	movs	r3, #16
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41a:	e174      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b41c:	2320      	movs	r3, #32
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b422:	e170      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b424:	2340      	movs	r3, #64	; 0x40
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42a:	e16c      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b42c:	2380      	movs	r3, #128	; 0x80
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b432:	e168      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a1b      	ldr	r2, [pc, #108]	; (800b4a8 <UART_SetConfig+0x348>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d142      	bne.n	800b4c4 <UART_SetConfig+0x364>
 800b43e:	4b16      	ldr	r3, [pc, #88]	; (800b498 <UART_SetConfig+0x338>)
 800b440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b442:	f003 0307 	and.w	r3, r3, #7
 800b446:	2b05      	cmp	r3, #5
 800b448:	d838      	bhi.n	800b4bc <UART_SetConfig+0x35c>
 800b44a:	a201      	add	r2, pc, #4	; (adr r2, 800b450 <UART_SetConfig+0x2f0>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b469 	.word	0x0800b469
 800b454:	0800b471 	.word	0x0800b471
 800b458:	0800b479 	.word	0x0800b479
 800b45c:	0800b481 	.word	0x0800b481
 800b460:	0800b4ad 	.word	0x0800b4ad
 800b464:	0800b4b5 	.word	0x0800b4b5
 800b468:	2300      	movs	r3, #0
 800b46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b46e:	e14a      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b470:	2304      	movs	r3, #4
 800b472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b476:	e146      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b478:	2308      	movs	r3, #8
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b47e:	e142      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b480:	2310      	movs	r3, #16
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b486:	e13e      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b488:	cfff69f3 	.word	0xcfff69f3
 800b48c:	58000c00 	.word	0x58000c00
 800b490:	11fff4ff 	.word	0x11fff4ff
 800b494:	40011000 	.word	0x40011000
 800b498:	58024400 	.word	0x58024400
 800b49c:	40004400 	.word	0x40004400
 800b4a0:	40004800 	.word	0x40004800
 800b4a4:	40004c00 	.word	0x40004c00
 800b4a8:	40005000 	.word	0x40005000
 800b4ac:	2320      	movs	r3, #32
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b2:	e128      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b4b4:	2340      	movs	r3, #64	; 0x40
 800b4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ba:	e124      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b4bc:	2380      	movs	r3, #128	; 0x80
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c2:	e120      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4acb      	ldr	r2, [pc, #812]	; (800b7f8 <UART_SetConfig+0x698>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d176      	bne.n	800b5bc <UART_SetConfig+0x45c>
 800b4ce:	4bcb      	ldr	r3, [pc, #812]	; (800b7fc <UART_SetConfig+0x69c>)
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4d6:	2b28      	cmp	r3, #40	; 0x28
 800b4d8:	d86c      	bhi.n	800b5b4 <UART_SetConfig+0x454>
 800b4da:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <UART_SetConfig+0x380>)
 800b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e0:	0800b585 	.word	0x0800b585
 800b4e4:	0800b5b5 	.word	0x0800b5b5
 800b4e8:	0800b5b5 	.word	0x0800b5b5
 800b4ec:	0800b5b5 	.word	0x0800b5b5
 800b4f0:	0800b5b5 	.word	0x0800b5b5
 800b4f4:	0800b5b5 	.word	0x0800b5b5
 800b4f8:	0800b5b5 	.word	0x0800b5b5
 800b4fc:	0800b5b5 	.word	0x0800b5b5
 800b500:	0800b58d 	.word	0x0800b58d
 800b504:	0800b5b5 	.word	0x0800b5b5
 800b508:	0800b5b5 	.word	0x0800b5b5
 800b50c:	0800b5b5 	.word	0x0800b5b5
 800b510:	0800b5b5 	.word	0x0800b5b5
 800b514:	0800b5b5 	.word	0x0800b5b5
 800b518:	0800b5b5 	.word	0x0800b5b5
 800b51c:	0800b5b5 	.word	0x0800b5b5
 800b520:	0800b595 	.word	0x0800b595
 800b524:	0800b5b5 	.word	0x0800b5b5
 800b528:	0800b5b5 	.word	0x0800b5b5
 800b52c:	0800b5b5 	.word	0x0800b5b5
 800b530:	0800b5b5 	.word	0x0800b5b5
 800b534:	0800b5b5 	.word	0x0800b5b5
 800b538:	0800b5b5 	.word	0x0800b5b5
 800b53c:	0800b5b5 	.word	0x0800b5b5
 800b540:	0800b59d 	.word	0x0800b59d
 800b544:	0800b5b5 	.word	0x0800b5b5
 800b548:	0800b5b5 	.word	0x0800b5b5
 800b54c:	0800b5b5 	.word	0x0800b5b5
 800b550:	0800b5b5 	.word	0x0800b5b5
 800b554:	0800b5b5 	.word	0x0800b5b5
 800b558:	0800b5b5 	.word	0x0800b5b5
 800b55c:	0800b5b5 	.word	0x0800b5b5
 800b560:	0800b5a5 	.word	0x0800b5a5
 800b564:	0800b5b5 	.word	0x0800b5b5
 800b568:	0800b5b5 	.word	0x0800b5b5
 800b56c:	0800b5b5 	.word	0x0800b5b5
 800b570:	0800b5b5 	.word	0x0800b5b5
 800b574:	0800b5b5 	.word	0x0800b5b5
 800b578:	0800b5b5 	.word	0x0800b5b5
 800b57c:	0800b5b5 	.word	0x0800b5b5
 800b580:	0800b5ad 	.word	0x0800b5ad
 800b584:	2301      	movs	r3, #1
 800b586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b58a:	e0bc      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b58c:	2304      	movs	r3, #4
 800b58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b592:	e0b8      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b594:	2308      	movs	r3, #8
 800b596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59a:	e0b4      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b59c:	2310      	movs	r3, #16
 800b59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a2:	e0b0      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b5a4:	2320      	movs	r3, #32
 800b5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5aa:	e0ac      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b5ac:	2340      	movs	r3, #64	; 0x40
 800b5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b2:	e0a8      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b5b4:	2380      	movs	r3, #128	; 0x80
 800b5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ba:	e0a4      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a8f      	ldr	r2, [pc, #572]	; (800b800 <UART_SetConfig+0x6a0>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d130      	bne.n	800b628 <UART_SetConfig+0x4c8>
 800b5c6:	4b8d      	ldr	r3, [pc, #564]	; (800b7fc <UART_SetConfig+0x69c>)
 800b5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ca:	f003 0307 	and.w	r3, r3, #7
 800b5ce:	2b05      	cmp	r3, #5
 800b5d0:	d826      	bhi.n	800b620 <UART_SetConfig+0x4c0>
 800b5d2:	a201      	add	r2, pc, #4	; (adr r2, 800b5d8 <UART_SetConfig+0x478>)
 800b5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d8:	0800b5f1 	.word	0x0800b5f1
 800b5dc:	0800b5f9 	.word	0x0800b5f9
 800b5e0:	0800b601 	.word	0x0800b601
 800b5e4:	0800b609 	.word	0x0800b609
 800b5e8:	0800b611 	.word	0x0800b611
 800b5ec:	0800b619 	.word	0x0800b619
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5f6:	e086      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b5f8:	2304      	movs	r3, #4
 800b5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5fe:	e082      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b600:	2308      	movs	r3, #8
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b606:	e07e      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b608:	2310      	movs	r3, #16
 800b60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60e:	e07a      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b610:	2320      	movs	r3, #32
 800b612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b616:	e076      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b618:	2340      	movs	r3, #64	; 0x40
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b61e:	e072      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b620:	2380      	movs	r3, #128	; 0x80
 800b622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b626:	e06e      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a75      	ldr	r2, [pc, #468]	; (800b804 <UART_SetConfig+0x6a4>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d130      	bne.n	800b694 <UART_SetConfig+0x534>
 800b632:	4b72      	ldr	r3, [pc, #456]	; (800b7fc <UART_SetConfig+0x69c>)
 800b634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	2b05      	cmp	r3, #5
 800b63c:	d826      	bhi.n	800b68c <UART_SetConfig+0x52c>
 800b63e:	a201      	add	r2, pc, #4	; (adr r2, 800b644 <UART_SetConfig+0x4e4>)
 800b640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b644:	0800b65d 	.word	0x0800b65d
 800b648:	0800b665 	.word	0x0800b665
 800b64c:	0800b66d 	.word	0x0800b66d
 800b650:	0800b675 	.word	0x0800b675
 800b654:	0800b67d 	.word	0x0800b67d
 800b658:	0800b685 	.word	0x0800b685
 800b65c:	2300      	movs	r3, #0
 800b65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b662:	e050      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b664:	2304      	movs	r3, #4
 800b666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b66a:	e04c      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b66c:	2308      	movs	r3, #8
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b672:	e048      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b674:	2310      	movs	r3, #16
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b67a:	e044      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b67c:	2320      	movs	r3, #32
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b682:	e040      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b684:	2340      	movs	r3, #64	; 0x40
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b68a:	e03c      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b68c:	2380      	movs	r3, #128	; 0x80
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b692:	e038      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a5b      	ldr	r2, [pc, #364]	; (800b808 <UART_SetConfig+0x6a8>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d130      	bne.n	800b700 <UART_SetConfig+0x5a0>
 800b69e:	4b57      	ldr	r3, [pc, #348]	; (800b7fc <UART_SetConfig+0x69c>)
 800b6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a2:	f003 0307 	and.w	r3, r3, #7
 800b6a6:	2b05      	cmp	r3, #5
 800b6a8:	d826      	bhi.n	800b6f8 <UART_SetConfig+0x598>
 800b6aa:	a201      	add	r2, pc, #4	; (adr r2, 800b6b0 <UART_SetConfig+0x550>)
 800b6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b0:	0800b6c9 	.word	0x0800b6c9
 800b6b4:	0800b6d1 	.word	0x0800b6d1
 800b6b8:	0800b6d9 	.word	0x0800b6d9
 800b6bc:	0800b6e1 	.word	0x0800b6e1
 800b6c0:	0800b6e9 	.word	0x0800b6e9
 800b6c4:	0800b6f1 	.word	0x0800b6f1
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ce:	e01a      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b6d0:	2304      	movs	r3, #4
 800b6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6d6:	e016      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b6d8:	2308      	movs	r3, #8
 800b6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6de:	e012      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b6e0:	2310      	movs	r3, #16
 800b6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6e6:	e00e      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b6e8:	2320      	movs	r3, #32
 800b6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ee:	e00a      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b6f0:	2340      	movs	r3, #64	; 0x40
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6f6:	e006      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b6f8:	2380      	movs	r3, #128	; 0x80
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6fe:	e002      	b.n	800b706 <UART_SetConfig+0x5a6>
 800b700:	2380      	movs	r3, #128	; 0x80
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a3f      	ldr	r2, [pc, #252]	; (800b808 <UART_SetConfig+0x6a8>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	f040 80f8 	bne.w	800b902 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b712:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b716:	2b20      	cmp	r3, #32
 800b718:	dc46      	bgt.n	800b7a8 <UART_SetConfig+0x648>
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	f2c0 8082 	blt.w	800b824 <UART_SetConfig+0x6c4>
 800b720:	3b02      	subs	r3, #2
 800b722:	2b1e      	cmp	r3, #30
 800b724:	d87e      	bhi.n	800b824 <UART_SetConfig+0x6c4>
 800b726:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <UART_SetConfig+0x5cc>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b7af 	.word	0x0800b7af
 800b730:	0800b825 	.word	0x0800b825
 800b734:	0800b7b7 	.word	0x0800b7b7
 800b738:	0800b825 	.word	0x0800b825
 800b73c:	0800b825 	.word	0x0800b825
 800b740:	0800b825 	.word	0x0800b825
 800b744:	0800b7c7 	.word	0x0800b7c7
 800b748:	0800b825 	.word	0x0800b825
 800b74c:	0800b825 	.word	0x0800b825
 800b750:	0800b825 	.word	0x0800b825
 800b754:	0800b825 	.word	0x0800b825
 800b758:	0800b825 	.word	0x0800b825
 800b75c:	0800b825 	.word	0x0800b825
 800b760:	0800b825 	.word	0x0800b825
 800b764:	0800b7d7 	.word	0x0800b7d7
 800b768:	0800b825 	.word	0x0800b825
 800b76c:	0800b825 	.word	0x0800b825
 800b770:	0800b825 	.word	0x0800b825
 800b774:	0800b825 	.word	0x0800b825
 800b778:	0800b825 	.word	0x0800b825
 800b77c:	0800b825 	.word	0x0800b825
 800b780:	0800b825 	.word	0x0800b825
 800b784:	0800b825 	.word	0x0800b825
 800b788:	0800b825 	.word	0x0800b825
 800b78c:	0800b825 	.word	0x0800b825
 800b790:	0800b825 	.word	0x0800b825
 800b794:	0800b825 	.word	0x0800b825
 800b798:	0800b825 	.word	0x0800b825
 800b79c:	0800b825 	.word	0x0800b825
 800b7a0:	0800b825 	.word	0x0800b825
 800b7a4:	0800b817 	.word	0x0800b817
 800b7a8:	2b40      	cmp	r3, #64	; 0x40
 800b7aa:	d037      	beq.n	800b81c <UART_SetConfig+0x6bc>
 800b7ac:	e03a      	b.n	800b824 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b7ae:	f7fe f90d 	bl	80099cc <HAL_RCCEx_GetD3PCLK1Freq>
 800b7b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7b4:	e03c      	b.n	800b830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe f91c 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7c4:	e034      	b.n	800b830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7c6:	f107 0318 	add.w	r3, r7, #24
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe fa68 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7d4:	e02c      	b.n	800b830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7d6:	4b09      	ldr	r3, [pc, #36]	; (800b7fc <UART_SetConfig+0x69c>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 0320 	and.w	r3, r3, #32
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d016      	beq.n	800b810 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7e2:	4b06      	ldr	r3, [pc, #24]	; (800b7fc <UART_SetConfig+0x69c>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	08db      	lsrs	r3, r3, #3
 800b7e8:	f003 0303 	and.w	r3, r3, #3
 800b7ec:	4a07      	ldr	r2, [pc, #28]	; (800b80c <UART_SetConfig+0x6ac>)
 800b7ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7f4:	e01c      	b.n	800b830 <UART_SetConfig+0x6d0>
 800b7f6:	bf00      	nop
 800b7f8:	40011400 	.word	0x40011400
 800b7fc:	58024400 	.word	0x58024400
 800b800:	40007800 	.word	0x40007800
 800b804:	40007c00 	.word	0x40007c00
 800b808:	58000c00 	.word	0x58000c00
 800b80c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b810:	4b9d      	ldr	r3, [pc, #628]	; (800ba88 <UART_SetConfig+0x928>)
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b814:	e00c      	b.n	800b830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b816:	4b9d      	ldr	r3, [pc, #628]	; (800ba8c <UART_SetConfig+0x92c>)
 800b818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b81a:	e009      	b.n	800b830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b81c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b822:	e005      	b.n	800b830 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b824:	2300      	movs	r3, #0
 800b826:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b82e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b832:	2b00      	cmp	r3, #0
 800b834:	f000 81de 	beq.w	800bbf4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83c:	4a94      	ldr	r2, [pc, #592]	; (800ba90 <UART_SetConfig+0x930>)
 800b83e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b842:	461a      	mov	r2, r3
 800b844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b846:	fbb3 f3f2 	udiv	r3, r3, r2
 800b84a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	4613      	mov	r3, r2
 800b852:	005b      	lsls	r3, r3, #1
 800b854:	4413      	add	r3, r2
 800b856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b858:	429a      	cmp	r2, r3
 800b85a:	d305      	bcc.n	800b868 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b864:	429a      	cmp	r2, r3
 800b866:	d903      	bls.n	800b870 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b86e:	e1c1      	b.n	800bbf4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b872:	2200      	movs	r2, #0
 800b874:	60bb      	str	r3, [r7, #8]
 800b876:	60fa      	str	r2, [r7, #12]
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87c:	4a84      	ldr	r2, [pc, #528]	; (800ba90 <UART_SetConfig+0x930>)
 800b87e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b882:	b29b      	uxth	r3, r3
 800b884:	2200      	movs	r2, #0
 800b886:	603b      	str	r3, [r7, #0]
 800b888:	607a      	str	r2, [r7, #4]
 800b88a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b88e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b892:	f7f4 fd7d 	bl	8000390 <__aeabi_uldivmod>
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	4610      	mov	r0, r2
 800b89c:	4619      	mov	r1, r3
 800b89e:	f04f 0200 	mov.w	r2, #0
 800b8a2:	f04f 0300 	mov.w	r3, #0
 800b8a6:	020b      	lsls	r3, r1, #8
 800b8a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b8ac:	0202      	lsls	r2, r0, #8
 800b8ae:	6979      	ldr	r1, [r7, #20]
 800b8b0:	6849      	ldr	r1, [r1, #4]
 800b8b2:	0849      	lsrs	r1, r1, #1
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	eb12 0804 	adds.w	r8, r2, r4
 800b8be:	eb43 0905 	adc.w	r9, r3, r5
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	469a      	mov	sl, r3
 800b8ca:	4693      	mov	fp, r2
 800b8cc:	4652      	mov	r2, sl
 800b8ce:	465b      	mov	r3, fp
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	4649      	mov	r1, r9
 800b8d4:	f7f4 fd5c 	bl	8000390 <__aeabi_uldivmod>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4613      	mov	r3, r2
 800b8de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8e6:	d308      	bcc.n	800b8fa <UART_SetConfig+0x79a>
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8ee:	d204      	bcs.n	800b8fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8f6:	60da      	str	r2, [r3, #12]
 800b8f8:	e17c      	b.n	800bbf4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b900:	e178      	b.n	800bbf4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b90a:	f040 80c5 	bne.w	800ba98 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b90e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b912:	2b20      	cmp	r3, #32
 800b914:	dc48      	bgt.n	800b9a8 <UART_SetConfig+0x848>
 800b916:	2b00      	cmp	r3, #0
 800b918:	db7b      	blt.n	800ba12 <UART_SetConfig+0x8b2>
 800b91a:	2b20      	cmp	r3, #32
 800b91c:	d879      	bhi.n	800ba12 <UART_SetConfig+0x8b2>
 800b91e:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <UART_SetConfig+0x7c4>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b9af 	.word	0x0800b9af
 800b928:	0800b9b7 	.word	0x0800b9b7
 800b92c:	0800ba13 	.word	0x0800ba13
 800b930:	0800ba13 	.word	0x0800ba13
 800b934:	0800b9bf 	.word	0x0800b9bf
 800b938:	0800ba13 	.word	0x0800ba13
 800b93c:	0800ba13 	.word	0x0800ba13
 800b940:	0800ba13 	.word	0x0800ba13
 800b944:	0800b9cf 	.word	0x0800b9cf
 800b948:	0800ba13 	.word	0x0800ba13
 800b94c:	0800ba13 	.word	0x0800ba13
 800b950:	0800ba13 	.word	0x0800ba13
 800b954:	0800ba13 	.word	0x0800ba13
 800b958:	0800ba13 	.word	0x0800ba13
 800b95c:	0800ba13 	.word	0x0800ba13
 800b960:	0800ba13 	.word	0x0800ba13
 800b964:	0800b9df 	.word	0x0800b9df
 800b968:	0800ba13 	.word	0x0800ba13
 800b96c:	0800ba13 	.word	0x0800ba13
 800b970:	0800ba13 	.word	0x0800ba13
 800b974:	0800ba13 	.word	0x0800ba13
 800b978:	0800ba13 	.word	0x0800ba13
 800b97c:	0800ba13 	.word	0x0800ba13
 800b980:	0800ba13 	.word	0x0800ba13
 800b984:	0800ba13 	.word	0x0800ba13
 800b988:	0800ba13 	.word	0x0800ba13
 800b98c:	0800ba13 	.word	0x0800ba13
 800b990:	0800ba13 	.word	0x0800ba13
 800b994:	0800ba13 	.word	0x0800ba13
 800b998:	0800ba13 	.word	0x0800ba13
 800b99c:	0800ba13 	.word	0x0800ba13
 800b9a0:	0800ba13 	.word	0x0800ba13
 800b9a4:	0800ba05 	.word	0x0800ba05
 800b9a8:	2b40      	cmp	r3, #64	; 0x40
 800b9aa:	d02e      	beq.n	800ba0a <UART_SetConfig+0x8aa>
 800b9ac:	e031      	b.n	800ba12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9ae:	f7fc f857 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 800b9b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9b4:	e033      	b.n	800ba1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9b6:	f7fc f869 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
 800b9ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9bc:	e02f      	b.n	800ba1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe f818 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9cc:	e027      	b.n	800ba1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9ce:	f107 0318 	add.w	r3, r7, #24
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe f964 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9dc:	e01f      	b.n	800ba1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9de:	4b2d      	ldr	r3, [pc, #180]	; (800ba94 <UART_SetConfig+0x934>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 0320 	and.w	r3, r3, #32
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d009      	beq.n	800b9fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b9ea:	4b2a      	ldr	r3, [pc, #168]	; (800ba94 <UART_SetConfig+0x934>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	08db      	lsrs	r3, r3, #3
 800b9f0:	f003 0303 	and.w	r3, r3, #3
 800b9f4:	4a24      	ldr	r2, [pc, #144]	; (800ba88 <UART_SetConfig+0x928>)
 800b9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b9fc:	e00f      	b.n	800ba1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b9fe:	4b22      	ldr	r3, [pc, #136]	; (800ba88 <UART_SetConfig+0x928>)
 800ba00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba02:	e00c      	b.n	800ba1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba04:	4b21      	ldr	r3, [pc, #132]	; (800ba8c <UART_SetConfig+0x92c>)
 800ba06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba08:	e009      	b.n	800ba1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba10:	e005      	b.n	800ba1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ba1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f000 80e7 	beq.w	800bbf4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2a:	4a19      	ldr	r2, [pc, #100]	; (800ba90 <UART_SetConfig+0x930>)
 800ba2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba30:	461a      	mov	r2, r3
 800ba32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba38:	005a      	lsls	r2, r3, #1
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	085b      	lsrs	r3, r3, #1
 800ba40:	441a      	add	r2, r3
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	2b0f      	cmp	r3, #15
 800ba50:	d916      	bls.n	800ba80 <UART_SetConfig+0x920>
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba58:	d212      	bcs.n	800ba80 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	f023 030f 	bic.w	r3, r3, #15
 800ba62:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	f003 0307 	and.w	r3, r3, #7
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba72:	4313      	orrs	r3, r2
 800ba74:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ba7c:	60da      	str	r2, [r3, #12]
 800ba7e:	e0b9      	b.n	800bbf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ba86:	e0b5      	b.n	800bbf4 <UART_SetConfig+0xa94>
 800ba88:	03d09000 	.word	0x03d09000
 800ba8c:	003d0900 	.word	0x003d0900
 800ba90:	0800d468 	.word	0x0800d468
 800ba94:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ba98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ba9c:	2b20      	cmp	r3, #32
 800ba9e:	dc49      	bgt.n	800bb34 <UART_SetConfig+0x9d4>
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	db7c      	blt.n	800bb9e <UART_SetConfig+0xa3e>
 800baa4:	2b20      	cmp	r3, #32
 800baa6:	d87a      	bhi.n	800bb9e <UART_SetConfig+0xa3e>
 800baa8:	a201      	add	r2, pc, #4	; (adr r2, 800bab0 <UART_SetConfig+0x950>)
 800baaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baae:	bf00      	nop
 800bab0:	0800bb3b 	.word	0x0800bb3b
 800bab4:	0800bb43 	.word	0x0800bb43
 800bab8:	0800bb9f 	.word	0x0800bb9f
 800babc:	0800bb9f 	.word	0x0800bb9f
 800bac0:	0800bb4b 	.word	0x0800bb4b
 800bac4:	0800bb9f 	.word	0x0800bb9f
 800bac8:	0800bb9f 	.word	0x0800bb9f
 800bacc:	0800bb9f 	.word	0x0800bb9f
 800bad0:	0800bb5b 	.word	0x0800bb5b
 800bad4:	0800bb9f 	.word	0x0800bb9f
 800bad8:	0800bb9f 	.word	0x0800bb9f
 800badc:	0800bb9f 	.word	0x0800bb9f
 800bae0:	0800bb9f 	.word	0x0800bb9f
 800bae4:	0800bb9f 	.word	0x0800bb9f
 800bae8:	0800bb9f 	.word	0x0800bb9f
 800baec:	0800bb9f 	.word	0x0800bb9f
 800baf0:	0800bb6b 	.word	0x0800bb6b
 800baf4:	0800bb9f 	.word	0x0800bb9f
 800baf8:	0800bb9f 	.word	0x0800bb9f
 800bafc:	0800bb9f 	.word	0x0800bb9f
 800bb00:	0800bb9f 	.word	0x0800bb9f
 800bb04:	0800bb9f 	.word	0x0800bb9f
 800bb08:	0800bb9f 	.word	0x0800bb9f
 800bb0c:	0800bb9f 	.word	0x0800bb9f
 800bb10:	0800bb9f 	.word	0x0800bb9f
 800bb14:	0800bb9f 	.word	0x0800bb9f
 800bb18:	0800bb9f 	.word	0x0800bb9f
 800bb1c:	0800bb9f 	.word	0x0800bb9f
 800bb20:	0800bb9f 	.word	0x0800bb9f
 800bb24:	0800bb9f 	.word	0x0800bb9f
 800bb28:	0800bb9f 	.word	0x0800bb9f
 800bb2c:	0800bb9f 	.word	0x0800bb9f
 800bb30:	0800bb91 	.word	0x0800bb91
 800bb34:	2b40      	cmp	r3, #64	; 0x40
 800bb36:	d02e      	beq.n	800bb96 <UART_SetConfig+0xa36>
 800bb38:	e031      	b.n	800bb9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb3a:	f7fb ff91 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 800bb3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb40:	e033      	b.n	800bbaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb42:	f7fb ffa3 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
 800bb46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb48:	e02f      	b.n	800bbaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fd ff52 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb58:	e027      	b.n	800bbaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb5a:	f107 0318 	add.w	r3, r7, #24
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fe f89e 	bl	8009ca0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb68:	e01f      	b.n	800bbaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb6a:	4b2d      	ldr	r3, [pc, #180]	; (800bc20 <UART_SetConfig+0xac0>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0320 	and.w	r3, r3, #32
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d009      	beq.n	800bb8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb76:	4b2a      	ldr	r3, [pc, #168]	; (800bc20 <UART_SetConfig+0xac0>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	08db      	lsrs	r3, r3, #3
 800bb7c:	f003 0303 	and.w	r3, r3, #3
 800bb80:	4a28      	ldr	r2, [pc, #160]	; (800bc24 <UART_SetConfig+0xac4>)
 800bb82:	fa22 f303 	lsr.w	r3, r2, r3
 800bb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb88:	e00f      	b.n	800bbaa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bb8a:	4b26      	ldr	r3, [pc, #152]	; (800bc24 <UART_SetConfig+0xac4>)
 800bb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb8e:	e00c      	b.n	800bbaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb90:	4b25      	ldr	r3, [pc, #148]	; (800bc28 <UART_SetConfig+0xac8>)
 800bb92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb94:	e009      	b.n	800bbaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb9c:	e005      	b.n	800bbaa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bba8:	bf00      	nop
    }

    if (pclk != 0U)
 800bbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d021      	beq.n	800bbf4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	4a1d      	ldr	r2, [pc, #116]	; (800bc2c <UART_SetConfig+0xacc>)
 800bbb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbe:	fbb3 f2f2 	udiv	r2, r3, r2
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	085b      	lsrs	r3, r3, #1
 800bbc8:	441a      	add	r2, r3
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd6:	2b0f      	cmp	r3, #15
 800bbd8:	d909      	bls.n	800bbee <UART_SetConfig+0xa8e>
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe0:	d205      	bcs.n	800bbee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60da      	str	r2, [r3, #12]
 800bbec:	e002      	b.n	800bbf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	2200      	movs	r2, #0
 800bc08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bc10:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3748      	adds	r7, #72	; 0x48
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc1e:	bf00      	nop
 800bc20:	58024400 	.word	0x58024400
 800bc24:	03d09000 	.word	0x03d09000
 800bc28:	003d0900 	.word	0x003d0900
 800bc2c:	0800d468 	.word	0x0800d468

0800bc30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00a      	beq.n	800bc5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	430a      	orrs	r2, r1
 800bc58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5e:	f003 0302 	and.w	r3, r3, #2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00a      	beq.n	800bc7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00a      	beq.n	800bc9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca2:	f003 0308 	and.w	r3, r3, #8
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc4:	f003 0310 	and.w	r3, r3, #16
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00a      	beq.n	800bce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	430a      	orrs	r2, r1
 800bce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce6:	f003 0320 	and.w	r3, r3, #32
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00a      	beq.n	800bd04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	430a      	orrs	r2, r1
 800bd02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d01a      	beq.n	800bd46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	430a      	orrs	r2, r1
 800bd24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd2e:	d10a      	bne.n	800bd46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	430a      	orrs	r2, r1
 800bd44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00a      	beq.n	800bd68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	430a      	orrs	r2, r1
 800bd66:	605a      	str	r2, [r3, #4]
  }
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b098      	sub	sp, #96	; 0x60
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd84:	f7f6 ffb6 	bl	8002cf4 <HAL_GetTick>
 800bd88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0308 	and.w	r3, r3, #8
 800bd94:	2b08      	cmp	r3, #8
 800bd96:	d12f      	bne.n	800bdf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bda0:	2200      	movs	r2, #0
 800bda2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f88e 	bl	800bec8 <UART_WaitOnFlagUntilTimeout>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d022      	beq.n	800bdf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdc6:	653b      	str	r3, [r7, #80]	; 0x50
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdd0:	647b      	str	r3, [r7, #68]	; 0x44
 800bdd2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e6      	bne.n	800bdb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2220      	movs	r2, #32
 800bde8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e063      	b.n	800bec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 0304 	and.w	r3, r3, #4
 800be02:	2b04      	cmp	r3, #4
 800be04:	d149      	bne.n	800be9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be0e:	2200      	movs	r2, #0
 800be10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f857 	bl	800bec8 <UART_WaitOnFlagUntilTimeout>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d03c      	beq.n	800be9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be28:	e853 3f00 	ldrex	r3, [r3]
 800be2c:	623b      	str	r3, [r7, #32]
   return(result);
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	461a      	mov	r2, r3
 800be3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be3e:	633b      	str	r3, [r7, #48]	; 0x30
 800be40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be46:	e841 2300 	strex	r3, r2, [r1]
 800be4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1e6      	bne.n	800be20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3308      	adds	r3, #8
 800be58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	e853 3f00 	ldrex	r3, [r3]
 800be60:	60fb      	str	r3, [r7, #12]
   return(result);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f023 0301 	bic.w	r3, r3, #1
 800be68:	64bb      	str	r3, [r7, #72]	; 0x48
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3308      	adds	r3, #8
 800be70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be72:	61fa      	str	r2, [r7, #28]
 800be74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be76:	69b9      	ldr	r1, [r7, #24]
 800be78:	69fa      	ldr	r2, [r7, #28]
 800be7a:	e841 2300 	strex	r3, r2, [r1]
 800be7e:	617b      	str	r3, [r7, #20]
   return(result);
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1e5      	bne.n	800be52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2220      	movs	r2, #32
 800be8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be96:	2303      	movs	r3, #3
 800be98:	e012      	b.n	800bec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2220      	movs	r2, #32
 800be9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2220      	movs	r2, #32
 800bea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3758      	adds	r7, #88	; 0x58
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	603b      	str	r3, [r7, #0]
 800bed4:	4613      	mov	r3, r2
 800bed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bed8:	e049      	b.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee0:	d045      	beq.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bee2:	f7f6 ff07 	bl	8002cf4 <HAL_GetTick>
 800bee6:	4602      	mov	r2, r0
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d302      	bcc.n	800bef8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d101      	bne.n	800befc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bef8:	2303      	movs	r3, #3
 800befa:	e048      	b.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 0304 	and.w	r3, r3, #4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d031      	beq.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	69db      	ldr	r3, [r3, #28]
 800bf10:	f003 0308 	and.w	r3, r3, #8
 800bf14:	2b08      	cmp	r3, #8
 800bf16:	d110      	bne.n	800bf3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2208      	movs	r2, #8
 800bf1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f000 f839 	bl	800bf98 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2208      	movs	r2, #8
 800bf2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e029      	b.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf48:	d111      	bne.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f000 f81f 	bl	800bf98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e00f      	b.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	69da      	ldr	r2, [r3, #28]
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	4013      	ands	r3, r2
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	bf0c      	ite	eq
 800bf7e:	2301      	moveq	r3, #1
 800bf80:	2300      	movne	r3, #0
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	461a      	mov	r2, r3
 800bf86:	79fb      	ldrb	r3, [r7, #7]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d0a6      	beq.n	800beda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b095      	sub	sp, #84	; 0x54
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa8:	e853 3f00 	ldrex	r3, [r3]
 800bfac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfbe:	643b      	str	r3, [r7, #64]	; 0x40
 800bfc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfc6:	e841 2300 	strex	r3, r2, [r1]
 800bfca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d1e6      	bne.n	800bfa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfda:	6a3b      	ldr	r3, [r7, #32]
 800bfdc:	e853 3f00 	ldrex	r3, [r3]
 800bfe0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfe2:	69fa      	ldr	r2, [r7, #28]
 800bfe4:	4b1e      	ldr	r3, [pc, #120]	; (800c060 <UART_EndRxTransfer+0xc8>)
 800bfe6:	4013      	ands	r3, r2
 800bfe8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	3308      	adds	r3, #8
 800bff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bffa:	e841 2300 	strex	r3, r2, [r1]
 800bffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	2b00      	cmp	r3, #0
 800c004:	d1e5      	bne.n	800bfd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d118      	bne.n	800c040 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	e853 3f00 	ldrex	r3, [r3]
 800c01a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f023 0310 	bic.w	r3, r3, #16
 800c022:	647b      	str	r3, [r7, #68]	; 0x44
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	461a      	mov	r2, r3
 800c02a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c02c:	61bb      	str	r3, [r7, #24]
 800c02e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c030:	6979      	ldr	r1, [r7, #20]
 800c032:	69ba      	ldr	r2, [r7, #24]
 800c034:	e841 2300 	strex	r3, r2, [r1]
 800c038:	613b      	str	r3, [r7, #16]
   return(result);
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1e6      	bne.n	800c00e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2220      	movs	r2, #32
 800c044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c054:	bf00      	nop
 800c056:	3754      	adds	r7, #84	; 0x54
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	effffffe 	.word	0xeffffffe

0800c064 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c072:	2b01      	cmp	r3, #1
 800c074:	d101      	bne.n	800c07a <HAL_UARTEx_DisableFifoMode+0x16>
 800c076:	2302      	movs	r3, #2
 800c078:	e027      	b.n	800c0ca <HAL_UARTEx_DisableFifoMode+0x66>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2224      	movs	r2, #36	; 0x24
 800c086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f022 0201 	bic.w	r2, r2, #1
 800c0a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c0a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2220      	movs	r2, #32
 800c0bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d101      	bne.n	800c0ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	e02d      	b.n	800c14a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2224      	movs	r2, #36	; 0x24
 800c0fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f022 0201 	bic.w	r2, r2, #1
 800c114:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	430a      	orrs	r2, r1
 800c128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f850 	bl	800c1d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2220      	movs	r2, #32
 800c13c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c162:	2b01      	cmp	r3, #1
 800c164:	d101      	bne.n	800c16a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c166:	2302      	movs	r3, #2
 800c168:	e02d      	b.n	800c1c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2224      	movs	r2, #36	; 0x24
 800c176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f022 0201 	bic.w	r2, r2, #1
 800c190:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f812 	bl	800c1d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2220      	movs	r2, #32
 800c1b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
	...

0800c1d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d108      	bne.n	800c1f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c1f0:	e031      	b.n	800c256 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c1f2:	2310      	movs	r3, #16
 800c1f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c1f6:	2310      	movs	r3, #16
 800c1f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	0e5b      	lsrs	r3, r3, #25
 800c202:	b2db      	uxtb	r3, r3
 800c204:	f003 0307 	and.w	r3, r3, #7
 800c208:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	0f5b      	lsrs	r3, r3, #29
 800c212:	b2db      	uxtb	r3, r3
 800c214:	f003 0307 	and.w	r3, r3, #7
 800c218:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
 800c21c:	7b3a      	ldrb	r2, [r7, #12]
 800c21e:	4911      	ldr	r1, [pc, #68]	; (800c264 <UARTEx_SetNbDataToProcess+0x94>)
 800c220:	5c8a      	ldrb	r2, [r1, r2]
 800c222:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c226:	7b3a      	ldrb	r2, [r7, #12]
 800c228:	490f      	ldr	r1, [pc, #60]	; (800c268 <UARTEx_SetNbDataToProcess+0x98>)
 800c22a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c22c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c230:	b29a      	uxth	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	7b7a      	ldrb	r2, [r7, #13]
 800c23c:	4909      	ldr	r1, [pc, #36]	; (800c264 <UARTEx_SetNbDataToProcess+0x94>)
 800c23e:	5c8a      	ldrb	r2, [r1, r2]
 800c240:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c244:	7b7a      	ldrb	r2, [r7, #13]
 800c246:	4908      	ldr	r1, [pc, #32]	; (800c268 <UARTEx_SetNbDataToProcess+0x98>)
 800c248:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c24a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c24e:	b29a      	uxth	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c256:	bf00      	nop
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	0800d480 	.word	0x0800d480
 800c268:	0800d488 	.word	0x0800d488

0800c26c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d121      	bne.n	800c2c2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	4b27      	ldr	r3, [pc, #156]	; (800c320 <FMC_SDRAM_Init+0xb4>)
 800c284:	4013      	ands	r3, r2
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	6851      	ldr	r1, [r2, #4]
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	6892      	ldr	r2, [r2, #8]
 800c28e:	4311      	orrs	r1, r2
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	68d2      	ldr	r2, [r2, #12]
 800c294:	4311      	orrs	r1, r2
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	6912      	ldr	r2, [r2, #16]
 800c29a:	4311      	orrs	r1, r2
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	6952      	ldr	r2, [r2, #20]
 800c2a0:	4311      	orrs	r1, r2
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	6992      	ldr	r2, [r2, #24]
 800c2a6:	4311      	orrs	r1, r2
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	69d2      	ldr	r2, [r2, #28]
 800c2ac:	4311      	orrs	r1, r2
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	6a12      	ldr	r2, [r2, #32]
 800c2b2:	4311      	orrs	r1, r2
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	e026      	b.n	800c310 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	69d9      	ldr	r1, [r3, #28]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	4319      	orrs	r1, r3
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d8:	430b      	orrs	r3, r1
 800c2da:	431a      	orrs	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	4b0e      	ldr	r3, [pc, #56]	; (800c320 <FMC_SDRAM_Init+0xb4>)
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	6851      	ldr	r1, [r2, #4]
 800c2ec:	683a      	ldr	r2, [r7, #0]
 800c2ee:	6892      	ldr	r2, [r2, #8]
 800c2f0:	4311      	orrs	r1, r2
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	68d2      	ldr	r2, [r2, #12]
 800c2f6:	4311      	orrs	r1, r2
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	6912      	ldr	r2, [r2, #16]
 800c2fc:	4311      	orrs	r1, r2
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	6952      	ldr	r2, [r2, #20]
 800c302:	4311      	orrs	r1, r2
 800c304:	683a      	ldr	r2, [r7, #0]
 800c306:	6992      	ldr	r2, [r2, #24]
 800c308:	430a      	orrs	r2, r1
 800c30a:	431a      	orrs	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	ffff8000 	.word	0xffff8000

0800c324 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d128      	bne.n	800c388 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	1e59      	subs	r1, r3, #1
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	3b01      	subs	r3, #1
 800c34a:	011b      	lsls	r3, r3, #4
 800c34c:	4319      	orrs	r1, r3
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	3b01      	subs	r3, #1
 800c354:	021b      	lsls	r3, r3, #8
 800c356:	4319      	orrs	r1, r3
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	3b01      	subs	r3, #1
 800c35e:	031b      	lsls	r3, r3, #12
 800c360:	4319      	orrs	r1, r3
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	3b01      	subs	r3, #1
 800c368:	041b      	lsls	r3, r3, #16
 800c36a:	4319      	orrs	r1, r3
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	695b      	ldr	r3, [r3, #20]
 800c370:	3b01      	subs	r3, #1
 800c372:	051b      	lsls	r3, r3, #20
 800c374:	4319      	orrs	r1, r3
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	061b      	lsls	r3, r3, #24
 800c37e:	430b      	orrs	r3, r1
 800c380:	431a      	orrs	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	609a      	str	r2, [r3, #8]
 800c386:	e02d      	b.n	800c3e4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	689a      	ldr	r2, [r3, #8]
 800c38c:	4b19      	ldr	r3, [pc, #100]	; (800c3f4 <FMC_SDRAM_Timing_Init+0xd0>)
 800c38e:	4013      	ands	r3, r2
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	68d2      	ldr	r2, [r2, #12]
 800c394:	3a01      	subs	r2, #1
 800c396:	0311      	lsls	r1, r2, #12
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	6952      	ldr	r2, [r2, #20]
 800c39c:	3a01      	subs	r2, #1
 800c39e:	0512      	lsls	r2, r2, #20
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	431a      	orrs	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	1e59      	subs	r1, r3, #1
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	4319      	orrs	r1, r3
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	021b      	lsls	r3, r3, #8
 800c3c8:	4319      	orrs	r1, r3
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	041b      	lsls	r3, r3, #16
 800c3d2:	4319      	orrs	r1, r3
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	061b      	lsls	r3, r3, #24
 800c3dc:	430b      	orrs	r3, r1
 800c3de:	431a      	orrs	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	ff0f0fff 	.word	0xff0f0fff

0800c3f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b084      	sub	sp, #16
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	f107 001c 	add.w	r0, r7, #28
 800c406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d120      	bne.n	800c452 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	4b2a      	ldr	r3, [pc, #168]	; (800c4cc <USB_CoreInit+0xd4>)
 800c422:	4013      	ands	r3, r2
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c436:	2b01      	cmp	r3, #1
 800c438:	d105      	bne.n	800c446 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 faac 	bl	800c9a4 <USB_CoreReset>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73fb      	strb	r3, [r7, #15]
 800c450:	e01a      	b.n	800c488 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 faa0 	bl	800c9a4 <USB_CoreReset>
 800c464:	4603      	mov	r3, r0
 800c466:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c472:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	639a      	str	r2, [r3, #56]	; 0x38
 800c47a:	e005      	b.n	800c488 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d116      	bne.n	800c4bc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c492:	b29a      	uxth	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c49c:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <USB_CoreInit+0xd8>)
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	f043 0206 	orr.w	r2, r3, #6
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f043 0220 	orr.w	r2, r3, #32
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4c8:	b004      	add	sp, #16
 800c4ca:	4770      	bx	lr
 800c4cc:	ffbdffbf 	.word	0xffbdffbf
 800c4d0:	03ee0000 	.word	0x03ee0000

0800c4d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f023 0201 	bic.w	r2, r3, #1
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b084      	sub	sp, #16
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	460b      	mov	r3, r1
 800c500:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c512:	78fb      	ldrb	r3, [r7, #3]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d115      	bne.n	800c544 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c524:	2001      	movs	r0, #1
 800c526:	f7f6 fbf1 	bl	8002d0c <HAL_Delay>
      ms++;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3301      	adds	r3, #1
 800c52e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fa29 	bl	800c988 <USB_GetMode>
 800c536:	4603      	mov	r3, r0
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d01e      	beq.n	800c57a <USB_SetCurrentMode+0x84>
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b31      	cmp	r3, #49	; 0x31
 800c540:	d9f0      	bls.n	800c524 <USB_SetCurrentMode+0x2e>
 800c542:	e01a      	b.n	800c57a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c544:	78fb      	ldrb	r3, [r7, #3]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d115      	bne.n	800c576 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c556:	2001      	movs	r0, #1
 800c558:	f7f6 fbd8 	bl	8002d0c <HAL_Delay>
      ms++;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3301      	adds	r3, #1
 800c560:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 fa10 	bl	800c988 <USB_GetMode>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d005      	beq.n	800c57a <USB_SetCurrentMode+0x84>
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2b31      	cmp	r3, #49	; 0x31
 800c572:	d9f0      	bls.n	800c556 <USB_SetCurrentMode+0x60>
 800c574:	e001      	b.n	800c57a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e005      	b.n	800c586 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2b32      	cmp	r3, #50	; 0x32
 800c57e:	d101      	bne.n	800c584 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	e000      	b.n	800c586 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
	...

0800c590 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c590:	b084      	sub	sp, #16
 800c592:	b580      	push	{r7, lr}
 800c594:	b086      	sub	sp, #24
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c59e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	613b      	str	r3, [r7, #16]
 800c5ae:	e009      	b.n	800c5c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	3340      	adds	r3, #64	; 0x40
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	4413      	add	r3, r2
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	613b      	str	r3, [r7, #16]
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	2b0e      	cmp	r3, #14
 800c5c8:	d9f2      	bls.n	800c5b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d11c      	bne.n	800c60a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5de:	f043 0302 	orr.w	r3, r3, #2
 800c5e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	601a      	str	r2, [r3, #0]
 800c608:	e005      	b.n	800c616 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c61c:	461a      	mov	r2, r3
 800c61e:	2300      	movs	r3, #0
 800c620:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c628:	4619      	mov	r1, r3
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c630:	461a      	mov	r2, r3
 800c632:	680b      	ldr	r3, [r1, #0]
 800c634:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d10c      	bne.n	800c656 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d104      	bne.n	800c64c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c642:	2100      	movs	r1, #0
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 f965 	bl	800c914 <USB_SetDevSpeed>
 800c64a:	e008      	b.n	800c65e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c64c:	2101      	movs	r1, #1
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f960 	bl	800c914 <USB_SetDevSpeed>
 800c654:	e003      	b.n	800c65e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c656:	2103      	movs	r1, #3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f95b 	bl	800c914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c65e:	2110      	movs	r1, #16
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f8f3 	bl	800c84c <USB_FlushTxFifo>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f91f 	bl	800c8b4 <USB_FlushRxFifo>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c686:	461a      	mov	r2, r3
 800c688:	2300      	movs	r3, #0
 800c68a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c692:	461a      	mov	r2, r3
 800c694:	2300      	movs	r3, #0
 800c696:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c69e:	461a      	mov	r2, r3
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	613b      	str	r3, [r7, #16]
 800c6a8:	e043      	b.n	800c732 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	015a      	lsls	r2, r3, #5
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6c0:	d118      	bne.n	800c6f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10a      	bne.n	800c6de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	015a      	lsls	r2, r3, #5
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	e013      	b.n	800c706 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	e008      	b.n	800c706 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	015a      	lsls	r2, r3, #5
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c700:	461a      	mov	r2, r3
 800c702:	2300      	movs	r3, #0
 800c704:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	015a      	lsls	r2, r3, #5
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	4413      	add	r3, r2
 800c70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c712:	461a      	mov	r2, r3
 800c714:	2300      	movs	r3, #0
 800c716:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	015a      	lsls	r2, r3, #5
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4413      	add	r3, r2
 800c720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c724:	461a      	mov	r2, r3
 800c726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c72a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	3301      	adds	r3, #1
 800c730:	613b      	str	r3, [r7, #16]
 800c732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c734:	693a      	ldr	r2, [r7, #16]
 800c736:	429a      	cmp	r2, r3
 800c738:	d3b7      	bcc.n	800c6aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c73a:	2300      	movs	r3, #0
 800c73c:	613b      	str	r3, [r7, #16]
 800c73e:	e043      	b.n	800c7c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c756:	d118      	bne.n	800c78a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10a      	bne.n	800c774 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	015a      	lsls	r2, r3, #5
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	4413      	add	r3, r2
 800c766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c76a:	461a      	mov	r2, r3
 800c76c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c770:	6013      	str	r3, [r2, #0]
 800c772:	e013      	b.n	800c79c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c780:	461a      	mov	r2, r3
 800c782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c786:	6013      	str	r3, [r2, #0]
 800c788:	e008      	b.n	800c79c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	015a      	lsls	r2, r3, #5
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	4413      	add	r3, r2
 800c792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c796:	461a      	mov	r2, r3
 800c798:	2300      	movs	r3, #0
 800c79a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	015a      	lsls	r2, r3, #5
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	015a      	lsls	r2, r3, #5
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c7c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	613b      	str	r3, [r7, #16]
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d3b7      	bcc.n	800c740 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c7f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d105      	bne.n	800c804 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	699b      	ldr	r3, [r3, #24]
 800c7fc:	f043 0210 	orr.w	r2, r3, #16
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	699a      	ldr	r2, [r3, #24]
 800c808:	4b0e      	ldr	r3, [pc, #56]	; (800c844 <USB_DevInit+0x2b4>)
 800c80a:	4313      	orrs	r3, r2
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c812:	2b00      	cmp	r3, #0
 800c814:	d005      	beq.n	800c822 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	699b      	ldr	r3, [r3, #24]
 800c81a:	f043 0208 	orr.w	r2, r3, #8
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c824:	2b01      	cmp	r3, #1
 800c826:	d105      	bne.n	800c834 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	699a      	ldr	r2, [r3, #24]
 800c82c:	4b06      	ldr	r3, [pc, #24]	; (800c848 <USB_DevInit+0x2b8>)
 800c82e:	4313      	orrs	r3, r2
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c834:	7dfb      	ldrb	r3, [r7, #23]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c840:	b004      	add	sp, #16
 800c842:	4770      	bx	lr
 800c844:	803c3800 	.word	0x803c3800
 800c848:	40000004 	.word	0x40000004

0800c84c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c856:	2300      	movs	r3, #0
 800c858:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3301      	adds	r3, #1
 800c85e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4a13      	ldr	r2, [pc, #76]	; (800c8b0 <USB_FlushTxFifo+0x64>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d901      	bls.n	800c86c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c868:	2303      	movs	r3, #3
 800c86a:	e01b      	b.n	800c8a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	daf2      	bge.n	800c85a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c874:	2300      	movs	r3, #0
 800c876:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	019b      	lsls	r3, r3, #6
 800c87c:	f043 0220 	orr.w	r2, r3, #32
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	3301      	adds	r3, #1
 800c888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	4a08      	ldr	r2, [pc, #32]	; (800c8b0 <USB_FlushTxFifo+0x64>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d901      	bls.n	800c896 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c892:	2303      	movs	r3, #3
 800c894:	e006      	b.n	800c8a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	f003 0320 	and.w	r3, r3, #32
 800c89e:	2b20      	cmp	r3, #32
 800c8a0:	d0f0      	beq.n	800c884 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3714      	adds	r7, #20
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr
 800c8b0:	00030d40 	.word	0x00030d40

0800c8b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4a11      	ldr	r2, [pc, #68]	; (800c910 <USB_FlushRxFifo+0x5c>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d901      	bls.n	800c8d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	e018      	b.n	800c904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	daf2      	bge.n	800c8c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2210      	movs	r2, #16
 800c8e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	4a08      	ldr	r2, [pc, #32]	; (800c910 <USB_FlushRxFifo+0x5c>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d901      	bls.n	800c8f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c8f2:	2303      	movs	r3, #3
 800c8f4:	e006      	b.n	800c904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	f003 0310 	and.w	r3, r3, #16
 800c8fe:	2b10      	cmp	r3, #16
 800c900:	d0f0      	beq.n	800c8e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr
 800c910:	00030d40 	.word	0x00030d40

0800c914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	460b      	mov	r3, r1
 800c91e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	78fb      	ldrb	r3, [r7, #3]
 800c92e:	68f9      	ldr	r1, [r7, #12]
 800c930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c934:	4313      	orrs	r3, r2
 800c936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c946:	b480      	push	{r7}
 800c948:	b085      	sub	sp, #20
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c960:	f023 0303 	bic.w	r3, r3, #3
 800c964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c974:	f043 0302 	orr.w	r3, r3, #2
 800c978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	695b      	ldr	r3, [r3, #20]
 800c994:	f003 0301 	and.w	r3, r3, #1
}
 800c998:	4618      	mov	r0, r3
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	4a13      	ldr	r2, [pc, #76]	; (800ca08 <USB_CoreReset+0x64>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d901      	bls.n	800c9c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e01b      	b.n	800c9fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	daf2      	bge.n	800c9b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	f043 0201 	orr.w	r2, r3, #1
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4a09      	ldr	r2, [pc, #36]	; (800ca08 <USB_CoreReset+0x64>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d901      	bls.n	800c9ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	e006      	b.n	800c9fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	f003 0301 	and.w	r3, r3, #1
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d0f0      	beq.n	800c9da <USB_CoreReset+0x36>

  return HAL_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	00030d40 	.word	0x00030d40

0800ca0c <__errno>:
 800ca0c:	4b01      	ldr	r3, [pc, #4]	; (800ca14 <__errno+0x8>)
 800ca0e:	6818      	ldr	r0, [r3, #0]
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	24000010 	.word	0x24000010

0800ca18 <__libc_init_array>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	4d0d      	ldr	r5, [pc, #52]	; (800ca50 <__libc_init_array+0x38>)
 800ca1c:	4c0d      	ldr	r4, [pc, #52]	; (800ca54 <__libc_init_array+0x3c>)
 800ca1e:	1b64      	subs	r4, r4, r5
 800ca20:	10a4      	asrs	r4, r4, #2
 800ca22:	2600      	movs	r6, #0
 800ca24:	42a6      	cmp	r6, r4
 800ca26:	d109      	bne.n	800ca3c <__libc_init_array+0x24>
 800ca28:	4d0b      	ldr	r5, [pc, #44]	; (800ca58 <__libc_init_array+0x40>)
 800ca2a:	4c0c      	ldr	r4, [pc, #48]	; (800ca5c <__libc_init_array+0x44>)
 800ca2c:	f000 fca2 	bl	800d374 <_init>
 800ca30:	1b64      	subs	r4, r4, r5
 800ca32:	10a4      	asrs	r4, r4, #2
 800ca34:	2600      	movs	r6, #0
 800ca36:	42a6      	cmp	r6, r4
 800ca38:	d105      	bne.n	800ca46 <__libc_init_array+0x2e>
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca40:	4798      	blx	r3
 800ca42:	3601      	adds	r6, #1
 800ca44:	e7ee      	b.n	800ca24 <__libc_init_array+0xc>
 800ca46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca4a:	4798      	blx	r3
 800ca4c:	3601      	adds	r6, #1
 800ca4e:	e7f2      	b.n	800ca36 <__libc_init_array+0x1e>
 800ca50:	0800d4cc 	.word	0x0800d4cc
 800ca54:	0800d4cc 	.word	0x0800d4cc
 800ca58:	0800d4cc 	.word	0x0800d4cc
 800ca5c:	0800d4d0 	.word	0x0800d4d0

0800ca60 <memcpy>:
 800ca60:	440a      	add	r2, r1
 800ca62:	4291      	cmp	r1, r2
 800ca64:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca68:	d100      	bne.n	800ca6c <memcpy+0xc>
 800ca6a:	4770      	bx	lr
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca76:	4291      	cmp	r1, r2
 800ca78:	d1f9      	bne.n	800ca6e <memcpy+0xe>
 800ca7a:	bd10      	pop	{r4, pc}

0800ca7c <memset>:
 800ca7c:	4402      	add	r2, r0
 800ca7e:	4603      	mov	r3, r0
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d100      	bne.n	800ca86 <memset+0xa>
 800ca84:	4770      	bx	lr
 800ca86:	f803 1b01 	strb.w	r1, [r3], #1
 800ca8a:	e7f9      	b.n	800ca80 <memset+0x4>

0800ca8c <sniprintf>:
 800ca8c:	b40c      	push	{r2, r3}
 800ca8e:	b530      	push	{r4, r5, lr}
 800ca90:	4b17      	ldr	r3, [pc, #92]	; (800caf0 <sniprintf+0x64>)
 800ca92:	1e0c      	subs	r4, r1, #0
 800ca94:	681d      	ldr	r5, [r3, #0]
 800ca96:	b09d      	sub	sp, #116	; 0x74
 800ca98:	da08      	bge.n	800caac <sniprintf+0x20>
 800ca9a:	238b      	movs	r3, #139	; 0x8b
 800ca9c:	602b      	str	r3, [r5, #0]
 800ca9e:	f04f 30ff 	mov.w	r0, #4294967295
 800caa2:	b01d      	add	sp, #116	; 0x74
 800caa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800caa8:	b002      	add	sp, #8
 800caaa:	4770      	bx	lr
 800caac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cab0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cab4:	bf14      	ite	ne
 800cab6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800caba:	4623      	moveq	r3, r4
 800cabc:	9304      	str	r3, [sp, #16]
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cac4:	9002      	str	r0, [sp, #8]
 800cac6:	9006      	str	r0, [sp, #24]
 800cac8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cacc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cace:	ab21      	add	r3, sp, #132	; 0x84
 800cad0:	a902      	add	r1, sp, #8
 800cad2:	4628      	mov	r0, r5
 800cad4:	9301      	str	r3, [sp, #4]
 800cad6:	f000 f869 	bl	800cbac <_svfiprintf_r>
 800cada:	1c43      	adds	r3, r0, #1
 800cadc:	bfbc      	itt	lt
 800cade:	238b      	movlt	r3, #139	; 0x8b
 800cae0:	602b      	strlt	r3, [r5, #0]
 800cae2:	2c00      	cmp	r4, #0
 800cae4:	d0dd      	beq.n	800caa2 <sniprintf+0x16>
 800cae6:	9b02      	ldr	r3, [sp, #8]
 800cae8:	2200      	movs	r2, #0
 800caea:	701a      	strb	r2, [r3, #0]
 800caec:	e7d9      	b.n	800caa2 <sniprintf+0x16>
 800caee:	bf00      	nop
 800caf0:	24000010 	.word	0x24000010

0800caf4 <__ssputs_r>:
 800caf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	688e      	ldr	r6, [r1, #8]
 800cafa:	429e      	cmp	r6, r3
 800cafc:	4682      	mov	sl, r0
 800cafe:	460c      	mov	r4, r1
 800cb00:	4690      	mov	r8, r2
 800cb02:	461f      	mov	r7, r3
 800cb04:	d838      	bhi.n	800cb78 <__ssputs_r+0x84>
 800cb06:	898a      	ldrh	r2, [r1, #12]
 800cb08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb0c:	d032      	beq.n	800cb74 <__ssputs_r+0x80>
 800cb0e:	6825      	ldr	r5, [r4, #0]
 800cb10:	6909      	ldr	r1, [r1, #16]
 800cb12:	eba5 0901 	sub.w	r9, r5, r1
 800cb16:	6965      	ldr	r5, [r4, #20]
 800cb18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb20:	3301      	adds	r3, #1
 800cb22:	444b      	add	r3, r9
 800cb24:	106d      	asrs	r5, r5, #1
 800cb26:	429d      	cmp	r5, r3
 800cb28:	bf38      	it	cc
 800cb2a:	461d      	movcc	r5, r3
 800cb2c:	0553      	lsls	r3, r2, #21
 800cb2e:	d531      	bpl.n	800cb94 <__ssputs_r+0xa0>
 800cb30:	4629      	mov	r1, r5
 800cb32:	f000 fb55 	bl	800d1e0 <_malloc_r>
 800cb36:	4606      	mov	r6, r0
 800cb38:	b950      	cbnz	r0, 800cb50 <__ssputs_r+0x5c>
 800cb3a:	230c      	movs	r3, #12
 800cb3c:	f8ca 3000 	str.w	r3, [sl]
 800cb40:	89a3      	ldrh	r3, [r4, #12]
 800cb42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb46:	81a3      	strh	r3, [r4, #12]
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb50:	6921      	ldr	r1, [r4, #16]
 800cb52:	464a      	mov	r2, r9
 800cb54:	f7ff ff84 	bl	800ca60 <memcpy>
 800cb58:	89a3      	ldrh	r3, [r4, #12]
 800cb5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb62:	81a3      	strh	r3, [r4, #12]
 800cb64:	6126      	str	r6, [r4, #16]
 800cb66:	6165      	str	r5, [r4, #20]
 800cb68:	444e      	add	r6, r9
 800cb6a:	eba5 0509 	sub.w	r5, r5, r9
 800cb6e:	6026      	str	r6, [r4, #0]
 800cb70:	60a5      	str	r5, [r4, #8]
 800cb72:	463e      	mov	r6, r7
 800cb74:	42be      	cmp	r6, r7
 800cb76:	d900      	bls.n	800cb7a <__ssputs_r+0x86>
 800cb78:	463e      	mov	r6, r7
 800cb7a:	6820      	ldr	r0, [r4, #0]
 800cb7c:	4632      	mov	r2, r6
 800cb7e:	4641      	mov	r1, r8
 800cb80:	f000 faa8 	bl	800d0d4 <memmove>
 800cb84:	68a3      	ldr	r3, [r4, #8]
 800cb86:	1b9b      	subs	r3, r3, r6
 800cb88:	60a3      	str	r3, [r4, #8]
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	4433      	add	r3, r6
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	2000      	movs	r0, #0
 800cb92:	e7db      	b.n	800cb4c <__ssputs_r+0x58>
 800cb94:	462a      	mov	r2, r5
 800cb96:	f000 fb97 	bl	800d2c8 <_realloc_r>
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d1e1      	bne.n	800cb64 <__ssputs_r+0x70>
 800cba0:	6921      	ldr	r1, [r4, #16]
 800cba2:	4650      	mov	r0, sl
 800cba4:	f000 fab0 	bl	800d108 <_free_r>
 800cba8:	e7c7      	b.n	800cb3a <__ssputs_r+0x46>
	...

0800cbac <_svfiprintf_r>:
 800cbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb0:	4698      	mov	r8, r3
 800cbb2:	898b      	ldrh	r3, [r1, #12]
 800cbb4:	061b      	lsls	r3, r3, #24
 800cbb6:	b09d      	sub	sp, #116	; 0x74
 800cbb8:	4607      	mov	r7, r0
 800cbba:	460d      	mov	r5, r1
 800cbbc:	4614      	mov	r4, r2
 800cbbe:	d50e      	bpl.n	800cbde <_svfiprintf_r+0x32>
 800cbc0:	690b      	ldr	r3, [r1, #16]
 800cbc2:	b963      	cbnz	r3, 800cbde <_svfiprintf_r+0x32>
 800cbc4:	2140      	movs	r1, #64	; 0x40
 800cbc6:	f000 fb0b 	bl	800d1e0 <_malloc_r>
 800cbca:	6028      	str	r0, [r5, #0]
 800cbcc:	6128      	str	r0, [r5, #16]
 800cbce:	b920      	cbnz	r0, 800cbda <_svfiprintf_r+0x2e>
 800cbd0:	230c      	movs	r3, #12
 800cbd2:	603b      	str	r3, [r7, #0]
 800cbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd8:	e0d1      	b.n	800cd7e <_svfiprintf_r+0x1d2>
 800cbda:	2340      	movs	r3, #64	; 0x40
 800cbdc:	616b      	str	r3, [r5, #20]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe2:	2320      	movs	r3, #32
 800cbe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbe8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbec:	2330      	movs	r3, #48	; 0x30
 800cbee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd98 <_svfiprintf_r+0x1ec>
 800cbf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbf6:	f04f 0901 	mov.w	r9, #1
 800cbfa:	4623      	mov	r3, r4
 800cbfc:	469a      	mov	sl, r3
 800cbfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc02:	b10a      	cbz	r2, 800cc08 <_svfiprintf_r+0x5c>
 800cc04:	2a25      	cmp	r2, #37	; 0x25
 800cc06:	d1f9      	bne.n	800cbfc <_svfiprintf_r+0x50>
 800cc08:	ebba 0b04 	subs.w	fp, sl, r4
 800cc0c:	d00b      	beq.n	800cc26 <_svfiprintf_r+0x7a>
 800cc0e:	465b      	mov	r3, fp
 800cc10:	4622      	mov	r2, r4
 800cc12:	4629      	mov	r1, r5
 800cc14:	4638      	mov	r0, r7
 800cc16:	f7ff ff6d 	bl	800caf4 <__ssputs_r>
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	f000 80aa 	beq.w	800cd74 <_svfiprintf_r+0x1c8>
 800cc20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc22:	445a      	add	r2, fp
 800cc24:	9209      	str	r2, [sp, #36]	; 0x24
 800cc26:	f89a 3000 	ldrb.w	r3, [sl]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	f000 80a2 	beq.w	800cd74 <_svfiprintf_r+0x1c8>
 800cc30:	2300      	movs	r3, #0
 800cc32:	f04f 32ff 	mov.w	r2, #4294967295
 800cc36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc3a:	f10a 0a01 	add.w	sl, sl, #1
 800cc3e:	9304      	str	r3, [sp, #16]
 800cc40:	9307      	str	r3, [sp, #28]
 800cc42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc46:	931a      	str	r3, [sp, #104]	; 0x68
 800cc48:	4654      	mov	r4, sl
 800cc4a:	2205      	movs	r2, #5
 800cc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc50:	4851      	ldr	r0, [pc, #324]	; (800cd98 <_svfiprintf_r+0x1ec>)
 800cc52:	f7f3 fb4d 	bl	80002f0 <memchr>
 800cc56:	9a04      	ldr	r2, [sp, #16]
 800cc58:	b9d8      	cbnz	r0, 800cc92 <_svfiprintf_r+0xe6>
 800cc5a:	06d0      	lsls	r0, r2, #27
 800cc5c:	bf44      	itt	mi
 800cc5e:	2320      	movmi	r3, #32
 800cc60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc64:	0711      	lsls	r1, r2, #28
 800cc66:	bf44      	itt	mi
 800cc68:	232b      	movmi	r3, #43	; 0x2b
 800cc6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc72:	2b2a      	cmp	r3, #42	; 0x2a
 800cc74:	d015      	beq.n	800cca2 <_svfiprintf_r+0xf6>
 800cc76:	9a07      	ldr	r2, [sp, #28]
 800cc78:	4654      	mov	r4, sl
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	f04f 0c0a 	mov.w	ip, #10
 800cc80:	4621      	mov	r1, r4
 800cc82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc86:	3b30      	subs	r3, #48	; 0x30
 800cc88:	2b09      	cmp	r3, #9
 800cc8a:	d94e      	bls.n	800cd2a <_svfiprintf_r+0x17e>
 800cc8c:	b1b0      	cbz	r0, 800ccbc <_svfiprintf_r+0x110>
 800cc8e:	9207      	str	r2, [sp, #28]
 800cc90:	e014      	b.n	800ccbc <_svfiprintf_r+0x110>
 800cc92:	eba0 0308 	sub.w	r3, r0, r8
 800cc96:	fa09 f303 	lsl.w	r3, r9, r3
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	9304      	str	r3, [sp, #16]
 800cc9e:	46a2      	mov	sl, r4
 800cca0:	e7d2      	b.n	800cc48 <_svfiprintf_r+0x9c>
 800cca2:	9b03      	ldr	r3, [sp, #12]
 800cca4:	1d19      	adds	r1, r3, #4
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	9103      	str	r1, [sp, #12]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	bfbb      	ittet	lt
 800ccae:	425b      	neglt	r3, r3
 800ccb0:	f042 0202 	orrlt.w	r2, r2, #2
 800ccb4:	9307      	strge	r3, [sp, #28]
 800ccb6:	9307      	strlt	r3, [sp, #28]
 800ccb8:	bfb8      	it	lt
 800ccba:	9204      	strlt	r2, [sp, #16]
 800ccbc:	7823      	ldrb	r3, [r4, #0]
 800ccbe:	2b2e      	cmp	r3, #46	; 0x2e
 800ccc0:	d10c      	bne.n	800ccdc <_svfiprintf_r+0x130>
 800ccc2:	7863      	ldrb	r3, [r4, #1]
 800ccc4:	2b2a      	cmp	r3, #42	; 0x2a
 800ccc6:	d135      	bne.n	800cd34 <_svfiprintf_r+0x188>
 800ccc8:	9b03      	ldr	r3, [sp, #12]
 800ccca:	1d1a      	adds	r2, r3, #4
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	9203      	str	r2, [sp, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	bfb8      	it	lt
 800ccd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccd8:	3402      	adds	r4, #2
 800ccda:	9305      	str	r3, [sp, #20]
 800ccdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cda8 <_svfiprintf_r+0x1fc>
 800cce0:	7821      	ldrb	r1, [r4, #0]
 800cce2:	2203      	movs	r2, #3
 800cce4:	4650      	mov	r0, sl
 800cce6:	f7f3 fb03 	bl	80002f0 <memchr>
 800ccea:	b140      	cbz	r0, 800ccfe <_svfiprintf_r+0x152>
 800ccec:	2340      	movs	r3, #64	; 0x40
 800ccee:	eba0 000a 	sub.w	r0, r0, sl
 800ccf2:	fa03 f000 	lsl.w	r0, r3, r0
 800ccf6:	9b04      	ldr	r3, [sp, #16]
 800ccf8:	4303      	orrs	r3, r0
 800ccfa:	3401      	adds	r4, #1
 800ccfc:	9304      	str	r3, [sp, #16]
 800ccfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd02:	4826      	ldr	r0, [pc, #152]	; (800cd9c <_svfiprintf_r+0x1f0>)
 800cd04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd08:	2206      	movs	r2, #6
 800cd0a:	f7f3 faf1 	bl	80002f0 <memchr>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d038      	beq.n	800cd84 <_svfiprintf_r+0x1d8>
 800cd12:	4b23      	ldr	r3, [pc, #140]	; (800cda0 <_svfiprintf_r+0x1f4>)
 800cd14:	bb1b      	cbnz	r3, 800cd5e <_svfiprintf_r+0x1b2>
 800cd16:	9b03      	ldr	r3, [sp, #12]
 800cd18:	3307      	adds	r3, #7
 800cd1a:	f023 0307 	bic.w	r3, r3, #7
 800cd1e:	3308      	adds	r3, #8
 800cd20:	9303      	str	r3, [sp, #12]
 800cd22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd24:	4433      	add	r3, r6
 800cd26:	9309      	str	r3, [sp, #36]	; 0x24
 800cd28:	e767      	b.n	800cbfa <_svfiprintf_r+0x4e>
 800cd2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd2e:	460c      	mov	r4, r1
 800cd30:	2001      	movs	r0, #1
 800cd32:	e7a5      	b.n	800cc80 <_svfiprintf_r+0xd4>
 800cd34:	2300      	movs	r3, #0
 800cd36:	3401      	adds	r4, #1
 800cd38:	9305      	str	r3, [sp, #20]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	f04f 0c0a 	mov.w	ip, #10
 800cd40:	4620      	mov	r0, r4
 800cd42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd46:	3a30      	subs	r2, #48	; 0x30
 800cd48:	2a09      	cmp	r2, #9
 800cd4a:	d903      	bls.n	800cd54 <_svfiprintf_r+0x1a8>
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d0c5      	beq.n	800ccdc <_svfiprintf_r+0x130>
 800cd50:	9105      	str	r1, [sp, #20]
 800cd52:	e7c3      	b.n	800ccdc <_svfiprintf_r+0x130>
 800cd54:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd58:	4604      	mov	r4, r0
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e7f0      	b.n	800cd40 <_svfiprintf_r+0x194>
 800cd5e:	ab03      	add	r3, sp, #12
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	462a      	mov	r2, r5
 800cd64:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <_svfiprintf_r+0x1f8>)
 800cd66:	a904      	add	r1, sp, #16
 800cd68:	4638      	mov	r0, r7
 800cd6a:	f3af 8000 	nop.w
 800cd6e:	1c42      	adds	r2, r0, #1
 800cd70:	4606      	mov	r6, r0
 800cd72:	d1d6      	bne.n	800cd22 <_svfiprintf_r+0x176>
 800cd74:	89ab      	ldrh	r3, [r5, #12]
 800cd76:	065b      	lsls	r3, r3, #25
 800cd78:	f53f af2c 	bmi.w	800cbd4 <_svfiprintf_r+0x28>
 800cd7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd7e:	b01d      	add	sp, #116	; 0x74
 800cd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd84:	ab03      	add	r3, sp, #12
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	462a      	mov	r2, r5
 800cd8a:	4b06      	ldr	r3, [pc, #24]	; (800cda4 <_svfiprintf_r+0x1f8>)
 800cd8c:	a904      	add	r1, sp, #16
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f000 f87a 	bl	800ce88 <_printf_i>
 800cd94:	e7eb      	b.n	800cd6e <_svfiprintf_r+0x1c2>
 800cd96:	bf00      	nop
 800cd98:	0800d490 	.word	0x0800d490
 800cd9c:	0800d49a 	.word	0x0800d49a
 800cda0:	00000000 	.word	0x00000000
 800cda4:	0800caf5 	.word	0x0800caf5
 800cda8:	0800d496 	.word	0x0800d496

0800cdac <_printf_common>:
 800cdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb0:	4616      	mov	r6, r2
 800cdb2:	4699      	mov	r9, r3
 800cdb4:	688a      	ldr	r2, [r1, #8]
 800cdb6:	690b      	ldr	r3, [r1, #16]
 800cdb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	bfb8      	it	lt
 800cdc0:	4613      	movlt	r3, r2
 800cdc2:	6033      	str	r3, [r6, #0]
 800cdc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdc8:	4607      	mov	r7, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	b10a      	cbz	r2, 800cdd2 <_printf_common+0x26>
 800cdce:	3301      	adds	r3, #1
 800cdd0:	6033      	str	r3, [r6, #0]
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	0699      	lsls	r1, r3, #26
 800cdd6:	bf42      	ittt	mi
 800cdd8:	6833      	ldrmi	r3, [r6, #0]
 800cdda:	3302      	addmi	r3, #2
 800cddc:	6033      	strmi	r3, [r6, #0]
 800cdde:	6825      	ldr	r5, [r4, #0]
 800cde0:	f015 0506 	ands.w	r5, r5, #6
 800cde4:	d106      	bne.n	800cdf4 <_printf_common+0x48>
 800cde6:	f104 0a19 	add.w	sl, r4, #25
 800cdea:	68e3      	ldr	r3, [r4, #12]
 800cdec:	6832      	ldr	r2, [r6, #0]
 800cdee:	1a9b      	subs	r3, r3, r2
 800cdf0:	42ab      	cmp	r3, r5
 800cdf2:	dc26      	bgt.n	800ce42 <_printf_common+0x96>
 800cdf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdf8:	1e13      	subs	r3, r2, #0
 800cdfa:	6822      	ldr	r2, [r4, #0]
 800cdfc:	bf18      	it	ne
 800cdfe:	2301      	movne	r3, #1
 800ce00:	0692      	lsls	r2, r2, #26
 800ce02:	d42b      	bmi.n	800ce5c <_printf_common+0xb0>
 800ce04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce08:	4649      	mov	r1, r9
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	47c0      	blx	r8
 800ce0e:	3001      	adds	r0, #1
 800ce10:	d01e      	beq.n	800ce50 <_printf_common+0xa4>
 800ce12:	6823      	ldr	r3, [r4, #0]
 800ce14:	68e5      	ldr	r5, [r4, #12]
 800ce16:	6832      	ldr	r2, [r6, #0]
 800ce18:	f003 0306 	and.w	r3, r3, #6
 800ce1c:	2b04      	cmp	r3, #4
 800ce1e:	bf08      	it	eq
 800ce20:	1aad      	subeq	r5, r5, r2
 800ce22:	68a3      	ldr	r3, [r4, #8]
 800ce24:	6922      	ldr	r2, [r4, #16]
 800ce26:	bf0c      	ite	eq
 800ce28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce2c:	2500      	movne	r5, #0
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	bfc4      	itt	gt
 800ce32:	1a9b      	subgt	r3, r3, r2
 800ce34:	18ed      	addgt	r5, r5, r3
 800ce36:	2600      	movs	r6, #0
 800ce38:	341a      	adds	r4, #26
 800ce3a:	42b5      	cmp	r5, r6
 800ce3c:	d11a      	bne.n	800ce74 <_printf_common+0xc8>
 800ce3e:	2000      	movs	r0, #0
 800ce40:	e008      	b.n	800ce54 <_printf_common+0xa8>
 800ce42:	2301      	movs	r3, #1
 800ce44:	4652      	mov	r2, sl
 800ce46:	4649      	mov	r1, r9
 800ce48:	4638      	mov	r0, r7
 800ce4a:	47c0      	blx	r8
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	d103      	bne.n	800ce58 <_printf_common+0xac>
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295
 800ce54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce58:	3501      	adds	r5, #1
 800ce5a:	e7c6      	b.n	800cdea <_printf_common+0x3e>
 800ce5c:	18e1      	adds	r1, r4, r3
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	2030      	movs	r0, #48	; 0x30
 800ce62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce66:	4422      	add	r2, r4
 800ce68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce70:	3302      	adds	r3, #2
 800ce72:	e7c7      	b.n	800ce04 <_printf_common+0x58>
 800ce74:	2301      	movs	r3, #1
 800ce76:	4622      	mov	r2, r4
 800ce78:	4649      	mov	r1, r9
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	47c0      	blx	r8
 800ce7e:	3001      	adds	r0, #1
 800ce80:	d0e6      	beq.n	800ce50 <_printf_common+0xa4>
 800ce82:	3601      	adds	r6, #1
 800ce84:	e7d9      	b.n	800ce3a <_printf_common+0x8e>
	...

0800ce88 <_printf_i>:
 800ce88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce8c:	7e0f      	ldrb	r7, [r1, #24]
 800ce8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce90:	2f78      	cmp	r7, #120	; 0x78
 800ce92:	4691      	mov	r9, r2
 800ce94:	4680      	mov	r8, r0
 800ce96:	460c      	mov	r4, r1
 800ce98:	469a      	mov	sl, r3
 800ce9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce9e:	d807      	bhi.n	800ceb0 <_printf_i+0x28>
 800cea0:	2f62      	cmp	r7, #98	; 0x62
 800cea2:	d80a      	bhi.n	800ceba <_printf_i+0x32>
 800cea4:	2f00      	cmp	r7, #0
 800cea6:	f000 80d8 	beq.w	800d05a <_printf_i+0x1d2>
 800ceaa:	2f58      	cmp	r7, #88	; 0x58
 800ceac:	f000 80a3 	beq.w	800cff6 <_printf_i+0x16e>
 800ceb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ceb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ceb8:	e03a      	b.n	800cf30 <_printf_i+0xa8>
 800ceba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cebe:	2b15      	cmp	r3, #21
 800cec0:	d8f6      	bhi.n	800ceb0 <_printf_i+0x28>
 800cec2:	a101      	add	r1, pc, #4	; (adr r1, 800cec8 <_printf_i+0x40>)
 800cec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cec8:	0800cf21 	.word	0x0800cf21
 800cecc:	0800cf35 	.word	0x0800cf35
 800ced0:	0800ceb1 	.word	0x0800ceb1
 800ced4:	0800ceb1 	.word	0x0800ceb1
 800ced8:	0800ceb1 	.word	0x0800ceb1
 800cedc:	0800ceb1 	.word	0x0800ceb1
 800cee0:	0800cf35 	.word	0x0800cf35
 800cee4:	0800ceb1 	.word	0x0800ceb1
 800cee8:	0800ceb1 	.word	0x0800ceb1
 800ceec:	0800ceb1 	.word	0x0800ceb1
 800cef0:	0800ceb1 	.word	0x0800ceb1
 800cef4:	0800d041 	.word	0x0800d041
 800cef8:	0800cf65 	.word	0x0800cf65
 800cefc:	0800d023 	.word	0x0800d023
 800cf00:	0800ceb1 	.word	0x0800ceb1
 800cf04:	0800ceb1 	.word	0x0800ceb1
 800cf08:	0800d063 	.word	0x0800d063
 800cf0c:	0800ceb1 	.word	0x0800ceb1
 800cf10:	0800cf65 	.word	0x0800cf65
 800cf14:	0800ceb1 	.word	0x0800ceb1
 800cf18:	0800ceb1 	.word	0x0800ceb1
 800cf1c:	0800d02b 	.word	0x0800d02b
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	1d1a      	adds	r2, r3, #4
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	602a      	str	r2, [r5, #0]
 800cf28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf30:	2301      	movs	r3, #1
 800cf32:	e0a3      	b.n	800d07c <_printf_i+0x1f4>
 800cf34:	6820      	ldr	r0, [r4, #0]
 800cf36:	6829      	ldr	r1, [r5, #0]
 800cf38:	0606      	lsls	r6, r0, #24
 800cf3a:	f101 0304 	add.w	r3, r1, #4
 800cf3e:	d50a      	bpl.n	800cf56 <_printf_i+0xce>
 800cf40:	680e      	ldr	r6, [r1, #0]
 800cf42:	602b      	str	r3, [r5, #0]
 800cf44:	2e00      	cmp	r6, #0
 800cf46:	da03      	bge.n	800cf50 <_printf_i+0xc8>
 800cf48:	232d      	movs	r3, #45	; 0x2d
 800cf4a:	4276      	negs	r6, r6
 800cf4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf50:	485e      	ldr	r0, [pc, #376]	; (800d0cc <_printf_i+0x244>)
 800cf52:	230a      	movs	r3, #10
 800cf54:	e019      	b.n	800cf8a <_printf_i+0x102>
 800cf56:	680e      	ldr	r6, [r1, #0]
 800cf58:	602b      	str	r3, [r5, #0]
 800cf5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf5e:	bf18      	it	ne
 800cf60:	b236      	sxthne	r6, r6
 800cf62:	e7ef      	b.n	800cf44 <_printf_i+0xbc>
 800cf64:	682b      	ldr	r3, [r5, #0]
 800cf66:	6820      	ldr	r0, [r4, #0]
 800cf68:	1d19      	adds	r1, r3, #4
 800cf6a:	6029      	str	r1, [r5, #0]
 800cf6c:	0601      	lsls	r1, r0, #24
 800cf6e:	d501      	bpl.n	800cf74 <_printf_i+0xec>
 800cf70:	681e      	ldr	r6, [r3, #0]
 800cf72:	e002      	b.n	800cf7a <_printf_i+0xf2>
 800cf74:	0646      	lsls	r6, r0, #25
 800cf76:	d5fb      	bpl.n	800cf70 <_printf_i+0xe8>
 800cf78:	881e      	ldrh	r6, [r3, #0]
 800cf7a:	4854      	ldr	r0, [pc, #336]	; (800d0cc <_printf_i+0x244>)
 800cf7c:	2f6f      	cmp	r7, #111	; 0x6f
 800cf7e:	bf0c      	ite	eq
 800cf80:	2308      	moveq	r3, #8
 800cf82:	230a      	movne	r3, #10
 800cf84:	2100      	movs	r1, #0
 800cf86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf8a:	6865      	ldr	r5, [r4, #4]
 800cf8c:	60a5      	str	r5, [r4, #8]
 800cf8e:	2d00      	cmp	r5, #0
 800cf90:	bfa2      	ittt	ge
 800cf92:	6821      	ldrge	r1, [r4, #0]
 800cf94:	f021 0104 	bicge.w	r1, r1, #4
 800cf98:	6021      	strge	r1, [r4, #0]
 800cf9a:	b90e      	cbnz	r6, 800cfa0 <_printf_i+0x118>
 800cf9c:	2d00      	cmp	r5, #0
 800cf9e:	d04d      	beq.n	800d03c <_printf_i+0x1b4>
 800cfa0:	4615      	mov	r5, r2
 800cfa2:	fbb6 f1f3 	udiv	r1, r6, r3
 800cfa6:	fb03 6711 	mls	r7, r3, r1, r6
 800cfaa:	5dc7      	ldrb	r7, [r0, r7]
 800cfac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cfb0:	4637      	mov	r7, r6
 800cfb2:	42bb      	cmp	r3, r7
 800cfb4:	460e      	mov	r6, r1
 800cfb6:	d9f4      	bls.n	800cfa2 <_printf_i+0x11a>
 800cfb8:	2b08      	cmp	r3, #8
 800cfba:	d10b      	bne.n	800cfd4 <_printf_i+0x14c>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	07de      	lsls	r6, r3, #31
 800cfc0:	d508      	bpl.n	800cfd4 <_printf_i+0x14c>
 800cfc2:	6923      	ldr	r3, [r4, #16]
 800cfc4:	6861      	ldr	r1, [r4, #4]
 800cfc6:	4299      	cmp	r1, r3
 800cfc8:	bfde      	ittt	le
 800cfca:	2330      	movle	r3, #48	; 0x30
 800cfcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cfd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cfd4:	1b52      	subs	r2, r2, r5
 800cfd6:	6122      	str	r2, [r4, #16]
 800cfd8:	f8cd a000 	str.w	sl, [sp]
 800cfdc:	464b      	mov	r3, r9
 800cfde:	aa03      	add	r2, sp, #12
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	4640      	mov	r0, r8
 800cfe4:	f7ff fee2 	bl	800cdac <_printf_common>
 800cfe8:	3001      	adds	r0, #1
 800cfea:	d14c      	bne.n	800d086 <_printf_i+0x1fe>
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295
 800cff0:	b004      	add	sp, #16
 800cff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff6:	4835      	ldr	r0, [pc, #212]	; (800d0cc <_printf_i+0x244>)
 800cff8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cffc:	6829      	ldr	r1, [r5, #0]
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	f851 6b04 	ldr.w	r6, [r1], #4
 800d004:	6029      	str	r1, [r5, #0]
 800d006:	061d      	lsls	r5, r3, #24
 800d008:	d514      	bpl.n	800d034 <_printf_i+0x1ac>
 800d00a:	07df      	lsls	r7, r3, #31
 800d00c:	bf44      	itt	mi
 800d00e:	f043 0320 	orrmi.w	r3, r3, #32
 800d012:	6023      	strmi	r3, [r4, #0]
 800d014:	b91e      	cbnz	r6, 800d01e <_printf_i+0x196>
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	f023 0320 	bic.w	r3, r3, #32
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	2310      	movs	r3, #16
 800d020:	e7b0      	b.n	800cf84 <_printf_i+0xfc>
 800d022:	6823      	ldr	r3, [r4, #0]
 800d024:	f043 0320 	orr.w	r3, r3, #32
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	2378      	movs	r3, #120	; 0x78
 800d02c:	4828      	ldr	r0, [pc, #160]	; (800d0d0 <_printf_i+0x248>)
 800d02e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d032:	e7e3      	b.n	800cffc <_printf_i+0x174>
 800d034:	0659      	lsls	r1, r3, #25
 800d036:	bf48      	it	mi
 800d038:	b2b6      	uxthmi	r6, r6
 800d03a:	e7e6      	b.n	800d00a <_printf_i+0x182>
 800d03c:	4615      	mov	r5, r2
 800d03e:	e7bb      	b.n	800cfb8 <_printf_i+0x130>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	6826      	ldr	r6, [r4, #0]
 800d044:	6961      	ldr	r1, [r4, #20]
 800d046:	1d18      	adds	r0, r3, #4
 800d048:	6028      	str	r0, [r5, #0]
 800d04a:	0635      	lsls	r5, r6, #24
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	d501      	bpl.n	800d054 <_printf_i+0x1cc>
 800d050:	6019      	str	r1, [r3, #0]
 800d052:	e002      	b.n	800d05a <_printf_i+0x1d2>
 800d054:	0670      	lsls	r0, r6, #25
 800d056:	d5fb      	bpl.n	800d050 <_printf_i+0x1c8>
 800d058:	8019      	strh	r1, [r3, #0]
 800d05a:	2300      	movs	r3, #0
 800d05c:	6123      	str	r3, [r4, #16]
 800d05e:	4615      	mov	r5, r2
 800d060:	e7ba      	b.n	800cfd8 <_printf_i+0x150>
 800d062:	682b      	ldr	r3, [r5, #0]
 800d064:	1d1a      	adds	r2, r3, #4
 800d066:	602a      	str	r2, [r5, #0]
 800d068:	681d      	ldr	r5, [r3, #0]
 800d06a:	6862      	ldr	r2, [r4, #4]
 800d06c:	2100      	movs	r1, #0
 800d06e:	4628      	mov	r0, r5
 800d070:	f7f3 f93e 	bl	80002f0 <memchr>
 800d074:	b108      	cbz	r0, 800d07a <_printf_i+0x1f2>
 800d076:	1b40      	subs	r0, r0, r5
 800d078:	6060      	str	r0, [r4, #4]
 800d07a:	6863      	ldr	r3, [r4, #4]
 800d07c:	6123      	str	r3, [r4, #16]
 800d07e:	2300      	movs	r3, #0
 800d080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d084:	e7a8      	b.n	800cfd8 <_printf_i+0x150>
 800d086:	6923      	ldr	r3, [r4, #16]
 800d088:	462a      	mov	r2, r5
 800d08a:	4649      	mov	r1, r9
 800d08c:	4640      	mov	r0, r8
 800d08e:	47d0      	blx	sl
 800d090:	3001      	adds	r0, #1
 800d092:	d0ab      	beq.n	800cfec <_printf_i+0x164>
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	079b      	lsls	r3, r3, #30
 800d098:	d413      	bmi.n	800d0c2 <_printf_i+0x23a>
 800d09a:	68e0      	ldr	r0, [r4, #12]
 800d09c:	9b03      	ldr	r3, [sp, #12]
 800d09e:	4298      	cmp	r0, r3
 800d0a0:	bfb8      	it	lt
 800d0a2:	4618      	movlt	r0, r3
 800d0a4:	e7a4      	b.n	800cff0 <_printf_i+0x168>
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	4632      	mov	r2, r6
 800d0aa:	4649      	mov	r1, r9
 800d0ac:	4640      	mov	r0, r8
 800d0ae:	47d0      	blx	sl
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d09b      	beq.n	800cfec <_printf_i+0x164>
 800d0b4:	3501      	adds	r5, #1
 800d0b6:	68e3      	ldr	r3, [r4, #12]
 800d0b8:	9903      	ldr	r1, [sp, #12]
 800d0ba:	1a5b      	subs	r3, r3, r1
 800d0bc:	42ab      	cmp	r3, r5
 800d0be:	dcf2      	bgt.n	800d0a6 <_printf_i+0x21e>
 800d0c0:	e7eb      	b.n	800d09a <_printf_i+0x212>
 800d0c2:	2500      	movs	r5, #0
 800d0c4:	f104 0619 	add.w	r6, r4, #25
 800d0c8:	e7f5      	b.n	800d0b6 <_printf_i+0x22e>
 800d0ca:	bf00      	nop
 800d0cc:	0800d4a1 	.word	0x0800d4a1
 800d0d0:	0800d4b2 	.word	0x0800d4b2

0800d0d4 <memmove>:
 800d0d4:	4288      	cmp	r0, r1
 800d0d6:	b510      	push	{r4, lr}
 800d0d8:	eb01 0402 	add.w	r4, r1, r2
 800d0dc:	d902      	bls.n	800d0e4 <memmove+0x10>
 800d0de:	4284      	cmp	r4, r0
 800d0e0:	4623      	mov	r3, r4
 800d0e2:	d807      	bhi.n	800d0f4 <memmove+0x20>
 800d0e4:	1e43      	subs	r3, r0, #1
 800d0e6:	42a1      	cmp	r1, r4
 800d0e8:	d008      	beq.n	800d0fc <memmove+0x28>
 800d0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0f2:	e7f8      	b.n	800d0e6 <memmove+0x12>
 800d0f4:	4402      	add	r2, r0
 800d0f6:	4601      	mov	r1, r0
 800d0f8:	428a      	cmp	r2, r1
 800d0fa:	d100      	bne.n	800d0fe <memmove+0x2a>
 800d0fc:	bd10      	pop	{r4, pc}
 800d0fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d106:	e7f7      	b.n	800d0f8 <memmove+0x24>

0800d108 <_free_r>:
 800d108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d10a:	2900      	cmp	r1, #0
 800d10c:	d044      	beq.n	800d198 <_free_r+0x90>
 800d10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d112:	9001      	str	r0, [sp, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	f1a1 0404 	sub.w	r4, r1, #4
 800d11a:	bfb8      	it	lt
 800d11c:	18e4      	addlt	r4, r4, r3
 800d11e:	f000 f913 	bl	800d348 <__malloc_lock>
 800d122:	4a1e      	ldr	r2, [pc, #120]	; (800d19c <_free_r+0x94>)
 800d124:	9801      	ldr	r0, [sp, #4]
 800d126:	6813      	ldr	r3, [r2, #0]
 800d128:	b933      	cbnz	r3, 800d138 <_free_r+0x30>
 800d12a:	6063      	str	r3, [r4, #4]
 800d12c:	6014      	str	r4, [r2, #0]
 800d12e:	b003      	add	sp, #12
 800d130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d134:	f000 b90e 	b.w	800d354 <__malloc_unlock>
 800d138:	42a3      	cmp	r3, r4
 800d13a:	d908      	bls.n	800d14e <_free_r+0x46>
 800d13c:	6825      	ldr	r5, [r4, #0]
 800d13e:	1961      	adds	r1, r4, r5
 800d140:	428b      	cmp	r3, r1
 800d142:	bf01      	itttt	eq
 800d144:	6819      	ldreq	r1, [r3, #0]
 800d146:	685b      	ldreq	r3, [r3, #4]
 800d148:	1949      	addeq	r1, r1, r5
 800d14a:	6021      	streq	r1, [r4, #0]
 800d14c:	e7ed      	b.n	800d12a <_free_r+0x22>
 800d14e:	461a      	mov	r2, r3
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	b10b      	cbz	r3, 800d158 <_free_r+0x50>
 800d154:	42a3      	cmp	r3, r4
 800d156:	d9fa      	bls.n	800d14e <_free_r+0x46>
 800d158:	6811      	ldr	r1, [r2, #0]
 800d15a:	1855      	adds	r5, r2, r1
 800d15c:	42a5      	cmp	r5, r4
 800d15e:	d10b      	bne.n	800d178 <_free_r+0x70>
 800d160:	6824      	ldr	r4, [r4, #0]
 800d162:	4421      	add	r1, r4
 800d164:	1854      	adds	r4, r2, r1
 800d166:	42a3      	cmp	r3, r4
 800d168:	6011      	str	r1, [r2, #0]
 800d16a:	d1e0      	bne.n	800d12e <_free_r+0x26>
 800d16c:	681c      	ldr	r4, [r3, #0]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	6053      	str	r3, [r2, #4]
 800d172:	4421      	add	r1, r4
 800d174:	6011      	str	r1, [r2, #0]
 800d176:	e7da      	b.n	800d12e <_free_r+0x26>
 800d178:	d902      	bls.n	800d180 <_free_r+0x78>
 800d17a:	230c      	movs	r3, #12
 800d17c:	6003      	str	r3, [r0, #0]
 800d17e:	e7d6      	b.n	800d12e <_free_r+0x26>
 800d180:	6825      	ldr	r5, [r4, #0]
 800d182:	1961      	adds	r1, r4, r5
 800d184:	428b      	cmp	r3, r1
 800d186:	bf04      	itt	eq
 800d188:	6819      	ldreq	r1, [r3, #0]
 800d18a:	685b      	ldreq	r3, [r3, #4]
 800d18c:	6063      	str	r3, [r4, #4]
 800d18e:	bf04      	itt	eq
 800d190:	1949      	addeq	r1, r1, r5
 800d192:	6021      	streq	r1, [r4, #0]
 800d194:	6054      	str	r4, [r2, #4]
 800d196:	e7ca      	b.n	800d12e <_free_r+0x26>
 800d198:	b003      	add	sp, #12
 800d19a:	bd30      	pop	{r4, r5, pc}
 800d19c:	24000ed0 	.word	0x24000ed0

0800d1a0 <sbrk_aligned>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	4e0e      	ldr	r6, [pc, #56]	; (800d1dc <sbrk_aligned+0x3c>)
 800d1a4:	460c      	mov	r4, r1
 800d1a6:	6831      	ldr	r1, [r6, #0]
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	b911      	cbnz	r1, 800d1b2 <sbrk_aligned+0x12>
 800d1ac:	f000 f8bc 	bl	800d328 <_sbrk_r>
 800d1b0:	6030      	str	r0, [r6, #0]
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f000 f8b7 	bl	800d328 <_sbrk_r>
 800d1ba:	1c43      	adds	r3, r0, #1
 800d1bc:	d00a      	beq.n	800d1d4 <sbrk_aligned+0x34>
 800d1be:	1cc4      	adds	r4, r0, #3
 800d1c0:	f024 0403 	bic.w	r4, r4, #3
 800d1c4:	42a0      	cmp	r0, r4
 800d1c6:	d007      	beq.n	800d1d8 <sbrk_aligned+0x38>
 800d1c8:	1a21      	subs	r1, r4, r0
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	f000 f8ac 	bl	800d328 <_sbrk_r>
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d101      	bne.n	800d1d8 <sbrk_aligned+0x38>
 800d1d4:	f04f 34ff 	mov.w	r4, #4294967295
 800d1d8:	4620      	mov	r0, r4
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	24000ed4 	.word	0x24000ed4

0800d1e0 <_malloc_r>:
 800d1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e4:	1ccd      	adds	r5, r1, #3
 800d1e6:	f025 0503 	bic.w	r5, r5, #3
 800d1ea:	3508      	adds	r5, #8
 800d1ec:	2d0c      	cmp	r5, #12
 800d1ee:	bf38      	it	cc
 800d1f0:	250c      	movcc	r5, #12
 800d1f2:	2d00      	cmp	r5, #0
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	db01      	blt.n	800d1fc <_malloc_r+0x1c>
 800d1f8:	42a9      	cmp	r1, r5
 800d1fa:	d905      	bls.n	800d208 <_malloc_r+0x28>
 800d1fc:	230c      	movs	r3, #12
 800d1fe:	603b      	str	r3, [r7, #0]
 800d200:	2600      	movs	r6, #0
 800d202:	4630      	mov	r0, r6
 800d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d208:	4e2e      	ldr	r6, [pc, #184]	; (800d2c4 <_malloc_r+0xe4>)
 800d20a:	f000 f89d 	bl	800d348 <__malloc_lock>
 800d20e:	6833      	ldr	r3, [r6, #0]
 800d210:	461c      	mov	r4, r3
 800d212:	bb34      	cbnz	r4, 800d262 <_malloc_r+0x82>
 800d214:	4629      	mov	r1, r5
 800d216:	4638      	mov	r0, r7
 800d218:	f7ff ffc2 	bl	800d1a0 <sbrk_aligned>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	4604      	mov	r4, r0
 800d220:	d14d      	bne.n	800d2be <_malloc_r+0xde>
 800d222:	6834      	ldr	r4, [r6, #0]
 800d224:	4626      	mov	r6, r4
 800d226:	2e00      	cmp	r6, #0
 800d228:	d140      	bne.n	800d2ac <_malloc_r+0xcc>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	4631      	mov	r1, r6
 800d22e:	4638      	mov	r0, r7
 800d230:	eb04 0803 	add.w	r8, r4, r3
 800d234:	f000 f878 	bl	800d328 <_sbrk_r>
 800d238:	4580      	cmp	r8, r0
 800d23a:	d13a      	bne.n	800d2b2 <_malloc_r+0xd2>
 800d23c:	6821      	ldr	r1, [r4, #0]
 800d23e:	3503      	adds	r5, #3
 800d240:	1a6d      	subs	r5, r5, r1
 800d242:	f025 0503 	bic.w	r5, r5, #3
 800d246:	3508      	adds	r5, #8
 800d248:	2d0c      	cmp	r5, #12
 800d24a:	bf38      	it	cc
 800d24c:	250c      	movcc	r5, #12
 800d24e:	4629      	mov	r1, r5
 800d250:	4638      	mov	r0, r7
 800d252:	f7ff ffa5 	bl	800d1a0 <sbrk_aligned>
 800d256:	3001      	adds	r0, #1
 800d258:	d02b      	beq.n	800d2b2 <_malloc_r+0xd2>
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	442b      	add	r3, r5
 800d25e:	6023      	str	r3, [r4, #0]
 800d260:	e00e      	b.n	800d280 <_malloc_r+0xa0>
 800d262:	6822      	ldr	r2, [r4, #0]
 800d264:	1b52      	subs	r2, r2, r5
 800d266:	d41e      	bmi.n	800d2a6 <_malloc_r+0xc6>
 800d268:	2a0b      	cmp	r2, #11
 800d26a:	d916      	bls.n	800d29a <_malloc_r+0xba>
 800d26c:	1961      	adds	r1, r4, r5
 800d26e:	42a3      	cmp	r3, r4
 800d270:	6025      	str	r5, [r4, #0]
 800d272:	bf18      	it	ne
 800d274:	6059      	strne	r1, [r3, #4]
 800d276:	6863      	ldr	r3, [r4, #4]
 800d278:	bf08      	it	eq
 800d27a:	6031      	streq	r1, [r6, #0]
 800d27c:	5162      	str	r2, [r4, r5]
 800d27e:	604b      	str	r3, [r1, #4]
 800d280:	4638      	mov	r0, r7
 800d282:	f104 060b 	add.w	r6, r4, #11
 800d286:	f000 f865 	bl	800d354 <__malloc_unlock>
 800d28a:	f026 0607 	bic.w	r6, r6, #7
 800d28e:	1d23      	adds	r3, r4, #4
 800d290:	1af2      	subs	r2, r6, r3
 800d292:	d0b6      	beq.n	800d202 <_malloc_r+0x22>
 800d294:	1b9b      	subs	r3, r3, r6
 800d296:	50a3      	str	r3, [r4, r2]
 800d298:	e7b3      	b.n	800d202 <_malloc_r+0x22>
 800d29a:	6862      	ldr	r2, [r4, #4]
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	bf0c      	ite	eq
 800d2a0:	6032      	streq	r2, [r6, #0]
 800d2a2:	605a      	strne	r2, [r3, #4]
 800d2a4:	e7ec      	b.n	800d280 <_malloc_r+0xa0>
 800d2a6:	4623      	mov	r3, r4
 800d2a8:	6864      	ldr	r4, [r4, #4]
 800d2aa:	e7b2      	b.n	800d212 <_malloc_r+0x32>
 800d2ac:	4634      	mov	r4, r6
 800d2ae:	6876      	ldr	r6, [r6, #4]
 800d2b0:	e7b9      	b.n	800d226 <_malloc_r+0x46>
 800d2b2:	230c      	movs	r3, #12
 800d2b4:	603b      	str	r3, [r7, #0]
 800d2b6:	4638      	mov	r0, r7
 800d2b8:	f000 f84c 	bl	800d354 <__malloc_unlock>
 800d2bc:	e7a1      	b.n	800d202 <_malloc_r+0x22>
 800d2be:	6025      	str	r5, [r4, #0]
 800d2c0:	e7de      	b.n	800d280 <_malloc_r+0xa0>
 800d2c2:	bf00      	nop
 800d2c4:	24000ed0 	.word	0x24000ed0

0800d2c8 <_realloc_r>:
 800d2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	4614      	mov	r4, r2
 800d2d0:	460e      	mov	r6, r1
 800d2d2:	b921      	cbnz	r1, 800d2de <_realloc_r+0x16>
 800d2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d8:	4611      	mov	r1, r2
 800d2da:	f7ff bf81 	b.w	800d1e0 <_malloc_r>
 800d2de:	b92a      	cbnz	r2, 800d2ec <_realloc_r+0x24>
 800d2e0:	f7ff ff12 	bl	800d108 <_free_r>
 800d2e4:	4625      	mov	r5, r4
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ec:	f000 f838 	bl	800d360 <_malloc_usable_size_r>
 800d2f0:	4284      	cmp	r4, r0
 800d2f2:	4607      	mov	r7, r0
 800d2f4:	d802      	bhi.n	800d2fc <_realloc_r+0x34>
 800d2f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d2fa:	d812      	bhi.n	800d322 <_realloc_r+0x5a>
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	4640      	mov	r0, r8
 800d300:	f7ff ff6e 	bl	800d1e0 <_malloc_r>
 800d304:	4605      	mov	r5, r0
 800d306:	2800      	cmp	r0, #0
 800d308:	d0ed      	beq.n	800d2e6 <_realloc_r+0x1e>
 800d30a:	42bc      	cmp	r4, r7
 800d30c:	4622      	mov	r2, r4
 800d30e:	4631      	mov	r1, r6
 800d310:	bf28      	it	cs
 800d312:	463a      	movcs	r2, r7
 800d314:	f7ff fba4 	bl	800ca60 <memcpy>
 800d318:	4631      	mov	r1, r6
 800d31a:	4640      	mov	r0, r8
 800d31c:	f7ff fef4 	bl	800d108 <_free_r>
 800d320:	e7e1      	b.n	800d2e6 <_realloc_r+0x1e>
 800d322:	4635      	mov	r5, r6
 800d324:	e7df      	b.n	800d2e6 <_realloc_r+0x1e>
	...

0800d328 <_sbrk_r>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	4d06      	ldr	r5, [pc, #24]	; (800d344 <_sbrk_r+0x1c>)
 800d32c:	2300      	movs	r3, #0
 800d32e:	4604      	mov	r4, r0
 800d330:	4608      	mov	r0, r1
 800d332:	602b      	str	r3, [r5, #0]
 800d334:	f7f5 fb70 	bl	8002a18 <_sbrk>
 800d338:	1c43      	adds	r3, r0, #1
 800d33a:	d102      	bne.n	800d342 <_sbrk_r+0x1a>
 800d33c:	682b      	ldr	r3, [r5, #0]
 800d33e:	b103      	cbz	r3, 800d342 <_sbrk_r+0x1a>
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	bd38      	pop	{r3, r4, r5, pc}
 800d344:	24000ed8 	.word	0x24000ed8

0800d348 <__malloc_lock>:
 800d348:	4801      	ldr	r0, [pc, #4]	; (800d350 <__malloc_lock+0x8>)
 800d34a:	f000 b811 	b.w	800d370 <__retarget_lock_acquire_recursive>
 800d34e:	bf00      	nop
 800d350:	24000edc 	.word	0x24000edc

0800d354 <__malloc_unlock>:
 800d354:	4801      	ldr	r0, [pc, #4]	; (800d35c <__malloc_unlock+0x8>)
 800d356:	f000 b80c 	b.w	800d372 <__retarget_lock_release_recursive>
 800d35a:	bf00      	nop
 800d35c:	24000edc 	.word	0x24000edc

0800d360 <_malloc_usable_size_r>:
 800d360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d364:	1f18      	subs	r0, r3, #4
 800d366:	2b00      	cmp	r3, #0
 800d368:	bfbc      	itt	lt
 800d36a:	580b      	ldrlt	r3, [r1, r0]
 800d36c:	18c0      	addlt	r0, r0, r3
 800d36e:	4770      	bx	lr

0800d370 <__retarget_lock_acquire_recursive>:
 800d370:	4770      	bx	lr

0800d372 <__retarget_lock_release_recursive>:
 800d372:	4770      	bx	lr

0800d374 <_init>:
 800d374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d376:	bf00      	nop
 800d378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d37a:	bc08      	pop	{r3}
 800d37c:	469e      	mov	lr, r3
 800d37e:	4770      	bx	lr

0800d380 <_fini>:
 800d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d382:	bf00      	nop
 800d384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d386:	bc08      	pop	{r3}
 800d388:	469e      	mov	lr, r3
 800d38a:	4770      	bx	lr

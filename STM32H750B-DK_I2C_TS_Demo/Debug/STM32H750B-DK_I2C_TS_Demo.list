
STM32H750B-DK_I2C_TS_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d090  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800d330  0800d330  0001d330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d454  0800d454  0001d454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d45c  0800d45c  0001d45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d460  0800d460  0001d460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800d464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800d4d8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800d538  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dac  24000134  0800d598  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ee0  0800d598  00020ee0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030da4  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000439f  00000000  00000000  00050f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  000552a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002140  00000000  00000000  00057578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c77  00000000  00000000  000596b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c50b  00000000  00000000  0009a32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b7f1  00000000  00000000  000c683a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026202b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e98  00000000  00000000  0026207c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d318 	.word	0x0800d318

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800d318 	.word	0x0800d318

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
int i=0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
uint8_t Space[] = " - ";
 800069e:	4b6c      	ldr	r3, [pc, #432]	; (8000850 <main+0x1bc>)
 80006a0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f002 fa73 	bl	8002b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f8f1 	bl	800088c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006aa:	f000 f97b 	bl	80009a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 ff1f 	bl	80014f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006b2:	f000 f9a7 	bl	8000a04 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006b6:	f000 fa1d 	bl	8000af4 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006ba:	f000 fa7f 	bl	8000bbc <MX_ADC3_Init>
  MX_ETH_Init();
 80006be:	f000 fadf 	bl	8000c80 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006c2:	f000 fb29 	bl	8000d18 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006c6:	f000 fb8b 	bl	8000de0 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006ca:	f000 fec3 	bl	8001454 <MX_FMC_Init>
  MX_LTDC_Init();
 80006ce:	f000 fc2b 	bl	8000f28 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006d2:	f000 fcdb 	bl	800108c <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006d6:	f000 fd05 	bl	80010e4 <MX_RTC_Init>
  MX_SAI2_Init();
 80006da:	f000 fd2b 	bl	8001134 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006de:	f000 fde7 	bl	80012b0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006e2:	f000 fe39 	bl	8001358 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e6:	f000 fe83 	bl	80013f0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80006ea:	f000 fbdd 	bl	8000ea8 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  /*-[ I2C Bus Scanning ]-*/
		snprintf(SendBuffer,BUFSIZE,"I2C Scanning started !\n\r");
 80006ee:	4a59      	ldr	r2, [pc, #356]	; (8000854 <main+0x1c0>)
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	4858      	ldr	r0, [pc, #352]	; (8000858 <main+0x1c4>)
 80006f6:	f00c f99b 	bl	800ca30 <sniprintf>
		HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 80006fa:	4857      	ldr	r0, [pc, #348]	; (8000858 <main+0x1c4>)
 80006fc:	f7ff fdf0 	bl	80002e0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	4954      	ldr	r1, [pc, #336]	; (8000858 <main+0x1c4>)
 8000708:	4854      	ldr	r0, [pc, #336]	; (800085c <main+0x1c8>)
 800070a:	f00a fc6c 	bl	800afe6 <HAL_UART_Transmit>

		 for(i=1; i<128; i++)
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	e02f      	b.n	8000774 <main+0xe0>
		 {
			 retval = HAL_I2C_IsDeviceReady(&hi2c4, (uint16_t)(i<<1), 3, 5);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	b29b      	uxth	r3, r3
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	b299      	uxth	r1, r3
 800071c:	2305      	movs	r3, #5
 800071e:	2203      	movs	r2, #3
 8000720:	484f      	ldr	r0, [pc, #316]	; (8000860 <main+0x1cc>)
 8000722:	f005 f88f 	bl	8005844 <HAL_I2C_IsDeviceReady>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <main+0x1d0>)
 800072c:	701a      	strb	r2, [r3, #0]
			 if (retval != HAL_OK) /* No ACK Received At That Address */
 800072e:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <main+0x1d0>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <main+0xb0>
			 {
				 HAL_UART_Transmit(&huart3, Space, sizeof(Space), 100);
 8000736:	4639      	mov	r1, r7
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	2204      	movs	r2, #4
 800073c:	4847      	ldr	r0, [pc, #284]	; (800085c <main+0x1c8>)
 800073e:	f00a fc52 	bl	800afe6 <HAL_UART_Transmit>
 8000742:	e014      	b.n	800076e <main+0xda>
			 }
			 else if(retval == HAL_OK)
 8000744:	4b47      	ldr	r3, [pc, #284]	; (8000864 <main+0x1d0>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d110      	bne.n	800076e <main+0xda>
			 {
				 snprintf(SendBuffer,BUFSIZE,"0x%X", i);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a46      	ldr	r2, [pc, #280]	; (8000868 <main+0x1d4>)
 8000750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000754:	4840      	ldr	r0, [pc, #256]	; (8000858 <main+0x1c4>)
 8000756:	f00c f96b 	bl	800ca30 <sniprintf>
				HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),1);
 800075a:	483f      	ldr	r0, [pc, #252]	; (8000858 <main+0x1c4>)
 800075c:	f7ff fdc0 	bl	80002e0 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	b29a      	uxth	r2, r3
 8000764:	2301      	movs	r3, #1
 8000766:	493c      	ldr	r1, [pc, #240]	; (8000858 <main+0x1c4>)
 8000768:	483c      	ldr	r0, [pc, #240]	; (800085c <main+0x1c8>)
 800076a:	f00a fc3c 	bl	800afe6 <HAL_UART_Transmit>
		 for(i=1; i<128; i++)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b7f      	cmp	r3, #127	; 0x7f
 8000778:	ddcc      	ble.n	8000714 <main+0x80>
			 }
		 }
			snprintf(SendBuffer,BUFSIZE,"I2C Scanning stopped !\n\r");
 800077a:	4a3c      	ldr	r2, [pc, #240]	; (800086c <main+0x1d8>)
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4835      	ldr	r0, [pc, #212]	; (8000858 <main+0x1c4>)
 8000782:	f00c f955 	bl	800ca30 <sniprintf>
			HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000786:	4834      	ldr	r0, [pc, #208]	; (8000858 <main+0x1c4>)
 8000788:	f7ff fdaa 	bl	80002e0 <strlen>
 800078c:	4603      	mov	r3, r0
 800078e:	b29a      	uxth	r2, r3
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	4931      	ldr	r1, [pc, #196]	; (8000858 <main+0x1c4>)
 8000794:	4831      	ldr	r0, [pc, #196]	; (800085c <main+0x1c8>)
 8000796:	f00a fc26 	bl	800afe6 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	4834      	ldr	r0, [pc, #208]	; (8000870 <main+0x1dc>)
 80007a0:	f004 fdbb 	bl	800531a <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	4832      	ldr	r0, [pc, #200]	; (8000874 <main+0x1e0>)
 80007aa:	f004 fd85 	bl	80052b8 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b31      	ldr	r3, [pc, #196]	; (8000878 <main+0x1e4>)
 80007b4:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, KeyState);
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <main+0x1e4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	2104      	movs	r1, #4
 80007c0:	482e      	ldr	r0, [pc, #184]	; (800087c <main+0x1e8>)
 80007c2:	f004 fd91 	bl	80052e8 <HAL_GPIO_WritePin>


		// Reading register R24 (addr. 0x18) default value of 0x8b
	    dataBuffer[0] = 0; dataBuffer[1] = 0x00;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <main+0x1ec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <main+0x1ec>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	705a      	strb	r2, [r3, #1]
	    retval = HAL_I2C_Master_Transmit(&hi2c4, (0x1a << 1), dataBuffer, 2, HAL_MAX_DELAY);
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2302      	movs	r3, #2
 80007da:	4a29      	ldr	r2, [pc, #164]	; (8000880 <main+0x1ec>)
 80007dc:	2134      	movs	r1, #52	; 0x34
 80007de:	4820      	ldr	r0, [pc, #128]	; (8000860 <main+0x1cc>)
 80007e0:	f004 fe46 	bl	8005470 <HAL_I2C_Master_Transmit>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <main+0x1d0>)
 80007ea:	701a      	strb	r2, [r3, #0]

	    retval = HAL_I2C_Master_Receive(&hi2c4, (0x1a << 1), dataBuffer, 2, HAL_MAX_DELAY);
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2302      	movs	r3, #2
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <main+0x1ec>)
 80007f6:	2134      	movs	r1, #52	; 0x34
 80007f8:	4819      	ldr	r0, [pc, #100]	; (8000860 <main+0x1cc>)
 80007fa:	f004 ff2d 	bl	8005658 <HAL_I2C_Master_Receive>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <main+0x1d0>)
 8000804:	701a      	strb	r2, [r3, #0]

	    snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Reg.value:0x%4x\n\r",Counter++,KeyState, dataBuffer[0]*256+dataBuffer[1]);
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <main+0x1f0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	491d      	ldr	r1, [pc, #116]	; (8000884 <main+0x1f0>)
 800080e:	600a      	str	r2, [r1, #0]
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <main+0x1e4>)
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	491a      	ldr	r1, [pc, #104]	; (8000880 <main+0x1ec>)
 8000816:	7809      	ldrb	r1, [r1, #0]
 8000818:	0209      	lsls	r1, r1, #8
 800081a:	4819      	ldr	r0, [pc, #100]	; (8000880 <main+0x1ec>)
 800081c:	7840      	ldrb	r0, [r0, #1]
 800081e:	4401      	add	r1, r0
 8000820:	9101      	str	r1, [sp, #4]
 8000822:	9200      	str	r2, [sp, #0]
 8000824:	4a18      	ldr	r2, [pc, #96]	; (8000888 <main+0x1f4>)
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	480b      	ldr	r0, [pc, #44]	; (8000858 <main+0x1c4>)
 800082c:	f00c f900 	bl	800ca30 <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <main+0x1c4>)
 8000832:	f7ff fd55 	bl	80002e0 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <main+0x1c4>)
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <main+0x1c8>)
 8000840:	f00a fbd1 	bl	800afe6 <HAL_UART_Transmit>

	    HAL_Delay(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000848:	f002 fa32 	bl	8002cb0 <HAL_Delay>
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 800084c:	e7a5      	b.n	800079a <main+0x106>
 800084e:	bf00      	nop
 8000850:	00202d20 	.word	0x00202d20
 8000854:	0800d330 	.word	0x0800d330
 8000858:	24000d9c 	.word	0x24000d9c
 800085c:	240007c8 	.word	0x240007c8
 8000860:	240004a4 	.word	0x240004a4
 8000864:	24000eae 	.word	0x24000eae
 8000868:	0800d34c 	.word	0x0800d34c
 800086c:	0800d354 	.word	0x0800d354
 8000870:	58022000 	.word	0x58022000
 8000874:	58020800 	.word	0x58020800
 8000878:	24000ea0 	.word	0x24000ea0
 800087c:	58022400 	.word	0x58022400
 8000880:	24000ea4 	.word	0x24000ea4
 8000884:	24000e9c 	.word	0x24000e9c
 8000888:	0800d370 	.word	0x0800d370

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09c      	sub	sp, #112	; 0x70
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	224c      	movs	r2, #76	; 0x4c
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f00c f8c0 	bl	800ca20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2220      	movs	r2, #32
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f00c f8ba 	bl	800ca20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008ac:	2002      	movs	r0, #2
 80008ae:	f005 ffeb 	bl	8006888 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <SystemClock_Config+0x10c>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ba:	4a37      	ldr	r2, [pc, #220]	; (8000998 <SystemClock_Config+0x10c>)
 80008bc:	f023 0301 	bic.w	r3, r3, #1
 80008c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <SystemClock_Config+0x10c>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	4b33      	ldr	r3, [pc, #204]	; (800099c <SystemClock_Config+0x110>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d4:	4a31      	ldr	r2, [pc, #196]	; (800099c <SystemClock_Config+0x110>)
 80008d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b2f      	ldr	r3, [pc, #188]	; (800099c <SystemClock_Config+0x110>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e8:	bf00      	nop
 80008ea:	4b2c      	ldr	r3, [pc, #176]	; (800099c <SystemClock_Config+0x110>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f6:	d1f8      	bne.n	80008ea <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <SystemClock_Config+0x114>)
 80008fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fc:	f023 0303 	bic.w	r3, r3, #3
 8000900:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <SystemClock_Config+0x114>)
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000908:	230b      	movs	r3, #11
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800090c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000912:	2301      	movs	r3, #1
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000916:	2340      	movs	r3, #64	; 0x40
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800091a:	2301      	movs	r3, #1
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	2302      	movs	r3, #2
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000926:	2316      	movs	r3, #22
 8000928:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 800092a:	23a9      	movs	r3, #169	; 0xa9
 800092c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000932:	2304      	movs	r3, #4
 8000934:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800093a:	2300      	movs	r3, #0
 800093c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093e:	2300      	movs	r3, #0
 8000940:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4618      	mov	r0, r3
 800094c:	f006 f8a0 	bl	8006a90 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000956:	f000 ff75 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	233f      	movs	r3, #63	; 0x3f
 800095c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2101      	movs	r1, #1
 800097e:	4618      	mov	r0, r3
 8000980:	f006 fce0 	bl	8007344 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x102>
  {
    Error_Handler();
 800098a:	f000 ff5b 	bl	8001844 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3770      	adds	r7, #112	; 0x70
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	58000400 	.word	0x58000400
 800099c:	58024800 	.word	0x58024800
 80009a0:	58024400 	.word	0x58024400

080009a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0b0      	sub	sp, #192	; 0xc0
 80009a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	22c0      	movs	r2, #192	; 0xc0
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00c f835 	bl	800ca20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009ba:	f04f 0300 	mov.w	r3, #0
 80009be:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009c6:	230c      	movs	r3, #12
 80009c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80009ca:	2305      	movs	r3, #5
 80009cc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009d6:	23c0      	movs	r3, #192	; 0xc0
 80009d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009da:	2320      	movs	r3, #32
 80009dc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	4618      	mov	r0, r3
 80009ec:	f007 f836 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80009f6:	f000 ff25 	bl	8001844 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	37c0      	adds	r7, #192	; 0xc0
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]
 8000a26:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a2a:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <MX_ADC1_Init+0xec>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a44:	2204      	movs	r2, #4
 8000a46:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a4e:	4b27      	ldr	r3, [pc, #156]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5a:	4b24      	ldr	r3, [pc, #144]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a86:	4819      	ldr	r0, [pc, #100]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000a88:	f002 faf8 	bl	800307c <HAL_ADC_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a92:	f000 fed7 	bl	8001844 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4812      	ldr	r0, [pc, #72]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000aa2:	f003 f90f 	bl	8003cc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000aac:	f000 feca 	bl	8001844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000abc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ac0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <MX_ADC1_Init+0xe8>)
 8000ad4:	f002 fc74 	bl	80033c0 <HAL_ADC_ConfigChannel>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ade:	f000 feb1 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	24000188 	.word	0x24000188
 8000af0:	40022000 	.word	0x40022000

08000af4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b0e:	4a2a      	ldr	r2, [pc, #168]	; (8000bb8 <MX_ADC2_Init+0xc4>)
 8000b10:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b12:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b18:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b6c:	f002 fa86 	bl	800307c <HAL_ADC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b76:	f000 fe65 	bl	8001844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2306      	movs	r3, #6
 8000b80:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b9e:	f002 fc0f 	bl	80033c0 <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000ba8:	f000 fe4c 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	240001ec 	.word	0x240001ec
 8000bb8:	40022100 	.word	0x40022100

08000bbc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bd6:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <MX_ADC3_Init+0xbc>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000be8:	2204      	movs	r2, #4
 8000bea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c2c:	f002 fa26 	bl	800307c <HAL_ADC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c36:	f000 fe05 	bl	8001844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_ADC3_Init+0xc0>)
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3e:	2306      	movs	r3, #6
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c46:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c5e:	f002 fbaf 	bl	80033c0 <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000c68:	f000 fdec 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	24000250 	.word	0x24000250
 8000c78:	58026000 	.word	0x58026000
 8000c7c:	1d500080 	.word	0x1d500080

08000c80 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_ETH_Init+0x80>)
 8000c86:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <MX_ETH_Init+0x84>)
 8000c88:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_ETH_Init+0x88>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_ETH_Init+0x88>)
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_ETH_Init+0x88>)
 8000c98:	22e1      	movs	r2, #225	; 0xe1
 8000c9a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_ETH_Init+0x88>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_ETH_Init+0x88>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_ETH_Init+0x88>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cb0:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <MX_ETH_Init+0x88>)
 8000cb2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <MX_ETH_Init+0x8c>)
 8000cbe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <MX_ETH_Init+0x90>)
 8000cc4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cc8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ccc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cd0:	f003 f9ba 	bl	8004048 <HAL_ETH_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000cda:	f000 fdb3 	bl	8001844 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cde:	2238      	movs	r2, #56	; 0x38
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_ETH_Init+0x94>)
 8000ce4:	f00b fe9c 	bl	800ca20 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_ETH_Init+0x94>)
 8000cea:	2221      	movs	r2, #33	; 0x21
 8000cec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_ETH_Init+0x94>)
 8000cf0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cf4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_ETH_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	240002b4 	.word	0x240002b4
 8000d04:	40028000 	.word	0x40028000
 8000d08:	24000eb0 	.word	0x24000eb0
 8000d0c:	240000d4 	.word	0x240000d4
 8000d10:	24000074 	.word	0x24000074
 8000d14:	24000150 	.word	0x24000150

08000d18 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <MX_FDCAN1_Init+0xc4>)
 8000d20:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d22:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d42:	2210      	movs	r2, #16
 8000d44:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d54:	2202      	movs	r2, #2
 8000d56:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000da2:	2204      	movs	r2, #4
 8000da4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000dc6:	f003 fd63 	bl	8004890 <HAL_FDCAN_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dd0:	f000 fd38 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000364 	.word	0x24000364
 8000ddc:	4000a000 	.word	0x4000a000

08000de0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000de6:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <MX_FDCAN2_Init+0xc4>)
 8000de8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e88:	2204      	movs	r2, #4
 8000e8a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e8e:	f003 fcff 	bl	8004890 <HAL_FDCAN_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000e98:	f000 fcd4 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	24000404 	.word	0x24000404
 8000ea4:	4000a400 	.word	0x4000a400

08000ea8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <MX_I2C4_Init+0x78>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <MX_I2C4_Init+0x7c>)
 8000eb6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ee2:	480e      	ldr	r0, [pc, #56]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000ee4:	f004 fa34 	bl	8005350 <HAL_I2C_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000eee:	f000 fca9 	bl	8001844 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000ef6:	f005 f83f 	bl	8005f78 <HAL_I2CEx_ConfigAnalogFilter>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f00:	f000 fca0 	bl	8001844 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_I2C4_Init+0x74>)
 8000f08:	f005 f881 	bl	800600e <HAL_I2CEx_ConfigDigitalFilter>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f12:	f000 fc97 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	240004a4 	.word	0x240004a4
 8000f20:	58001c00 	.word	0x58001c00
 8000f24:	10707dbc 	.word	0x10707dbc

08000f28 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b09a      	sub	sp, #104	; 0x68
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f32:	2234      	movs	r2, #52	; 0x34
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00b fd72 	bl	800ca20 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2234      	movs	r2, #52	; 0x34
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00b fd6c 	bl	800ca20 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f48:	4b4e      	ldr	r3, [pc, #312]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f4a:	4a4f      	ldr	r2, [pc, #316]	; (8001088 <MX_LTDC_Init+0x160>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f4e:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f54:	4b4b      	ldr	r3, [pc, #300]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f60:	4b48      	ldr	r3, [pc, #288]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f66:	4b47      	ldr	r3, [pc, #284]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f6c:	4b45      	ldr	r3, [pc, #276]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f6e:	2203      	movs	r2, #3
 8000f70:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f72:	4b44      	ldr	r3, [pc, #272]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f74:	220e      	movs	r2, #14
 8000f76:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f78:	4b42      	ldr	r3, [pc, #264]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000f7e:	4b41      	ldr	r3, [pc, #260]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f80:	f240 228e 	movw	r2, #654	; 0x28e
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f86:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f88:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f90:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000f98:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f9e:	4b39      	ldr	r3, [pc, #228]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fb6:	4833      	ldr	r0, [pc, #204]	; (8001084 <MX_LTDC_Init+0x15c>)
 8000fb8:	f005 f876 	bl	80060a8 <HAL_LTDC_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fc2:	f000 fc3f 	bl	8001844 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800100a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	481c      	ldr	r0, [pc, #112]	; (8001084 <MX_LTDC_Init+0x15c>)
 8001014:	f005 f918 	bl	8006248 <HAL_LTDC_ConfigLayer>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800101e:	f000 fc11 	bl	8001844 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800103e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001042:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001044:	2305      	movs	r3, #5
 8001046:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_LTDC_Init+0x15c>)
 800106e:	f005 f8eb 	bl	8006248 <HAL_LTDC_ConfigLayer>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001078:	f000 fbe4 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3768      	adds	r7, #104	; 0x68
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	240004f8 	.word	0x240004f8
 8001088:	50001000 	.word	0x50001000

0800108c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_QUADSPI_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_QUADSPI_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_QUADSPI_Init+0x50>)
 8001098:	22ff      	movs	r2, #255	; 0xff
 800109a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_QUADSPI_Init+0x50>)
 800109e:	2201      	movs	r2, #1
 80010a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_QUADSPI_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_QUADSPI_Init+0x50>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_QUADSPI_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_QUADSPI_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_QUADSPI_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_QUADSPI_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_QUADSPI_Init+0x50>)
 80010c8:	f005 fc28 	bl	800691c <HAL_QSPI_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010d2:	f000 fbb7 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	240005a0 	.word	0x240005a0
 80010e0:	52005000 	.word	0x52005000

080010e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_RTC_Init+0x48>)
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <MX_RTC_Init+0x4c>)
 80010ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_RTC_Init+0x48>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <MX_RTC_Init+0x48>)
 80010f6:	227f      	movs	r2, #127	; 0x7f
 80010f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_RTC_Init+0x48>)
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_RTC_Init+0x48>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_RTC_Init+0x48>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_RTC_Init+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_RTC_Init+0x48>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_RTC_Init+0x48>)
 800111a:	f009 f99d 	bl	800a458 <HAL_RTC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001124:	f000 fb8e 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	240005ec 	.word	0x240005ec
 8001130:	58004000 	.word	0x58004000

08001134 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001138:	4b58      	ldr	r3, [pc, #352]	; (800129c <MX_SAI2_Init+0x168>)
 800113a:	4a59      	ldr	r2, [pc, #356]	; (80012a0 <MX_SAI2_Init+0x16c>)
 800113c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800113e:	4b57      	ldr	r3, [pc, #348]	; (800129c <MX_SAI2_Init+0x168>)
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001144:	4b55      	ldr	r3, [pc, #340]	; (800129c <MX_SAI2_Init+0x168>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800114a:	4b54      	ldr	r3, [pc, #336]	; (800129c <MX_SAI2_Init+0x168>)
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001150:	4b52      	ldr	r3, [pc, #328]	; (800129c <MX_SAI2_Init+0x168>)
 8001152:	2200      	movs	r2, #0
 8001154:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <MX_SAI2_Init+0x168>)
 8001158:	2200      	movs	r2, #0
 800115a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800115c:	4b4f      	ldr	r3, [pc, #316]	; (800129c <MX_SAI2_Init+0x168>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001162:	4b4e      	ldr	r3, [pc, #312]	; (800129c <MX_SAI2_Init+0x168>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001168:	4b4c      	ldr	r3, [pc, #304]	; (800129c <MX_SAI2_Init+0x168>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800116e:	4b4b      	ldr	r3, [pc, #300]	; (800129c <MX_SAI2_Init+0x168>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001174:	4b49      	ldr	r3, [pc, #292]	; (800129c <MX_SAI2_Init+0x168>)
 8001176:	4a4b      	ldr	r2, [pc, #300]	; (80012a4 <MX_SAI2_Init+0x170>)
 8001178:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800117a:	4b48      	ldr	r3, [pc, #288]	; (800129c <MX_SAI2_Init+0x168>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <MX_SAI2_Init+0x168>)
 8001182:	2200      	movs	r2, #0
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001186:	4b45      	ldr	r3, [pc, #276]	; (800129c <MX_SAI2_Init+0x168>)
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800118c:	4b43      	ldr	r3, [pc, #268]	; (800129c <MX_SAI2_Init+0x168>)
 800118e:	2200      	movs	r2, #0
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001192:	4b42      	ldr	r3, [pc, #264]	; (800129c <MX_SAI2_Init+0x168>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 800119a:	4b40      	ldr	r3, [pc, #256]	; (800129c <MX_SAI2_Init+0x168>)
 800119c:	2201      	movs	r2, #1
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011a0:	4b3e      	ldr	r3, [pc, #248]	; (800129c <MX_SAI2_Init+0x168>)
 80011a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <MX_SAI2_Init+0x168>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80011ae:	4b3b      	ldr	r3, [pc, #236]	; (800129c <MX_SAI2_Init+0x168>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011b4:	4b39      	ldr	r3, [pc, #228]	; (800129c <MX_SAI2_Init+0x168>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <MX_SAI2_Init+0x168>)
 80011bc:	2200      	movs	r2, #0
 80011be:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011c0:	4b36      	ldr	r3, [pc, #216]	; (800129c <MX_SAI2_Init+0x168>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <MX_SAI2_Init+0x168>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <MX_SAI2_Init+0x168>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80011d2:	4b32      	ldr	r3, [pc, #200]	; (800129c <MX_SAI2_Init+0x168>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <MX_SAI2_Init+0x168>)
 80011da:	2200      	movs	r2, #0
 80011dc:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80011de:	482f      	ldr	r0, [pc, #188]	; (800129c <MX_SAI2_Init+0x168>)
 80011e0:	f009 fa52 	bl	800a688 <HAL_SAI_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 80011ea:	f000 fb2b 	bl	8001844 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <MX_SAI2_Init+0x174>)
 80011f0:	4a2e      	ldr	r2, [pc, #184]	; (80012ac <MX_SAI2_Init+0x178>)
 80011f2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <MX_SAI2_Init+0x174>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <MX_SAI2_Init+0x174>)
 80011fc:	2203      	movs	r2, #3
 80011fe:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001202:	2240      	movs	r2, #64	; 0x40
 8001204:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001208:	2200      	movs	r2, #0
 800120a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_SAI2_Init+0x174>)
 800120e:	2200      	movs	r2, #0
 8001210:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001214:	2201      	movs	r2, #1
 8001216:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_SAI2_Init+0x174>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_SAI2_Init+0x174>)
 800122c:	2200      	movs	r2, #0
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001232:	2200      	movs	r2, #0
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001238:	2200      	movs	r2, #0
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_SAI2_Init+0x174>)
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001246:	2201      	movs	r2, #1
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_SAI2_Init+0x174>)
 800124c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001254:	2208      	movs	r2, #8
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_SAI2_Init+0x174>)
 800125a:	2201      	movs	r2, #1
 800125c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001260:	2200      	movs	r2, #0
 8001262:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001266:	2200      	movs	r2, #0
 8001268:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_SAI2_Init+0x174>)
 800126c:	2200      	movs	r2, #0
 800126e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001272:	2200      	movs	r2, #0
 8001274:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001278:	2200      	movs	r2, #0
 800127a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_SAI2_Init+0x174>)
 800127e:	2201      	movs	r2, #1
 8001280:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_SAI2_Init+0x174>)
 8001284:	2200      	movs	r2, #0
 8001286:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_SAI2_Init+0x174>)
 800128a:	f009 f9fd 	bl	800a688 <HAL_SAI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001294:	f000 fad6 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	24000610 	.word	0x24000610
 80012a0:	40015c04 	.word	0x40015c04
 80012a4:	0002ee00 	.word	0x0002ee00
 80012a8:	240006a8 	.word	0x240006a8
 80012ac:	40015c24 	.word	0x40015c24

080012b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012b4:	4b26      	ldr	r3, [pc, #152]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012b6:	4a27      	ldr	r2, [pc, #156]	; (8001354 <MX_SPI2_Init+0xa4>)
 80012b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012ca:	2203      	movs	r2, #3
 80012cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_SPI2_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_SPI2_Init+0xa0>)
 8001300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_SPI2_Init+0xa0>)
 8001308:	2200      	movs	r2, #0
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_SPI2_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_SPI2_Init+0xa0>)
 8001314:	2200      	movs	r2, #0
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_SPI2_Init+0xa0>)
 800131a:	2200      	movs	r2, #0
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_SPI2_Init+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_SPI2_Init+0xa0>)
 8001326:	2200      	movs	r2, #0
 8001328:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_SPI2_Init+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_SPI2_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_SPI2_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_SPI2_Init+0xa0>)
 800133e:	f009 fcc3 	bl	800acc8 <HAL_SPI_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001348:	f000 fa7c 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	24000740 	.word	0x24000740
 8001354:	40003800 	.word	0x40003800

08001358 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 800135e:	4a23      	ldr	r2, [pc, #140]	; (80013ec <MX_USART3_UART_Init+0x94>)
 8001360:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a0:	4811      	ldr	r0, [pc, #68]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 80013a2:	f009 fdd0 	bl	800af46 <HAL_UART_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013ac:	f000 fa4a 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 80013b4:	f00a fe61 	bl	800c07a <HAL_UARTEx_SetTxFifoThreshold>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013be:	f000 fa41 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 80013c6:	f00a fe96 	bl	800c0f6 <HAL_UARTEx_SetRxFifoThreshold>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013d0:	f000 fa38 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_USART3_UART_Init+0x90>)
 80013d6:	f00a fe17 	bl	800c008 <HAL_UARTEx_DisableFifoMode>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f000 fa30 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	240007c8 	.word	0x240007c8
 80013ec:	40004800 	.word	0x40004800

080013f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013f6:	4a16      	ldr	r2, [pc, #88]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80013f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013fc:	2209      	movs	r2, #9
 80013fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001402:	2202      	movs	r2, #2
 8001404:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800140e:	2202      	movs	r2, #2
 8001410:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001426:	2201      	movs	r2, #1
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800142c:	2201      	movs	r2, #1
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001432:	2200      	movs	r2, #0
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001438:	f005 f8de 	bl	80065f8 <HAL_PCD_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001442:	f000 f9ff 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2400085c 	.word	0x2400085c
 8001450:	40080000 	.word	0x40080000

08001454 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MX_FMC_Init+0x94>)
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <MX_FMC_Init+0x98>)
 8001470:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_FMC_Init+0x94>)
 8001474:	2201      	movs	r2, #1
 8001476:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_FMC_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_FMC_Init+0x94>)
 8001480:	2204      	movs	r2, #4
 8001482:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_FMC_Init+0x94>)
 8001486:	2210      	movs	r2, #16
 8001488:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_FMC_Init+0x94>)
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_FMC_Init+0x94>)
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_FMC_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_FMC_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_FMC_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_FMC_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80014ae:	2310      	movs	r3, #16
 80014b0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80014b2:	2310      	movs	r3, #16
 80014b4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80014b6:	2310      	movs	r3, #16
 80014b8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80014be:	2310      	movs	r3, #16
 80014c0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80014c2:	2310      	movs	r3, #16
 80014c4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80014c6:	2310      	movs	r3, #16
 80014c8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_FMC_Init+0x94>)
 80014d0:	f009 fbbe 	bl	800ac50 <HAL_SDRAM_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80014da:	f000 f9b3 	bl	8001844 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	24000d68 	.word	0x24000d68
 80014ec:	52004140 	.word	0x52004140

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b090      	sub	sp, #64	; 0x40
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001506:	4bbf      	ldr	r3, [pc, #764]	; (8001804 <MX_GPIO_Init+0x314>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	4abd      	ldr	r2, [pc, #756]	; (8001804 <MX_GPIO_Init+0x314>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001516:	4bbb      	ldr	r3, [pc, #748]	; (8001804 <MX_GPIO_Init+0x314>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4bb7      	ldr	r3, [pc, #732]	; (8001804 <MX_GPIO_Init+0x314>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	4ab6      	ldr	r2, [pc, #728]	; (8001804 <MX_GPIO_Init+0x314>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001534:	4bb3      	ldr	r3, [pc, #716]	; (8001804 <MX_GPIO_Init+0x314>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001542:	4bb0      	ldr	r3, [pc, #704]	; (8001804 <MX_GPIO_Init+0x314>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	4aae      	ldr	r2, [pc, #696]	; (8001804 <MX_GPIO_Init+0x314>)
 800154a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001552:	4bac      	ldr	r3, [pc, #688]	; (8001804 <MX_GPIO_Init+0x314>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	623b      	str	r3, [r7, #32]
 800155e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001560:	4ba8      	ldr	r3, [pc, #672]	; (8001804 <MX_GPIO_Init+0x314>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	4aa7      	ldr	r2, [pc, #668]	; (8001804 <MX_GPIO_Init+0x314>)
 8001568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001570:	4ba4      	ldr	r3, [pc, #656]	; (8001804 <MX_GPIO_Init+0x314>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	4ba1      	ldr	r3, [pc, #644]	; (8001804 <MX_GPIO_Init+0x314>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001584:	4a9f      	ldr	r2, [pc, #636]	; (8001804 <MX_GPIO_Init+0x314>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158e:	4b9d      	ldr	r3, [pc, #628]	; (8001804 <MX_GPIO_Init+0x314>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b99      	ldr	r3, [pc, #612]	; (8001804 <MX_GPIO_Init+0x314>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	4a98      	ldr	r2, [pc, #608]	; (8001804 <MX_GPIO_Init+0x314>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ac:	4b95      	ldr	r3, [pc, #596]	; (8001804 <MX_GPIO_Init+0x314>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ba:	4b92      	ldr	r3, [pc, #584]	; (8001804 <MX_GPIO_Init+0x314>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c0:	4a90      	ldr	r2, [pc, #576]	; (8001804 <MX_GPIO_Init+0x314>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ca:	4b8e      	ldr	r3, [pc, #568]	; (8001804 <MX_GPIO_Init+0x314>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015d8:	4b8a      	ldr	r3, [pc, #552]	; (8001804 <MX_GPIO_Init+0x314>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015de:	4a89      	ldr	r2, [pc, #548]	; (8001804 <MX_GPIO_Init+0x314>)
 80015e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e8:	4b86      	ldr	r3, [pc, #536]	; (8001804 <MX_GPIO_Init+0x314>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	4b83      	ldr	r3, [pc, #524]	; (8001804 <MX_GPIO_Init+0x314>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	4a81      	ldr	r2, [pc, #516]	; (8001804 <MX_GPIO_Init+0x314>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001606:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <MX_GPIO_Init+0x314>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001614:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <MX_GPIO_Init+0x314>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161a:	4a7a      	ldr	r2, [pc, #488]	; (8001804 <MX_GPIO_Init+0x314>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001624:	4b77      	ldr	r3, [pc, #476]	; (8001804 <MX_GPIO_Init+0x314>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	4b74      	ldr	r3, [pc, #464]	; (8001804 <MX_GPIO_Init+0x314>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001638:	4a72      	ldr	r2, [pc, #456]	; (8001804 <MX_GPIO_Init+0x314>)
 800163a:	f043 0320 	orr.w	r3, r3, #32
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001642:	4b70      	ldr	r3, [pc, #448]	; (8001804 <MX_GPIO_Init+0x314>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001656:	486c      	ldr	r0, [pc, #432]	; (8001808 <MX_GPIO_Init+0x318>)
 8001658:	f003 fe46 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f241 0104 	movw	r1, #4100	; 0x1004
 8001662:	486a      	ldr	r0, [pc, #424]	; (800180c <MX_GPIO_Init+0x31c>)
 8001664:	f003 fe40 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2104      	movs	r1, #4
 800166c:	4868      	ldr	r0, [pc, #416]	; (8001810 <MX_GPIO_Init+0x320>)
 800166e:	f003 fe3b 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001684:	2303      	movs	r3, #3
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168c:	4619      	mov	r1, r3
 800168e:	4861      	ldr	r0, [pc, #388]	; (8001814 <MX_GPIO_Init+0x324>)
 8001690:	f003 fc62 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a4:	4619      	mov	r1, r3
 80016a6:	485c      	ldr	r0, [pc, #368]	; (8001818 <MX_GPIO_Init+0x328>)
 80016a8:	f003 fc56 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80016ac:	2330      	movs	r3, #48	; 0x30
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80016bc:	230a      	movs	r3, #10
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c4:	4619      	mov	r1, r3
 80016c6:	4855      	ldr	r0, [pc, #340]	; (800181c <MX_GPIO_Init+0x32c>)
 80016c8:	f003 fc46 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80016cc:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016de:	4619      	mov	r1, r3
 80016e0:	484f      	ldr	r0, [pc, #316]	; (8001820 <MX_GPIO_Init+0x330>)
 80016e2:	f003 fc39 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f8:	4619      	mov	r1, r3
 80016fa:	484a      	ldr	r0, [pc, #296]	; (8001824 <MX_GPIO_Init+0x334>)
 80016fc:	f003 fc2c 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001712:	2301      	movs	r3, #1
 8001714:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171a:	4619      	mov	r1, r3
 800171c:	4840      	ldr	r0, [pc, #256]	; (8001820 <MX_GPIO_Init+0x330>)
 800171e:	f003 fc1b 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001732:	2306      	movs	r3, #6
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	483a      	ldr	r0, [pc, #232]	; (8001828 <MX_GPIO_Init+0x338>)
 800173e:	f003 fc0b 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001758:	4619      	mov	r1, r3
 800175a:	482b      	ldr	r0, [pc, #172]	; (8001808 <MX_GPIO_Init+0x318>)
 800175c:	f003 fbfc 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001760:	2304      	movs	r3, #4
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001764:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001772:	4619      	mov	r1, r3
 8001774:	482c      	ldr	r0, [pc, #176]	; (8001828 <MX_GPIO_Init+0x338>)
 8001776:	f003 fbef 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800177a:	2301      	movs	r3, #1
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178a:	4619      	mov	r1, r3
 800178c:	4827      	ldr	r0, [pc, #156]	; (800182c <MX_GPIO_Init+0x33c>)
 800178e:	f003 fbe3 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001798:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	481a      	ldr	r0, [pc, #104]	; (8001814 <MX_GPIO_Init+0x324>)
 80017aa:	f003 fbd5 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ae:	2340      	movs	r3, #64	; 0x40
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80017be:	2309      	movs	r3, #9
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	4815      	ldr	r0, [pc, #84]	; (8001820 <MX_GPIO_Init+0x330>)
 80017ca:	f003 fbc5 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80017ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e4:	4619      	mov	r1, r3
 80017e6:	4809      	ldr	r0, [pc, #36]	; (800180c <MX_GPIO_Init+0x31c>)
 80017e8:	f003 fbb6 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80017ec:	2304      	movs	r3, #4
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001800:	4619      	mov	r1, r3
 8001802:	e015      	b.n	8001830 <MX_GPIO_Init+0x340>
 8001804:	58024400 	.word	0x58024400
 8001808:	58022000 	.word	0x58022000
 800180c:	58020400 	.word	0x58020400
 8001810:	58022400 	.word	0x58022400
 8001814:	58021c00 	.word	0x58021c00
 8001818:	58020c00 	.word	0x58020c00
 800181c:	58021000 	.word	0x58021000
 8001820:	58020000 	.word	0x58020000
 8001824:	58020800 	.word	0x58020800
 8001828:	58021800 	.word	0x58021800
 800182c:	58022800 	.word	0x58022800
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <MX_GPIO_Init+0x350>)
 8001832:	f003 fb91 	bl	8004f58 <HAL_GPIO_Init>

}
 8001836:	bf00      	nop
 8001838:	3740      	adds	r7, #64	; 0x40
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	58022400 	.word	0x58022400

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_MspInit+0x30>)
 8001858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_MspInit+0x30>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_MspInit+0x30>)
 8001868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	58024400 	.word	0x58024400

08001884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b090      	sub	sp, #64	; 0x40
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a72      	ldr	r2, [pc, #456]	; (8001a6c <HAL_ADC_MspInit+0x1e8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d14e      	bne.n	8001944 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <HAL_ADC_MspInit+0x1ec>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	4a70      	ldr	r2, [pc, #448]	; (8001a70 <HAL_ADC_MspInit+0x1ec>)
 80018ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018b0:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_ADC_MspInit+0x1ec>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10e      	bne.n	80018d6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018b8:	4b6e      	ldr	r3, [pc, #440]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80018ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018be:	4a6d      	ldr	r2, [pc, #436]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80018c0:	f043 0320 	orr.w	r3, r3, #32
 80018c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80018ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80018d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018dc:	4a65      	ldr	r2, [pc, #404]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e6:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80018e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b5f      	ldr	r3, [pc, #380]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fa:	4a5e      	ldr	r2, [pc, #376]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001904:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	623b      	str	r3, [r7, #32]
 8001910:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001912:	2301      	movs	r3, #1
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001916:	2303      	movs	r3, #3
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001922:	4619      	mov	r1, r3
 8001924:	4854      	ldr	r0, [pc, #336]	; (8001a78 <HAL_ADC_MspInit+0x1f4>)
 8001926:	f003 fb17 	bl	8004f58 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800192a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800192e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001932:	f001 fa01 	bl	8002d38 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001936:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800193a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800193e:	f001 f9fb 	bl	8002d38 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001942:	e08f      	b.n	8001a64 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_ADC_MspInit+0x1f8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d133      	bne.n	80019b6 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800194e:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <HAL_ADC_MspInit+0x1ec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a46      	ldr	r2, [pc, #280]	; (8001a70 <HAL_ADC_MspInit+0x1ec>)
 8001956:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001958:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <HAL_ADC_MspInit+0x1ec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d10e      	bne.n	800197e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001960:	4b44      	ldr	r3, [pc, #272]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 8001962:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001966:	4a43      	ldr	r2, [pc, #268]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 8001968:	f043 0320 	orr.w	r3, r3, #32
 800196c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001970:	4b40      	ldr	r3, [pc, #256]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 8001972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001984:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198e:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800199c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019a0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80019a4:	f001 f9c8 	bl	8002d38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80019a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ac:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80019b0:	f001 f9c2 	bl	8002d38 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80019b4:	e056      	b.n	8001a64 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a31      	ldr	r2, [pc, #196]	; (8001a80 <HAL_ADC_MspInit+0x1fc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d151      	bne.n	8001a64 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019c0:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	4a2b      	ldr	r2, [pc, #172]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80019c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e4:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_ADC_MspInit+0x1f0>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a20:	2303      	movs	r3, #3
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4815      	ldr	r0, [pc, #84]	; (8001a84 <HAL_ADC_MspInit+0x200>)
 8001a30:	f003 fa92 	bl	8004f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a34:	2301      	movs	r3, #1
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a44:	4619      	mov	r1, r3
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <HAL_ADC_MspInit+0x1f4>)
 8001a48:	f003 fa86 	bl	8004f58 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001a4c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001a50:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001a54:	f001 f970 	bl	8002d38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001a5c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001a60:	f001 f96a 	bl	8002d38 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001a64:	bf00      	nop
 8001a66:	3740      	adds	r7, #64	; 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	24000eb8 	.word	0x24000eb8
 8001a74:	58024400 	.word	0x58024400
 8001a78:	58020800 	.word	0x58020800
 8001a7c:	40022100 	.word	0x40022100
 8001a80:	58026000 	.word	0x58026000
 8001a84:	58021400 	.word	0x58021400

08001a88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b092      	sub	sp, #72	; 0x48
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a87      	ldr	r2, [pc, #540]	; (8001cc4 <HAL_ETH_MspInit+0x23c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	f040 8108 	bne.w	8001cbc <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001aac:	4b86      	ldr	r3, [pc, #536]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001aae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ab2:	4a85      	ldr	r2, [pc, #532]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001abc:	4b82      	ldr	r3, [pc, #520]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001abe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001aca:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad0:	4a7d      	ldr	r2, [pc, #500]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ada:	4b7b      	ldr	r3, [pc, #492]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001ae8:	4b77      	ldr	r3, [pc, #476]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001aea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aee:	4a76      	ldr	r2, [pc, #472]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001af8:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b06:	4b70      	ldr	r3, [pc, #448]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0c:	4a6e      	ldr	r2, [pc, #440]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b16:	4b6c      	ldr	r3, [pc, #432]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b24:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	4a67      	ldr	r2, [pc, #412]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b34:	4b64      	ldr	r3, [pc, #400]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	623b      	str	r3, [r7, #32]
 8001b40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b42:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b48:	4a5f      	ldr	r2, [pc, #380]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b52:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b70:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b7e:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	4a50      	ldr	r2, [pc, #320]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8e:	4b4e      	ldr	r3, [pc, #312]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	4a41      	ldr	r2, [pc, #260]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_ETH_MspInit+0x240>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001bd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bea:	230b      	movs	r3, #11
 8001bec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4835      	ldr	r0, [pc, #212]	; (8001ccc <HAL_ETH_MspInit+0x244>)
 8001bf6:	f003 f9af 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c0a:	230b      	movs	r3, #11
 8001c0c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c12:	4619      	mov	r1, r3
 8001c14:	482e      	ldr	r0, [pc, #184]	; (8001cd0 <HAL_ETH_MspInit+0x248>)
 8001c16:	f003 f99f 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c2c:	230b      	movs	r3, #11
 8001c2e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c34:	4619      	mov	r1, r3
 8001c36:	4827      	ldr	r0, [pc, #156]	; (8001cd4 <HAL_ETH_MspInit+0x24c>)
 8001c38:	f003 f98e 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001c3c:	233e      	movs	r3, #62	; 0x3e
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c4c:	230b      	movs	r3, #11
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c54:	4619      	mov	r1, r3
 8001c56:	4820      	ldr	r0, [pc, #128]	; (8001cd8 <HAL_ETH_MspInit+0x250>)
 8001c58:	f003 f97e 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001c5c:	230c      	movs	r3, #12
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c6c:	230b      	movs	r3, #11
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c74:	4619      	mov	r1, r3
 8001c76:	4819      	ldr	r0, [pc, #100]	; (8001cdc <HAL_ETH_MspInit+0x254>)
 8001c78:	f003 f96e 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001c7c:	2386      	movs	r3, #134	; 0x86
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c8c:	230b      	movs	r3, #11
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c94:	4619      	mov	r1, r3
 8001c96:	4812      	ldr	r0, [pc, #72]	; (8001ce0 <HAL_ETH_MspInit+0x258>)
 8001c98:	f003 f95e 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cac:	230b      	movs	r3, #11
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <HAL_ETH_MspInit+0x25c>)
 8001cb8:	f003 f94e 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3748      	adds	r7, #72	; 0x48
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40028000 	.word	0x40028000
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	58021800 	.word	0x58021800
 8001cd0:	58021000 	.word	0x58021000
 8001cd4:	58022000 	.word	0x58022000
 8001cd8:	58020800 	.word	0x58020800
 8001cdc:	58021c00 	.word	0x58021c00
 8001ce0:	58020000 	.word	0x58020000
 8001ce4:	58020400 	.word	0x58020400

08001ce8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0bc      	sub	sp, #240	; 0xf0
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d00:	f107 0318 	add.w	r3, r7, #24
 8001d04:	22c0      	movs	r2, #192	; 0xc0
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f00a fe89 	bl	800ca20 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_FDCAN_MspInit+0x188>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d151      	bne.n	8001dbc <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	4618      	mov	r0, r3
 8001d32:	f005 fe93 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001d3c:	f7ff fd82 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d40:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <HAL_FDCAN_MspInit+0x18c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_FDCAN_MspInit+0x18c>)
 8001d48:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <HAL_FDCAN_MspInit+0x18c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10e      	bne.n	8001d70 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d52:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001d54:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d58:	4a47      	ldr	r2, [pc, #284]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001d62:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001d64:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d70:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d76:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d80:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001d8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001da8:	2309      	movs	r3, #9
 8001daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001db2:	4619      	mov	r1, r3
 8001db4:	4831      	ldr	r0, [pc, #196]	; (8001e7c <HAL_FDCAN_MspInit+0x194>)
 8001db6:	f003 f8cf 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001dba:	e055      	b.n	8001e68 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2f      	ldr	r2, [pc, #188]	; (8001e80 <HAL_FDCAN_MspInit+0x198>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d150      	bne.n	8001e68 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001dc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001dd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dda:	f107 0318 	add.w	r3, r7, #24
 8001dde:	4618      	mov	r0, r3
 8001de0:	f005 fe3c 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001dea:	f7ff fd2b 	bl	8001844 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_FDCAN_MspInit+0x18c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <HAL_FDCAN_MspInit+0x18c>)
 8001df6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_FDCAN_MspInit+0x18c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d10e      	bne.n	8001e1e <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001e02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001e12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_FDCAN_MspInit+0x190>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001e3c:	f242 0320 	movw	r3, #8224	; 0x2020
 8001e40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e56:	2309      	movs	r3, #9
 8001e58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e60:	4619      	mov	r1, r3
 8001e62:	4808      	ldr	r0, [pc, #32]	; (8001e84 <HAL_FDCAN_MspInit+0x19c>)
 8001e64:	f003 f878 	bl	8004f58 <HAL_GPIO_Init>
}
 8001e68:	bf00      	nop
 8001e6a:	37f0      	adds	r7, #240	; 0xf0
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	4000a000 	.word	0x4000a000
 8001e74:	24000ebc 	.word	0x24000ebc
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	58021c00 	.word	0x58021c00
 8001e80:	4000a400 	.word	0x4000a400
 8001e84:	58020400 	.word	0x58020400

08001e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0ba      	sub	sp, #232	; 0xe8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	22c0      	movs	r2, #192	; 0xc0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f00a fdb9 	bl	800ca20 <memset>
  if(hi2c->Instance==I2C4)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <HAL_I2C_MspInit+0xc8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d146      	bne.n	8001f46 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001eb8:	f04f 0210 	mov.w	r2, #16
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f005 fdc4 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001eda:	f7ff fcb3 	bl	8001844 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_I2C_MspInit+0xcc>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_I2C_MspInit+0xcc>)
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_I2C_MspInit+0xcc>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001efc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f04:	2312      	movs	r3, #18
 8001f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001f16:	2304      	movs	r3, #4
 8001f18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f20:	4619      	mov	r1, r3
 8001f22:	480d      	ldr	r0, [pc, #52]	; (8001f58 <HAL_I2C_MspInit+0xd0>)
 8001f24:	f003 f818 	bl	8004f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_I2C_MspInit+0xcc>)
 8001f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <HAL_I2C_MspInit+0xcc>)
 8001f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_I2C_MspInit+0xcc>)
 8001f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001f46:	bf00      	nop
 8001f48:	37e8      	adds	r7, #232	; 0xe8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	58001c00 	.word	0x58001c00
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58020c00 	.word	0x58020c00

08001f5c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0be      	sub	sp, #248	; 0xf8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	22c0      	movs	r2, #192	; 0xc0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00a fd4f 	bl	800ca20 <memset>
  if(hltdc->Instance==LTDC)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a66      	ldr	r2, [pc, #408]	; (8002120 <HAL_LTDC_MspInit+0x1c4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	f040 80c4 	bne.w	8002116 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001fae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb8:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fbe:	f107 0320 	add.w	r3, r7, #32
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f005 fd4a 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001fce:	f7ff fc39 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fd2:	4b54      	ldr	r3, [pc, #336]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8001fd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001fe2:	4b50      	ldr	r3, [pc, #320]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8001fe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ff0:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff6:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8001ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002000:	4b48      	ldr	r3, [pc, #288]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800200e:	4b45      	ldr	r3, [pc, #276]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8002010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002014:	4a43      	ldr	r2, [pc, #268]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8002020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002032:	4a3c      	ldr	r2, [pc, #240]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8002034:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203c:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 800203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002050:	4a34      	ldr	r2, [pc, #208]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 8002052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205a:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_LTDC_MspInit+0x1c8>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8002068:	23fc      	movs	r3, #252	; 0xfc
 800206a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002080:	230e      	movs	r3, #14
 8002082:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002086:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800208a:	4619      	mov	r1, r3
 800208c:	4826      	ldr	r0, [pc, #152]	; (8002128 <HAL_LTDC_MspInit+0x1cc>)
 800208e:	f002 ff63 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8002092:	f24d 2303 	movw	r3, #53763	; 0xd203
 8002096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020ac:	230e      	movs	r3, #14
 80020ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020b6:	4619      	mov	r1, r3
 80020b8:	481c      	ldr	r0, [pc, #112]	; (800212c <HAL_LTDC_MspInit+0x1d0>)
 80020ba:	f002 ff4d 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80020be:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80020c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020d8:	230e      	movs	r3, #14
 80020da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020e2:	4619      	mov	r1, r3
 80020e4:	4812      	ldr	r0, [pc, #72]	; (8002130 <HAL_LTDC_MspInit+0x1d4>)
 80020e6:	f002 ff37 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002104:	230e      	movs	r3, #14
 8002106:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800210a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800210e:	4619      	mov	r1, r3
 8002110:	4808      	ldr	r0, [pc, #32]	; (8002134 <HAL_LTDC_MspInit+0x1d8>)
 8002112:	f002 ff21 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	37f8      	adds	r7, #248	; 0xf8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	50001000 	.word	0x50001000
 8002124:	58024400 	.word	0x58024400
 8002128:	58022800 	.word	0x58022800
 800212c:	58022000 	.word	0x58022000
 8002130:	58022400 	.word	0x58022400
 8002134:	58021c00 	.word	0x58021c00

08002138 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0bc      	sub	sp, #240	; 0xf0
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002150:	f107 0318 	add.w	r3, r7, #24
 8002154:	22c0      	movs	r2, #192	; 0xc0
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f00a fc61 	bl	800ca20 <memset>
  if(hqspi->Instance==QUADSPI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a56      	ldr	r2, [pc, #344]	; (80022bc <HAL_QSPI_MspInit+0x184>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f040 80a5 	bne.w	80022b4 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800216a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8002176:	2300      	movs	r3, #0
 8002178:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217a:	f107 0318 	add.w	r3, r7, #24
 800217e:	4618      	mov	r0, r3
 8002180:	f005 fc6c 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800218a:	f7ff fb5b 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800218e:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 8002190:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002194:	4a4a      	ldr	r2, [pc, #296]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 8002196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800219e:	4b48      	ldr	r3, [pc, #288]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b2:	4a43      	ldr	r2, [pc, #268]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021bc:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d0:	4a3b      	ldr	r2, [pc, #236]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021d2:	f043 0320 	orr.w	r3, r3, #32
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e8:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_QSPI_MspInit+0x188>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002206:	2340      	movs	r3, #64	; 0x40
 8002208:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800221e:	230a      	movs	r3, #10
 8002220:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002228:	4619      	mov	r1, r3
 800222a:	4826      	ldr	r0, [pc, #152]	; (80022c4 <HAL_QSPI_MspInit+0x18c>)
 800222c:	f002 fe94 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002230:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002234:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800224a:	2309      	movs	r3, #9
 800224c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002250:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002254:	4619      	mov	r1, r3
 8002256:	481c      	ldr	r0, [pc, #112]	; (80022c8 <HAL_QSPI_MspInit+0x190>)
 8002258:	f002 fe7e 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800225c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002260:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002276:	230a      	movs	r3, #10
 8002278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800227c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002280:	4619      	mov	r1, r3
 8002282:	4811      	ldr	r0, [pc, #68]	; (80022c8 <HAL_QSPI_MspInit+0x190>)
 8002284:	f002 fe68 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800228c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022a2:	2309      	movs	r3, #9
 80022a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022ac:	4619      	mov	r1, r3
 80022ae:	4807      	ldr	r0, [pc, #28]	; (80022cc <HAL_QSPI_MspInit+0x194>)
 80022b0:	f002 fe52 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80022b4:	bf00      	nop
 80022b6:	37f0      	adds	r7, #240	; 0xf0
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	52005000 	.word	0x52005000
 80022c0:	58024400 	.word	0x58024400
 80022c4:	58020400 	.word	0x58020400
 80022c8:	58021400 	.word	0x58021400
 80022cc:	58020c00 	.word	0x58020c00

080022d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0b2      	sub	sp, #200	; 0xc8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	22c0      	movs	r2, #192	; 0xc0
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f00a fb9d 	bl	800ca20 <memset>
  if(hrtc->Instance==RTC)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_RTC_MspInit+0x5c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d119      	bne.n	8002324 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	4618      	mov	r0, r3
 800230a:	f005 fba7 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002314:	f7ff fa96 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RTC_MspInit+0x60>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_RTC_MspInit+0x60>)
 800231e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002324:	bf00      	nop
 8002326:	37c8      	adds	r7, #200	; 0xc8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	58004000 	.word	0x58004000
 8002330:	58024400 	.word	0x58024400

08002334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0bc      	sub	sp, #240	; 0xf0
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800234c:	f107 0318 	add.w	r3, r7, #24
 8002350:	22c0      	movs	r2, #192	; 0xc0
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f00a fb63 	bl	800ca20 <memset>
  if(hspi->Instance==SPI2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a55      	ldr	r2, [pc, #340]	; (80024b4 <HAL_SPI_MspInit+0x180>)
 8002360:	4293      	cmp	r3, r2
 8002362:	f040 80a3 	bne.w	80024ac <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002366:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002372:	2300      	movs	r3, #0
 8002374:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002376:	f107 0318 	add.w	r3, r7, #24
 800237a:	4618      	mov	r0, r3
 800237c:	f005 fb6e 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002386:	f7ff fa5d 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800238a:	4b4b      	ldr	r3, [pc, #300]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 800238c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002390:	4a49      	ldr	r2, [pc, #292]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 8002392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002396:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 800239c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a8:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ae:	4a42      	ldr	r2, [pc, #264]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b8:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c6:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023cc:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 80023ce:	f043 0308 	orr.w	r3, r3, #8
 80023d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 80023d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023e4:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_SPI_MspInit+0x184>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002402:	2310      	movs	r3, #16
 8002404:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800241a:	2307      	movs	r3, #7
 800241c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002420:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002424:	4619      	mov	r1, r3
 8002426:	4825      	ldr	r0, [pc, #148]	; (80024bc <HAL_SPI_MspInit+0x188>)
 8002428:	f002 fd96 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800242c:	2308      	movs	r3, #8
 800242e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002444:	2305      	movs	r3, #5
 8002446:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800244e:	4619      	mov	r1, r3
 8002450:	481b      	ldr	r0, [pc, #108]	; (80024c0 <HAL_SPI_MspInit+0x18c>)
 8002452:	f002 fd81 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002456:	2304      	movs	r3, #4
 8002458:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800246e:	2305      	movs	r3, #5
 8002470:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002474:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002478:	4619      	mov	r1, r3
 800247a:	4812      	ldr	r0, [pc, #72]	; (80024c4 <HAL_SPI_MspInit+0x190>)
 800247c:	f002 fd6c 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800249a:	2305      	movs	r3, #5
 800249c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024a4:	4619      	mov	r1, r3
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <HAL_SPI_MspInit+0x188>)
 80024a8:	f002 fd56 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024ac:	bf00      	nop
 80024ae:	37f0      	adds	r7, #240	; 0xf0
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40003800 	.word	0x40003800
 80024b8:	58024400 	.word	0x58024400
 80024bc:	58020400 	.word	0x58020400
 80024c0:	58020c00 	.word	0x58020c00
 80024c4:	58022000 	.word	0x58022000

080024c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0ba      	sub	sp, #232	; 0xe8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	22c0      	movs	r2, #192	; 0xc0
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00a fa99 	bl	800ca20 <memset>
  if(huart->Instance==USART3)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a27      	ldr	r2, [pc, #156]	; (8002590 <HAL_UART_MspInit+0xc8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d146      	bne.n	8002586 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024f8:	f04f 0202 	mov.w	r2, #2
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	4618      	mov	r0, r3
 8002510:	f005 faa4 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800251a:	f7ff f993 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_UART_MspInit+0xcc>)
 8002520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002524:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <HAL_UART_MspInit+0xcc>)
 8002526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_UART_MspInit+0xcc>)
 8002530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_UART_MspInit+0xcc>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002542:	4a14      	ldr	r2, [pc, #80]	; (8002594 <HAL_UART_MspInit+0xcc>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_UART_MspInit+0xcc>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800255a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800255e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002574:	2307      	movs	r3, #7
 8002576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <HAL_UART_MspInit+0xd0>)
 8002582:	f002 fce9 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002586:	bf00      	nop
 8002588:	37e8      	adds	r7, #232	; 0xe8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40004800 	.word	0x40004800
 8002594:	58024400 	.word	0x58024400
 8002598:	58020400 	.word	0x58020400

0800259c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0ba      	sub	sp, #232	; 0xe8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	22c0      	movs	r2, #192	; 0xc0
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f00a fa2f 	bl	800ca20 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a30      	ldr	r2, [pc, #192]	; (8002688 <HAL_PCD_MspInit+0xec>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d159      	bne.n	8002680 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80025cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80025d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	4618      	mov	r0, r3
 80025e6:	f005 fa39 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80025f0:	f7ff f928 	bl	8001844 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80025f4:	f004 f982 	bl	80068fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_PCD_MspInit+0xf0>)
 80025fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fe:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_PCD_MspInit+0xf0>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_PCD_MspInit+0xf0>)
 800260a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800262a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800262e:	4619      	mov	r1, r3
 8002630:	4817      	ldr	r0, [pc, #92]	; (8002690 <HAL_PCD_MspInit+0xf4>)
 8002632:	f002 fc91 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002636:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800263a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002650:	230a      	movs	r3, #10
 8002652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800265a:	4619      	mov	r1, r3
 800265c:	480c      	ldr	r0, [pc, #48]	; (8002690 <HAL_PCD_MspInit+0xf4>)
 800265e:	f002 fc7b 	bl	8004f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_PCD_MspInit+0xf0>)
 8002664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002668:	4a08      	ldr	r2, [pc, #32]	; (800268c <HAL_PCD_MspInit+0xf0>)
 800266a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800266e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_PCD_MspInit+0xf0>)
 8002674:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002680:	bf00      	nop
 8002682:	37e8      	adds	r7, #232	; 0xe8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40080000 	.word	0x40080000
 800268c:	58024400 	.word	0x58024400
 8002690:	58020000 	.word	0x58020000

08002694 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002694:	b580      	push	{r7, lr}
 8002696:	b0b8      	sub	sp, #224	; 0xe0
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800269a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026aa:	4b51      	ldr	r3, [pc, #324]	; (80027f0 <HAL_FMC_MspInit+0x15c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 8099 	bne.w	80027e6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80026b4:	4b4e      	ldr	r3, [pc, #312]	; (80027f0 <HAL_FMC_MspInit+0x15c>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	22c0      	movs	r2, #192	; 0xc0
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f00a f9ac 	bl	800ca20 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80026c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	4618      	mov	r0, r3
 80026de:	f005 f9bd 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80026e8:	f7ff f8ac 	bl	8001844 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026ec:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_FMC_MspInit+0x160>)
 80026ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80026f2:	4a40      	ldr	r2, [pc, #256]	; (80027f4 <HAL_FMC_MspInit+0x160>)
 80026f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80026fc:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_FMC_MspInit+0x160>)
 80026fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800270a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800270e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002724:	230c      	movs	r3, #12
 8002726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800272a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800272e:	4619      	mov	r1, r3
 8002730:	4831      	ldr	r0, [pc, #196]	; (80027f8 <HAL_FMC_MspInit+0x164>)
 8002732:	f002 fc11 	bl	8004f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002736:	f248 1333 	movw	r3, #33075	; 0x8133
 800273a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002750:	230c      	movs	r3, #12
 8002752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002756:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800275a:	4619      	mov	r1, r3
 800275c:	4827      	ldr	r0, [pc, #156]	; (80027fc <HAL_FMC_MspInit+0x168>)
 800275e:	f002 fbfb 	bl	8004f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002762:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800277c:	230c      	movs	r3, #12
 800277e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002782:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002786:	4619      	mov	r1, r3
 8002788:	481d      	ldr	r0, [pc, #116]	; (8002800 <HAL_FMC_MspInit+0x16c>)
 800278a:	f002 fbe5 	bl	8004f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800278e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002792:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a8:	230c      	movs	r3, #12
 80027aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027b2:	4619      	mov	r1, r3
 80027b4:	4813      	ldr	r0, [pc, #76]	; (8002804 <HAL_FMC_MspInit+0x170>)
 80027b6:	f002 fbcf 	bl	8004f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027ba:	23e0      	movs	r3, #224	; 0xe0
 80027bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027d2:	230c      	movs	r3, #12
 80027d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027dc:	4619      	mov	r1, r3
 80027de:	480a      	ldr	r0, [pc, #40]	; (8002808 <HAL_FMC_MspInit+0x174>)
 80027e0:	f002 fbba 	bl	8004f58 <HAL_GPIO_Init>
 80027e4:	e000      	b.n	80027e8 <HAL_FMC_MspInit+0x154>
    return;
 80027e6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80027e8:	37e0      	adds	r7, #224	; 0xe0
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	24000ec0 	.word	0x24000ec0
 80027f4:	58024400 	.word	0x58024400
 80027f8:	58021000 	.word	0x58021000
 80027fc:	58021800 	.word	0x58021800
 8002800:	58020c00 	.word	0x58020c00
 8002804:	58021400 	.word	0x58021400
 8002808:	58021c00 	.word	0x58021c00

0800280c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002814:	f7ff ff3e 	bl	8002694 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b0ba      	sub	sp, #232	; 0xe8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	22c0      	movs	r2, #192	; 0xc0
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f00a f8f5 	bl	800ca20 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a45      	ldr	r2, [pc, #276]	; (8002950 <HAL_SAI_MspInit+0x130>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d13e      	bne.n	80028be <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800284c:	2300      	movs	r3, #0
 800284e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	4618      	mov	r0, r3
 8002856:	f005 f901 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002860:	f7fe fff0 	bl	8001844 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002864:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_SAI_MspInit+0x134>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10e      	bne.n	800288a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800286c:	4b3a      	ldr	r3, [pc, #232]	; (8002958 <HAL_SAI_MspInit+0x138>)
 800286e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002872:	4a39      	ldr	r2, [pc, #228]	; (8002958 <HAL_SAI_MspInit+0x138>)
 8002874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002878:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800287c:	4b36      	ldr	r3, [pc, #216]	; (8002958 <HAL_SAI_MspInit+0x138>)
 800287e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800288a:	4b32      	ldr	r3, [pc, #200]	; (8002954 <HAL_SAI_MspInit+0x134>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_SAI_MspInit+0x134>)
 8002892:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002894:	23f0      	movs	r3, #240	; 0xf0
 8002896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028ac:	230a      	movs	r3, #10
 80028ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4828      	ldr	r0, [pc, #160]	; (800295c <HAL_SAI_MspInit+0x13c>)
 80028ba:	f002 fb4d 	bl	8004f58 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a27      	ldr	r2, [pc, #156]	; (8002960 <HAL_SAI_MspInit+0x140>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d13f      	bne.n	8002948 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80028c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d8:	f107 0310 	add.w	r3, r7, #16
 80028dc:	4618      	mov	r0, r3
 80028de:	f005 f8bd 	bl	8007a5c <HAL_RCCEx_PeriphCLKConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80028e8:	f7fe ffac 	bl	8001844 <Error_Handler>
    }

      if (SAI2_client == 0)
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_SAI_MspInit+0x134>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10e      	bne.n	8002912 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_SAI_MspInit+0x138>)
 80028f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_SAI_MspInit+0x138>)
 80028fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002900:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_SAI_MspInit+0x138>)
 8002906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800290a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_SAI_MspInit+0x134>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_SAI_MspInit+0x134>)
 800291a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800291c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002920:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002936:	230a      	movs	r3, #10
 8002938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800293c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002940:	4619      	mov	r1, r3
 8002942:	4808      	ldr	r0, [pc, #32]	; (8002964 <HAL_SAI_MspInit+0x144>)
 8002944:	f002 fb08 	bl	8004f58 <HAL_GPIO_Init>

    }
}
 8002948:	bf00      	nop
 800294a:	37e8      	adds	r7, #232	; 0xe8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40015c04 	.word	0x40015c04
 8002954:	24000ec4 	.word	0x24000ec4
 8002958:	58024400 	.word	0x58024400
 800295c:	58022000 	.word	0x58022000
 8002960:	40015c24 	.word	0x40015c24
 8002964:	58021800 	.word	0x58021800

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800296c:	e7fe      	b.n	800296c <NMI_Handler+0x4>

0800296e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <BusFault_Handler+0x4>

08002980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler+0x4>

08002986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b4:	f000 f95c 	bl	8002c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <_sbrk+0x5c>)
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <_sbrk+0x60>)
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <_sbrk+0x64>)
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <_sbrk+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d207      	bcs.n	80029fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029ec:	f009 ffe0 	bl	800c9b0 <__errno>
 80029f0:	4603      	mov	r3, r0
 80029f2:	220c      	movs	r2, #12
 80029f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	e009      	b.n	8002a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <_sbrk+0x64>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <_sbrk+0x64>)
 8002a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	24080000 	.word	0x24080000
 8002a1c:	00000400 	.word	0x00000400
 8002a20:	24000ec8 	.word	0x24000ec8
 8002a24:	24000ee0 	.word	0x24000ee0

08002a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a2c:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <SystemInit+0xe4>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	4a36      	ldr	r2, [pc, #216]	; (8002b0c <SystemInit+0xe4>)
 8002a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a3c:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <SystemInit+0xe8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d807      	bhi.n	8002a58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a48:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <SystemInit+0xe8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 030f 	bic.w	r3, r3, #15
 8002a50:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <SystemInit+0xe8>)
 8002a52:	f043 0307 	orr.w	r3, r3, #7
 8002a56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a58:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <SystemInit+0xec>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <SystemInit+0xec>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <SystemInit+0xec>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <SystemInit+0xec>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4929      	ldr	r1, [pc, #164]	; (8002b14 <SystemInit+0xec>)
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <SystemInit+0xf0>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <SystemInit+0xe8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a82:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <SystemInit+0xe8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 030f 	bic.w	r3, r3, #15
 8002a8a:	4a21      	ldr	r2, [pc, #132]	; (8002b10 <SystemInit+0xe8>)
 8002a8c:	f043 0307 	orr.w	r3, r3, #7
 8002a90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <SystemInit+0xec>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <SystemInit+0xec>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <SystemInit+0xec>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <SystemInit+0xec>)
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <SystemInit+0xf4>)
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <SystemInit+0xec>)
 8002aac:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <SystemInit+0xf8>)
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <SystemInit+0xec>)
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <SystemInit+0xfc>)
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <SystemInit+0xec>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <SystemInit+0xec>)
 8002abe:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <SystemInit+0xfc>)
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <SystemInit+0xec>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <SystemInit+0xec>)
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <SystemInit+0xfc>)
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <SystemInit+0xec>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <SystemInit+0xec>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <SystemInit+0xec>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <SystemInit+0xec>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <SystemInit+0x100>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <SystemInit+0x104>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af2:	d202      	bcs.n	8002afa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <SystemInit+0x108>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <SystemInit+0x10c>)
 8002afc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00
 8002b10:	52002000 	.word	0x52002000
 8002b14:	58024400 	.word	0x58024400
 8002b18:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b1c:	02020200 	.word	0x02020200
 8002b20:	01ff0000 	.word	0x01ff0000
 8002b24:	01010280 	.word	0x01010280
 8002b28:	5c001000 	.word	0x5c001000
 8002b2c:	ffff0000 	.word	0xffff0000
 8002b30:	51008108 	.word	0x51008108
 8002b34:	52004000 	.word	0x52004000

08002b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b3c:	f7ff ff74 	bl	8002a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b40:	480c      	ldr	r0, [pc, #48]	; (8002b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b42:	490d      	ldr	r1, [pc, #52]	; (8002b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b44:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b48:	e002      	b.n	8002b50 <LoopCopyDataInit>

08002b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b4e:	3304      	adds	r3, #4

08002b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b54:	d3f9      	bcc.n	8002b4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b58:	4c0a      	ldr	r4, [pc, #40]	; (8002b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b5c:	e001      	b.n	8002b62 <LoopFillZerobss>

08002b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b60:	3204      	adds	r2, #4

08002b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b64:	d3fb      	bcc.n	8002b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b66:	f009 ff29 	bl	800c9bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b6a:	f7fd fd93 	bl	8000694 <main>
  bx  lr
 8002b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b78:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002b7c:	0800d464 	.word	0x0800d464
  ldr r2, =_sbss
 8002b80:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8002b84:	24000ee0 	.word	0x24000ee0

08002b88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b88:	e7fe      	b.n	8002b88 <ADC3_IRQHandler>
	...

08002b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b92:	2003      	movs	r0, #3
 8002b94:	f001 fa26 	bl	8003fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b98:	f004 fd8a 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_Init+0x68>)
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	4913      	ldr	r1, [pc, #76]	; (8002bf8 <HAL_Init+0x6c>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_Init+0x68>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <HAL_Init+0x6c>)
 8002bc0:	5cd3      	ldrb	r3, [r2, r3]
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bcc:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <HAL_Init+0x70>)
 8002bce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_Init+0x74>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f000 f814 	bl	8002c04 <HAL_InitTick>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e002      	b.n	8002bec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002be6:	f7fe fe33 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	0800d3e8 	.word	0x0800d3e8
 8002bfc:	24000004 	.word	0x24000004
 8002c00:	24000000 	.word	0x24000000

08002c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_InitTick+0x60>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e021      	b.n	8002c5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_InitTick+0x64>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_InitTick+0x60>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4619      	mov	r1, r3
 8002c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f9fd 	bl	800402e <HAL_SYSTICK_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00e      	b.n	8002c5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b0f      	cmp	r3, #15
 8002c42:	d80a      	bhi.n	8002c5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c44:	2200      	movs	r2, #0
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f001 f9d5 	bl	8003ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c50:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <HAL_InitTick+0x68>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2400000c 	.word	0x2400000c
 8002c68:	24000000 	.word	0x24000000
 8002c6c:	24000008 	.word	0x24000008

08002c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_IncTick+0x20>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_IncTick+0x24>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_IncTick+0x24>)
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	2400000c 	.word	0x2400000c
 8002c94:	24000ecc 	.word	0x24000ecc

08002c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_GetTick+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	24000ecc 	.word	0x24000ecc

08002cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7ff ffee 	bl	8002c98 <HAL_GetTick>
 8002cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d005      	beq.n	8002cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_Delay+0x44>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cd6:	bf00      	nop
 8002cd8:	f7ff ffde 	bl	8002c98 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d8f7      	bhi.n	8002cd8 <HAL_Delay+0x28>
  {
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2400000c 	.word	0x2400000c

08002cf8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_GetREVID+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0c1b      	lsrs	r3, r3, #16
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	5c001000 	.word	0x5c001000

08002d10 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d20:	4904      	ldr	r1, [pc, #16]	; (8002d34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	58000400 	.word	0x58000400

08002d38 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	4904      	ldr	r1, [pc, #16]	; (8002d60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	58000400 	.word	0x58000400

08002d64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	611a      	str	r2, [r3, #16]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3360      	adds	r3, #96	; 0x60
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]
  }
}
 8002e68:	bf00      	nop
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3330      	adds	r3, #48	; 0x30
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	4413      	add	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	211f      	movs	r1, #31
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	f003 011f 	and.w	r1, r3, #31
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ec0:	bf00      	nop
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3314      	adds	r3, #20
 8002edc:	461a      	mov	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	0e5b      	lsrs	r3, r3, #25
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	4413      	add	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	0d1b      	lsrs	r3, r3, #20
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2107      	movs	r1, #7
 8002efa:	fa01 f303 	lsl.w	r3, r1, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	401a      	ands	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	0d1b      	lsrs	r3, r3, #20
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	401a      	ands	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0318 	and.w	r3, r3, #24
 8002f46:	4908      	ldr	r1, [pc, #32]	; (8002f68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f48:	40d9      	lsrs	r1, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	400b      	ands	r3, r1
 8002f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f52:	431a      	orrs	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	000fffff 	.word	0x000fffff

08002f6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6093      	str	r3, [r2, #8]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	5fffffc0 	.word	0x5fffffc0

08002f90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa4:	d101      	bne.n	8002faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <LL_ADC_EnableInternalRegulator+0x24>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	6fffffc0 	.word	0x6fffffc0

08002fe0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff4:	d101      	bne.n	8002ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <LL_ADC_IsEnabled+0x18>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <LL_ADC_IsEnabled+0x1a>
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d101      	bne.n	8003046 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d101      	bne.n	800306c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e18f      	b.n	80033b6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fe fbed 	bl	8001884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff67 	bl	8002f90 <LL_ADC_IsDeepPowerDownEnabled>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff4d 	bl	8002f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff82 	bl	8002fe0 <LL_ADC_IsInternalRegulatorEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff ff66 	bl	8002fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ec:	4b87      	ldr	r3, [pc, #540]	; (800330c <HAL_ADC_Init+0x290>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	4a87      	ldr	r2, [pc, #540]	; (8003310 <HAL_ADC_Init+0x294>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	3301      	adds	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030fe:	e002      	b.n	8003106 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3b01      	subs	r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f9      	bne.n	8003100 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff65 	bl	8002fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10d      	bne.n	8003138 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	f043 0210 	orr.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff76 	bl	800302e <LL_ADC_REG_IsConversionOngoing>
 8003142:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 8129 	bne.w	80033a4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 8125 	bne.w	80033a4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff4a 	bl	8003008 <LL_ADC_IsEnabled>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d136      	bne.n	80031e8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a65      	ldr	r2, [pc, #404]	; (8003314 <HAL_ADC_Init+0x298>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_ADC_Init+0x112>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a63      	ldr	r2, [pc, #396]	; (8003318 <HAL_ADC_Init+0x29c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d10e      	bne.n	80031ac <HAL_ADC_Init+0x130>
 800318e:	4861      	ldr	r0, [pc, #388]	; (8003314 <HAL_ADC_Init+0x298>)
 8003190:	f7ff ff3a 	bl	8003008 <LL_ADC_IsEnabled>
 8003194:	4604      	mov	r4, r0
 8003196:	4860      	ldr	r0, [pc, #384]	; (8003318 <HAL_ADC_Init+0x29c>)
 8003198:	f7ff ff36 	bl	8003008 <LL_ADC_IsEnabled>
 800319c:	4603      	mov	r3, r0
 800319e:	4323      	orrs	r3, r4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e008      	b.n	80031be <HAL_ADC_Init+0x142>
 80031ac:	485b      	ldr	r0, [pc, #364]	; (800331c <HAL_ADC_Init+0x2a0>)
 80031ae:	f7ff ff2b 	bl	8003008 <LL_ADC_IsEnabled>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_ADC_Init+0x298>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_Init+0x15a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a51      	ldr	r2, [pc, #324]	; (8003318 <HAL_ADC_Init+0x29c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_ADC_Init+0x15e>
 80031d6:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_ADC_Init+0x2a4>)
 80031d8:	e000      	b.n	80031dc <HAL_ADC_Init+0x160>
 80031da:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_ADC_Init+0x2a8>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f7ff fdbe 	bl	8002d64 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031e8:	f7ff fd86 	bl	8002cf8 <HAL_GetREVID>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d914      	bls.n	8003220 <HAL_ADC_Init+0x1a4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d110      	bne.n	8003220 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7d5b      	ldrb	r3, [r3, #21]
 8003202:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003208:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800320e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7f1b      	ldrb	r3, [r3, #28]
 8003214:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003216:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003218:	f043 030c 	orr.w	r3, r3, #12
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e00d      	b.n	800323c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7d5b      	ldrb	r3, [r3, #21]
 8003224:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800322a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003230:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7f1b      	ldrb	r3, [r3, #28]
 8003236:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7f1b      	ldrb	r3, [r3, #28]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d106      	bne.n	8003252 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	3b01      	subs	r3, #1
 800324a:	045b      	lsls	r3, r3, #17
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <HAL_ADC_Init+0x2ac>)
 8003276:	4013      	ands	r3, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	69b9      	ldr	r1, [r7, #24]
 800327e:	430b      	orrs	r3, r1
 8003280:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fed1 	bl	800302e <LL_ADC_REG_IsConversionOngoing>
 800328c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fede 	bl	8003054 <LL_ADC_INJ_IsConversionOngoing>
 8003298:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d15f      	bne.n	8003360 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d15c      	bne.n	8003360 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7d1b      	ldrb	r3, [r3, #20]
 80032aa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	4b1c      	ldr	r3, [pc, #112]	; (800332c <HAL_ADC_Init+0x2b0>)
 80032bc:	4013      	ands	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	69b9      	ldr	r1, [r7, #24]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d130      	bne.n	8003334 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_ADC_Init+0x2b4>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032e6:	3a01      	subs	r2, #1
 80032e8:	0411      	lsls	r1, r2, #16
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032ee:	4311      	orrs	r1, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032fa:	430a      	orrs	r2, r1
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	611a      	str	r2, [r3, #16]
 8003308:	e01c      	b.n	8003344 <HAL_ADC_Init+0x2c8>
 800330a:	bf00      	nop
 800330c:	24000000 	.word	0x24000000
 8003310:	053e2d63 	.word	0x053e2d63
 8003314:	40022000 	.word	0x40022000
 8003318:	40022100 	.word	0x40022100
 800331c:	58026000 	.word	0x58026000
 8003320:	40022300 	.word	0x40022300
 8003324:	58026300 	.word	0x58026300
 8003328:	fff0c003 	.word	0xfff0c003
 800332c:	ffffbffc 	.word	0xffffbffc
 8003330:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fb80 	bl	8003a60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d10c      	bne.n	8003382 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f023 010f 	bic.w	r1, r3, #15
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
 8003380:	e007      	b.n	8003392 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 020f 	bic.w	r2, r2, #15
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f023 0303 	bic.w	r3, r3, #3
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
 80033a2:	e007      	b.n	80033b4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3724      	adds	r7, #36	; 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	bf00      	nop

080033c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b0a1      	sub	sp, #132	; 0x84
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a9d      	ldr	r2, [pc, #628]	; (8003650 <HAL_ADC_ConfigChannel+0x290>)
 80033da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x2a>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e321      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x66e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fe19 	bl	800302e <LL_ADC_REG_IsConversionOngoing>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 8306 	bne.w	8003a10 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x62>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0e9b      	lsrs	r3, r3, #26
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2201      	movs	r2, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	e016      	b.n	8003450 <HAL_ADC_ConfigChannel+0x90>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003432:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800343a:	2320      	movs	r3, #32
 800343c:	e003      	b.n	8003446 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800343e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2201      	movs	r2, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	69d1      	ldr	r1, [r2, #28]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	430b      	orrs	r3, r1
 800345c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	f7ff fd02 	bl	8002e74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fdda 	bl	800302e <LL_ADC_REG_IsConversionOngoing>
 800347a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fde7 	bl	8003054 <LL_ADC_INJ_IsConversionOngoing>
 8003486:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348a:	2b00      	cmp	r3, #0
 800348c:	f040 80b3 	bne.w	80035f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 80af 	bne.w	80035f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f7ff fd11 	bl	8002ecc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034aa:	4b6a      	ldr	r3, [pc, #424]	; (8003654 <HAL_ADC_ConfigChannel+0x294>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80034b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b6:	d10b      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x110>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	e01d      	b.n	800350c <HAL_ADC_ConfigChannel+0x14c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x136>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	e00a      	b.n	800350c <HAL_ADC_ConfigChannel+0x14c>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d027      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6919      	ldr	r1, [r3, #16]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003524:	f7ff fc52 	bl	8002dcc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6919      	ldr	r1, [r3, #16]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	7e5b      	ldrb	r3, [r3, #25]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d102      	bne.n	800353e <HAL_ADC_ConfigChannel+0x17e>
 8003538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800353c:	e000      	b.n	8003540 <HAL_ADC_ConfigChannel+0x180>
 800353e:	2300      	movs	r3, #0
 8003540:	461a      	mov	r2, r3
 8003542:	f7ff fc7c 	bl	8002e3e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6919      	ldr	r1, [r3, #16]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	7e1b      	ldrb	r3, [r3, #24]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d102      	bne.n	800355c <HAL_ADC_ConfigChannel+0x19c>
 8003556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800355a:	e000      	b.n	800355e <HAL_ADC_ConfigChannel+0x19e>
 800355c:	2300      	movs	r3, #0
 800355e:	461a      	mov	r2, r3
 8003560:	f7ff fc54 	bl	8002e0c <LL_ADC_SetDataRightShift>
 8003564:	e047      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	069b      	lsls	r3, r3, #26
 8003576:	429a      	cmp	r2, r3
 8003578:	d107      	bne.n	800358a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003588:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003590:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	069b      	lsls	r3, r3, #26
 800359a:	429a      	cmp	r2, r3
 800359c:	d107      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	069b      	lsls	r3, r3, #26
 80035be:	429a      	cmp	r2, r3
 80035c0:	d107      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	069b      	lsls	r3, r3, #26
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d107      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fd04 	bl	8003008 <LL_ADC_IsEnabled>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 820d 	bne.w	8003a22 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	461a      	mov	r2, r3
 8003616:	f7ff fc85 	bl	8002f24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4a0c      	ldr	r2, [pc, #48]	; (8003650 <HAL_ADC_ConfigChannel+0x290>)
 8003620:	4293      	cmp	r3, r2
 8003622:	f040 8133 	bne.w	800388c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003632:	2b00      	cmp	r3, #0
 8003634:	d110      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x298>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	0e9b      	lsrs	r3, r3, #26
 800363c:	3301      	adds	r3, #1
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2b09      	cmp	r3, #9
 8003644:	bf94      	ite	ls
 8003646:	2301      	movls	r3, #1
 8003648:	2300      	movhi	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	e01e      	b.n	800368c <HAL_ADC_ConfigChannel+0x2cc>
 800364e:	bf00      	nop
 8003650:	47ff0000 	.word	0x47ff0000
 8003654:	5c001000 	.word	0x5c001000
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003668:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800366a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003670:	2320      	movs	r3, #32
 8003672:	e003      	b.n	800367c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	3301      	adds	r3, #1
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2b09      	cmp	r3, #9
 8003684:	bf94      	ite	ls
 8003686:	2301      	movls	r3, #1
 8003688:	2300      	movhi	r3, #0
 800368a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800368c:	2b00      	cmp	r3, #0
 800368e:	d079      	beq.n	8003784 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x2ec>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0e9b      	lsrs	r3, r3, #26
 80036a2:	3301      	adds	r3, #1
 80036a4:	069b      	lsls	r3, r3, #26
 80036a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036aa:	e015      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x318>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80036c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	069b      	lsls	r3, r3, #26
 80036d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x338>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	0e9b      	lsrs	r3, r3, #26
 80036ea:	3301      	adds	r3, #1
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	e017      	b.n	8003728 <HAL_ADC_ConfigChannel+0x368>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003708:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800370a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003710:	2320      	movs	r3, #32
 8003712:	e003      	b.n	800371c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	ea42 0103 	orr.w	r1, r2, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <HAL_ADC_ConfigChannel+0x38e>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	051b      	lsls	r3, r3, #20
 800374c:	e018      	b.n	8003780 <HAL_ADC_ConfigChannel+0x3c0>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003766:	2320      	movs	r3, #32
 8003768:	e003      	b.n	8003772 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3301      	adds	r3, #1
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003780:	430b      	orrs	r3, r1
 8003782:	e07e      	b.n	8003882 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x3e0>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	3301      	adds	r3, #1
 8003798:	069b      	lsls	r3, r3, #26
 800379a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800379e:	e015      	b.n	80037cc <HAL_ADC_ConfigChannel+0x40c>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	069b      	lsls	r3, r3, #26
 80037c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x42c>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	3301      	adds	r3, #1
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	e017      	b.n	800381c <HAL_ADC_ConfigChannel+0x45c>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	61bb      	str	r3, [r7, #24]
  return result;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e003      	b.n	8003810 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3301      	adds	r3, #1
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	ea42 0103 	orr.w	r1, r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10d      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x488>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	3301      	adds	r3, #1
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	3b1e      	subs	r3, #30
 8003840:	051b      	lsls	r3, r3, #20
 8003842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003846:	e01b      	b.n	8003880 <HAL_ADC_ConfigChannel+0x4c0>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	60fb      	str	r3, [r7, #12]
  return result;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e003      	b.n	800386c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f003 021f 	and.w	r2, r3, #31
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	3b1e      	subs	r3, #30
 800387a:	051b      	lsls	r3, r3, #20
 800387c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003880:	430b      	orrs	r3, r1
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	6892      	ldr	r2, [r2, #8]
 8003886:	4619      	mov	r1, r3
 8003888:	f7ff fb20 	bl	8002ecc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f280 80c6 	bge.w	8003a22 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a67      	ldr	r2, [pc, #412]	; (8003a38 <HAL_ADC_ConfigChannel+0x678>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x4ea>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a65      	ldr	r2, [pc, #404]	; (8003a3c <HAL_ADC_ConfigChannel+0x67c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x4ee>
 80038aa:	4b65      	ldr	r3, [pc, #404]	; (8003a40 <HAL_ADC_ConfigChannel+0x680>)
 80038ac:	e000      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x4f0>
 80038ae:	4b65      	ldr	r3, [pc, #404]	; (8003a44 <HAL_ADC_ConfigChannel+0x684>)
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fa7d 	bl	8002db0 <LL_ADC_GetCommonPathInternalCh>
 80038b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5e      	ldr	r2, [pc, #376]	; (8003a38 <HAL_ADC_ConfigChannel+0x678>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x50c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5d      	ldr	r2, [pc, #372]	; (8003a3c <HAL_ADC_ConfigChannel+0x67c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10e      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x52a>
 80038cc:	485a      	ldr	r0, [pc, #360]	; (8003a38 <HAL_ADC_ConfigChannel+0x678>)
 80038ce:	f7ff fb9b 	bl	8003008 <LL_ADC_IsEnabled>
 80038d2:	4604      	mov	r4, r0
 80038d4:	4859      	ldr	r0, [pc, #356]	; (8003a3c <HAL_ADC_ConfigChannel+0x67c>)
 80038d6:	f7ff fb97 	bl	8003008 <LL_ADC_IsEnabled>
 80038da:	4603      	mov	r3, r0
 80038dc:	4323      	orrs	r3, r4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e008      	b.n	80038fc <HAL_ADC_ConfigChannel+0x53c>
 80038ea:	4857      	ldr	r0, [pc, #348]	; (8003a48 <HAL_ADC_ConfigChannel+0x688>)
 80038ec:	f7ff fb8c 	bl	8003008 <LL_ADC_IsEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d07d      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <HAL_ADC_ConfigChannel+0x68c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d130      	bne.n	800396c <HAL_ADC_ConfigChannel+0x5ac>
 800390a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d12b      	bne.n	800396c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a4b      	ldr	r2, [pc, #300]	; (8003a48 <HAL_ADC_ConfigChannel+0x688>)
 800391a:	4293      	cmp	r3, r2
 800391c:	f040 8081 	bne.w	8003a22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a44      	ldr	r2, [pc, #272]	; (8003a38 <HAL_ADC_ConfigChannel+0x678>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_ADC_ConfigChannel+0x574>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a43      	ldr	r2, [pc, #268]	; (8003a3c <HAL_ADC_ConfigChannel+0x67c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x578>
 8003934:	4a42      	ldr	r2, [pc, #264]	; (8003a40 <HAL_ADC_ConfigChannel+0x680>)
 8003936:	e000      	b.n	800393a <HAL_ADC_ConfigChannel+0x57a>
 8003938:	4a42      	ldr	r2, [pc, #264]	; (8003a44 <HAL_ADC_ConfigChannel+0x684>)
 800393a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7ff fa21 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003948:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <HAL_ADC_ConfigChannel+0x690>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	4a41      	ldr	r2, [pc, #260]	; (8003a54 <HAL_ADC_ConfigChannel+0x694>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	3301      	adds	r3, #1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800395c:	e002      	b.n	8003964 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3b01      	subs	r3, #1
 8003962:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f9      	bne.n	800395e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800396a:	e05a      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a39      	ldr	r2, [pc, #228]	; (8003a58 <HAL_ADC_ConfigChannel+0x698>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d11e      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x5f4>
 8003976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d119      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <HAL_ADC_ConfigChannel+0x688>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d14b      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <HAL_ADC_ConfigChannel+0x678>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_ADC_ConfigChannel+0x5de>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <HAL_ADC_ConfigChannel+0x67c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x5e2>
 800399e:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <HAL_ADC_ConfigChannel+0x680>)
 80039a0:	e000      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x5e4>
 80039a2:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <HAL_ADC_ConfigChannel+0x684>)
 80039a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f7ff f9ec 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b2:	e036      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <HAL_ADC_ConfigChannel+0x69c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d131      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x662>
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d12c      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <HAL_ADC_ConfigChannel+0x688>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d127      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_ADC_ConfigChannel+0x678>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x626>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_ADC_ConfigChannel+0x67c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x62a>
 80039e6:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_ADC_ConfigChannel+0x680>)
 80039e8:	e000      	b.n	80039ec <HAL_ADC_ConfigChannel+0x62c>
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_ADC_ConfigChannel+0x684>)
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7ff f9c8 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
 80039fa:	e012      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a0e:	e008      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3784      	adds	r7, #132	; 0x84
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40022100 	.word	0x40022100
 8003a40:	40022300 	.word	0x40022300
 8003a44:	58026300 	.word	0x58026300
 8003a48:	58026000 	.word	0x58026000
 8003a4c:	cb840000 	.word	0xcb840000
 8003a50:	24000000 	.word	0x24000000
 8003a54:	053e2d63 	.word	0x053e2d63
 8003a58:	c7520000 	.word	0xc7520000
 8003a5c:	cfb80000 	.word	0xcfb80000

08003a60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a7a      	ldr	r2, [pc, #488]	; (8003c58 <ADC_ConfigureBoostMode+0x1f8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <ADC_ConfigureBoostMode+0x1c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a79      	ldr	r2, [pc, #484]	; (8003c5c <ADC_ConfigureBoostMode+0x1fc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d109      	bne.n	8003a90 <ADC_ConfigureBoostMode+0x30>
 8003a7c:	4b78      	ldr	r3, [pc, #480]	; (8003c60 <ADC_ConfigureBoostMode+0x200>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e008      	b.n	8003aa2 <ADC_ConfigureBoostMode+0x42>
 8003a90:	4b74      	ldr	r3, [pc, #464]	; (8003c64 <ADC_ConfigureBoostMode+0x204>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01c      	beq.n	8003ae0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003aa6:	f003 ff7d 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 8003aaa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ab4:	d010      	beq.n	8003ad8 <ADC_ConfigureBoostMode+0x78>
 8003ab6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aba:	d873      	bhi.n	8003ba4 <ADC_ConfigureBoostMode+0x144>
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d002      	beq.n	8003ac8 <ADC_ConfigureBoostMode+0x68>
 8003ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ac6:	d16d      	bne.n	8003ba4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	60fb      	str	r3, [r7, #12]
        break;
 8003ad6:	e068      	b.n	8003baa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	60fb      	str	r3, [r7, #12]
        break;
 8003ade:	e064      	b.n	8003baa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ae0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	f005 f9c2 	bl	8008e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8003aec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003af6:	d051      	beq.n	8003b9c <ADC_ConfigureBoostMode+0x13c>
 8003af8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003afc:	d854      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
 8003afe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b02:	d047      	beq.n	8003b94 <ADC_ConfigureBoostMode+0x134>
 8003b04:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b08:	d84e      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
 8003b0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b0e:	d03d      	beq.n	8003b8c <ADC_ConfigureBoostMode+0x12c>
 8003b10:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b14:	d848      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
 8003b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b1a:	d033      	beq.n	8003b84 <ADC_ConfigureBoostMode+0x124>
 8003b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b20:	d842      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
 8003b22:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b26:	d029      	beq.n	8003b7c <ADC_ConfigureBoostMode+0x11c>
 8003b28:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b2c:	d83c      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
 8003b2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b32:	d01a      	beq.n	8003b6a <ADC_ConfigureBoostMode+0x10a>
 8003b34:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b38:	d836      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
 8003b3a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b3e:	d014      	beq.n	8003b6a <ADC_ConfigureBoostMode+0x10a>
 8003b40:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b44:	d830      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
 8003b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4a:	d00e      	beq.n	8003b6a <ADC_ConfigureBoostMode+0x10a>
 8003b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b50:	d82a      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
 8003b52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b56:	d008      	beq.n	8003b6a <ADC_ConfigureBoostMode+0x10a>
 8003b58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b5c:	d824      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
 8003b5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b62:	d002      	beq.n	8003b6a <ADC_ConfigureBoostMode+0x10a>
 8003b64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b68:	d11e      	bne.n	8003ba8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	0c9b      	lsrs	r3, r3, #18
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	60fb      	str	r3, [r7, #12]
        break;
 8003b7a:	e016      	b.n	8003baa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]
        break;
 8003b82:	e012      	b.n	8003baa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	60fb      	str	r3, [r7, #12]
        break;
 8003b8a:	e00e      	b.n	8003baa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	099b      	lsrs	r3, r3, #6
 8003b90:	60fb      	str	r3, [r7, #12]
        break;
 8003b92:	e00a      	b.n	8003baa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	09db      	lsrs	r3, r3, #7
 8003b98:	60fb      	str	r3, [r7, #12]
        break;
 8003b9a:	e006      	b.n	8003baa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	60fb      	str	r3, [r7, #12]
        break;
 8003ba2:	e002      	b.n	8003baa <ADC_ConfigureBoostMode+0x14a>
        break;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ba8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003baa:	f7ff f8a5 	bl	8002cf8 <HAL_GetREVID>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d815      	bhi.n	8003be4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <ADC_ConfigureBoostMode+0x208>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d908      	bls.n	8003bd2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bd0:	e03e      	b.n	8003c50 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be0:	609a      	str	r2, [r3, #8]
}
 8003be2:	e035      	b.n	8003c50 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <ADC_ConfigureBoostMode+0x20c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d808      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c00:	609a      	str	r2, [r3, #8]
}
 8003c02:	e025      	b.n	8003c50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <ADC_ConfigureBoostMode+0x210>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d80a      	bhi.n	8003c22 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	e016      	b.n	8003c50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <ADC_ConfigureBoostMode+0x214>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d80a      	bhi.n	8003c40 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3c:	609a      	str	r2, [r3, #8]
}
 8003c3e:	e007      	b.n	8003c50 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c4e:	609a      	str	r2, [r3, #8]
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40022100 	.word	0x40022100
 8003c60:	40022300 	.word	0x40022300
 8003c64:	58026300 	.word	0x58026300
 8003c68:	01312d00 	.word	0x01312d00
 8003c6c:	005f5e10 	.word	0x005f5e10
 8003c70:	00bebc20 	.word	0x00bebc20
 8003c74:	017d7840 	.word	0x017d7840

08003c78 <LL_ADC_IsEnabled>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <LL_ADC_IsEnabled+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_ADC_IsEnabled+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_ADC_REG_IsConversionOngoing>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d101      	bne.n	8003cb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b09f      	sub	sp, #124	; 0x7c
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e0be      	b.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a5c      	ldr	r2, [pc, #368]	; (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d102      	bne.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cfc:	4b5b      	ldr	r3, [pc, #364]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	e001      	b.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e09d      	b.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ffb9 	bl	8003c9e <LL_ADC_REG_IsConversionOngoing>
 8003d2c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff ffb3 	bl	8003c9e <LL_ADC_REG_IsConversionOngoing>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d17f      	bne.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d17c      	bne.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a47      	ldr	r2, [pc, #284]	; (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a46      	ldr	r2, [pc, #280]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d58:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d5a:	e000      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d5c:	4b45      	ldr	r3, [pc, #276]	; (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d039      	beq.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a3a      	ldr	r2, [pc, #232]	; (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a38      	ldr	r2, [pc, #224]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10e      	bne.n	8003dac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d8e:	4836      	ldr	r0, [pc, #216]	; (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d90:	f7ff ff72 	bl	8003c78 <LL_ADC_IsEnabled>
 8003d94:	4604      	mov	r4, r0
 8003d96:	4835      	ldr	r0, [pc, #212]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d98:	f7ff ff6e 	bl	8003c78 <LL_ADC_IsEnabled>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4323      	orrs	r3, r4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e008      	b.n	8003dbe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003dac:	4832      	ldr	r0, [pc, #200]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003dae:	f7ff ff63 	bl	8003c78 <LL_ADC_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d047      	beq.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	6811      	ldr	r1, [r2, #0]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dda:	e03a      	b.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10e      	bne.n	8003e1a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003dfc:	481a      	ldr	r0, [pc, #104]	; (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dfe:	f7ff ff3b 	bl	8003c78 <LL_ADC_IsEnabled>
 8003e02:	4604      	mov	r4, r0
 8003e04:	4819      	ldr	r0, [pc, #100]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e06:	f7ff ff37 	bl	8003c78 <LL_ADC_IsEnabled>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4323      	orrs	r3, r4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf0c      	ite	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	2300      	movne	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e008      	b.n	8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e1a:	4817      	ldr	r0, [pc, #92]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e1c:	f7ff ff2c 	bl	8003c78 <LL_ADC_IsEnabled>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d010      	beq.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e3a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e3c:	e009      	b.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f043 0220 	orr.w	r2, r3, #32
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e50:	e000      	b.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e52:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	377c      	adds	r7, #124	; 0x7c
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd90      	pop	{r4, r7, pc}
 8003e68:	40022000 	.word	0x40022000
 8003e6c:	40022100 	.word	0x40022100
 8003e70:	40022300 	.word	0x40022300
 8003e74:	58026300 	.word	0x58026300
 8003e78:	58026000 	.word	0x58026000
 8003e7c:	fffff0e0 	.word	0xfffff0e0

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eae:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	60d3      	str	r3, [r2, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00
 8003ec4:	05fa0000 	.word	0x05fa0000

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	db0a      	blt.n	8003f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	490c      	ldr	r1, [pc, #48]	; (8003f30 <__NVIC_SetPriority+0x4c>)
 8003efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f02:	0112      	lsls	r2, r2, #4
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	440b      	add	r3, r1
 8003f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f0c:	e00a      	b.n	8003f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4908      	ldr	r1, [pc, #32]	; (8003f34 <__NVIC_SetPriority+0x50>)
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	3b04      	subs	r3, #4
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	440b      	add	r3, r1
 8003f22:	761a      	strb	r2, [r3, #24]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	e000e100 	.word	0xe000e100
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f1c3 0307 	rsb	r3, r3, #7
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf28      	it	cs
 8003f56:	2304      	movcs	r3, #4
 8003f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d902      	bls.n	8003f68 <NVIC_EncodePriority+0x30>
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3b03      	subs	r3, #3
 8003f66:	e000      	b.n	8003f6a <NVIC_EncodePriority+0x32>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	43d9      	mvns	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	4313      	orrs	r3, r2
         );
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3724      	adds	r7, #36	; 0x24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb0:	d301      	bcc.n	8003fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e00f      	b.n	8003fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <SysTick_Config+0x40>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fbe:	210f      	movs	r1, #15
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	f7ff ff8e 	bl	8003ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <SysTick_Config+0x40>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <SysTick_Config+0x40>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	e000e010 	.word	0xe000e010

08003fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff47 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	4603      	mov	r3, r0
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004008:	f7ff ff5e 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 800400c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff ff90 	bl	8003f38 <NVIC_EncodePriority>
 8004018:	4602      	mov	r2, r0
 800401a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff5f 	bl	8003ee4 <__NVIC_SetPriority>
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff ffb2 	bl	8003fa0 <SysTick_Config>
 800403c:	4603      	mov	r3, r0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0cf      	b.n	80041fa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2223      	movs	r2, #35	; 0x23
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fd fd0b 	bl	8001a88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004072:	4b64      	ldr	r3, [pc, #400]	; (8004204 <HAL_ETH_Init+0x1bc>)
 8004074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004078:	4a62      	ldr	r2, [pc, #392]	; (8004204 <HAL_ETH_Init+0x1bc>)
 800407a:	f043 0302 	orr.w	r3, r3, #2
 800407e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004082:	4b60      	ldr	r3, [pc, #384]	; (8004204 <HAL_ETH_Init+0x1bc>)
 8004084:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7a1b      	ldrb	r3, [r3, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004098:	2000      	movs	r0, #0
 800409a:	f7fe fe39 	bl	8002d10 <HAL_SYSCFG_ETHInterfaceSelect>
 800409e:	e003      	b.n	80040a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80040a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80040a4:	f7fe fe34 	bl	8002d10 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80040a8:	4b57      	ldr	r3, [pc, #348]	; (8004208 <HAL_ETH_Init+0x1c0>)
 80040aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040c4:	f7fe fde8 	bl	8002c98 <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040ca:	e011      	b.n	80040f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80040cc:	f7fe fde4 	bl	8002c98 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040da:	d909      	bls.n	80040f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2204      	movs	r2, #4
 80040e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	22e0      	movs	r2, #224	; 0xe0
 80040e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e084      	b.n	80041fa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e4      	bne.n	80040cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f886 	bl	8004214 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004108:	f003 fc4c 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 800410c:	4603      	mov	r3, r0
 800410e:	4a3f      	ldr	r2, [pc, #252]	; (800420c <HAL_ETH_Init+0x1c4>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	0c9a      	lsrs	r2, r3, #18
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3a01      	subs	r2, #1
 800411c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fa71 	bl	8004608 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004132:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800413e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004142:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	22e0      	movs	r2, #224	; 0xe0
 800415e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e049      	b.n	80041fa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <HAL_ETH_Init+0x1c8>)
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6952      	ldr	r2, [r2, #20]
 800417a:	0051      	lsls	r1, r2, #1
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	430b      	orrs	r3, r1
 8004182:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004186:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fad9 	bl	8004742 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fb1f 	bl	80047d4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	3305      	adds	r3, #5
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	021a      	lsls	r2, r3, #8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	4619      	mov	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	3303      	adds	r3, #3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	061a      	lsls	r2, r3, #24
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	3302      	adds	r3, #2
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	041b      	lsls	r3, r3, #16
 80041c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	3301      	adds	r3, #1
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2210      	movs	r2, #16
 80041f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	58024400 	.word	0x58024400
 8004208:	58000400 	.word	0x58000400
 800420c:	431bde83 	.word	0x431bde83
 8004210:	ffff8001 	.word	0xffff8001

08004214 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004224:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800422c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800422e:	f003 fbb9 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 8004232:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d908      	bls.n	800424e <HAL_ETH_SetMDIOClockRange+0x3a>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d804      	bhi.n	800424e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e027      	b.n	800429e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d908      	bls.n	8004268 <HAL_ETH_SetMDIOClockRange+0x54>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d204      	bcs.n	8004268 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e01a      	b.n	800429e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d303      	bcc.n	8004278 <HAL_ETH_SetMDIOClockRange+0x64>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4a12      	ldr	r2, [pc, #72]	; (80042bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d911      	bls.n	800429c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4a10      	ldr	r2, [pc, #64]	; (80042bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d908      	bls.n	8004292 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4a0f      	ldr	r2, [pc, #60]	; (80042c0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d804      	bhi.n	8004292 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e005      	b.n	800429e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e000      	b.n	800429e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800429c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	01312cff 	.word	0x01312cff
 80042b4:	02160ebf 	.word	0x02160ebf
 80042b8:	03938700 	.word	0x03938700
 80042bc:	05f5e0ff 	.word	0x05f5e0ff
 80042c0:	08f0d17f 	.word	0x08f0d17f

080042c4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80042d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	791b      	ldrb	r3, [r3, #4]
 80042dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80042de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	7b1b      	ldrb	r3, [r3, #12]
 80042e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	7b5b      	ldrb	r3, [r3, #13]
 80042ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	7b9b      	ldrb	r3, [r3, #14]
 80042f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	7bdb      	ldrb	r3, [r3, #15]
 80042fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	7c12      	ldrb	r2, [r2, #16]
 8004304:	2a00      	cmp	r2, #0
 8004306:	d102      	bne.n	800430e <ETH_SetMACConfig+0x4a>
 8004308:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800430c:	e000      	b.n	8004310 <ETH_SetMACConfig+0x4c>
 800430e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004310:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	7c52      	ldrb	r2, [r2, #17]
 8004316:	2a00      	cmp	r2, #0
 8004318:	d102      	bne.n	8004320 <ETH_SetMACConfig+0x5c>
 800431a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800431e:	e000      	b.n	8004322 <ETH_SetMACConfig+0x5e>
 8004320:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004322:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	7c9b      	ldrb	r3, [r3, #18]
 8004328:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800432a:	431a      	orrs	r2, r3
               macconf->Speed |
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004330:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004336:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	7f1b      	ldrb	r3, [r3, #28]
 800433c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800433e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	7f5b      	ldrb	r3, [r3, #29]
 8004344:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004346:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	7f92      	ldrb	r2, [r2, #30]
 800434c:	2a00      	cmp	r2, #0
 800434e:	d102      	bne.n	8004356 <ETH_SetMACConfig+0x92>
 8004350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004354:	e000      	b.n	8004358 <ETH_SetMACConfig+0x94>
 8004356:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004358:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	7fdb      	ldrb	r3, [r3, #31]
 800435e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004360:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004368:	2a00      	cmp	r2, #0
 800436a:	d102      	bne.n	8004372 <ETH_SetMACConfig+0xae>
 800436c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004370:	e000      	b.n	8004374 <ETH_SetMACConfig+0xb0>
 8004372:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004374:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800437a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004382:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004384:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b56      	ldr	r3, [pc, #344]	; (80044f0 <ETH_SetMACConfig+0x22c>)
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	430b      	orrs	r3, r1
 80043a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043c2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	d102      	bne.n	80043d6 <ETH_SetMACConfig+0x112>
 80043d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043d4:	e000      	b.n	80043d8 <ETH_SetMACConfig+0x114>
 80043d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043d8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	4b42      	ldr	r3, [pc, #264]	; (80044f4 <ETH_SetMACConfig+0x230>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	4b3a      	ldr	r3, [pc, #232]	; (80044f8 <ETH_SetMACConfig+0x234>)
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	430b      	orrs	r3, r1
 8004418:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004420:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004426:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800442e:	2a00      	cmp	r2, #0
 8004430:	d101      	bne.n	8004436 <ETH_SetMACConfig+0x172>
 8004432:	2280      	movs	r2, #128	; 0x80
 8004434:	e000      	b.n	8004438 <ETH_SetMACConfig+0x174>
 8004436:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004438:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800444a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800444e:	4013      	ands	r3, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	68f9      	ldr	r1, [r7, #12]
 8004456:	430b      	orrs	r3, r1
 8004458:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004460:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004468:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	f023 0103 	bic.w	r1, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	430a      	orrs	r2, r1
 8004482:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800448e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	d101      	bne.n	80044b2 <ETH_SetMACConfig+0x1ee>
 80044ae:	2240      	movs	r2, #64	; 0x40
 80044b0:	e000      	b.n	80044b4 <ETH_SetMACConfig+0x1f0>
 80044b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80044b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80044bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80044c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80044d4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	430a      	orrs	r2, r1
 80044e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	00048083 	.word	0x00048083
 80044f4:	c0f88000 	.word	0xc0f88000
 80044f8:	fffffef0 	.word	0xfffffef0

080044fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <ETH_SetDMAConfig+0xf8>)
 8004512:	4013      	ands	r3, r2
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	6811      	ldr	r1, [r2, #0]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	430b      	orrs	r3, r1
 800451e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004522:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	791b      	ldrb	r3, [r3, #4]
 8004528:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800452e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	7b1b      	ldrb	r3, [r3, #12]
 8004534:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <ETH_SetDMAConfig+0xfc>)
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	68f9      	ldr	r1, [r7, #12]
 800454e:	430b      	orrs	r3, r1
 8004550:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004554:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	7b5b      	ldrb	r3, [r3, #13]
 800455a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004570:	4b22      	ldr	r3, [pc, #136]	; (80045fc <ETH_SetDMAConfig+0x100>)
 8004572:	4013      	ands	r3, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	68f9      	ldr	r1, [r7, #12]
 800457a:	430b      	orrs	r3, r1
 800457c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004580:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	7d1b      	ldrb	r3, [r3, #20]
 800458c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800458e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	7f5b      	ldrb	r3, [r3, #29]
 8004594:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80045a6:	4b16      	ldr	r3, [pc, #88]	; (8004600 <ETH_SetDMAConfig+0x104>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	430b      	orrs	r3, r1
 80045b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	7f1b      	ldrb	r3, [r3, #28]
 80045be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <ETH_SetDMAConfig+0x108>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	430b      	orrs	r3, r1
 80045e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045e4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	ffff87fd 	.word	0xffff87fd
 80045f8:	ffff2ffe 	.word	0xffff2ffe
 80045fc:	fffec000 	.word	0xfffec000
 8004600:	ffc0efef 	.word	0xffc0efef
 8004604:	7fc0ffff 	.word	0x7fc0ffff

08004608 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b0a4      	sub	sp, #144	; 0x90
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004616:	2300      	movs	r3, #0
 8004618:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800461a:	2300      	movs	r3, #0
 800461c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004620:	2300      	movs	r3, #0
 8004622:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004638:	2300      	movs	r3, #0
 800463a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800464a:	2300      	movs	r3, #0
 800464c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004650:	2300      	movs	r3, #0
 8004652:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004654:	2300      	movs	r3, #0
 8004656:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004660:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004664:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004666:	2300      	movs	r3, #0
 8004668:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800466c:	2300      	movs	r3, #0
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004676:	2300      	movs	r3, #0
 8004678:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004682:	2300      	movs	r3, #0
 8004684:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004686:	2300      	movs	r3, #0
 8004688:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800468a:	2300      	movs	r3, #0
 800468c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80046a0:	2320      	movs	r3, #32
 80046a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80046b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80046b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046bc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80046be:	2300      	movs	r3, #0
 80046c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80046c4:	2302      	movs	r3, #2
 80046c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80046e2:	2300      	movs	r3, #0
 80046e4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80046ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff fde6 	bl	80042c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80046f8:	2301      	movs	r3, #1
 80046fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80046fc:	2301      	movs	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004700:	2300      	movs	r3, #0
 8004702:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004704:	2300      	movs	r3, #0
 8004706:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800470a:	2300      	movs	r3, #0
 800470c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800470e:	2300      	movs	r3, #0
 8004710:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004712:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004716:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004718:	2300      	movs	r3, #0
 800471a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800471c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004720:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004722:	2300      	movs	r3, #0
 8004724:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004728:	f44f 7306 	mov.w	r3, #536	; 0x218
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff fee1 	bl	80044fc <ETH_SetDMAConfig>
}
 800473a:	bf00      	nop
 800473c:	3790      	adds	r7, #144	; 0x90
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e01d      	b.n	800478c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68d9      	ldr	r1, [r3, #12]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4613      	mov	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4413      	add	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	440b      	add	r3, r1
 8004760:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2200      	movs	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2200      	movs	r2, #0
 8004778:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	3206      	adds	r2, #6
 8004782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b03      	cmp	r3, #3
 8004790:	d9de      	bls.n	8004750 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a0:	461a      	mov	r2, r3
 80047a2:	2303      	movs	r3, #3
 80047a4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e023      	b.n	800482a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6919      	ldr	r1, [r3, #16]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4613      	mov	r3, r2
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	4413      	add	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	440b      	add	r3, r1
 80047f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2200      	movs	r2, #0
 80047fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2200      	movs	r2, #0
 8004810:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2200      	movs	r2, #0
 8004816:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	3212      	adds	r2, #18
 8004820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d9d8      	bls.n	80047e2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004856:	461a      	mov	r2, r3
 8004858:	2303      	movs	r3, #3
 800485a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b098      	sub	sp, #96	; 0x60
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004898:	4a84      	ldr	r2, [pc, #528]	; (8004aac <HAL_FDCAN_Init+0x21c>)
 800489a:	f107 030c 	add.w	r3, r7, #12
 800489e:	4611      	mov	r1, r2
 80048a0:	224c      	movs	r2, #76	; 0x4c
 80048a2:	4618      	mov	r0, r3
 80048a4:	f008 f8ae 	bl	800ca04 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e1c6      	b.n	8004c40 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7e      	ldr	r2, [pc, #504]	; (8004ab0 <HAL_FDCAN_Init+0x220>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d106      	bne.n	80048ca <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048c4:	461a      	mov	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fd fa02 	bl	8001ce8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0210 	bic.w	r2, r2, #16
 80048f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f4:	f7fe f9d0 	bl	8002c98 <HAL_GetTick>
 80048f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048fa:	e014      	b.n	8004926 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80048fc:	f7fe f9cc 	bl	8002c98 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b0a      	cmp	r3, #10
 8004908:	d90d      	bls.n	8004926 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004910:	f043 0201 	orr.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2203      	movs	r2, #3
 800491e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e18c      	b.n	8004c40 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d0e3      	beq.n	80048fc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004944:	f7fe f9a8 	bl	8002c98 <HAL_GetTick>
 8004948:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800494a:	e014      	b.n	8004976 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800494c:	f7fe f9a4 	bl	8002c98 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b0a      	cmp	r3, #10
 8004958:	d90d      	bls.n	8004976 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2203      	movs	r2, #3
 800496e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e164      	b.n	8004c40 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0e3      	beq.n	800494c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0202 	orr.w	r2, r2, #2
 8004992:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	7c1b      	ldrb	r3, [r3, #16]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d108      	bne.n	80049ae <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049aa:	619a      	str	r2, [r3, #24]
 80049ac:	e007      	b.n	80049be <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7c5b      	ldrb	r3, [r3, #17]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d108      	bne.n	80049d8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049d4:	619a      	str	r2, [r3, #24]
 80049d6:	e007      	b.n	80049e8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049e6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7c9b      	ldrb	r3, [r3, #18]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d108      	bne.n	8004a02 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049fe:	619a      	str	r2, [r3, #24]
 8004a00:	e007      	b.n	8004a12 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a10:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004a36:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0210 	bic.w	r2, r2, #16
 8004a46:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d108      	bne.n	8004a62 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0204 	orr.w	r2, r2, #4
 8004a5e:	619a      	str	r2, [r3, #24]
 8004a60:	e030      	b.n	8004ac4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d02c      	beq.n	8004ac4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d020      	beq.n	8004ab4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a80:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0210 	orr.w	r2, r2, #16
 8004a90:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d114      	bne.n	8004ac4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0220 	orr.w	r2, r2, #32
 8004aa8:	619a      	str	r2, [r3, #24]
 8004aaa:	e00b      	b.n	8004ac4 <HAL_FDCAN_Init+0x234>
 8004aac:	0800d39c 	.word	0x0800d39c
 8004ab0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0220 	orr.w	r2, r2, #32
 8004ac2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ad4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004adc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004aec:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004aee:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af8:	d115      	bne.n	8004b26 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	3b01      	subs	r3, #1
 8004b06:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b08:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b12:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b22:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b24:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4c:	4413      	add	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b5a:	f023 0107 	bic.w	r1, r3, #7
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	3360      	adds	r3, #96	; 0x60
 8004b66:	443b      	add	r3, r7
 8004b68:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d011      	beq.n	8004ba2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b86:	f023 0107 	bic.w	r1, r3, #7
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	3360      	adds	r3, #96	; 0x60
 8004b92:	443b      	add	r3, r7
 8004b94:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d012      	beq.n	8004bd0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004bb2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	3360      	adds	r3, #96	; 0x60
 8004bbe:	443b      	add	r3, r7
 8004bc0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bc4:	011a      	lsls	r2, r3, #4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d012      	beq.n	8004bfe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004be0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	3360      	adds	r3, #96	; 0x60
 8004bec:	443b      	add	r3, r7
 8004bee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <HAL_FDCAN_Init+0x3b8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d107      	bne.n	8004c18 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f022 0203 	bic.w	r2, r2, #3
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f80b 	bl	8004c4c <FDCAN_CalcultateRamBlockAddresses>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004c3c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3760      	adds	r7, #96	; 0x60
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	4000a000 	.word	0x4000a000

08004c4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c58:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c62:	4ba7      	ldr	r3, [pc, #668]	; (8004f00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	0091      	lsls	r1, r2, #2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	041a      	lsls	r2, r3, #16
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	4413      	add	r3, r2
 8004c98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ca2:	4b97      	ldr	r3, [pc, #604]	; (8004f00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	0091      	lsls	r1, r2, #2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	041a      	lsls	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	4413      	add	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004ce4:	4b86      	ldr	r3, [pc, #536]	; (8004f00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	0091      	lsls	r1, r2, #2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cfe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	041a      	lsls	r2, r3, #16
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d2c:	4b74      	ldr	r3, [pc, #464]	; (8004f00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	0091      	lsls	r1, r2, #2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4e:	041a      	lsls	r2, r3, #16
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4413      	add	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004d74:	4b62      	ldr	r3, [pc, #392]	; (8004f00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	0091      	lsls	r1, r2, #2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004da0:	4b57      	ldr	r3, [pc, #348]	; (8004f00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	0091      	lsls	r1, r2, #2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dba:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	041a      	lsls	r2, r3, #16
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004de2:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0091      	lsls	r1, r2, #2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	430b      	orrs	r3, r1
 8004df0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004dfc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e04:	041a      	lsls	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e18:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e20:	061a      	lsls	r2, r3, #24
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e30:	4b34      	ldr	r3, [pc, #208]	; (8004f04 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004e32:	4413      	add	r3, r2
 8004e34:	009a      	lsls	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	441a      	add	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004e7e:	fb01 f303 	mul.w	r3, r1, r3
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	441a      	add	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	441a      	add	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d915      	bls.n	8004f28 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004efc:	e006      	b.n	8004f0c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004efe:	bf00      	nop
 8004f00:	ffff0003 	.word	0xffff0003
 8004f04:	10002b00 	.word	0x10002b00
 8004f08:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f12:	f043 0220 	orr.w	r2, r3, #32
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2203      	movs	r2, #3
 8004f20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e010      	b.n	8004f4a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e005      	b.n	8004f3c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d3f3      	bcc.n	8004f30 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop

08004f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	; 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f66:	4b89      	ldr	r3, [pc, #548]	; (800518c <HAL_GPIO_Init+0x234>)
 8004f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f6a:	e194      	b.n	8005296 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	2101      	movs	r1, #1
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	fa01 f303 	lsl.w	r3, r1, r3
 8004f78:	4013      	ands	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8186 	beq.w	8005290 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d005      	beq.n	8004f9c <HAL_GPIO_Init+0x44>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d130      	bne.n	8004ffe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f003 0201 	and.w	r2, r3, #1
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b03      	cmp	r3, #3
 8005008:	d017      	beq.n	800503a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	2203      	movs	r2, #3
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4013      	ands	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d123      	bne.n	800508e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	08da      	lsrs	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3208      	adds	r2, #8
 800504e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	220f      	movs	r2, #15
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	08da      	lsrs	r2, r3, #3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3208      	adds	r2, #8
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	2203      	movs	r2, #3
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4013      	ands	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 0203 	and.w	r2, r3, #3
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80e0 	beq.w	8005290 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d0:	4b2f      	ldr	r3, [pc, #188]	; (8005190 <HAL_GPIO_Init+0x238>)
 80050d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050d6:	4a2e      	ldr	r2, [pc, #184]	; (8005190 <HAL_GPIO_Init+0x238>)
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050e0:	4b2b      	ldr	r3, [pc, #172]	; (8005190 <HAL_GPIO_Init+0x238>)
 80050e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ee:	4a29      	ldr	r2, [pc, #164]	; (8005194 <HAL_GPIO_Init+0x23c>)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	089b      	lsrs	r3, r3, #2
 80050f4:	3302      	adds	r3, #2
 80050f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	220f      	movs	r2, #15
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4013      	ands	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a20      	ldr	r2, [pc, #128]	; (8005198 <HAL_GPIO_Init+0x240>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d052      	beq.n	80051c0 <HAL_GPIO_Init+0x268>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1f      	ldr	r2, [pc, #124]	; (800519c <HAL_GPIO_Init+0x244>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d031      	beq.n	8005186 <HAL_GPIO_Init+0x22e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <HAL_GPIO_Init+0x248>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d02b      	beq.n	8005182 <HAL_GPIO_Init+0x22a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <HAL_GPIO_Init+0x24c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d025      	beq.n	800517e <HAL_GPIO_Init+0x226>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <HAL_GPIO_Init+0x250>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01f      	beq.n	800517a <HAL_GPIO_Init+0x222>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <HAL_GPIO_Init+0x254>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d019      	beq.n	8005176 <HAL_GPIO_Init+0x21e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <HAL_GPIO_Init+0x258>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_GPIO_Init+0x21a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_GPIO_Init+0x25c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00d      	beq.n	800516e <HAL_GPIO_Init+0x216>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <HAL_GPIO_Init+0x260>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <HAL_GPIO_Init+0x212>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a17      	ldr	r2, [pc, #92]	; (80051bc <HAL_GPIO_Init+0x264>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <HAL_GPIO_Init+0x20e>
 8005162:	2309      	movs	r3, #9
 8005164:	e02d      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005166:	230a      	movs	r3, #10
 8005168:	e02b      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800516a:	2308      	movs	r3, #8
 800516c:	e029      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800516e:	2307      	movs	r3, #7
 8005170:	e027      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005172:	2306      	movs	r3, #6
 8005174:	e025      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005176:	2305      	movs	r3, #5
 8005178:	e023      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800517a:	2304      	movs	r3, #4
 800517c:	e021      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800517e:	2303      	movs	r3, #3
 8005180:	e01f      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005182:	2302      	movs	r3, #2
 8005184:	e01d      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005186:	2301      	movs	r3, #1
 8005188:	e01b      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800518a:	bf00      	nop
 800518c:	58000080 	.word	0x58000080
 8005190:	58024400 	.word	0x58024400
 8005194:	58000400 	.word	0x58000400
 8005198:	58020000 	.word	0x58020000
 800519c:	58020400 	.word	0x58020400
 80051a0:	58020800 	.word	0x58020800
 80051a4:	58020c00 	.word	0x58020c00
 80051a8:	58021000 	.word	0x58021000
 80051ac:	58021400 	.word	0x58021400
 80051b0:	58021800 	.word	0x58021800
 80051b4:	58021c00 	.word	0x58021c00
 80051b8:	58022000 	.word	0x58022000
 80051bc:	58022400 	.word	0x58022400
 80051c0:	2300      	movs	r3, #0
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	f002 0203 	and.w	r2, r2, #3
 80051c8:	0092      	lsls	r2, r2, #2
 80051ca:	4093      	lsls	r3, r2
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051d2:	4938      	ldr	r1, [pc, #224]	; (80052b4 <HAL_GPIO_Init+0x35c>)
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	089b      	lsrs	r3, r3, #2
 80051d8:	3302      	adds	r3, #2
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	43db      	mvns	r3, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4013      	ands	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3301      	adds	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f47f ae63 	bne.w	8004f6c <HAL_GPIO_Init+0x14>
  }
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	3724      	adds	r7, #36	; 0x24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	58000400 	.word	0x58000400

080052b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	887b      	ldrh	r3, [r7, #2]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
 80052d4:	e001      	b.n	80052da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
 80052f4:	4613      	mov	r3, r2
 80052f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052f8:	787b      	ldrb	r3, [r7, #1]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052fe:	887a      	ldrh	r2, [r7, #2]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005304:	e003      	b.n	800530e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005306:	887b      	ldrh	r3, [r7, #2]
 8005308:	041a      	lsls	r2, r3, #16
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	619a      	str	r2, [r3, #24]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800532c:	887a      	ldrh	r2, [r7, #2]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4013      	ands	r3, r2
 8005332:	041a      	lsls	r2, r3, #16
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	43d9      	mvns	r1, r3
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	400b      	ands	r3, r1
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	619a      	str	r2, [r3, #24]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e07f      	b.n	8005462 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc fd86 	bl	8001e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2224      	movs	r2, #36	; 0x24
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	e006      	b.n	80053d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d104      	bne.n	80053ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6859      	ldr	r1, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_I2C_Init+0x11c>)
 80053f6:	430b      	orrs	r3, r1
 80053f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005408:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69d9      	ldr	r1, [r3, #28]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1a      	ldr	r2, [r3, #32]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	02008000 	.word	0x02008000

08005470 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	461a      	mov	r2, r3
 800547c:	460b      	mov	r3, r1
 800547e:	817b      	strh	r3, [r7, #10]
 8005480:	4613      	mov	r3, r2
 8005482:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b20      	cmp	r3, #32
 800548e:	f040 80da 	bne.w	8005646 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_I2C_Master_Transmit+0x30>
 800549c:	2302      	movs	r3, #2
 800549e:	e0d3      	b.n	8005648 <HAL_I2C_Master_Transmit+0x1d8>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054a8:	f7fd fbf6 	bl	8002c98 <HAL_GetTick>
 80054ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	2319      	movs	r3, #25
 80054b4:	2201      	movs	r2, #1
 80054b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 faee 	bl	8005a9c <I2C_WaitOnFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e0be      	b.n	8005648 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2221      	movs	r2, #33	; 0x21
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2210      	movs	r2, #16
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	893a      	ldrh	r2, [r7, #8]
 80054ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2bff      	cmp	r3, #255	; 0xff
 80054fa:	d90e      	bls.n	800551a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	22ff      	movs	r2, #255	; 0xff
 8005500:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005506:	b2da      	uxtb	r2, r3
 8005508:	8979      	ldrh	r1, [r7, #10]
 800550a:	4b51      	ldr	r3, [pc, #324]	; (8005650 <HAL_I2C_Master_Transmit+0x1e0>)
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fcfe 	bl	8005f14 <I2C_TransferConfig>
 8005518:	e06c      	b.n	80055f4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	b2da      	uxtb	r2, r3
 800552a:	8979      	ldrh	r1, [r7, #10]
 800552c:	4b48      	ldr	r3, [pc, #288]	; (8005650 <HAL_I2C_Master_Transmit+0x1e0>)
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fced 	bl	8005f14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800553a:	e05b      	b.n	80055f4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	6a39      	ldr	r1, [r7, #32]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fafa 	bl	8005b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e07b      	b.n	8005648 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d034      	beq.n	80055f4 <HAL_I2C_Master_Transmit+0x184>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558e:	2b00      	cmp	r3, #0
 8005590:	d130      	bne.n	80055f4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	2200      	movs	r2, #0
 800559a:	2180      	movs	r1, #128	; 0x80
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fa7d 	bl	8005a9c <I2C_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e04d      	b.n	8005648 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2bff      	cmp	r3, #255	; 0xff
 80055b4:	d90e      	bls.n	80055d4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	22ff      	movs	r2, #255	; 0xff
 80055ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	8979      	ldrh	r1, [r7, #10]
 80055c4:	2300      	movs	r3, #0
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fca1 	bl	8005f14 <I2C_TransferConfig>
 80055d2:	e00f      	b.n	80055f4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	8979      	ldrh	r1, [r7, #10]
 80055e6:	2300      	movs	r3, #0
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fc90 	bl	8005f14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d19e      	bne.n	800553c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	6a39      	ldr	r1, [r7, #32]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fae0 	bl	8005bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e01a      	b.n	8005648 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2220      	movs	r2, #32
 8005618:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6859      	ldr	r1, [r3, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_I2C_Master_Transmit+0x1e4>)
 8005626:	400b      	ands	r3, r1
 8005628:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005646:	2302      	movs	r3, #2
  }
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	80002000 	.word	0x80002000
 8005654:	fe00e800 	.word	0xfe00e800

08005658 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	461a      	mov	r2, r3
 8005664:	460b      	mov	r3, r1
 8005666:	817b      	strh	r3, [r7, #10]
 8005668:	4613      	mov	r3, r2
 800566a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b20      	cmp	r3, #32
 8005676:	f040 80db 	bne.w	8005830 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_I2C_Master_Receive+0x30>
 8005684:	2302      	movs	r3, #2
 8005686:	e0d4      	b.n	8005832 <HAL_I2C_Master_Receive+0x1da>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005690:	f7fd fb02 	bl	8002c98 <HAL_GetTick>
 8005694:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2319      	movs	r3, #25
 800569c:	2201      	movs	r2, #1
 800569e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f9fa 	bl	8005a9c <I2C_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e0bf      	b.n	8005832 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2222      	movs	r2, #34	; 0x22
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2210      	movs	r2, #16
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	893a      	ldrh	r2, [r7, #8]
 80056d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2bff      	cmp	r3, #255	; 0xff
 80056e2:	d90e      	bls.n	8005702 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	22ff      	movs	r2, #255	; 0xff
 80056e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	8979      	ldrh	r1, [r7, #10]
 80056f2:	4b52      	ldr	r3, [pc, #328]	; (800583c <HAL_I2C_Master_Receive+0x1e4>)
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fc0a 	bl	8005f14 <I2C_TransferConfig>
 8005700:	e06d      	b.n	80057de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005710:	b2da      	uxtb	r2, r3
 8005712:	8979      	ldrh	r1, [r7, #10]
 8005714:	4b49      	ldr	r3, [pc, #292]	; (800583c <HAL_I2C_Master_Receive+0x1e4>)
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fbf9 	bl	8005f14 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005722:	e05c      	b.n	80057de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	6a39      	ldr	r1, [r7, #32]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 fa91 	bl	8005c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e07c      	b.n	8005832 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d034      	beq.n	80057de <HAL_I2C_Master_Receive+0x186>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005778:	2b00      	cmp	r3, #0
 800577a:	d130      	bne.n	80057de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	2200      	movs	r2, #0
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f988 	bl	8005a9c <I2C_WaitOnFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e04d      	b.n	8005832 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579a:	b29b      	uxth	r3, r3
 800579c:	2bff      	cmp	r3, #255	; 0xff
 800579e:	d90e      	bls.n	80057be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	22ff      	movs	r2, #255	; 0xff
 80057a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	8979      	ldrh	r1, [r7, #10]
 80057ae:	2300      	movs	r3, #0
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fbac 	bl	8005f14 <I2C_TransferConfig>
 80057bc:	e00f      	b.n	80057de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	8979      	ldrh	r1, [r7, #10]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fb9b 	bl	8005f14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d19d      	bne.n	8005724 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	6a39      	ldr	r1, [r7, #32]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f9eb 	bl	8005bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e01a      	b.n	8005832 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2220      	movs	r2, #32
 8005802:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <HAL_I2C_Master_Receive+0x1e8>)
 8005810:	400b      	ands	r3, r1
 8005812:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	e000      	b.n	8005832 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005830:	2302      	movs	r3, #2
  }
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	80002400 	.word	0x80002400
 8005840:	fe00e800 	.word	0xfe00e800

08005844 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	; 0x28
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	460b      	mov	r3, r1
 8005852:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b20      	cmp	r3, #32
 8005862:	f040 80ef 	bne.w	8005a44 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005874:	d101      	bne.n	800587a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005876:	2302      	movs	r3, #2
 8005878:	e0e5      	b.n	8005a46 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_I2C_IsDeviceReady+0x44>
 8005884:	2302      	movs	r3, #2
 8005886:	e0de      	b.n	8005a46 <HAL_I2C_IsDeviceReady+0x202>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2224      	movs	r2, #36	; 0x24
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d105      	bne.n	80058b2 <HAL_I2C_IsDeviceReady+0x6e>
 80058a6:	897b      	ldrh	r3, [r7, #10]
 80058a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058ac:	4b68      	ldr	r3, [pc, #416]	; (8005a50 <HAL_I2C_IsDeviceReady+0x20c>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	e004      	b.n	80058bc <HAL_I2C_IsDeviceReady+0x78>
 80058b2:	897b      	ldrh	r3, [r7, #10]
 80058b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80058c2:	f7fd f9e9 	bl	8002c98 <HAL_GetTick>
 80058c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80058f4:	e034      	b.n	8005960 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d01a      	beq.n	8005934 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058fe:	f7fd f9cb 	bl	8002c98 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d302      	bcc.n	8005914 <HAL_I2C_IsDeviceReady+0xd0>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10f      	bne.n	8005934 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e088      	b.n	8005a46 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b20      	cmp	r3, #32
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b10      	cmp	r3, #16
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005960:	7ffb      	ldrb	r3, [r7, #31]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <HAL_I2C_IsDeviceReady+0x128>
 8005966:	7fbb      	ldrb	r3, [r7, #30]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0c4      	beq.n	80058f6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b10      	cmp	r3, #16
 8005978:	d01a      	beq.n	80059b0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2200      	movs	r2, #0
 8005982:	2120      	movs	r1, #32
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f889 	bl	8005a9c <I2C_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e058      	b.n	8005a46 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2220      	movs	r2, #32
 800599a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e04a      	b.n	8005a46 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	2120      	movs	r1, #32
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f86e 	bl	8005a9c <I2C_WaitOnFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e03d      	b.n	8005a46 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2210      	movs	r2, #16
 80059d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2220      	movs	r2, #32
 80059d8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d118      	bne.n	8005a14 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2200      	movs	r2, #0
 80059fa:	2120      	movs	r1, #32
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f84d 	bl	8005a9c <I2C_WaitOnFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e01c      	b.n	8005a46 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2220      	movs	r2, #32
 8005a12:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	3301      	adds	r3, #1
 8005a18:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	f63f af3d 	bhi.w	800589e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	02002000 	.word	0x02002000

08005a54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d103      	bne.n	8005a72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d007      	beq.n	8005a90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	619a      	str	r2, [r3, #24]
  }
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aac:	e031      	b.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d02d      	beq.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab6:	f7fd f8ef 	bl	8002c98 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d302      	bcc.n	8005acc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d122      	bne.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d113      	bne.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aee:	f043 0220 	orr.w	r2, r3, #32
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e00f      	b.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d0be      	beq.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b46:	e033      	b.n	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f901 	bl	8005d54 <I2C_IsErrorOccurred>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e031      	b.n	8005bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d025      	beq.n	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b64:	f7fd f898 	bl	8002c98 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d302      	bcc.n	8005b7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11a      	bne.n	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d013      	beq.n	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e007      	b.n	8005bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d1c4      	bne.n	8005b48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bd4:	e02f      	b.n	8005c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f8ba 	bl	8005d54 <I2C_IsErrorOccurred>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e02d      	b.n	8005c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bea:	f7fd f855 	bl	8002c98 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d11a      	bne.n	8005c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d013      	beq.n	8005c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	f043 0220 	orr.w	r2, r3, #32
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e007      	b.n	8005c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d1c8      	bne.n	8005bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c5c:	e06b      	b.n	8005d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f876 	bl	8005d54 <I2C_IsErrorOccurred>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e069      	b.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d138      	bne.n	8005cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d105      	bne.n	8005c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e055      	b.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d107      	bne.n	8005cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2210      	movs	r2, #16
 8005cae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
 8005cb6:	e002      	b.n	8005cbe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6859      	ldr	r1, [r3, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4b1f      	ldr	r3, [pc, #124]	; (8005d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005cd2:	400b      	ands	r3, r1
 8005cd4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e029      	b.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf2:	f7fc ffd1 	bl	8002c98 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d116      	bne.n	8005d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d00f      	beq.n	8005d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e007      	b.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d18c      	bne.n	8005c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	fe00e800 	.word	0xfe00e800

08005d54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d068      	beq.n	8005e52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2210      	movs	r2, #16
 8005d86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d88:	e049      	b.n	8005e1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d045      	beq.n	8005e1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d92:	f7fc ff81 	bl	8002c98 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d302      	bcc.n	8005da8 <I2C_IsErrorOccurred+0x54>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d13a      	bne.n	8005e1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dca:	d121      	bne.n	8005e10 <I2C_IsErrorOccurred+0xbc>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dd2:	d01d      	beq.n	8005e10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005dd4:	7cfb      	ldrb	r3, [r7, #19]
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d01a      	beq.n	8005e10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005de8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005dea:	f7fc ff55 	bl	8002c98 <HAL_GetTick>
 8005dee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005df0:	e00e      	b.n	8005e10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005df2:	f7fc ff51 	bl	8002c98 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b19      	cmp	r3, #25
 8005dfe:	d907      	bls.n	8005e10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	f043 0320 	orr.w	r3, r3, #32
 8005e06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005e0e:	e006      	b.n	8005e1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d1e9      	bne.n	8005df2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d003      	beq.n	8005e34 <I2C_IsErrorOccurred+0xe0>
 8005e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0aa      	beq.n	8005d8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d103      	bne.n	8005e44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2220      	movs	r2, #32
 8005e42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	f043 0308 	orr.w	r3, r3, #8
 8005e8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01c      	beq.n	8005f02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7ff fdc3 	bl	8005a54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6859      	ldr	r1, [r3, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <I2C_IsErrorOccurred+0x1bc>)
 8005eda:	400b      	ands	r3, r1
 8005edc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3728      	adds	r7, #40	; 0x28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	fe00e800 	.word	0xfe00e800

08005f14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	607b      	str	r3, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	817b      	strh	r3, [r7, #10]
 8005f22:	4613      	mov	r3, r2
 8005f24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f26:	897b      	ldrh	r3, [r7, #10]
 8005f28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f2c:	7a7b      	ldrb	r3, [r7, #9]
 8005f2e:	041b      	lsls	r3, r3, #16
 8005f30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	0d5b      	lsrs	r3, r3, #21
 8005f4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f52:	4b08      	ldr	r3, [pc, #32]	; (8005f74 <I2C_TransferConfig+0x60>)
 8005f54:	430b      	orrs	r3, r1
 8005f56:	43db      	mvns	r3, r3
 8005f58:	ea02 0103 	and.w	r1, r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	03ff63ff 	.word	0x03ff63ff

08005f78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d138      	bne.n	8006000 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e032      	b.n	8006002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2224      	movs	r2, #36	; 0x24
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6819      	ldr	r1, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e000      	b.n	8006002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006000:	2302      	movs	r3, #2
  }
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b20      	cmp	r3, #32
 8006022:	d139      	bne.n	8006098 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800602e:	2302      	movs	r3, #2
 8006030:	e033      	b.n	800609a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2224      	movs	r2, #36	; 0x24
 800603e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006060:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	e000      	b.n	800609a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006098:	2302      	movs	r3, #2
  }
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e0bf      	b.n	800623a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fb ff44 	bl	8001f5c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80060ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6999      	ldr	r1, [r3, #24]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006100:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6899      	ldr	r1, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b4a      	ldr	r3, [pc, #296]	; (8006244 <HAL_LTDC_Init+0x19c>)
 800611c:	400b      	ands	r3, r1
 800611e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6899      	ldr	r1, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68d9      	ldr	r1, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b3e      	ldr	r3, [pc, #248]	; (8006244 <HAL_LTDC_Init+0x19c>)
 800614a:	400b      	ands	r3, r1
 800614c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68d9      	ldr	r1, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6919      	ldr	r1, [r3, #16]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b33      	ldr	r3, [pc, #204]	; (8006244 <HAL_LTDC_Init+0x19c>)
 8006178:	400b      	ands	r3, r1
 800617a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	041b      	lsls	r3, r3, #16
 8006182:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6919      	ldr	r1, [r3, #16]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6959      	ldr	r1, [r3, #20]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b27      	ldr	r3, [pc, #156]	; (8006244 <HAL_LTDC_Init+0x19c>)
 80061a6:	400b      	ands	r3, r1
 80061a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	041b      	lsls	r3, r3, #16
 80061b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6959      	ldr	r1, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061ce:	021b      	lsls	r3, r3, #8
 80061d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061d8:	041b      	lsls	r3, r3, #16
 80061da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0206 	orr.w	r2, r2, #6
 8006216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	f000f800 	.word	0xf000f800

08006248 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006248:	b5b0      	push	{r4, r5, r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_LTDC_ConfigLayer+0x1a>
 800625e:	2302      	movs	r3, #2
 8006260:	e02c      	b.n	80062bc <HAL_LTDC_ConfigLayer+0x74>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2134      	movs	r1, #52	; 0x34
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	4413      	add	r3, r2
 800627e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4614      	mov	r4, r2
 8006286:	461d      	mov	r5, r3
 8006288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800628a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800628c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800628e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f811 	bl	80062c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bdb0      	pop	{r4, r5, r7, pc}

080062c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b089      	sub	sp, #36	; 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e0:	4413      	add	r3, r2
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	01db      	lsls	r3, r3, #7
 80062f0:	4413      	add	r3, r2
 80062f2:	3384      	adds	r3, #132	; 0x84
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	4611      	mov	r1, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	01d2      	lsls	r2, r2, #7
 8006300:	440a      	add	r2, r1
 8006302:	3284      	adds	r2, #132	; 0x84
 8006304:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006308:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800631a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800631c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4619      	mov	r1, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	01db      	lsls	r3, r3, #7
 8006328:	440b      	add	r3, r1
 800632a:	3384      	adds	r3, #132	; 0x84
 800632c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006332:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006342:	4413      	add	r3, r2
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	01db      	lsls	r3, r3, #7
 8006352:	4413      	add	r3, r2
 8006354:	3384      	adds	r3, #132	; 0x84
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	4611      	mov	r1, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	01d2      	lsls	r2, r2, #7
 8006362:	440a      	add	r2, r1
 8006364:	3284      	adds	r2, #132	; 0x84
 8006366:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800636a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800637a:	4413      	add	r3, r2
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4619      	mov	r1, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	01db      	lsls	r3, r3, #7
 8006388:	440b      	add	r3, r1
 800638a:	3384      	adds	r3, #132	; 0x84
 800638c:	4619      	mov	r1, r3
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4313      	orrs	r3, r2
 8006392:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	01db      	lsls	r3, r3, #7
 800639e:	4413      	add	r3, r2
 80063a0:	3384      	adds	r3, #132	; 0x84
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	4611      	mov	r1, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	01d2      	lsls	r2, r2, #7
 80063ae:	440a      	add	r2, r1
 80063b0:	3284      	adds	r2, #132	; 0x84
 80063b2:	f023 0307 	bic.w	r3, r3, #7
 80063b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	01db      	lsls	r3, r3, #7
 80063c2:	4413      	add	r3, r2
 80063c4:	3384      	adds	r3, #132	; 0x84
 80063c6:	461a      	mov	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	061b      	lsls	r3, r3, #24
 80063e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	4413      	add	r3, r2
 80063f6:	3384      	adds	r3, #132	; 0x84
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	01db      	lsls	r3, r3, #7
 8006404:	4413      	add	r3, r2
 8006406:	3384      	adds	r3, #132	; 0x84
 8006408:	461a      	mov	r2, r3
 800640a:	2300      	movs	r3, #0
 800640c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006414:	461a      	mov	r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	431a      	orrs	r2, r3
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	431a      	orrs	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4619      	mov	r1, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	01db      	lsls	r3, r3, #7
 8006428:	440b      	add	r3, r1
 800642a:	3384      	adds	r3, #132	; 0x84
 800642c:	4619      	mov	r1, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	01db      	lsls	r3, r3, #7
 800643e:	4413      	add	r3, r2
 8006440:	3384      	adds	r3, #132	; 0x84
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	4611      	mov	r1, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	01d2      	lsls	r2, r2, #7
 800644e:	440a      	add	r2, r1
 8006450:	3284      	adds	r2, #132	; 0x84
 8006452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006456:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	01db      	lsls	r3, r3, #7
 8006462:	4413      	add	r3, r2
 8006464:	3384      	adds	r3, #132	; 0x84
 8006466:	461a      	mov	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	4413      	add	r3, r2
 800647a:	3384      	adds	r3, #132	; 0x84
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	01db      	lsls	r3, r3, #7
 8006488:	440b      	add	r3, r1
 800648a:	3384      	adds	r3, #132	; 0x84
 800648c:	4619      	mov	r1, r3
 800648e:	4b58      	ldr	r3, [pc, #352]	; (80065f0 <LTDC_SetConfig+0x32c>)
 8006490:	4013      	ands	r3, r2
 8006492:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	69da      	ldr	r2, [r3, #28]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	68f9      	ldr	r1, [r7, #12]
 800649e:	6809      	ldr	r1, [r1, #0]
 80064a0:	4608      	mov	r0, r1
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	01c9      	lsls	r1, r1, #7
 80064a6:	4401      	add	r1, r0
 80064a8:	3184      	adds	r1, #132	; 0x84
 80064aa:	4313      	orrs	r3, r2
 80064ac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	4413      	add	r3, r2
 80064ba:	3384      	adds	r3, #132	; 0x84
 80064bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	01db      	lsls	r3, r3, #7
 80064c8:	4413      	add	r3, r2
 80064ca:	3384      	adds	r3, #132	; 0x84
 80064cc:	461a      	mov	r2, r3
 80064ce:	2300      	movs	r3, #0
 80064d0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	01db      	lsls	r3, r3, #7
 80064dc:	4413      	add	r3, r2
 80064de:	3384      	adds	r3, #132	; 0x84
 80064e0:	461a      	mov	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80064f0:	2304      	movs	r3, #4
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e01b      	b.n	800652e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d102      	bne.n	8006504 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80064fe:	2303      	movs	r3, #3
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	e014      	b.n	800652e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b04      	cmp	r3, #4
 800650a:	d00b      	beq.n	8006524 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006510:	2b02      	cmp	r3, #2
 8006512:	d007      	beq.n	8006524 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006518:	2b03      	cmp	r3, #3
 800651a:	d003      	beq.n	8006524 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006520:	2b07      	cmp	r3, #7
 8006522:	d102      	bne.n	800652a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006524:	2302      	movs	r3, #2
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e001      	b.n	800652e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800652a:	2301      	movs	r3, #1
 800652c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	01db      	lsls	r3, r3, #7
 8006538:	4413      	add	r3, r2
 800653a:	3384      	adds	r3, #132	; 0x84
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	4611      	mov	r1, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	01d2      	lsls	r2, r2, #7
 8006548:	440a      	add	r2, r1
 800654a:	3284      	adds	r2, #132	; 0x84
 800654c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006550:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	fb02 f303 	mul.w	r3, r2, r3
 800655c:	041a      	lsls	r2, r3, #16
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6859      	ldr	r1, [r3, #4]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	1acb      	subs	r3, r1, r3
 8006568:	69f9      	ldr	r1, [r7, #28]
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	3307      	adds	r3, #7
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	6809      	ldr	r1, [r1, #0]
 8006574:	4608      	mov	r0, r1
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	01c9      	lsls	r1, r1, #7
 800657a:	4401      	add	r1, r0
 800657c:	3184      	adds	r1, #132	; 0x84
 800657e:	4313      	orrs	r3, r2
 8006580:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	01db      	lsls	r3, r3, #7
 800658c:	4413      	add	r3, r2
 800658e:	3384      	adds	r3, #132	; 0x84
 8006590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4619      	mov	r1, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	01db      	lsls	r3, r3, #7
 800659c:	440b      	add	r3, r1
 800659e:	3384      	adds	r3, #132	; 0x84
 80065a0:	4619      	mov	r1, r3
 80065a2:	4b14      	ldr	r3, [pc, #80]	; (80065f4 <LTDC_SetConfig+0x330>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	01db      	lsls	r3, r3, #7
 80065b2:	4413      	add	r3, r2
 80065b4:	3384      	adds	r3, #132	; 0x84
 80065b6:	461a      	mov	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	01db      	lsls	r3, r3, #7
 80065c8:	4413      	add	r3, r2
 80065ca:	3384      	adds	r3, #132	; 0x84
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	4611      	mov	r1, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	01d2      	lsls	r2, r2, #7
 80065d8:	440a      	add	r2, r1
 80065da:	3284      	adds	r2, #132	; 0x84
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	6013      	str	r3, [r2, #0]
}
 80065e2:	bf00      	nop
 80065e4:	3724      	adds	r7, #36	; 0x24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	fffff8f8 	.word	0xfffff8f8
 80065f4:	fffff800 	.word	0xfffff800

080065f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80065f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fa:	b08f      	sub	sp, #60	; 0x3c
 80065fc:	af0a      	add	r7, sp, #40	; 0x28
 80065fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e116      	b.n	8006838 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fb ffb9 	bl	800259c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2203      	movs	r2, #3
 800662e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f005 ff15 	bl	800c478 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	687e      	ldr	r6, [r7, #4]
 8006656:	466d      	mov	r5, sp
 8006658:	f106 0410 	add.w	r4, r6, #16
 800665c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800665e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006668:	e885 0003 	stmia.w	r5, {r0, r1}
 800666c:	1d33      	adds	r3, r6, #4
 800666e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006670:	6838      	ldr	r0, [r7, #0]
 8006672:	f005 fe93 	bl	800c39c <USB_CoreInit>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e0d7      	b.n	8006838 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f005 ff03 	bl	800c49a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006694:	2300      	movs	r3, #0
 8006696:	73fb      	strb	r3, [r7, #15]
 8006698:	e04a      	b.n	8006730 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800669a:	7bfa      	ldrb	r2, [r7, #15]
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	333d      	adds	r3, #61	; 0x3d
 80066aa:	2201      	movs	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	333c      	adds	r3, #60	; 0x3c
 80066be:	7bfa      	ldrb	r2, [r7, #15]
 80066c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80066c2:	7bfa      	ldrb	r2, [r7, #15]
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	b298      	uxth	r0, r3
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	3356      	adds	r3, #86	; 0x56
 80066d6:	4602      	mov	r2, r0
 80066d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066da:	7bfa      	ldrb	r2, [r7, #15]
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	3340      	adds	r3, #64	; 0x40
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80066ee:	7bfa      	ldrb	r2, [r7, #15]
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	3344      	adds	r3, #68	; 0x44
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006702:	7bfa      	ldrb	r2, [r7, #15]
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	4613      	mov	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	3348      	adds	r3, #72	; 0x48
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006716:	7bfa      	ldrb	r2, [r7, #15]
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	334c      	adds	r3, #76	; 0x4c
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	3301      	adds	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
 8006730:	7bfa      	ldrb	r2, [r7, #15]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	429a      	cmp	r2, r3
 8006738:	d3af      	bcc.n	800669a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]
 800673e:	e044      	b.n	80067ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006740:	7bfa      	ldrb	r2, [r7, #15]
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	4613      	mov	r3, r2
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006756:	7bfa      	ldrb	r2, [r7, #15]
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006768:	7bfa      	ldrb	r2, [r7, #15]
 800676a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800676c:	7bfa      	ldrb	r2, [r7, #15]
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006782:	7bfa      	ldrb	r2, [r7, #15]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006798:	7bfa      	ldrb	r2, [r7, #15]
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4613      	mov	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80067ae:	7bfa      	ldrb	r2, [r7, #15]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	3301      	adds	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
 80067ca:	7bfa      	ldrb	r2, [r7, #15]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d3b5      	bcc.n	8006740 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	603b      	str	r3, [r7, #0]
 80067da:	687e      	ldr	r6, [r7, #4]
 80067dc:	466d      	mov	r5, sp
 80067de:	f106 0410 	add.w	r4, r6, #16
 80067e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80067f2:	1d33      	adds	r3, r6, #4
 80067f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067f6:	6838      	ldr	r0, [r7, #0]
 80067f8:	f005 fe9c 	bl	800c534 <USB_DevInit>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e014      	b.n	8006838 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	2b01      	cmp	r3, #1
 8006824:	d102      	bne.n	800682c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f80a 	bl	8006840 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4618      	mov	r0, r3
 8006832:	f006 f85a 	bl	800c8ea <USB_DevDisconnect>

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006840 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800686e:	4b05      	ldr	r3, [pc, #20]	; (8006884 <HAL_PCDEx_ActivateLPM+0x44>)
 8006870:	4313      	orrs	r3, r2
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	10000003 	.word	0x10000003

08006888 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006890:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <HAL_PWREx_ConfigSupply+0x70>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b04      	cmp	r3, #4
 800689a:	d00a      	beq.n	80068b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800689c:	4b16      	ldr	r3, [pc, #88]	; (80068f8 <HAL_PWREx_ConfigSupply+0x70>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d001      	beq.n	80068ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e01f      	b.n	80068ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e01d      	b.n	80068ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <HAL_PWREx_ConfigSupply+0x70>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f023 0207 	bic.w	r2, r3, #7
 80068ba:	490f      	ldr	r1, [pc, #60]	; (80068f8 <HAL_PWREx_ConfigSupply+0x70>)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068c2:	f7fc f9e9 	bl	8002c98 <HAL_GetTick>
 80068c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068c8:	e009      	b.n	80068de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068ca:	f7fc f9e5 	bl	8002c98 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d8:	d901      	bls.n	80068de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e007      	b.n	80068ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068de:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <HAL_PWREx_ConfigSupply+0x70>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ea:	d1ee      	bne.n	80068ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	58024800 	.word	0x58024800

080068fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	4a04      	ldr	r2, [pc, #16]	; (8006918 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800690a:	60d3      	str	r3, [r2, #12]
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	58024800 	.word	0x58024800

0800691c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af02      	add	r7, sp, #8
 8006922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006924:	f7fc f9b8 	bl	8002c98 <HAL_GetTick>
 8006928:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e05f      	b.n	80069f4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fb fbf9 	bl	8002138 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006946:	f241 3188 	movw	r1, #5000	; 0x1388
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f85a 	bl	8006a04 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	3b01      	subs	r3, #1
 8006960:	021a      	lsls	r2, r3, #8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	2120      	movs	r1, #32
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f852 	bl	8006a20 <QSPI_WaitFlagStateUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006980:	7afb      	ldrb	r3, [r7, #11]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d135      	bne.n	80069f2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <HAL_QSPI_Init+0xe0>)
 800698e:	4013      	ands	r3, r2
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6852      	ldr	r2, [r2, #4]
 8006994:	0611      	lsls	r1, r2, #24
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	68d2      	ldr	r2, [r2, #12]
 800699a:	4311      	orrs	r1, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	69d2      	ldr	r2, [r2, #28]
 80069a0:	4311      	orrs	r1, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6a12      	ldr	r2, [r2, #32]
 80069a6:	4311      	orrs	r1, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <HAL_QSPI_Init+0xe4>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6912      	ldr	r2, [r2, #16]
 80069be:	0411      	lsls	r1, r2, #16
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6952      	ldr	r2, [r2, #20]
 80069c4:	4311      	orrs	r1, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6992      	ldr	r2, [r2, #24]
 80069ca:	4311      	orrs	r1, r2
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80069f2:	7afb      	ldrb	r3, [r7, #11]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	00ffff2f 	.word	0x00ffff2f
 8006a00:	ffe0f8fe 	.word	0xffe0f8fe

08006a04 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006a30:	e01a      	b.n	8006a68 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d016      	beq.n	8006a68 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fc f92d 	bl	8002c98 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10b      	bne.n	8006a68 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2204      	movs	r2, #4
 8006a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5c:	f043 0201 	orr.w	r2, r3, #1
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e00e      	b.n	8006a86 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	bf14      	ite	ne
 8006a76:	2301      	movne	r3, #1
 8006a78:	2300      	moveq	r3, #0
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d1d6      	bne.n	8006a32 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08c      	sub	sp, #48	; 0x30
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d102      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f000 bc48 	b.w	8007334 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8088 	beq.w	8006bc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab2:	4b99      	ldr	r3, [pc, #612]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006abc:	4b96      	ldr	r3, [pc, #600]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d007      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x48>
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	2b18      	cmp	r3, #24
 8006acc:	d111      	bne.n	8006af2 <HAL_RCC_OscConfig+0x62>
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d10c      	bne.n	8006af2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad8:	4b8f      	ldr	r3, [pc, #572]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d06d      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x130>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d169      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f000 bc21 	b.w	8007334 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afa:	d106      	bne.n	8006b0a <HAL_RCC_OscConfig+0x7a>
 8006afc:	4b86      	ldr	r3, [pc, #536]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a85      	ldr	r2, [pc, #532]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	e02e      	b.n	8006b68 <HAL_RCC_OscConfig+0xd8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCC_OscConfig+0x9c>
 8006b12:	4b81      	ldr	r3, [pc, #516]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a80      	ldr	r2, [pc, #512]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	4b7e      	ldr	r3, [pc, #504]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a7d      	ldr	r2, [pc, #500]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e01d      	b.n	8006b68 <HAL_RCC_OscConfig+0xd8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b34:	d10c      	bne.n	8006b50 <HAL_RCC_OscConfig+0xc0>
 8006b36:	4b78      	ldr	r3, [pc, #480]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a77      	ldr	r2, [pc, #476]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	4b75      	ldr	r3, [pc, #468]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a74      	ldr	r2, [pc, #464]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	e00b      	b.n	8006b68 <HAL_RCC_OscConfig+0xd8>
 8006b50:	4b71      	ldr	r3, [pc, #452]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a70      	ldr	r2, [pc, #448]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	4b6e      	ldr	r3, [pc, #440]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a6d      	ldr	r2, [pc, #436]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d013      	beq.n	8006b98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fc f892 	bl	8002c98 <HAL_GetTick>
 8006b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b78:	f7fc f88e 	bl	8002c98 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b64      	cmp	r3, #100	; 0x64
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e3d4      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b8a:	4b63      	ldr	r3, [pc, #396]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0xe8>
 8006b96:	e014      	b.n	8006bc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fc f87e 	bl	8002c98 <HAL_GetTick>
 8006b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ba0:	f7fc f87a 	bl	8002c98 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b64      	cmp	r3, #100	; 0x64
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e3c0      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bb2:	4b59      	ldr	r3, [pc, #356]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x110>
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 80ca 	beq.w	8006d64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd0:	4b51      	ldr	r3, [pc, #324]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bda:	4b4f      	ldr	r3, [pc, #316]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x166>
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	2b18      	cmp	r3, #24
 8006bea:	d156      	bne.n	8006c9a <HAL_RCC_OscConfig+0x20a>
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d151      	bne.n	8006c9a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bf6:	4b48      	ldr	r3, [pc, #288]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_RCC_OscConfig+0x17e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e392      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c0e:	4b42      	ldr	r3, [pc, #264]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f023 0219 	bic.w	r2, r3, #25
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	493f      	ldr	r1, [pc, #252]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c20:	f7fc f83a 	bl	8002c98 <HAL_GetTick>
 8006c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c28:	f7fc f836 	bl	8002c98 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e37c      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c3a:	4b37      	ldr	r3, [pc, #220]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f0      	beq.n	8006c28 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c46:	f7fc f857 	bl	8002cf8 <HAL_GetREVID>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d817      	bhi.n	8006c84 <HAL_RCC_OscConfig+0x1f4>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b40      	cmp	r3, #64	; 0x40
 8006c5a:	d108      	bne.n	8006c6e <HAL_RCC_OscConfig+0x1de>
 8006c5c:	4b2e      	ldr	r3, [pc, #184]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c64:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c6c:	e07a      	b.n	8006d64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6e:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	031b      	lsls	r3, r3, #12
 8006c7c:	4926      	ldr	r1, [pc, #152]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c82:	e06f      	b.n	8006d64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c84:	4b24      	ldr	r3, [pc, #144]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	061b      	lsls	r3, r3, #24
 8006c92:	4921      	ldr	r1, [pc, #132]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c98:	e064      	b.n	8006d64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d047      	beq.n	8006d32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ca2:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f023 0219 	bic.w	r2, r3, #25
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	491a      	ldr	r1, [pc, #104]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fb fff0 	bl	8002c98 <HAL_GetTick>
 8006cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cbc:	f7fb ffec 	bl	8002c98 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e332      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cda:	f7fc f80d 	bl	8002cf8 <HAL_GetREVID>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d819      	bhi.n	8006d1c <HAL_RCC_OscConfig+0x28c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d108      	bne.n	8006d02 <HAL_RCC_OscConfig+0x272>
 8006cf0:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006cf8:	4a07      	ldr	r2, [pc, #28]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfe:	6053      	str	r3, [r2, #4]
 8006d00:	e030      	b.n	8006d64 <HAL_RCC_OscConfig+0x2d4>
 8006d02:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	031b      	lsls	r3, r3, #12
 8006d10:	4901      	ldr	r1, [pc, #4]	; (8006d18 <HAL_RCC_OscConfig+0x288>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	604b      	str	r3, [r1, #4]
 8006d16:	e025      	b.n	8006d64 <HAL_RCC_OscConfig+0x2d4>
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	4b9a      	ldr	r3, [pc, #616]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	061b      	lsls	r3, r3, #24
 8006d2a:	4997      	ldr	r1, [pc, #604]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	604b      	str	r3, [r1, #4]
 8006d30:	e018      	b.n	8006d64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d32:	4b95      	ldr	r3, [pc, #596]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a94      	ldr	r2, [pc, #592]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3e:	f7fb ffab 	bl	8002c98 <HAL_GetTick>
 8006d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d46:	f7fb ffa7 	bl	8002c98 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e2ed      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d58:	4b8b      	ldr	r3, [pc, #556]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f0      	bne.n	8006d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80a9 	beq.w	8006ec4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d72:	4b85      	ldr	r3, [pc, #532]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d7c:	4b82      	ldr	r3, [pc, #520]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d007      	beq.n	8006d98 <HAL_RCC_OscConfig+0x308>
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b18      	cmp	r3, #24
 8006d8c:	d13a      	bne.n	8006e04 <HAL_RCC_OscConfig+0x374>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d135      	bne.n	8006e04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d98:	4b7b      	ldr	r3, [pc, #492]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_RCC_OscConfig+0x320>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	2b80      	cmp	r3, #128	; 0x80
 8006daa:	d001      	beq.n	8006db0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e2c1      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006db0:	f7fb ffa2 	bl	8002cf8 <HAL_GetREVID>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d817      	bhi.n	8006dee <HAL_RCC_OscConfig+0x35e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d108      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x348>
 8006dc6:	4b70      	ldr	r3, [pc, #448]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006dce:	4a6e      	ldr	r2, [pc, #440]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dd4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dd6:	e075      	b.n	8006ec4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dd8:	4b6b      	ldr	r3, [pc, #428]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	069b      	lsls	r3, r3, #26
 8006de6:	4968      	ldr	r1, [pc, #416]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dec:	e06a      	b.n	8006ec4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dee:	4b66      	ldr	r3, [pc, #408]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	061b      	lsls	r3, r3, #24
 8006dfc:	4962      	ldr	r1, [pc, #392]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e02:	e05f      	b.n	8006ec4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d042      	beq.n	8006e92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e0c:	4b5e      	ldr	r3, [pc, #376]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a5d      	ldr	r2, [pc, #372]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fb ff3e 	bl	8002c98 <HAL_GetTick>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e20:	f7fb ff3a 	bl	8002c98 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e280      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e32:	4b55      	ldr	r3, [pc, #340]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f0      	beq.n	8006e20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e3e:	f7fb ff5b 	bl	8002cf8 <HAL_GetREVID>
 8006e42:	4603      	mov	r3, r0
 8006e44:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d817      	bhi.n	8006e7c <HAL_RCC_OscConfig+0x3ec>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d108      	bne.n	8006e66 <HAL_RCC_OscConfig+0x3d6>
 8006e54:	4b4c      	ldr	r3, [pc, #304]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e5c:	4a4a      	ldr	r2, [pc, #296]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e62:	6053      	str	r3, [r2, #4]
 8006e64:	e02e      	b.n	8006ec4 <HAL_RCC_OscConfig+0x434>
 8006e66:	4b48      	ldr	r3, [pc, #288]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	069b      	lsls	r3, r3, #26
 8006e74:	4944      	ldr	r1, [pc, #272]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	604b      	str	r3, [r1, #4]
 8006e7a:	e023      	b.n	8006ec4 <HAL_RCC_OscConfig+0x434>
 8006e7c:	4b42      	ldr	r3, [pc, #264]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	061b      	lsls	r3, r3, #24
 8006e8a:	493f      	ldr	r1, [pc, #252]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60cb      	str	r3, [r1, #12]
 8006e90:	e018      	b.n	8006ec4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e92:	4b3d      	ldr	r3, [pc, #244]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a3c      	ldr	r2, [pc, #240]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9e:	f7fb fefb 	bl	8002c98 <HAL_GetTick>
 8006ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ea6:	f7fb fef7 	bl	8002c98 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e23d      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006eb8:	4b33      	ldr	r3, [pc, #204]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1f0      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d036      	beq.n	8006f3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d019      	beq.n	8006f0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed8:	4b2b      	ldr	r3, [pc, #172]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006edc:	4a2a      	ldr	r2, [pc, #168]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee4:	f7fb fed8 	bl	8002c98 <HAL_GetTick>
 8006ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eec:	f7fb fed4 	bl	8002c98 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e21a      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006efe:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0x45c>
 8006f0a:	e018      	b.n	8006f3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f0c:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f10:	4a1d      	ldr	r2, [pc, #116]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006f12:	f023 0301 	bic.w	r3, r3, #1
 8006f16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f18:	f7fb febe 	bl	8002c98 <HAL_GetTick>
 8006f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f20:	f7fb feba 	bl	8002c98 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e200      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f0      	bne.n	8006f20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d039      	beq.n	8006fbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01c      	beq.n	8006f8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a0c      	ldr	r2, [pc, #48]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f5e:	f7fb fe9b 	bl	8002c98 <HAL_GetTick>
 8006f62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f64:	e008      	b.n	8006f78 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f66:	f7fb fe97 	bl	8002c98 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e1dd      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f78:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <HAL_RCC_OscConfig+0x4f8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0f0      	beq.n	8006f66 <HAL_RCC_OscConfig+0x4d6>
 8006f84:	e01b      	b.n	8006fbe <HAL_RCC_OscConfig+0x52e>
 8006f86:	bf00      	nop
 8006f88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f8c:	4b9b      	ldr	r3, [pc, #620]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a9a      	ldr	r2, [pc, #616]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8006f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f98:	f7fb fe7e 	bl	8002c98 <HAL_GetTick>
 8006f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fa0:	f7fb fe7a 	bl	8002c98 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e1c0      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fb2:	4b92      	ldr	r3, [pc, #584]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f0      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 8081 	beq.w	80070ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fcc:	4b8c      	ldr	r3, [pc, #560]	; (8007200 <HAL_RCC_OscConfig+0x770>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a8b      	ldr	r2, [pc, #556]	; (8007200 <HAL_RCC_OscConfig+0x770>)
 8006fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fd8:	f7fb fe5e 	bl	8002c98 <HAL_GetTick>
 8006fdc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fde:	e008      	b.n	8006ff2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe0:	f7fb fe5a 	bl	8002c98 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b64      	cmp	r3, #100	; 0x64
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e1a0      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ff2:	4b83      	ldr	r3, [pc, #524]	; (8007200 <HAL_RCC_OscConfig+0x770>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0f0      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d106      	bne.n	8007014 <HAL_RCC_OscConfig+0x584>
 8007006:	4b7d      	ldr	r3, [pc, #500]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700a:	4a7c      	ldr	r2, [pc, #496]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	6713      	str	r3, [r2, #112]	; 0x70
 8007012:	e02d      	b.n	8007070 <HAL_RCC_OscConfig+0x5e0>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10c      	bne.n	8007036 <HAL_RCC_OscConfig+0x5a6>
 800701c:	4b77      	ldr	r3, [pc, #476]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	4a76      	ldr	r2, [pc, #472]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007022:	f023 0301 	bic.w	r3, r3, #1
 8007026:	6713      	str	r3, [r2, #112]	; 0x70
 8007028:	4b74      	ldr	r3, [pc, #464]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800702a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702c:	4a73      	ldr	r2, [pc, #460]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800702e:	f023 0304 	bic.w	r3, r3, #4
 8007032:	6713      	str	r3, [r2, #112]	; 0x70
 8007034:	e01c      	b.n	8007070 <HAL_RCC_OscConfig+0x5e0>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b05      	cmp	r3, #5
 800703c:	d10c      	bne.n	8007058 <HAL_RCC_OscConfig+0x5c8>
 800703e:	4b6f      	ldr	r3, [pc, #444]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	4a6e      	ldr	r2, [pc, #440]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007044:	f043 0304 	orr.w	r3, r3, #4
 8007048:	6713      	str	r3, [r2, #112]	; 0x70
 800704a:	4b6c      	ldr	r3, [pc, #432]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704e:	4a6b      	ldr	r2, [pc, #428]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	6713      	str	r3, [r2, #112]	; 0x70
 8007056:	e00b      	b.n	8007070 <HAL_RCC_OscConfig+0x5e0>
 8007058:	4b68      	ldr	r3, [pc, #416]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705c:	4a67      	ldr	r2, [pc, #412]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	6713      	str	r3, [r2, #112]	; 0x70
 8007064:	4b65      	ldr	r3, [pc, #404]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007068:	4a64      	ldr	r2, [pc, #400]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800706a:	f023 0304 	bic.w	r3, r3, #4
 800706e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007078:	f7fb fe0e 	bl	8002c98 <HAL_GetTick>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800707e:	e00a      	b.n	8007096 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007080:	f7fb fe0a 	bl	8002c98 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	f241 3288 	movw	r2, #5000	; 0x1388
 800708e:	4293      	cmp	r3, r2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e14e      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007096:	4b59      	ldr	r3, [pc, #356]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0ee      	beq.n	8007080 <HAL_RCC_OscConfig+0x5f0>
 80070a2:	e014      	b.n	80070ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a4:	f7fb fdf8 	bl	8002c98 <HAL_GetTick>
 80070a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ac:	f7fb fdf4 	bl	8002c98 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e138      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070c2:	4b4e      	ldr	r3, [pc, #312]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1ee      	bne.n	80070ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 812d 	beq.w	8007332 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070d8:	4b48      	ldr	r3, [pc, #288]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070e0:	2b18      	cmp	r3, #24
 80070e2:	f000 80bd 	beq.w	8007260 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	f040 809e 	bne.w	800722c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070f0:	4b42      	ldr	r3, [pc, #264]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a41      	ldr	r2, [pc, #260]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80070f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fb fdcc 	bl	8002c98 <HAL_GetTick>
 8007100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007104:	f7fb fdc8 	bl	8002c98 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e10e      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007116:	4b39      	ldr	r3, [pc, #228]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007122:	4b36      	ldr	r3, [pc, #216]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007126:	4b37      	ldr	r3, [pc, #220]	; (8007204 <HAL_RCC_OscConfig+0x774>)
 8007128:	4013      	ands	r3, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007132:	0112      	lsls	r2, r2, #4
 8007134:	430a      	orrs	r2, r1
 8007136:	4931      	ldr	r1, [pc, #196]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007138:	4313      	orrs	r3, r2
 800713a:	628b      	str	r3, [r1, #40]	; 0x28
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	3b01      	subs	r3, #1
 8007142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	3b01      	subs	r3, #1
 800714c:	025b      	lsls	r3, r3, #9
 800714e:	b29b      	uxth	r3, r3
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	3b01      	subs	r3, #1
 8007158:	041b      	lsls	r3, r3, #16
 800715a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007164:	3b01      	subs	r3, #1
 8007166:	061b      	lsls	r3, r3, #24
 8007168:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800716c:	4923      	ldr	r1, [pc, #140]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800716e:	4313      	orrs	r3, r2
 8007170:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007172:	4b22      	ldr	r3, [pc, #136]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	4a21      	ldr	r2, [pc, #132]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007178:	f023 0301 	bic.w	r3, r3, #1
 800717c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800717e:	4b1f      	ldr	r3, [pc, #124]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007182:	4b21      	ldr	r3, [pc, #132]	; (8007208 <HAL_RCC_OscConfig+0x778>)
 8007184:	4013      	ands	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800718a:	00d2      	lsls	r2, r2, #3
 800718c:	491b      	ldr	r1, [pc, #108]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 800718e:	4313      	orrs	r3, r2
 8007190:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007192:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007196:	f023 020c 	bic.w	r2, r3, #12
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	4917      	ldr	r1, [pc, #92]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071a4:	4b15      	ldr	r3, [pc, #84]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	f023 0202 	bic.w	r2, r3, #2
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b0:	4912      	ldr	r1, [pc, #72]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071b6:	4b11      	ldr	r3, [pc, #68]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	4a10      	ldr	r2, [pc, #64]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c2:	4b0e      	ldr	r3, [pc, #56]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	4a0d      	ldr	r2, [pc, #52]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071ce:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80071da:	4b08      	ldr	r3, [pc, #32]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	4a07      	ldr	r2, [pc, #28]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071e6:	4b05      	ldr	r3, [pc, #20]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a04      	ldr	r2, [pc, #16]	; (80071fc <HAL_RCC_OscConfig+0x76c>)
 80071ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f2:	f7fb fd51 	bl	8002c98 <HAL_GetTick>
 80071f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071f8:	e011      	b.n	800721e <HAL_RCC_OscConfig+0x78e>
 80071fa:	bf00      	nop
 80071fc:	58024400 	.word	0x58024400
 8007200:	58024800 	.word	0x58024800
 8007204:	fffffc0c 	.word	0xfffffc0c
 8007208:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800720c:	f7fb fd44 	bl	8002c98 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e08a      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800721e:	4b47      	ldr	r3, [pc, #284]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0f0      	beq.n	800720c <HAL_RCC_OscConfig+0x77c>
 800722a:	e082      	b.n	8007332 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800722c:	4b43      	ldr	r3, [pc, #268]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a42      	ldr	r2, [pc, #264]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 8007232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fb fd2e 	bl	8002c98 <HAL_GetTick>
 800723c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007240:	f7fb fd2a 	bl	8002c98 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e070      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007252:	4b3a      	ldr	r3, [pc, #232]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1f0      	bne.n	8007240 <HAL_RCC_OscConfig+0x7b0>
 800725e:	e068      	b.n	8007332 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007260:	4b36      	ldr	r3, [pc, #216]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 8007262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007264:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007266:	4b35      	ldr	r3, [pc, #212]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b01      	cmp	r3, #1
 8007272:	d031      	beq.n	80072d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f003 0203 	and.w	r2, r3, #3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800727e:	429a      	cmp	r2, r3
 8007280:	d12a      	bne.n	80072d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	091b      	lsrs	r3, r3, #4
 8007286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800728e:	429a      	cmp	r2, r3
 8007290:	d122      	bne.n	80072d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800729e:	429a      	cmp	r2, r3
 80072a0:	d11a      	bne.n	80072d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	0a5b      	lsrs	r3, r3, #9
 80072a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d111      	bne.n	80072d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d108      	bne.n	80072d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	0e1b      	lsrs	r3, r3, #24
 80072ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d001      	beq.n	80072dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e02b      	b.n	8007334 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80072dc:	4b17      	ldr	r3, [pc, #92]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 80072de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e0:	08db      	lsrs	r3, r3, #3
 80072e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d01f      	beq.n	8007332 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	4a11      	ldr	r2, [pc, #68]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 80072f8:	f023 0301 	bic.w	r3, r3, #1
 80072fc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072fe:	f7fb fccb 	bl	8002c98 <HAL_GetTick>
 8007302:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007304:	bf00      	nop
 8007306:	f7fb fcc7 	bl	8002c98 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	4293      	cmp	r3, r2
 8007310:	d0f9      	beq.n	8007306 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007312:	4b0a      	ldr	r3, [pc, #40]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 8007314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007316:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <HAL_RCC_OscConfig+0x8b0>)
 8007318:	4013      	ands	r3, r2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800731e:	00d2      	lsls	r2, r2, #3
 8007320:	4906      	ldr	r1, [pc, #24]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 8007322:	4313      	orrs	r3, r2
 8007324:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007326:	4b05      	ldr	r3, [pc, #20]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	4a04      	ldr	r2, [pc, #16]	; (800733c <HAL_RCC_OscConfig+0x8ac>)
 800732c:	f043 0301 	orr.w	r3, r3, #1
 8007330:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3730      	adds	r7, #48	; 0x30
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	58024400 	.word	0x58024400
 8007340:	ffff0007 	.word	0xffff0007

08007344 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e19c      	b.n	8007692 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007358:	4b8a      	ldr	r3, [pc, #552]	; (8007584 <HAL_RCC_ClockConfig+0x240>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 030f 	and.w	r3, r3, #15
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d910      	bls.n	8007388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007366:	4b87      	ldr	r3, [pc, #540]	; (8007584 <HAL_RCC_ClockConfig+0x240>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f023 020f 	bic.w	r2, r3, #15
 800736e:	4985      	ldr	r1, [pc, #532]	; (8007584 <HAL_RCC_ClockConfig+0x240>)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	4313      	orrs	r3, r2
 8007374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007376:	4b83      	ldr	r3, [pc, #524]	; (8007584 <HAL_RCC_ClockConfig+0x240>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d001      	beq.n	8007388 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e184      	b.n	8007692 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d010      	beq.n	80073b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	4b7b      	ldr	r3, [pc, #492]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d908      	bls.n	80073b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073a4:	4b78      	ldr	r3, [pc, #480]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	4975      	ldr	r1, [pc, #468]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d010      	beq.n	80073e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695a      	ldr	r2, [r3, #20]
 80073c6:	4b70      	ldr	r3, [pc, #448]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d908      	bls.n	80073e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073d2:	4b6d      	ldr	r3, [pc, #436]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	496a      	ldr	r1, [pc, #424]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0310 	and.w	r3, r3, #16
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d010      	beq.n	8007412 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699a      	ldr	r2, [r3, #24]
 80073f4:	4b64      	ldr	r3, [pc, #400]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d908      	bls.n	8007412 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007400:	4b61      	ldr	r3, [pc, #388]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	495e      	ldr	r1, [pc, #376]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 800740e:	4313      	orrs	r3, r2
 8007410:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b00      	cmp	r3, #0
 800741c:	d010      	beq.n	8007440 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69da      	ldr	r2, [r3, #28]
 8007422:	4b59      	ldr	r3, [pc, #356]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800742a:	429a      	cmp	r2, r3
 800742c:	d908      	bls.n	8007440 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800742e:	4b56      	ldr	r3, [pc, #344]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	4953      	ldr	r1, [pc, #332]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 800743c:	4313      	orrs	r3, r2
 800743e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d010      	beq.n	800746e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	4b4d      	ldr	r3, [pc, #308]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	429a      	cmp	r2, r3
 800745a:	d908      	bls.n	800746e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800745c:	4b4a      	ldr	r3, [pc, #296]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	f023 020f 	bic.w	r2, r3, #15
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	4947      	ldr	r1, [pc, #284]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 800746a:	4313      	orrs	r3, r2
 800746c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d055      	beq.n	8007526 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800747a:	4b43      	ldr	r3, [pc, #268]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	4940      	ldr	r1, [pc, #256]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007488:	4313      	orrs	r3, r2
 800748a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d107      	bne.n	80074a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007494:	4b3c      	ldr	r3, [pc, #240]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d121      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e0f6      	b.n	8007692 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d107      	bne.n	80074bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074ac:	4b36      	ldr	r3, [pc, #216]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d115      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e0ea      	b.n	8007692 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d107      	bne.n	80074d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074c4:	4b30      	ldr	r3, [pc, #192]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d109      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0de      	b.n	8007692 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074d4:	4b2c      	ldr	r3, [pc, #176]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0d6      	b.n	8007692 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074e4:	4b28      	ldr	r3, [pc, #160]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	f023 0207 	bic.w	r2, r3, #7
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4925      	ldr	r1, [pc, #148]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f6:	f7fb fbcf 	bl	8002c98 <HAL_GetTick>
 80074fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fc:	e00a      	b.n	8007514 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074fe:	f7fb fbcb 	bl	8002c98 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	f241 3288 	movw	r2, #5000	; 0x1388
 800750c:	4293      	cmp	r3, r2
 800750e:	d901      	bls.n	8007514 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e0be      	b.n	8007692 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007514:	4b1c      	ldr	r3, [pc, #112]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	429a      	cmp	r2, r3
 8007524:	d1eb      	bne.n	80074fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d010      	beq.n	8007554 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68da      	ldr	r2, [r3, #12]
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	429a      	cmp	r2, r3
 8007540:	d208      	bcs.n	8007554 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007542:	4b11      	ldr	r3, [pc, #68]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	f023 020f 	bic.w	r2, r3, #15
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	490e      	ldr	r1, [pc, #56]	; (8007588 <HAL_RCC_ClockConfig+0x244>)
 8007550:	4313      	orrs	r3, r2
 8007552:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007554:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <HAL_RCC_ClockConfig+0x240>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 030f 	and.w	r3, r3, #15
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	429a      	cmp	r2, r3
 8007560:	d214      	bcs.n	800758c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007562:	4b08      	ldr	r3, [pc, #32]	; (8007584 <HAL_RCC_ClockConfig+0x240>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f023 020f 	bic.w	r2, r3, #15
 800756a:	4906      	ldr	r1, [pc, #24]	; (8007584 <HAL_RCC_ClockConfig+0x240>)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	4313      	orrs	r3, r2
 8007570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007572:	4b04      	ldr	r3, [pc, #16]	; (8007584 <HAL_RCC_ClockConfig+0x240>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d005      	beq.n	800758c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e086      	b.n	8007692 <HAL_RCC_ClockConfig+0x34e>
 8007584:	52002000 	.word	0x52002000
 8007588:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d010      	beq.n	80075ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	4b3f      	ldr	r3, [pc, #252]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d208      	bcs.n	80075ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075a8:	4b3c      	ldr	r3, [pc, #240]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	4939      	ldr	r1, [pc, #228]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d010      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695a      	ldr	r2, [r3, #20]
 80075ca:	4b34      	ldr	r3, [pc, #208]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d208      	bcs.n	80075e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075d6:	4b31      	ldr	r3, [pc, #196]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	492e      	ldr	r1, [pc, #184]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d010      	beq.n	8007616 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699a      	ldr	r2, [r3, #24]
 80075f8:	4b28      	ldr	r3, [pc, #160]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007600:	429a      	cmp	r2, r3
 8007602:	d208      	bcs.n	8007616 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007604:	4b25      	ldr	r3, [pc, #148]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	4922      	ldr	r1, [pc, #136]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 8007612:	4313      	orrs	r3, r2
 8007614:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d010      	beq.n	8007644 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69da      	ldr	r2, [r3, #28]
 8007626:	4b1d      	ldr	r3, [pc, #116]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800762e:	429a      	cmp	r2, r3
 8007630:	d208      	bcs.n	8007644 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007632:	4b1a      	ldr	r3, [pc, #104]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	4917      	ldr	r1, [pc, #92]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 8007640:	4313      	orrs	r3, r2
 8007642:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007644:	f000 f834 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 8007648:	4602      	mov	r2, r0
 800764a:	4b14      	ldr	r3, [pc, #80]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	4912      	ldr	r1, [pc, #72]	; (80076a0 <HAL_RCC_ClockConfig+0x35c>)
 8007656:	5ccb      	ldrb	r3, [r1, r3]
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007662:	4b0e      	ldr	r3, [pc, #56]	; (800769c <HAL_RCC_ClockConfig+0x358>)
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	4a0d      	ldr	r2, [pc, #52]	; (80076a0 <HAL_RCC_ClockConfig+0x35c>)
 800766c:	5cd3      	ldrb	r3, [r2, r3]
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
 8007678:	4a0a      	ldr	r2, [pc, #40]	; (80076a4 <HAL_RCC_ClockConfig+0x360>)
 800767a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800767c:	4a0a      	ldr	r2, [pc, #40]	; (80076a8 <HAL_RCC_ClockConfig+0x364>)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007682:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <HAL_RCC_ClockConfig+0x368>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f7fb fabc 	bl	8002c04 <HAL_InitTick>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	58024400 	.word	0x58024400
 80076a0:	0800d3e8 	.word	0x0800d3e8
 80076a4:	24000004 	.word	0x24000004
 80076a8:	24000000 	.word	0x24000000
 80076ac:	24000008 	.word	0x24000008

080076b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b089      	sub	sp, #36	; 0x24
 80076b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076b6:	4bb3      	ldr	r3, [pc, #716]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076be:	2b18      	cmp	r3, #24
 80076c0:	f200 8155 	bhi.w	800796e <HAL_RCC_GetSysClockFreq+0x2be>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	08007731 	.word	0x08007731
 80076d0:	0800796f 	.word	0x0800796f
 80076d4:	0800796f 	.word	0x0800796f
 80076d8:	0800796f 	.word	0x0800796f
 80076dc:	0800796f 	.word	0x0800796f
 80076e0:	0800796f 	.word	0x0800796f
 80076e4:	0800796f 	.word	0x0800796f
 80076e8:	0800796f 	.word	0x0800796f
 80076ec:	08007757 	.word	0x08007757
 80076f0:	0800796f 	.word	0x0800796f
 80076f4:	0800796f 	.word	0x0800796f
 80076f8:	0800796f 	.word	0x0800796f
 80076fc:	0800796f 	.word	0x0800796f
 8007700:	0800796f 	.word	0x0800796f
 8007704:	0800796f 	.word	0x0800796f
 8007708:	0800796f 	.word	0x0800796f
 800770c:	0800775d 	.word	0x0800775d
 8007710:	0800796f 	.word	0x0800796f
 8007714:	0800796f 	.word	0x0800796f
 8007718:	0800796f 	.word	0x0800796f
 800771c:	0800796f 	.word	0x0800796f
 8007720:	0800796f 	.word	0x0800796f
 8007724:	0800796f 	.word	0x0800796f
 8007728:	0800796f 	.word	0x0800796f
 800772c:	08007763 	.word	0x08007763
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007730:	4b94      	ldr	r3, [pc, #592]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d009      	beq.n	8007750 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800773c:	4b91      	ldr	r3, [pc, #580]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	08db      	lsrs	r3, r3, #3
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	4a90      	ldr	r2, [pc, #576]	; (8007988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007748:	fa22 f303 	lsr.w	r3, r2, r3
 800774c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800774e:	e111      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007750:	4b8d      	ldr	r3, [pc, #564]	; (8007988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007752:	61bb      	str	r3, [r7, #24]
      break;
 8007754:	e10e      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007756:	4b8d      	ldr	r3, [pc, #564]	; (800798c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007758:	61bb      	str	r3, [r7, #24]
      break;
 800775a:	e10b      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800775c:	4b8c      	ldr	r3, [pc, #560]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800775e:	61bb      	str	r3, [r7, #24]
      break;
 8007760:	e108      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007762:	4b88      	ldr	r3, [pc, #544]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800776c:	4b85      	ldr	r3, [pc, #532]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	091b      	lsrs	r3, r3, #4
 8007772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007776:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007778:	4b82      	ldr	r3, [pc, #520]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007782:	4b80      	ldr	r3, [pc, #512]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007786:	08db      	lsrs	r3, r3, #3
 8007788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	fb02 f303 	mul.w	r3, r2, r3
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 80e1 	beq.w	8007968 <HAL_RCC_GetSysClockFreq+0x2b8>
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	f000 8083 	beq.w	80078b4 <HAL_RCC_GetSysClockFreq+0x204>
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	f200 80a1 	bhi.w	80078f8 <HAL_RCC_GetSysClockFreq+0x248>
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_RCC_GetSysClockFreq+0x114>
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d056      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0x1c0>
 80077c2:	e099      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077c4:	4b6f      	ldr	r3, [pc, #444]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d02d      	beq.n	800782c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077d0:	4b6c      	ldr	r3, [pc, #432]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	08db      	lsrs	r3, r3, #3
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	4a6b      	ldr	r2, [pc, #428]	; (8007988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077dc:	fa22 f303 	lsr.w	r3, r2, r3
 80077e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b62      	ldr	r3, [pc, #392]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a02 	vldr	s12, [r7, #8]
 800780e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800782a:	e087      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007998 <HAL_RCC_GetSysClockFreq+0x2e8>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b51      	ldr	r3, [pc, #324]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007852:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800786e:	e065      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800799c <HAL_RCC_GetSysClockFreq+0x2ec>
 800787e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007882:	4b40      	ldr	r3, [pc, #256]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007892:	ed97 6a02 	vldr	s12, [r7, #8]
 8007896:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007994 <HAL_RCC_GetSysClockFreq+0x2e4>
 800789a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078b2:	e043      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80078c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c6:	4b2f      	ldr	r3, [pc, #188]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80078da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007994 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078f6:	e021      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007902:	eddf 6a26 	vldr	s13, [pc, #152]	; 800799c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790a:	4b1e      	ldr	r3, [pc, #120]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791a:	ed97 6a02 	vldr	s12, [r7, #8]
 800791e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007936:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800793a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800793c:	4b11      	ldr	r3, [pc, #68]	; (8007984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	0a5b      	lsrs	r3, r3, #9
 8007942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007946:	3301      	adds	r3, #1
 8007948:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007954:	edd7 6a07 	vldr	s13, [r7, #28]
 8007958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800795c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007960:	ee17 3a90 	vmov	r3, s15
 8007964:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007966:	e005      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	61bb      	str	r3, [r7, #24]
      break;
 800796c:	e002      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800796e:	4b07      	ldr	r3, [pc, #28]	; (800798c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007970:	61bb      	str	r3, [r7, #24]
      break;
 8007972:	bf00      	nop
  }

  return sysclockfreq;
 8007974:	69bb      	ldr	r3, [r7, #24]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3724      	adds	r7, #36	; 0x24
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	58024400 	.word	0x58024400
 8007988:	03d09000 	.word	0x03d09000
 800798c:	003d0900 	.word	0x003d0900
 8007990:	017d7840 	.word	0x017d7840
 8007994:	46000000 	.word	0x46000000
 8007998:	4c742400 	.word	0x4c742400
 800799c:	4a742400 	.word	0x4a742400
 80079a0:	4bbebc20 	.word	0x4bbebc20

080079a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079aa:	f7ff fe81 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 80079ae:	4602      	mov	r2, r0
 80079b0:	4b10      	ldr	r3, [pc, #64]	; (80079f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	0a1b      	lsrs	r3, r3, #8
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	490f      	ldr	r1, [pc, #60]	; (80079f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80079bc:	5ccb      	ldrb	r3, [r1, r3]
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	fa22 f303 	lsr.w	r3, r2, r3
 80079c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f003 030f 	and.w	r3, r3, #15
 80079d0:	4a09      	ldr	r2, [pc, #36]	; (80079f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80079d2:	5cd3      	ldrb	r3, [r2, r3]
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	fa22 f303 	lsr.w	r3, r2, r3
 80079de:	4a07      	ldr	r2, [pc, #28]	; (80079fc <HAL_RCC_GetHCLKFreq+0x58>)
 80079e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079e2:	4a07      	ldr	r2, [pc, #28]	; (8007a00 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079e8:	4b04      	ldr	r3, [pc, #16]	; (80079fc <HAL_RCC_GetHCLKFreq+0x58>)
 80079ea:	681b      	ldr	r3, [r3, #0]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	58024400 	.word	0x58024400
 80079f8:	0800d3e8 	.word	0x0800d3e8
 80079fc:	24000004 	.word	0x24000004
 8007a00:	24000000 	.word	0x24000000

08007a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a08:	f7ff ffcc 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	091b      	lsrs	r3, r3, #4
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	4904      	ldr	r1, [pc, #16]	; (8007a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a1a:	5ccb      	ldrb	r3, [r1, r3]
 8007a1c:	f003 031f 	and.w	r3, r3, #31
 8007a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	0800d3e8 	.word	0x0800d3e8

08007a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a34:	f7ff ffb6 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	0a1b      	lsrs	r3, r3, #8
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	4904      	ldr	r1, [pc, #16]	; (8007a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a46:	5ccb      	ldrb	r3, [r1, r3]
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	58024400 	.word	0x58024400
 8007a58:	0800d3e8 	.word	0x0800d3e8

08007a5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a60:	b0ca      	sub	sp, #296	; 0x128
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007a80:	2500      	movs	r5, #0
 8007a82:	ea54 0305 	orrs.w	r3, r4, r5
 8007a86:	d049      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a92:	d02f      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a98:	d828      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a9e:	d01a      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007aa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aa4:	d822      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aae:	d007      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ab0:	e01c      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab2:	4bb8      	ldr	r3, [pc, #736]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	4ab7      	ldr	r2, [pc, #732]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007abe:	e01a      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f002 fb61 	bl	800a190 <RCCEx_PLL2_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ad4:	e00f      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ada:	3328      	adds	r3, #40	; 0x28
 8007adc:	2102      	movs	r1, #2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f002 fc08 	bl	800a2f4 <RCCEx_PLL3_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007aea:	e004      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007af2:	e000      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10a      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007afe:	4ba5      	ldr	r3, [pc, #660]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b0c:	4aa1      	ldr	r2, [pc, #644]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b0e:	430b      	orrs	r3, r1
 8007b10:	6513      	str	r3, [r2, #80]	; 0x50
 8007b12:	e003      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007b28:	f04f 0900 	mov.w	r9, #0
 8007b2c:	ea58 0309 	orrs.w	r3, r8, r9
 8007b30:	d047      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d82a      	bhi.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b59 	.word	0x08007b59
 8007b48:	08007b67 	.word	0x08007b67
 8007b4c:	08007b7d 	.word	0x08007b7d
 8007b50:	08007b9b 	.word	0x08007b9b
 8007b54:	08007b9b 	.word	0x08007b9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b58:	4b8e      	ldr	r3, [pc, #568]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	4a8d      	ldr	r2, [pc, #564]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b64:	e01a      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f002 fb0e 	bl	800a190 <RCCEx_PLL2_Config>
 8007b74:	4603      	mov	r3, r0
 8007b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b7a:	e00f      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b80:	3328      	adds	r3, #40	; 0x28
 8007b82:	2100      	movs	r1, #0
 8007b84:	4618      	mov	r0, r3
 8007b86:	f002 fbb5 	bl	800a2f4 <RCCEx_PLL3_Config>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b90:	e004      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b98:	e000      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ba4:	4b7b      	ldr	r3, [pc, #492]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba8:	f023 0107 	bic.w	r1, r3, #7
 8007bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb2:	4a78      	ldr	r2, [pc, #480]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	6513      	str	r3, [r2, #80]	; 0x50
 8007bb8:	e003      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007bce:	f04f 0b00 	mov.w	fp, #0
 8007bd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8007bd6:	d04c      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be2:	d030      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be8:	d829      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bea:	2bc0      	cmp	r3, #192	; 0xc0
 8007bec:	d02d      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007bee:	2bc0      	cmp	r3, #192	; 0xc0
 8007bf0:	d825      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bf2:	2b80      	cmp	r3, #128	; 0x80
 8007bf4:	d018      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007bf6:	2b80      	cmp	r3, #128	; 0x80
 8007bf8:	d821      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d007      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007c02:	e01c      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c04:	4b63      	ldr	r3, [pc, #396]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	4a62      	ldr	r2, [pc, #392]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c10:	e01c      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c16:	3308      	adds	r3, #8
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f002 fab8 	bl	800a190 <RCCEx_PLL2_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c26:	e011      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2c:	3328      	adds	r3, #40	; 0x28
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f002 fb5f 	bl	800a2f4 <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c3c:	e006      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c44:	e002      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c46:	bf00      	nop
 8007c48:	e000      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c54:	4b4f      	ldr	r3, [pc, #316]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c62:	4a4c      	ldr	r2, [pc, #304]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c64:	430b      	orrs	r3, r1
 8007c66:	6513      	str	r3, [r2, #80]	; 0x50
 8007c68:	e003      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007c7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007c82:	2300      	movs	r3, #0
 8007c84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007c88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	d053      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c9e:	d035      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ca4:	d82e      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ca6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007caa:	d031      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007cac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cb0:	d828      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cb6:	d01a      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cbc:	d822      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cc6:	d007      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007cc8:	e01c      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cca:	4b32      	ldr	r3, [pc, #200]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	4a31      	ldr	r2, [pc, #196]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cd6:	e01c      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cdc:	3308      	adds	r3, #8
 8007cde:	2100      	movs	r1, #0
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f002 fa55 	bl	800a190 <RCCEx_PLL2_Config>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007cec:	e011      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf2:	3328      	adds	r3, #40	; 0x28
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f002 fafc 	bl	800a2f4 <RCCEx_PLL3_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d02:	e006      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d0a:	e002      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007d0c:	bf00      	nop
 8007d0e:	e000      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d1a:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8007d30:	e003      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007d46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007d54:	460b      	mov	r3, r1
 8007d56:	4313      	orrs	r3, r2
 8007d58:	d056      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d66:	d038      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d6c:	d831      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d72:	d034      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007d74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d78:	d82b      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d7e:	d01d      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d84:	d825      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d006      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d8e:	d00a      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d90:	e01f      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d92:	bf00      	nop
 8007d94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d98:	4ba2      	ldr	r3, [pc, #648]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	4aa1      	ldr	r2, [pc, #644]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007da4:	e01c      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007daa:	3308      	adds	r3, #8
 8007dac:	2100      	movs	r1, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f002 f9ee 	bl	800a190 <RCCEx_PLL2_Config>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007dba:	e011      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc0:	3328      	adds	r3, #40	; 0x28
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f002 fa95 	bl	800a2f4 <RCCEx_PLL3_Config>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dd0:	e006      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dd8:	e002      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007dda:	bf00      	nop
 8007ddc:	e000      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007de0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10b      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007de8:	4b8e      	ldr	r3, [pc, #568]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007df8:	4a8a      	ldr	r2, [pc, #552]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8007dfe:	e003      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007e22:	460b      	mov	r3, r1
 8007e24:	4313      	orrs	r3, r2
 8007e26:	d03a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2e:	2b30      	cmp	r3, #48	; 0x30
 8007e30:	d01f      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007e32:	2b30      	cmp	r3, #48	; 0x30
 8007e34:	d819      	bhi.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d00c      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d815      	bhi.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d019      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007e42:	2b10      	cmp	r3, #16
 8007e44:	d111      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e46:	4b77      	ldr	r3, [pc, #476]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	4a76      	ldr	r2, [pc, #472]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e52:	e011      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e58:	3308      	adds	r3, #8
 8007e5a:	2102      	movs	r1, #2
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f002 f997 	bl	800a190 <RCCEx_PLL2_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e68:	e006      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e70:	e002      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e72:	bf00      	nop
 8007e74:	e000      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10a      	bne.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e80:	4b68      	ldr	r3, [pc, #416]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e84:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8e:	4a65      	ldr	r2, [pc, #404]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e90:	430b      	orrs	r3, r1
 8007e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e94:	e003      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007eaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007eb4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	d051      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ec8:	d035      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ece:	d82e      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ed0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ed4:	d031      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007ed6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007eda:	d828      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee0:	d01a      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee6:	d822      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef0:	d007      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007ef2:	e01c      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef4:	4b4b      	ldr	r3, [pc, #300]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef8:	4a4a      	ldr	r2, [pc, #296]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f00:	e01c      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f06:	3308      	adds	r3, #8
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f002 f940 	bl	800a190 <RCCEx_PLL2_Config>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f16:	e011      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f1c:	3328      	adds	r3, #40	; 0x28
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f002 f9e7 	bl	800a2f4 <RCCEx_PLL3_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f2c:	e006      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f34:	e002      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f44:	4b37      	ldr	r3, [pc, #220]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f52:	4a34      	ldr	r2, [pc, #208]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f54:	430b      	orrs	r3, r1
 8007f56:	6513      	str	r3, [r2, #80]	; 0x50
 8007f58:	e003      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f72:	2300      	movs	r3, #0
 8007f74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	d056      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f8c:	d033      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f92:	d82c      	bhi.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f98:	d02f      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007f9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f9e:	d826      	bhi.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fa4:	d02b      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007fa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007faa:	d820      	bhi.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb0:	d012      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb6:	d81a      	bhi.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d022      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc0:	d115      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f002 f8e0 	bl	800a190 <RCCEx_PLL2_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007fd6:	e015      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fdc:	3328      	adds	r3, #40	; 0x28
 8007fde:	2101      	movs	r1, #1
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f002 f987 	bl	800a2f4 <RCCEx_PLL3_Config>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007fec:	e00a      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ff4:	e006      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ff6:	bf00      	nop
 8007ff8:	e004      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ffa:	bf00      	nop
 8007ffc:	e002      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ffe:	bf00      	nop
 8008000:	e000      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10d      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800800e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008010:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800801a:	4a02      	ldr	r2, [pc, #8]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800801c:	430b      	orrs	r3, r1
 800801e:	6513      	str	r3, [r2, #80]	; 0x50
 8008020:	e006      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008022:	bf00      	nop
 8008024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800802c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800803c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008040:	2300      	movs	r3, #0
 8008042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008046:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800804a:	460b      	mov	r3, r1
 800804c:	4313      	orrs	r3, r2
 800804e:	d055      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800805c:	d033      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800805e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008062:	d82c      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008068:	d02f      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806e:	d826      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008070:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008074:	d02b      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800807a:	d820      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800807c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008080:	d012      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008086:	d81a      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d022      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800808c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008090:	d115      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008096:	3308      	adds	r3, #8
 8008098:	2101      	movs	r1, #1
 800809a:	4618      	mov	r0, r3
 800809c:	f002 f878 	bl	800a190 <RCCEx_PLL2_Config>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80080a6:	e015      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ac:	3328      	adds	r3, #40	; 0x28
 80080ae:	2101      	movs	r1, #1
 80080b0:	4618      	mov	r0, r3
 80080b2:	f002 f91f 	bl	800a2f4 <RCCEx_PLL3_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80080bc:	e00a      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080c4:	e006      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080c6:	bf00      	nop
 80080c8:	e004      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080ca:	bf00      	nop
 80080cc:	e002      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080ce:	bf00      	nop
 80080d0:	e000      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10b      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80080dc:	4ba3      	ldr	r3, [pc, #652]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080ec:	4a9f      	ldr	r2, [pc, #636]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ee:	430b      	orrs	r3, r1
 80080f0:	6593      	str	r3, [r2, #88]	; 0x58
 80080f2:	e003      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800810c:	2300      	movs	r3, #0
 800810e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008116:	460b      	mov	r3, r1
 8008118:	4313      	orrs	r3, r2
 800811a:	d037      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008126:	d00e      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800812c:	d816      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d018      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008136:	d111      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008138:	4b8c      	ldr	r3, [pc, #560]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	4a8b      	ldr	r2, [pc, #556]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800813e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008144:	e00f      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800814a:	3308      	adds	r3, #8
 800814c:	2101      	movs	r1, #1
 800814e:	4618      	mov	r0, r3
 8008150:	f002 f81e 	bl	800a190 <RCCEx_PLL2_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800815a:	e004      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008162:	e000      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10a      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800816e:	4b7f      	ldr	r3, [pc, #508]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008172:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817c:	4a7b      	ldr	r2, [pc, #492]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800817e:	430b      	orrs	r3, r1
 8008180:	6513      	str	r3, [r2, #80]	; 0x50
 8008182:	e003      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800818c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800819c:	2300      	movs	r3, #0
 800819e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4313      	orrs	r3, r2
 80081aa:	d039      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80081ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d81c      	bhi.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80081b6:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081f9 	.word	0x080081f9
 80081c0:	080081cd 	.word	0x080081cd
 80081c4:	080081db 	.word	0x080081db
 80081c8:	080081f9 	.word	0x080081f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081cc:	4b67      	ldr	r3, [pc, #412]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	4a66      	ldr	r2, [pc, #408]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081d8:	e00f      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081de:	3308      	adds	r3, #8
 80081e0:	2102      	movs	r1, #2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 ffd4 	bl	800a190 <RCCEx_PLL2_Config>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081ee:	e004      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081f6:	e000      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80081f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008202:	4b5a      	ldr	r3, [pc, #360]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008206:	f023 0103 	bic.w	r1, r3, #3
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008210:	4a56      	ldr	r2, [pc, #344]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008212:	430b      	orrs	r3, r1
 8008214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008216:	e003      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800821c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800822c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008230:	2300      	movs	r3, #0
 8008232:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008236:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800823a:	460b      	mov	r3, r1
 800823c:	4313      	orrs	r3, r2
 800823e:	f000 809f 	beq.w	8008380 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008242:	4b4b      	ldr	r3, [pc, #300]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a4a      	ldr	r2, [pc, #296]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800824e:	f7fa fd23 	bl	8002c98 <HAL_GetTick>
 8008252:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008256:	e00b      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008258:	f7fa fd1e 	bl	8002c98 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b64      	cmp	r3, #100	; 0x64
 8008266:	d903      	bls.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800826e:	e005      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008270:	4b3f      	ldr	r3, [pc, #252]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0ed      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800827c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008280:	2b00      	cmp	r3, #0
 8008282:	d179      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008284:	4b39      	ldr	r3, [pc, #228]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008290:	4053      	eors	r3, r2
 8008292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008296:	2b00      	cmp	r3, #0
 8008298:	d015      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800829a:	4b34      	ldr	r3, [pc, #208]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800829c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082a6:	4b31      	ldr	r3, [pc, #196]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	4a30      	ldr	r2, [pc, #192]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082b2:	4b2e      	ldr	r3, [pc, #184]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b6:	4a2d      	ldr	r2, [pc, #180]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082bc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80082be:	4a2b      	ldr	r2, [pc, #172]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80082c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80082c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d2:	d118      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d4:	f7fa fce0 	bl	8002c98 <HAL_GetTick>
 80082d8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082dc:	e00d      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082de:	f7fa fcdb 	bl	8002c98 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80082e8:	1ad2      	subs	r2, r2, r3
 80082ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d903      	bls.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80082f8:	e005      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082fa:	4b1c      	ldr	r3, [pc, #112]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0eb      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800830a:	2b00      	cmp	r3, #0
 800830c:	d129      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800831a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800831e:	d10e      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008320:	4b12      	ldr	r3, [pc, #72]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800832c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008330:	091a      	lsrs	r2, r3, #4
 8008332:	4b10      	ldr	r3, [pc, #64]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008334:	4013      	ands	r3, r2
 8008336:	4a0d      	ldr	r2, [pc, #52]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008338:	430b      	orrs	r3, r1
 800833a:	6113      	str	r3, [r2, #16]
 800833c:	e005      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800833e:	4b0b      	ldr	r3, [pc, #44]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	4a0a      	ldr	r2, [pc, #40]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008344:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008348:	6113      	str	r3, [r2, #16]
 800834a:	4b08      	ldr	r3, [pc, #32]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800834c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800835a:	4a04      	ldr	r2, [pc, #16]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800835c:	430b      	orrs	r3, r1
 800835e:	6713      	str	r3, [r2, #112]	; 0x70
 8008360:	e00e      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800836a:	e009      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800836c:	58024400 	.word	0x58024400
 8008370:	58024800 	.word	0x58024800
 8008374:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800837c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f002 0301 	and.w	r3, r2, #1
 800838c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008396:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800839a:	460b      	mov	r3, r1
 800839c:	4313      	orrs	r3, r2
 800839e:	f000 8089 	beq.w	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80083a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a8:	2b28      	cmp	r3, #40	; 0x28
 80083aa:	d86b      	bhi.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	0800848d 	.word	0x0800848d
 80083b8:	08008485 	.word	0x08008485
 80083bc:	08008485 	.word	0x08008485
 80083c0:	08008485 	.word	0x08008485
 80083c4:	08008485 	.word	0x08008485
 80083c8:	08008485 	.word	0x08008485
 80083cc:	08008485 	.word	0x08008485
 80083d0:	08008485 	.word	0x08008485
 80083d4:	08008459 	.word	0x08008459
 80083d8:	08008485 	.word	0x08008485
 80083dc:	08008485 	.word	0x08008485
 80083e0:	08008485 	.word	0x08008485
 80083e4:	08008485 	.word	0x08008485
 80083e8:	08008485 	.word	0x08008485
 80083ec:	08008485 	.word	0x08008485
 80083f0:	08008485 	.word	0x08008485
 80083f4:	0800846f 	.word	0x0800846f
 80083f8:	08008485 	.word	0x08008485
 80083fc:	08008485 	.word	0x08008485
 8008400:	08008485 	.word	0x08008485
 8008404:	08008485 	.word	0x08008485
 8008408:	08008485 	.word	0x08008485
 800840c:	08008485 	.word	0x08008485
 8008410:	08008485 	.word	0x08008485
 8008414:	0800848d 	.word	0x0800848d
 8008418:	08008485 	.word	0x08008485
 800841c:	08008485 	.word	0x08008485
 8008420:	08008485 	.word	0x08008485
 8008424:	08008485 	.word	0x08008485
 8008428:	08008485 	.word	0x08008485
 800842c:	08008485 	.word	0x08008485
 8008430:	08008485 	.word	0x08008485
 8008434:	0800848d 	.word	0x0800848d
 8008438:	08008485 	.word	0x08008485
 800843c:	08008485 	.word	0x08008485
 8008440:	08008485 	.word	0x08008485
 8008444:	08008485 	.word	0x08008485
 8008448:	08008485 	.word	0x08008485
 800844c:	08008485 	.word	0x08008485
 8008450:	08008485 	.word	0x08008485
 8008454:	0800848d 	.word	0x0800848d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800845c:	3308      	adds	r3, #8
 800845e:	2101      	movs	r1, #1
 8008460:	4618      	mov	r0, r3
 8008462:	f001 fe95 	bl	800a190 <RCCEx_PLL2_Config>
 8008466:	4603      	mov	r3, r0
 8008468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800846c:	e00f      	b.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008472:	3328      	adds	r3, #40	; 0x28
 8008474:	2101      	movs	r1, #1
 8008476:	4618      	mov	r0, r3
 8008478:	f001 ff3c 	bl	800a2f4 <RCCEx_PLL3_Config>
 800847c:	4603      	mov	r3, r0
 800847e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008482:	e004      	b.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800848a:	e000      	b.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800848c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800848e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10a      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008496:	4bbf      	ldr	r3, [pc, #764]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800849e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a4:	4abb      	ldr	r2, [pc, #748]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084a6:	430b      	orrs	r3, r1
 80084a8:	6553      	str	r3, [r2, #84]	; 0x54
 80084aa:	e003      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f002 0302 	and.w	r3, r2, #2
 80084c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084c4:	2300      	movs	r3, #0
 80084c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80084ce:	460b      	mov	r3, r1
 80084d0:	4313      	orrs	r3, r2
 80084d2:	d041      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80084d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084da:	2b05      	cmp	r3, #5
 80084dc:	d824      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008531 	.word	0x08008531
 80084e8:	080084fd 	.word	0x080084fd
 80084ec:	08008513 	.word	0x08008513
 80084f0:	08008531 	.word	0x08008531
 80084f4:	08008531 	.word	0x08008531
 80084f8:	08008531 	.word	0x08008531
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008500:	3308      	adds	r3, #8
 8008502:	2101      	movs	r1, #1
 8008504:	4618      	mov	r0, r3
 8008506:	f001 fe43 	bl	800a190 <RCCEx_PLL2_Config>
 800850a:	4603      	mov	r3, r0
 800850c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008510:	e00f      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008516:	3328      	adds	r3, #40	; 0x28
 8008518:	2101      	movs	r1, #1
 800851a:	4618      	mov	r0, r3
 800851c:	f001 feea 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008526:	e004      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800852e:	e000      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10a      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800853a:	4b96      	ldr	r3, [pc, #600]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800853c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853e:	f023 0107 	bic.w	r1, r3, #7
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008548:	4a92      	ldr	r2, [pc, #584]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800854a:	430b      	orrs	r3, r1
 800854c:	6553      	str	r3, [r2, #84]	; 0x54
 800854e:	e003      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f002 0304 	and.w	r3, r2, #4
 8008564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008568:	2300      	movs	r3, #0
 800856a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800856e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008572:	460b      	mov	r3, r1
 8008574:	4313      	orrs	r3, r2
 8008576:	d044      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008580:	2b05      	cmp	r3, #5
 8008582:	d825      	bhi.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008584:	a201      	add	r2, pc, #4	; (adr r2, 800858c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858a:	bf00      	nop
 800858c:	080085d9 	.word	0x080085d9
 8008590:	080085a5 	.word	0x080085a5
 8008594:	080085bb 	.word	0x080085bb
 8008598:	080085d9 	.word	0x080085d9
 800859c:	080085d9 	.word	0x080085d9
 80085a0:	080085d9 	.word	0x080085d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a8:	3308      	adds	r3, #8
 80085aa:	2101      	movs	r1, #1
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 fdef 	bl	800a190 <RCCEx_PLL2_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80085b8:	e00f      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085be:	3328      	adds	r3, #40	; 0x28
 80085c0:	2101      	movs	r1, #1
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fe96 	bl	800a2f4 <RCCEx_PLL3_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80085ce:	e004      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085d6:	e000      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80085d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10b      	bne.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085e2:	4b6c      	ldr	r3, [pc, #432]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e6:	f023 0107 	bic.w	r1, r3, #7
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085f2:	4a68      	ldr	r2, [pc, #416]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085f4:	430b      	orrs	r3, r1
 80085f6:	6593      	str	r3, [r2, #88]	; 0x58
 80085f8:	e003      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	f002 0320 	and.w	r3, r2, #32
 800860e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008612:	2300      	movs	r3, #0
 8008614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008618:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800861c:	460b      	mov	r3, r1
 800861e:	4313      	orrs	r3, r2
 8008620:	d055      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800862e:	d033      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008634:	d82c      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863a:	d02f      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800863c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008640:	d826      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008642:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008646:	d02b      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008648:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800864c:	d820      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800864e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008652:	d012      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008658:	d81a      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d022      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800865e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008662:	d115      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008668:	3308      	adds	r3, #8
 800866a:	2100      	movs	r1, #0
 800866c:	4618      	mov	r0, r3
 800866e:	f001 fd8f 	bl	800a190 <RCCEx_PLL2_Config>
 8008672:	4603      	mov	r3, r0
 8008674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008678:	e015      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800867a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800867e:	3328      	adds	r3, #40	; 0x28
 8008680:	2102      	movs	r1, #2
 8008682:	4618      	mov	r0, r3
 8008684:	f001 fe36 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800868e:	e00a      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008696:	e006      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008698:	bf00      	nop
 800869a:	e004      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800869c:	bf00      	nop
 800869e:	e002      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086a0:	bf00      	nop
 80086a2:	e000      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10b      	bne.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ae:	4b39      	ldr	r3, [pc, #228]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80086b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086be:	4a35      	ldr	r2, [pc, #212]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086c0:	430b      	orrs	r3, r1
 80086c2:	6553      	str	r3, [r2, #84]	; 0x54
 80086c4:	e003      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80086ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80086da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086de:	2300      	movs	r3, #0
 80086e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80086e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4313      	orrs	r3, r2
 80086ec:	d058      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80086fa:	d033      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80086fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008700:	d82c      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008706:	d02f      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800870c:	d826      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800870e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008712:	d02b      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008714:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008718:	d820      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800871a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800871e:	d012      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008724:	d81a      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d022      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800872a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800872e:	d115      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008734:	3308      	adds	r3, #8
 8008736:	2100      	movs	r1, #0
 8008738:	4618      	mov	r0, r3
 800873a:	f001 fd29 	bl	800a190 <RCCEx_PLL2_Config>
 800873e:	4603      	mov	r3, r0
 8008740:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008744:	e015      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874a:	3328      	adds	r3, #40	; 0x28
 800874c:	2102      	movs	r1, #2
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fdd0 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800875a:	e00a      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008762:	e006      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008764:	bf00      	nop
 8008766:	e004      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008768:	bf00      	nop
 800876a:	e002      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800876c:	bf00      	nop
 800876e:	e000      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10e      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800877a:	4b06      	ldr	r3, [pc, #24]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800877c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800878a:	4a02      	ldr	r2, [pc, #8]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800878c:	430b      	orrs	r3, r1
 800878e:	6593      	str	r3, [r2, #88]	; 0x58
 8008790:	e006      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008792:	bf00      	nop
 8008794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800879c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80087a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80087ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087b0:	2300      	movs	r3, #0
 80087b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80087ba:	460b      	mov	r3, r1
 80087bc:	4313      	orrs	r3, r2
 80087be:	d055      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80087c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80087c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087cc:	d033      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80087ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087d2:	d82c      	bhi.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087d8:	d02f      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80087da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087de:	d826      	bhi.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087e4:	d02b      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80087e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087ea:	d820      	bhi.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087f0:	d012      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80087f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087f6:	d81a      	bhi.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d022      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80087fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008800:	d115      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008806:	3308      	adds	r3, #8
 8008808:	2100      	movs	r1, #0
 800880a:	4618      	mov	r0, r3
 800880c:	f001 fcc0 	bl	800a190 <RCCEx_PLL2_Config>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008816:	e015      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881c:	3328      	adds	r3, #40	; 0x28
 800881e:	2102      	movs	r1, #2
 8008820:	4618      	mov	r0, r3
 8008822:	f001 fd67 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008826:	4603      	mov	r3, r0
 8008828:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800882c:	e00a      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008834:	e006      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008836:	bf00      	nop
 8008838:	e004      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800883a:	bf00      	nop
 800883c:	e002      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800883e:	bf00      	nop
 8008840:	e000      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10b      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800884c:	4ba1      	ldr	r3, [pc, #644]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800884e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008850:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008858:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800885c:	4a9d      	ldr	r2, [pc, #628]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800885e:	430b      	orrs	r3, r1
 8008860:	6593      	str	r3, [r2, #88]	; 0x58
 8008862:	e003      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008864:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008868:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800886c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f002 0308 	and.w	r3, r2, #8
 8008878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800887c:	2300      	movs	r3, #0
 800887e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008882:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008886:	460b      	mov	r3, r1
 8008888:	4313      	orrs	r3, r2
 800888a:	d01e      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800888c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008898:	d10c      	bne.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800889a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800889e:	3328      	adds	r3, #40	; 0x28
 80088a0:	2102      	movs	r1, #2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 fd26 	bl	800a2f4 <RCCEx_PLL3_Config>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80088b4:	4b87      	ldr	r3, [pc, #540]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c4:	4a83      	ldr	r2, [pc, #524]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088c6:	430b      	orrs	r3, r1
 80088c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f002 0310 	and.w	r3, r2, #16
 80088d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088da:	2300      	movs	r3, #0
 80088dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80088e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80088e4:	460b      	mov	r3, r1
 80088e6:	4313      	orrs	r3, r2
 80088e8:	d01e      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80088ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f6:	d10c      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fc:	3328      	adds	r3, #40	; 0x28
 80088fe:	2102      	movs	r1, #2
 8008900:	4618      	mov	r0, r3
 8008902:	f001 fcf7 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008912:	4b70      	ldr	r3, [pc, #448]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008916:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800891a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800891e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008922:	4a6c      	ldr	r2, [pc, #432]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008924:	430b      	orrs	r3, r1
 8008926:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008938:	2300      	movs	r3, #0
 800893a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800893e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008942:	460b      	mov	r3, r1
 8008944:	4313      	orrs	r3, r2
 8008946:	d03e      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800894c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008954:	d022      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800895a:	d81b      	bhi.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800895c:	2b00      	cmp	r3, #0
 800895e:	d003      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008964:	d00b      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008966:	e015      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896c:	3308      	adds	r3, #8
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f001 fc0d 	bl	800a190 <RCCEx_PLL2_Config>
 8008976:	4603      	mov	r3, r0
 8008978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800897c:	e00f      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800897e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008982:	3328      	adds	r3, #40	; 0x28
 8008984:	2102      	movs	r1, #2
 8008986:	4618      	mov	r0, r3
 8008988:	f001 fcb4 	bl	800a2f4 <RCCEx_PLL3_Config>
 800898c:	4603      	mov	r3, r0
 800898e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008992:	e004      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800899a:	e000      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800899c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800899e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10b      	bne.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089a6:	4b4b      	ldr	r3, [pc, #300]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80089ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089b6:	4a47      	ldr	r2, [pc, #284]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089b8:	430b      	orrs	r3, r1
 80089ba:	6593      	str	r3, [r2, #88]	; 0x58
 80089bc:	e003      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80089d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80089d4:	2300      	movs	r3, #0
 80089d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80089dc:	460b      	mov	r3, r1
 80089de:	4313      	orrs	r3, r2
 80089e0:	d03b      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80089e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089ee:	d01f      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80089f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089f4:	d818      	bhi.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80089f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089fa:	d003      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80089fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a00:	d007      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008a02:	e011      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a04:	4b33      	ldr	r3, [pc, #204]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	4a32      	ldr	r2, [pc, #200]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a10:	e00f      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a16:	3328      	adds	r3, #40	; 0x28
 8008a18:	2101      	movs	r1, #1
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f001 fc6a 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008a20:	4603      	mov	r3, r0
 8008a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a26:	e004      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a2e:	e000      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10b      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a3a:	4b26      	ldr	r3, [pc, #152]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a4a:	4a22      	ldr	r2, [pc, #136]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a4c:	430b      	orrs	r3, r1
 8008a4e:	6553      	str	r3, [r2, #84]	; 0x54
 8008a50:	e003      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008a66:	673b      	str	r3, [r7, #112]	; 0x70
 8008a68:	2300      	movs	r3, #0
 8008a6a:	677b      	str	r3, [r7, #116]	; 0x74
 8008a6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008a70:	460b      	mov	r3, r1
 8008a72:	4313      	orrs	r3, r2
 8008a74:	d034      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a84:	d007      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008a86:	e011      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a88:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	4a11      	ldr	r2, [pc, #68]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a94:	e00e      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 fb76 	bl	800a190 <RCCEx_PLL2_Config>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008aaa:	e003      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10d      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aca:	4a02      	ldr	r2, [pc, #8]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008acc:	430b      	orrs	r3, r1
 8008ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ad0:	e006      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008ad2:	bf00      	nop
 8008ad4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008adc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aee:	2300      	movs	r3, #0
 8008af0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008af2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008af6:	460b      	mov	r3, r1
 8008af8:	4313      	orrs	r3, r2
 8008afa:	d00c      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b00:	3328      	adds	r3, #40	; 0x28
 8008b02:	2102      	movs	r1, #2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f001 fbf5 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008b22:	663b      	str	r3, [r7, #96]	; 0x60
 8008b24:	2300      	movs	r3, #0
 8008b26:	667b      	str	r3, [r7, #100]	; 0x64
 8008b28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	d038      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b3e:	d018      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b44:	d811      	bhi.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b4a:	d014      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b50:	d80b      	bhi.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d011      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b5a:	d106      	bne.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b5c:	4bc3      	ldr	r3, [pc, #780]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	4ac2      	ldr	r2, [pc, #776]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008b68:	e008      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b70:	e004      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b72:	bf00      	nop
 8008b74:	e002      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b76:	bf00      	nop
 8008b78:	e000      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10b      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b84:	4bb9      	ldr	r3, [pc, #740]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b94:	4ab5      	ldr	r2, [pc, #724]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b96:	430b      	orrs	r3, r1
 8008b98:	6553      	str	r3, [r2, #84]	; 0x54
 8008b9a:	e003      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ba0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008bb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	d009      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008bc0:	4baa      	ldr	r3, [pc, #680]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bce:	4aa7      	ldr	r2, [pc, #668]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008be0:	653b      	str	r3, [r7, #80]	; 0x50
 8008be2:	2300      	movs	r3, #0
 8008be4:	657b      	str	r3, [r7, #84]	; 0x54
 8008be6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008bea:	460b      	mov	r3, r1
 8008bec:	4313      	orrs	r3, r2
 8008bee:	d00a      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008bf0:	4b9e      	ldr	r3, [pc, #632]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008c00:	4a9a      	ldr	r2, [pc, #616]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c02:	430b      	orrs	r3, r1
 8008c04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c14:	2300      	movs	r3, #0
 8008c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	d009      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c22:	4b92      	ldr	r3, [pc, #584]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c26:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c30:	4a8e      	ldr	r2, [pc, #568]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c32:	430b      	orrs	r3, r1
 8008c34:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008c42:	643b      	str	r3, [r7, #64]	; 0x40
 8008c44:	2300      	movs	r3, #0
 8008c46:	647b      	str	r3, [r7, #68]	; 0x44
 8008c48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	d00e      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c52:	4b86      	ldr	r3, [pc, #536]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	4a85      	ldr	r2, [pc, #532]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c5c:	6113      	str	r3, [r2, #16]
 8008c5e:	4b83      	ldr	r3, [pc, #524]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c60:	6919      	ldr	r1, [r3, #16]
 8008c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008c6a:	4a80      	ldr	r2, [pc, #512]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c7e:	2300      	movs	r3, #0
 8008c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008c86:	460b      	mov	r3, r1
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	d009      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c8c:	4b77      	ldr	r3, [pc, #476]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c90:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9a:	4a74      	ldr	r2, [pc, #464]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008cac:	633b      	str	r3, [r7, #48]	; 0x30
 8008cae:	2300      	movs	r3, #0
 8008cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	d00a      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008cbc:	4b6b      	ldr	r3, [pc, #428]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ccc:	4a67      	ldr	r2, [pc, #412]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	2100      	movs	r1, #0
 8008cdc:	62b9      	str	r1, [r7, #40]	; 0x28
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ce4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4313      	orrs	r3, r2
 8008cec:	d011      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 fa4a 	bl	800a190 <RCCEx_PLL2_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	6239      	str	r1, [r7, #32]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
 8008d24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	d011      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d32:	3308      	adds	r3, #8
 8008d34:	2101      	movs	r1, #1
 8008d36:	4618      	mov	r0, r3
 8008d38:	f001 fa2a 	bl	800a190 <RCCEx_PLL2_Config>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	61b9      	str	r1, [r7, #24]
 8008d5e:	f003 0304 	and.w	r3, r3, #4
 8008d62:	61fb      	str	r3, [r7, #28]
 8008d64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	d011      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d72:	3308      	adds	r3, #8
 8008d74:	2102      	movs	r1, #2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 fa0a 	bl	800a190 <RCCEx_PLL2_Config>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	6139      	str	r1, [r7, #16]
 8008d9e:	f003 0308 	and.w	r3, r3, #8
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008da8:	460b      	mov	r3, r1
 8008daa:	4313      	orrs	r3, r2
 8008dac:	d011      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db2:	3328      	adds	r3, #40	; 0x28
 8008db4:	2100      	movs	r1, #0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 fa9c 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	2100      	movs	r1, #0
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	f003 0310 	and.w	r3, r3, #16
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008de8:	460b      	mov	r3, r1
 8008dea:	4313      	orrs	r3, r2
 8008dec:	d011      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df2:	3328      	adds	r3, #40	; 0x28
 8008df4:	2101      	movs	r1, #1
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 fa7c 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	6039      	str	r1, [r7, #0]
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	607b      	str	r3, [r7, #4]
 8008e24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	d011      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e32:	3328      	adds	r3, #40	; 0x28
 8008e34:	2102      	movs	r1, #2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f001 fa5c 	bl	800a2f4 <RCCEx_PLL3_Config>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008e52:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e000      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008e66:	46bd      	mov	sp, r7
 8008e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e6c:	58024400 	.word	0x58024400

08008e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b090      	sub	sp, #64	; 0x40
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008e82:	430b      	orrs	r3, r1
 8008e84:	f040 8094 	bne.w	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008e88:	4b9e      	ldr	r3, [pc, #632]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	f200 8087 	bhi.w	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008e9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea0:	08008eb5 	.word	0x08008eb5
 8008ea4:	08008edd 	.word	0x08008edd
 8008ea8:	08008f05 	.word	0x08008f05
 8008eac:	08008fa1 	.word	0x08008fa1
 8008eb0:	08008f2d 	.word	0x08008f2d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eb4:	4b93      	ldr	r3, [pc, #588]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ec0:	d108      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f001 f810 	bl	8009eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ed0:	f000 bd45 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed8:	f000 bd41 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008edc:	4b89      	ldr	r3, [pc, #548]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ee8:	d108      	bne.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eea:	f107 0318 	add.w	r3, r7, #24
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fd54 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ef8:	f000 bd31 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f00:	f000 bd2d 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f04:	4b7f      	ldr	r3, [pc, #508]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f10:	d108      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f12:	f107 030c 	add.w	r3, r7, #12
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 fe94 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f20:	f000 bd1d 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f28:	f000 bd19 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f2c:	4b75      	ldr	r3, [pc, #468]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f34:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f36:	4b73      	ldr	r3, [pc, #460]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d10c      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d109      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f48:	4b6e      	ldr	r3, [pc, #440]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	08db      	lsrs	r3, r3, #3
 8008f4e:	f003 0303 	and.w	r3, r3, #3
 8008f52:	4a6d      	ldr	r2, [pc, #436]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f54:	fa22 f303 	lsr.w	r3, r2, r3
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f5a:	e01f      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f5c:	4b69      	ldr	r3, [pc, #420]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f68:	d106      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f70:	d102      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f72:	4b66      	ldr	r3, [pc, #408]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f76:	e011      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f78:	4b62      	ldr	r3, [pc, #392]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f84:	d106      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f8c:	d102      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f8e:	4b60      	ldr	r3, [pc, #384]	; (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f92:	e003      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f98:	f000 bce1 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f9c:	f000 bcdf 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fa0:	4b5c      	ldr	r3, [pc, #368]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fa4:	f000 bcdb 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fac:	f000 bcd7 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008fb8:	430b      	orrs	r3, r1
 8008fba:	f040 80ad 	bne.w	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008fbe:	4b51      	ldr	r3, [pc, #324]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008fc6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fce:	d056      	beq.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd6:	f200 8090 	bhi.w	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	2bc0      	cmp	r3, #192	; 0xc0
 8008fde:	f000 8088 	beq.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	2bc0      	cmp	r3, #192	; 0xc0
 8008fe6:	f200 8088 	bhi.w	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	2b80      	cmp	r3, #128	; 0x80
 8008fee:	d032      	beq.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	2b80      	cmp	r3, #128	; 0x80
 8008ff4:	f200 8081 	bhi.w	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	2b40      	cmp	r3, #64	; 0x40
 8009002:	d014      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009004:	e079      	b.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009006:	4b3f      	ldr	r3, [pc, #252]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800900e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009012:	d108      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009018:	4618      	mov	r0, r3
 800901a:	f000 ff67 	bl	8009eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009022:	f000 bc9c 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800902a:	f000 bc98 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800902e:	4b35      	ldr	r3, [pc, #212]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800903a:	d108      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800903c:	f107 0318 	add.w	r3, r7, #24
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fcab 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800904a:	f000 bc88 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009052:	f000 bc84 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009056:	4b2b      	ldr	r3, [pc, #172]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800905e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009062:	d108      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009064:	f107 030c 	add.w	r3, r7, #12
 8009068:	4618      	mov	r0, r3
 800906a:	f000 fdeb 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009072:	f000 bc74 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800907a:	f000 bc70 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800907e:	4b21      	ldr	r3, [pc, #132]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009082:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009086:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009088:	4b1e      	ldr	r3, [pc, #120]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b04      	cmp	r3, #4
 8009092:	d10c      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009096:	2b00      	cmp	r3, #0
 8009098:	d109      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800909a:	4b1a      	ldr	r3, [pc, #104]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	08db      	lsrs	r3, r3, #3
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	4a18      	ldr	r2, [pc, #96]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80090a6:	fa22 f303 	lsr.w	r3, r2, r3
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090ac:	e01f      	b.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090ae:	4b15      	ldr	r3, [pc, #84]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ba:	d106      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80090bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090c2:	d102      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090c4:	4b11      	ldr	r3, [pc, #68]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80090c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090c8:	e011      	b.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090ca:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090d6:	d106      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80090d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090de:	d102      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090e0:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e4:	e003      	b.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80090ea:	f000 bc38 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090ee:	f000 bc36 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090f2:	4b08      	ldr	r3, [pc, #32]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f6:	f000 bc32 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80090fa:	2300      	movs	r3, #0
 80090fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090fe:	f000 bc2e 	b.w	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009102:	bf00      	nop
 8009104:	58024400 	.word	0x58024400
 8009108:	03d09000 	.word	0x03d09000
 800910c:	003d0900 	.word	0x003d0900
 8009110:	017d7840 	.word	0x017d7840
 8009114:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800911c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009120:	430b      	orrs	r3, r1
 8009122:	f040 809c 	bne.w	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009126:	4b9e      	ldr	r3, [pc, #632]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800912a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800912e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009136:	d054      	beq.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800913e:	f200 808b 	bhi.w	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009148:	f000 8083 	beq.w	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009152:	f200 8081 	bhi.w	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800915c:	d02f      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009164:	d878      	bhi.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009172:	d012      	beq.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009174:	e070      	b.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009176:	4b8a      	ldr	r3, [pc, #552]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009182:	d107      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009188:	4618      	mov	r0, r3
 800918a:	f000 feaf 	bl	8009eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009192:	e3e4      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009198:	e3e1      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800919a:	4b81      	ldr	r3, [pc, #516]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a6:	d107      	bne.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a8:	f107 0318 	add.w	r3, r7, #24
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 fbf5 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091b6:	e3d2      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091bc:	e3cf      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091be:	4b78      	ldr	r3, [pc, #480]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ca:	d107      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091cc:	f107 030c 	add.w	r3, r7, #12
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fd37 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091da:	e3c0      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e0:	e3bd      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091e2:	4b6f      	ldr	r3, [pc, #444]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091ec:	4b6c      	ldr	r3, [pc, #432]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d10c      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80091f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091fe:	4b68      	ldr	r3, [pc, #416]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	08db      	lsrs	r3, r3, #3
 8009204:	f003 0303 	and.w	r3, r3, #3
 8009208:	4a66      	ldr	r2, [pc, #408]	; (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800920a:	fa22 f303 	lsr.w	r3, r2, r3
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009210:	e01e      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009212:	4b63      	ldr	r3, [pc, #396]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800921e:	d106      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009226:	d102      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009228:	4b5f      	ldr	r3, [pc, #380]	; (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800922c:	e010      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800922e:	4b5c      	ldr	r3, [pc, #368]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800923a:	d106      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009242:	d102      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009244:	4b59      	ldr	r3, [pc, #356]	; (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009248:	e002      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800924e:	e386      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009250:	e385      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009252:	4b57      	ldr	r3, [pc, #348]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009256:	e382      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800925c:	e37f      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800925e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009262:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009266:	430b      	orrs	r3, r1
 8009268:	f040 80a7 	bne.w	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800926c:	4b4c      	ldr	r3, [pc, #304]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800926e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009270:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009274:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800927c:	d055      	beq.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009284:	f200 8096 	bhi.w	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800928e:	f000 8084 	beq.w	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009298:	f200 808c 	bhi.w	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092a2:	d030      	beq.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092aa:	f200 8083 	bhi.w	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d004      	beq.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092ba:	d012      	beq.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80092bc:	e07a      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092be:	4b38      	ldr	r3, [pc, #224]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ca:	d107      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fe0b 	bl	8009eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092da:	e340      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e0:	e33d      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092e2:	4b2f      	ldr	r3, [pc, #188]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092ee:	d107      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f0:	f107 0318 	add.w	r3, r7, #24
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fb51 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092fe:	e32e      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009304:	e32b      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009306:	4b26      	ldr	r3, [pc, #152]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800930e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009312:	d107      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009314:	f107 030c 	add.w	r3, r7, #12
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fc93 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009322:	e31c      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009328:	e319      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800932a:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800932c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800932e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009332:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009334:	4b1a      	ldr	r3, [pc, #104]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b04      	cmp	r3, #4
 800933e:	d10c      	bne.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009342:	2b00      	cmp	r3, #0
 8009344:	d109      	bne.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009346:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	08db      	lsrs	r3, r3, #3
 800934c:	f003 0303 	and.w	r3, r3, #3
 8009350:	4a14      	ldr	r2, [pc, #80]	; (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009352:	fa22 f303 	lsr.w	r3, r2, r3
 8009356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009358:	e01e      	b.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800935a:	4b11      	ldr	r3, [pc, #68]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009366:	d106      	bne.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800936e:	d102      	bne.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009370:	4b0d      	ldr	r3, [pc, #52]	; (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009374:	e010      	b.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009376:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800937e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009382:	d106      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800938a:	d102      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800938c:	4b07      	ldr	r3, [pc, #28]	; (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009390:	e002      	b.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009396:	e2e2      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009398:	e2e1      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800939c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800939e:	e2de      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093a0:	58024400 	.word	0x58024400
 80093a4:	03d09000 	.word	0x03d09000
 80093a8:	003d0900 	.word	0x003d0900
 80093ac:	017d7840 	.word	0x017d7840
 80093b0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b8:	e2d1      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80093ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093be:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80093c2:	430b      	orrs	r3, r1
 80093c4:	f040 809c 	bne.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80093c8:	4b93      	ldr	r3, [pc, #588]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093cc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80093d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093d8:	d054      	beq.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093e0:	f200 808b 	bhi.w	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093ea:	f000 8083 	beq.w	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80093ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093f4:	f200 8081 	bhi.w	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093fe:	d02f      	beq.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009406:	d878      	bhi.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800940e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009414:	d012      	beq.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009416:	e070      	b.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009418:	4b7f      	ldr	r3, [pc, #508]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009424:	d107      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fd5e 	bl	8009eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009434:	e293      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800943a:	e290      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800943c:	4b76      	ldr	r3, [pc, #472]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009448:	d107      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800944a:	f107 0318 	add.w	r3, r7, #24
 800944e:	4618      	mov	r0, r3
 8009450:	f000 faa4 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009458:	e281      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800945e:	e27e      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009460:	4b6d      	ldr	r3, [pc, #436]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800946c:	d107      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800946e:	f107 030c 	add.w	r3, r7, #12
 8009472:	4618      	mov	r0, r3
 8009474:	f000 fbe6 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800947c:	e26f      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009482:	e26c      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009484:	4b64      	ldr	r3, [pc, #400]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800948c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800948e:	4b62      	ldr	r3, [pc, #392]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b04      	cmp	r3, #4
 8009498:	d10c      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	2b00      	cmp	r3, #0
 800949e:	d109      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094a0:	4b5d      	ldr	r3, [pc, #372]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	08db      	lsrs	r3, r3, #3
 80094a6:	f003 0303 	and.w	r3, r3, #3
 80094aa:	4a5c      	ldr	r2, [pc, #368]	; (800961c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80094ac:	fa22 f303 	lsr.w	r3, r2, r3
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b2:	e01e      	b.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094b4:	4b58      	ldr	r3, [pc, #352]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094c0:	d106      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094c8:	d102      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094ca:	4b55      	ldr	r3, [pc, #340]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ce:	e010      	b.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094d0:	4b51      	ldr	r3, [pc, #324]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094dc:	d106      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80094de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094e4:	d102      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094e6:	4b4f      	ldr	r3, [pc, #316]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ea:	e002      	b.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80094f0:	e235      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094f2:	e234      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094f4:	4b4c      	ldr	r3, [pc, #304]	; (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80094f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f8:	e231      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094fe:	e22e      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009504:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009508:	430b      	orrs	r3, r1
 800950a:	f040 808f 	bne.w	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800950e:	4b42      	ldr	r3, [pc, #264]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009512:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009516:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800951e:	d06b      	beq.n	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009526:	d874      	bhi.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800952e:	d056      	beq.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009536:	d86c      	bhi.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800953e:	d03b      	beq.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009546:	d864      	bhi.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800954e:	d021      	beq.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009556:	d85c      	bhi.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	2b00      	cmp	r3, #0
 800955c:	d004      	beq.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009564:	d004      	beq.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009566:	e054      	b.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009568:	f7fe fa4c 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 800956c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800956e:	e1f6      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009570:	4b29      	ldr	r3, [pc, #164]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800957c:	d107      	bne.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800957e:	f107 0318 	add.w	r3, r7, #24
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fa0a 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800958c:	e1e7      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009592:	e1e4      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009594:	4b20      	ldr	r3, [pc, #128]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800959c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a0:	d107      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095a2:	f107 030c 	add.w	r3, r7, #12
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fb4c 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b0:	e1d5      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095b6:	e1d2      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095b8:	4b17      	ldr	r3, [pc, #92]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d109      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095c4:	4b14      	ldr	r3, [pc, #80]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	08db      	lsrs	r3, r3, #3
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	4a13      	ldr	r2, [pc, #76]	; (800961c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80095d0:	fa22 f303 	lsr.w	r3, r2, r3
 80095d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095d6:	e1c2      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095dc:	e1bf      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80095de:	4b0e      	ldr	r3, [pc, #56]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ea:	d102      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80095ec:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095f0:	e1b5      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095f6:	e1b2      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095f8:	4b07      	ldr	r3, [pc, #28]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009604:	d102      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800960a:	e1a8      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009610:	e1a5      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009616:	e1a2      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009618:	58024400 	.word	0x58024400
 800961c:	03d09000 	.word	0x03d09000
 8009620:	003d0900 	.word	0x003d0900
 8009624:	017d7840 	.word	0x017d7840
 8009628:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800962c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009630:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009634:	430b      	orrs	r3, r1
 8009636:	d173      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009638:	4b9c      	ldr	r3, [pc, #624]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800963a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009640:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009648:	d02f      	beq.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009650:	d863      	bhi.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	2b00      	cmp	r3, #0
 8009656:	d004      	beq.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800965e:	d012      	beq.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009660:	e05b      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009662:	4b92      	ldr	r3, [pc, #584]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800966a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800966e:	d107      	bne.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009670:	f107 0318 	add.w	r3, r7, #24
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f991 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800967e:	e16e      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009684:	e16b      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009686:	4b89      	ldr	r3, [pc, #548]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800968e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009692:	d107      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009694:	f107 030c 	add.w	r3, r7, #12
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fad3 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096a2:	e15c      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096a8:	e159      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096aa:	4b80      	ldr	r3, [pc, #512]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096b4:	4b7d      	ldr	r3, [pc, #500]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b04      	cmp	r3, #4
 80096be:	d10c      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80096c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d109      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096c6:	4b79      	ldr	r3, [pc, #484]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	08db      	lsrs	r3, r3, #3
 80096cc:	f003 0303 	and.w	r3, r3, #3
 80096d0:	4a77      	ldr	r2, [pc, #476]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80096d2:	fa22 f303 	lsr.w	r3, r2, r3
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d8:	e01e      	b.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096da:	4b74      	ldr	r3, [pc, #464]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e6:	d106      	bne.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80096e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096ee:	d102      	bne.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096f0:	4b70      	ldr	r3, [pc, #448]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80096f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096f4:	e010      	b.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096f6:	4b6d      	ldr	r3, [pc, #436]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009702:	d106      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800970a:	d102      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800970c:	4b6a      	ldr	r3, [pc, #424]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009710:	e002      	b.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009716:	e122      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009718:	e121      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800971e:	e11e      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009724:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009728:	430b      	orrs	r3, r1
 800972a:	d133      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800972c:	4b5f      	ldr	r3, [pc, #380]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800972e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009734:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	2b00      	cmp	r3, #0
 800973a:	d004      	beq.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009742:	d012      	beq.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009744:	e023      	b.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009746:	4b59      	ldr	r3, [pc, #356]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800974e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009752:	d107      	bne.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009758:	4618      	mov	r0, r3
 800975a:	f000 fbc7 	bl	8009eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009762:	e0fc      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009768:	e0f9      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800976a:	4b50      	ldr	r3, [pc, #320]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009776:	d107      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009778:	f107 0318 	add.w	r3, r7, #24
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f90d 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009786:	e0ea      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009788:	2300      	movs	r3, #0
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800978c:	e0e7      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800978e:	2300      	movs	r3, #0
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009792:	e0e4      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009798:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800979c:	430b      	orrs	r3, r1
 800979e:	f040 808d 	bne.w	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80097a2:	4b42      	ldr	r3, [pc, #264]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80097aa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097b2:	d06b      	beq.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ba:	d874      	bhi.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c2:	d056      	beq.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ca:	d86c      	bhi.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097d2:	d03b      	beq.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097da:	d864      	bhi.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e2:	d021      	beq.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ea:	d85c      	bhi.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80097f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097f8:	d004      	beq.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80097fa:	e054      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80097fc:	f000 f8b8 	bl	8009970 <HAL_RCCEx_GetD3PCLK1Freq>
 8009800:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009802:	e0ac      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009804:	4b29      	ldr	r3, [pc, #164]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800980c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009810:	d107      	bne.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009812:	f107 0318 	add.w	r3, r7, #24
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f8c0 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009820:	e09d      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009826:	e09a      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009828:	4b20      	ldr	r3, [pc, #128]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009834:	d107      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009836:	f107 030c 	add.w	r3, r7, #12
 800983a:	4618      	mov	r0, r3
 800983c:	f000 fa02 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009844:	e08b      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800984a:	e088      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800984c:	4b17      	ldr	r3, [pc, #92]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b04      	cmp	r3, #4
 8009856:	d109      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009858:	4b14      	ldr	r3, [pc, #80]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	08db      	lsrs	r3, r3, #3
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	4a13      	ldr	r2, [pc, #76]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009864:	fa22 f303 	lsr.w	r3, r2, r3
 8009868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800986a:	e078      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009870:	e075      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009872:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987e:	d102      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009880:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009884:	e06b      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800988a:	e068      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800988c:	4b07      	ldr	r3, [pc, #28]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009898:	d102      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800989a:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800989e:	e05e      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098a4:	e05b      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098aa:	e058      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098ac:	58024400 	.word	0x58024400
 80098b0:	03d09000 	.word	0x03d09000
 80098b4:	003d0900 	.word	0x003d0900
 80098b8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80098bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098c0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80098c4:	430b      	orrs	r3, r1
 80098c6:	d148      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80098c8:	4b27      	ldr	r3, [pc, #156]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098d8:	d02a      	beq.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e0:	d838      	bhi.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80098e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d004      	beq.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098ee:	d00d      	beq.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80098f0:	e030      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098fe:	d102      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009900:	4b1a      	ldr	r3, [pc, #104]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009904:	e02b      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800990a:	e028      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800990c:	4b16      	ldr	r3, [pc, #88]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009918:	d107      	bne.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800991a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800991e:	4618      	mov	r0, r3
 8009920:	f000 fae4 	bl	8009eec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009928:	e019      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800992e:	e016      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009930:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800993c:	d107      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800993e:	f107 0318 	add.w	r3, r7, #24
 8009942:	4618      	mov	r0, r3
 8009944:	f000 f82a 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800994c:	e007      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009952:	e004      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009958:	e001      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800995e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009960:	4618      	mov	r0, r3
 8009962:	3740      	adds	r7, #64	; 0x40
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	58024400 	.word	0x58024400
 800996c:	017d7840 	.word	0x017d7840

08009970 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009974:	f7fe f816 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 8009978:	4602      	mov	r2, r0
 800997a:	4b06      	ldr	r3, [pc, #24]	; (8009994 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	091b      	lsrs	r3, r3, #4
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	4904      	ldr	r1, [pc, #16]	; (8009998 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009986:	5ccb      	ldrb	r3, [r1, r3]
 8009988:	f003 031f 	and.w	r3, r3, #31
 800998c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009990:	4618      	mov	r0, r3
 8009992:	bd80      	pop	{r7, pc}
 8009994:	58024400 	.word	0x58024400
 8009998:	0800d3e8 	.word	0x0800d3e8

0800999c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800999c:	b480      	push	{r7}
 800999e:	b089      	sub	sp, #36	; 0x24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099a4:	4ba1      	ldr	r3, [pc, #644]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a8:	f003 0303 	and.w	r3, r3, #3
 80099ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80099ae:	4b9f      	ldr	r3, [pc, #636]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	0b1b      	lsrs	r3, r3, #12
 80099b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099ba:	4b9c      	ldr	r3, [pc, #624]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099be:	091b      	lsrs	r3, r3, #4
 80099c0:	f003 0301 	and.w	r3, r3, #1
 80099c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80099c6:	4b99      	ldr	r3, [pc, #612]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ca:	08db      	lsrs	r3, r3, #3
 80099cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	fb02 f303 	mul.w	r3, r2, r3
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 8111 	beq.w	8009c0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	f000 8083 	beq.w	8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	f200 80a1 	bhi.w	8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d003      	beq.n	8009a08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d056      	beq.n	8009ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a06:	e099      	b.n	8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a08:	4b88      	ldr	r3, [pc, #544]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0320 	and.w	r3, r3, #32
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d02d      	beq.n	8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a14:	4b85      	ldr	r3, [pc, #532]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	08db      	lsrs	r3, r3, #3
 8009a1a:	f003 0303 	and.w	r3, r3, #3
 8009a1e:	4a84      	ldr	r2, [pc, #528]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a20:	fa22 f303 	lsr.w	r3, r2, r3
 8009a24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	ee07 3a90 	vmov	s15, r3
 8009a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3e:	4b7b      	ldr	r3, [pc, #492]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a6e:	e087      	b.n	8009b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a82:	4b6a      	ldr	r3, [pc, #424]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ab2:	e065      	b.n	8009b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac6:	4b59      	ldr	r3, [pc, #356]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ada:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009af6:	e043      	b.n	8009b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	ee07 3a90 	vmov	s15, r3
 8009afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0a:	4b48      	ldr	r3, [pc, #288]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b3a:	e021      	b.n	8009b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4e:	4b37      	ldr	r3, [pc, #220]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009b80:	4b2a      	ldr	r3, [pc, #168]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b84:	0a5b      	lsrs	r3, r3, #9
 8009b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ba6:	ee17 2a90 	vmov	r2, s15
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009bae:	4b1f      	ldr	r3, [pc, #124]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb2:	0c1b      	lsrs	r3, r3, #16
 8009bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bb8:	ee07 3a90 	vmov	s15, r3
 8009bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bd4:	ee17 2a90 	vmov	r2, s15
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009bdc:	4b13      	ldr	r3, [pc, #76]	; (8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be0:	0e1b      	lsrs	r3, r3, #24
 8009be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c02:	ee17 2a90 	vmov	r2, s15
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c0a:	e008      	b.n	8009c1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	609a      	str	r2, [r3, #8]
}
 8009c1e:	bf00      	nop
 8009c20:	3724      	adds	r7, #36	; 0x24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	58024400 	.word	0x58024400
 8009c30:	03d09000 	.word	0x03d09000
 8009c34:	46000000 	.word	0x46000000
 8009c38:	4c742400 	.word	0x4c742400
 8009c3c:	4a742400 	.word	0x4a742400
 8009c40:	4bbebc20 	.word	0x4bbebc20

08009c44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b089      	sub	sp, #36	; 0x24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c4c:	4ba1      	ldr	r3, [pc, #644]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c50:	f003 0303 	and.w	r3, r3, #3
 8009c54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c56:	4b9f      	ldr	r3, [pc, #636]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5a:	0d1b      	lsrs	r3, r3, #20
 8009c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c62:	4b9c      	ldr	r3, [pc, #624]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c66:	0a1b      	lsrs	r3, r3, #8
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009c6e:	4b99      	ldr	r3, [pc, #612]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c72:	08db      	lsrs	r3, r3, #3
 8009c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	fb02 f303 	mul.w	r3, r2, r3
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 8111 	beq.w	8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	f000 8083 	beq.w	8009da0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	f200 80a1 	bhi.w	8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d056      	beq.n	8009d5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009cae:	e099      	b.n	8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cb0:	4b88      	ldr	r3, [pc, #544]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0320 	and.w	r3, r3, #32
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d02d      	beq.n	8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cbc:	4b85      	ldr	r3, [pc, #532]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	08db      	lsrs	r3, r3, #3
 8009cc2:	f003 0303 	and.w	r3, r3, #3
 8009cc6:	4a84      	ldr	r2, [pc, #528]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ccc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	ee07 3a90 	vmov	s15, r3
 8009cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ce6:	4b7b      	ldr	r3, [pc, #492]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d16:	e087      	b.n	8009e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d2a:	4b6a      	ldr	r3, [pc, #424]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d5a:	e065      	b.n	8009e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d6e:	4b59      	ldr	r3, [pc, #356]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d9e:	e043      	b.n	8009e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	ee07 3a90 	vmov	s15, r3
 8009da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009daa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db2:	4b48      	ldr	r3, [pc, #288]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009de2:	e021      	b.n	8009e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	ee07 3a90 	vmov	s15, r3
 8009dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009df6:	4b37      	ldr	r3, [pc, #220]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009e28:	4b2a      	ldr	r3, [pc, #168]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2c:	0a5b      	lsrs	r3, r3, #9
 8009e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e32:	ee07 3a90 	vmov	s15, r3
 8009e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e42:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e4e:	ee17 2a90 	vmov	r2, s15
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e56:	4b1f      	ldr	r3, [pc, #124]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5a:	0c1b      	lsrs	r3, r3, #16
 8009e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e7c:	ee17 2a90 	vmov	r2, s15
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009e84:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	0e1b      	lsrs	r3, r3, #24
 8009e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eaa:	ee17 2a90 	vmov	r2, s15
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009eb2:	e008      	b.n	8009ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	609a      	str	r2, [r3, #8]
}
 8009ec6:	bf00      	nop
 8009ec8:	3724      	adds	r7, #36	; 0x24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	58024400 	.word	0x58024400
 8009ed8:	03d09000 	.word	0x03d09000
 8009edc:	46000000 	.word	0x46000000
 8009ee0:	4c742400 	.word	0x4c742400
 8009ee4:	4a742400 	.word	0x4a742400
 8009ee8:	4bbebc20 	.word	0x4bbebc20

08009eec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b089      	sub	sp, #36	; 0x24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ef4:	4ba0      	ldr	r3, [pc, #640]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef8:	f003 0303 	and.w	r3, r3, #3
 8009efc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009efe:	4b9e      	ldr	r3, [pc, #632]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	091b      	lsrs	r3, r3, #4
 8009f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f08:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f0a:	4b9b      	ldr	r3, [pc, #620]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f14:	4b98      	ldr	r3, [pc, #608]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f18:	08db      	lsrs	r3, r3, #3
 8009f1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	fb02 f303 	mul.w	r3, r2, r3
 8009f24:	ee07 3a90 	vmov	s15, r3
 8009f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 8111 	beq.w	800a15a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	f000 8083 	beq.w	800a046 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	f200 80a1 	bhi.w	800a08a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d003      	beq.n	8009f56 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d056      	beq.n	800a002 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f54:	e099      	b.n	800a08a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f56:	4b88      	ldr	r3, [pc, #544]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 0320 	and.w	r3, r3, #32
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d02d      	beq.n	8009fbe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f62:	4b85      	ldr	r3, [pc, #532]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	08db      	lsrs	r3, r3, #3
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	4a83      	ldr	r2, [pc, #524]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f72:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	ee07 3a90 	vmov	s15, r3
 8009f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f8c:	4b7a      	ldr	r3, [pc, #488]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f94:	ee07 3a90 	vmov	s15, r3
 8009f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fa0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fbc:	e087      	b.n	800a0ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	ee07 3a90 	vmov	s15, r3
 8009fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a184 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd0:	4b69      	ldr	r3, [pc, #420]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fd8:	ee07 3a90 	vmov	s15, r3
 8009fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fe4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ffc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a000:	e065      	b.n	800a0ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	ee07 3a90 	vmov	s15, r3
 800a008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a188 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a014:	4b58      	ldr	r3, [pc, #352]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a024:	ed97 6a03 	vldr	s12, [r7, #12]
 800a028:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a02c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a044:	e043      	b.n	800a0ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	ee07 3a90 	vmov	s15, r3
 800a04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a050:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a18c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a058:	4b47      	ldr	r3, [pc, #284]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a068:	ed97 6a03 	vldr	s12, [r7, #12]
 800a06c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a070:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a074:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a07c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a080:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a084:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a088:	e021      	b.n	800a0ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	ee07 3a90 	vmov	s15, r3
 800a090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a094:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a184 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a09c:	4b36      	ldr	r3, [pc, #216]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a0ce:	4b2a      	ldr	r3, [pc, #168]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d2:	0a5b      	lsrs	r3, r3, #9
 800a0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d8:	ee07 3a90 	vmov	s15, r3
 800a0dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f4:	ee17 2a90 	vmov	r2, s15
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a0fc:	4b1e      	ldr	r3, [pc, #120]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a100:	0c1b      	lsrs	r3, r3, #16
 800a102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a112:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a116:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a122:	ee17 2a90 	vmov	r2, s15
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a12a:	4b13      	ldr	r3, [pc, #76]	; (800a178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	0e1b      	lsrs	r3, r3, #24
 800a130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a140:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a144:	edd7 6a07 	vldr	s13, [r7, #28]
 800a148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a14c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a150:	ee17 2a90 	vmov	r2, s15
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a158:	e008      	b.n	800a16c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	609a      	str	r2, [r3, #8]
}
 800a16c:	bf00      	nop
 800a16e:	3724      	adds	r7, #36	; 0x24
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	58024400 	.word	0x58024400
 800a17c:	03d09000 	.word	0x03d09000
 800a180:	46000000 	.word	0x46000000
 800a184:	4c742400 	.word	0x4c742400
 800a188:	4a742400 	.word	0x4a742400
 800a18c:	4bbebc20 	.word	0x4bbebc20

0800a190 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a19e:	4b53      	ldr	r3, [pc, #332]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a2:	f003 0303 	and.w	r3, r3, #3
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d101      	bne.n	800a1ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e099      	b.n	800a2e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1ae:	4b4f      	ldr	r3, [pc, #316]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a4e      	ldr	r2, [pc, #312]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a1b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a1b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ba:	f7f8 fd6d 	bl	8002c98 <HAL_GetTick>
 800a1be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1c0:	e008      	b.n	800a1d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1c2:	f7f8 fd69 	bl	8002c98 <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d901      	bls.n	800a1d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e086      	b.n	800a2e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1d4:	4b45      	ldr	r3, [pc, #276]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f0      	bne.n	800a1c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1e0:	4b42      	ldr	r3, [pc, #264]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	031b      	lsls	r3, r3, #12
 800a1ee:	493f      	ldr	r1, [pc, #252]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	628b      	str	r3, [r1, #40]	; 0x28
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	3b01      	subs	r3, #1
 800a204:	025b      	lsls	r3, r3, #9
 800a206:	b29b      	uxth	r3, r3
 800a208:	431a      	orrs	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	3b01      	subs	r3, #1
 800a210:	041b      	lsls	r3, r3, #16
 800a212:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a216:	431a      	orrs	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	061b      	lsls	r3, r3, #24
 800a220:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a224:	4931      	ldr	r1, [pc, #196]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a226:	4313      	orrs	r3, r2
 800a228:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a22a:	4b30      	ldr	r3, [pc, #192]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	492d      	ldr	r1, [pc, #180]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a23c:	4b2b      	ldr	r3, [pc, #172]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	f023 0220 	bic.w	r2, r3, #32
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	4928      	ldr	r1, [pc, #160]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a24a:	4313      	orrs	r3, r2
 800a24c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a24e:	4b27      	ldr	r3, [pc, #156]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a252:	4a26      	ldr	r2, [pc, #152]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a254:	f023 0310 	bic.w	r3, r3, #16
 800a258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a25a:	4b24      	ldr	r3, [pc, #144]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a25c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a25e:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <RCCEx_PLL2_Config+0x160>)
 800a260:	4013      	ands	r3, r2
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	69d2      	ldr	r2, [r2, #28]
 800a266:	00d2      	lsls	r2, r2, #3
 800a268:	4920      	ldr	r1, [pc, #128]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a26e:	4b1f      	ldr	r3, [pc, #124]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a272:	4a1e      	ldr	r2, [pc, #120]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a274:	f043 0310 	orr.w	r3, r3, #16
 800a278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d106      	bne.n	800a28e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a280:	4b1a      	ldr	r3, [pc, #104]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	4a19      	ldr	r2, [pc, #100]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a28a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a28c:	e00f      	b.n	800a2ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d106      	bne.n	800a2a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a294:	4b15      	ldr	r3, [pc, #84]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	4a14      	ldr	r2, [pc, #80]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a29a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a29e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2a0:	e005      	b.n	800a2ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2a2:	4b12      	ldr	r3, [pc, #72]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a6:	4a11      	ldr	r2, [pc, #68]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a0e      	ldr	r2, [pc, #56]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a2b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2ba:	f7f8 fced 	bl	8002c98 <HAL_GetTick>
 800a2be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2c0:	e008      	b.n	800a2d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2c2:	f7f8 fce9 	bl	8002c98 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d901      	bls.n	800a2d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e006      	b.n	800a2e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2d4:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <RCCEx_PLL2_Config+0x15c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0f0      	beq.n	800a2c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	58024400 	.word	0x58024400
 800a2f0:	ffff0007 	.word	0xffff0007

0800a2f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a302:	4b53      	ldr	r3, [pc, #332]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d101      	bne.n	800a312 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	e099      	b.n	800a446 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a312:	4b4f      	ldr	r3, [pc, #316]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a4e      	ldr	r2, [pc, #312]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a31e:	f7f8 fcbb 	bl	8002c98 <HAL_GetTick>
 800a322:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a324:	e008      	b.n	800a338 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a326:	f7f8 fcb7 	bl	8002c98 <HAL_GetTick>
 800a32a:	4602      	mov	r2, r0
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	2b02      	cmp	r3, #2
 800a332:	d901      	bls.n	800a338 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e086      	b.n	800a446 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a338:	4b45      	ldr	r3, [pc, #276]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1f0      	bne.n	800a326 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a344:	4b42      	ldr	r3, [pc, #264]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a348:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	051b      	lsls	r3, r3, #20
 800a352:	493f      	ldr	r1, [pc, #252]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a354:	4313      	orrs	r3, r2
 800a356:	628b      	str	r3, [r1, #40]	; 0x28
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	3b01      	subs	r3, #1
 800a368:	025b      	lsls	r3, r3, #9
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	431a      	orrs	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	3b01      	subs	r3, #1
 800a374:	041b      	lsls	r3, r3, #16
 800a376:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a37a:	431a      	orrs	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	3b01      	subs	r3, #1
 800a382:	061b      	lsls	r3, r3, #24
 800a384:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a388:	4931      	ldr	r1, [pc, #196]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a38e:	4b30      	ldr	r3, [pc, #192]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	492d      	ldr	r1, [pc, #180]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3a0:	4b2b      	ldr	r3, [pc, #172]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	4928      	ldr	r1, [pc, #160]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3b2:	4b27      	ldr	r3, [pc, #156]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	4a26      	ldr	r2, [pc, #152]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3be:	4b24      	ldr	r3, [pc, #144]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3c2:	4b24      	ldr	r3, [pc, #144]	; (800a454 <RCCEx_PLL3_Config+0x160>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	69d2      	ldr	r2, [r2, #28]
 800a3ca:	00d2      	lsls	r2, r2, #3
 800a3cc:	4920      	ldr	r1, [pc, #128]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3d2:	4b1f      	ldr	r3, [pc, #124]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d6:	4a1e      	ldr	r2, [pc, #120]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d106      	bne.n	800a3f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3e4:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	4a19      	ldr	r2, [pc, #100]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a3ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3f0:	e00f      	b.n	800a412 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d106      	bne.n	800a406 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a3f8:	4b15      	ldr	r3, [pc, #84]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fc:	4a14      	ldr	r2, [pc, #80]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a402:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a404:	e005      	b.n	800a412 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a406:	4b12      	ldr	r3, [pc, #72]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40a:	4a11      	ldr	r2, [pc, #68]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a410:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a412:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a0e      	ldr	r2, [pc, #56]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a41c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a41e:	f7f8 fc3b 	bl	8002c98 <HAL_GetTick>
 800a422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a424:	e008      	b.n	800a438 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a426:	f7f8 fc37 	bl	8002c98 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	2b02      	cmp	r3, #2
 800a432:	d901      	bls.n	800a438 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e006      	b.n	800a446 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <RCCEx_PLL3_Config+0x15c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d0f0      	beq.n	800a426 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a444:	7bfb      	ldrb	r3, [r7, #15]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	58024400 	.word	0x58024400
 800a454:	ffff0007 	.word	0xffff0007

0800a458 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d071      	beq.n	800a54e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d106      	bne.n	800a484 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7f7 ff26 	bl	80022d0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f003 0310 	and.w	r3, r3, #16
 800a496:	2b10      	cmp	r3, #16
 800a498:	d050      	beq.n	800a53c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	22ca      	movs	r2, #202	; 0xca
 800a4a0:	625a      	str	r2, [r3, #36]	; 0x24
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2253      	movs	r2, #83	; 0x53
 800a4a8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f87a 	bl	800a5a4 <RTC_EnterInitMode>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d124      	bne.n	800a504 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6899      	ldr	r1, [r3, #8]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	4b24      	ldr	r3, [pc, #144]	; (800a558 <HAL_RTC_Init+0x100>)
 800a4c6:	400b      	ands	r3, r1
 800a4c8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6899      	ldr	r1, [r3, #8]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	430a      	orrs	r2, r1
 800a4e6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	0419      	lsls	r1, r3, #16
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f886 	bl	800a60c <RTC_ExitInitMode>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d113      	bne.n	800a532 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 0203 	bic.w	r2, r2, #3
 800a518:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	69da      	ldr	r2, [r3, #28]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	431a      	orrs	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	430a      	orrs	r2, r1
 800a530:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	22ff      	movs	r2, #255	; 0xff
 800a538:	625a      	str	r2, [r3, #36]	; 0x24
 800a53a:	e001      	b.n	800a540 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d103      	bne.n	800a54e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	ff8fffbf 	.word	0xff8fffbf

0800a55c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a0d      	ldr	r2, [pc, #52]	; (800a5a0 <HAL_RTC_WaitForSynchro+0x44>)
 800a56a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a56c:	f7f8 fb94 	bl	8002c98 <HAL_GetTick>
 800a570:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a572:	e009      	b.n	800a588 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a574:	f7f8 fb90 	bl	8002c98 <HAL_GetTick>
 800a578:	4602      	mov	r2, r0
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a582:	d901      	bls.n	800a588 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e007      	b.n	800a598 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	f003 0320 	and.w	r3, r3, #32
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0ee      	beq.n	800a574 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	0003ff5f 	.word	0x0003ff5f

0800a5a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d120      	bne.n	800a600 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a5c8:	f7f8 fb66 	bl	8002c98 <HAL_GetTick>
 800a5cc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a5ce:	e00d      	b.n	800a5ec <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a5d0:	f7f8 fb62 	bl	8002c98 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5de:	d905      	bls.n	800a5ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d102      	bne.n	800a600 <RTC_EnterInitMode+0x5c>
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d1e7      	bne.n	800a5d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a618:	4b1a      	ldr	r3, [pc, #104]	; (800a684 <RTC_ExitInitMode+0x78>)
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	4a19      	ldr	r2, [pc, #100]	; (800a684 <RTC_ExitInitMode+0x78>)
 800a61e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a622:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a624:	4b17      	ldr	r3, [pc, #92]	; (800a684 <RTC_ExitInitMode+0x78>)
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f003 0320 	and.w	r3, r3, #32
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10c      	bne.n	800a64a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7ff ff93 	bl	800a55c <HAL_RTC_WaitForSynchro>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01e      	beq.n	800a67a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2203      	movs	r2, #3
 800a640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	73fb      	strb	r3, [r7, #15]
 800a648:	e017      	b.n	800a67a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a64a:	4b0e      	ldr	r3, [pc, #56]	; (800a684 <RTC_ExitInitMode+0x78>)
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	4a0d      	ldr	r2, [pc, #52]	; (800a684 <RTC_ExitInitMode+0x78>)
 800a650:	f023 0320 	bic.w	r3, r3, #32
 800a654:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7ff ff80 	bl	800a55c <HAL_RTC_WaitForSynchro>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d005      	beq.n	800a66e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2203      	movs	r2, #3
 800a666:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a66e:	4b05      	ldr	r3, [pc, #20]	; (800a684 <RTC_ExitInitMode+0x78>)
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	4a04      	ldr	r2, [pc, #16]	; (800a684 <RTC_ExitInitMode+0x78>)
 800a674:	f043 0320 	orr.w	r3, r3, #32
 800a678:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	58004000 	.word	0x58004000

0800a688 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e28e      	b.n	800abb8 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a69a:	f7f8 fb2d 	bl	8002cf8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d113      	bne.n	800a6d0 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a96      	ldr	r2, [pc, #600]	; (800a908 <HAL_SAI_Init+0x280>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d004      	beq.n	800a6bc <HAL_SAI_Init+0x34>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a95      	ldr	r2, [pc, #596]	; (800a90c <HAL_SAI_Init+0x284>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d107      	bne.n	800a6cc <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d103      	bne.n	800a6cc <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e273      	b.n	800abb8 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a8c      	ldr	r2, [pc, #560]	; (800a908 <HAL_SAI_Init+0x280>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d004      	beq.n	800a6e4 <HAL_SAI_Init+0x5c>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a8c      	ldr	r2, [pc, #560]	; (800a910 <HAL_SAI_Init+0x288>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d102      	bne.n	800a6ea <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a6e4:	4b8b      	ldr	r3, [pc, #556]	; (800a914 <HAL_SAI_Init+0x28c>)
 800a6e6:	61bb      	str	r3, [r7, #24]
 800a6e8:	e028      	b.n	800a73c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a8a      	ldr	r2, [pc, #552]	; (800a918 <HAL_SAI_Init+0x290>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d004      	beq.n	800a6fe <HAL_SAI_Init+0x76>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a88      	ldr	r2, [pc, #544]	; (800a91c <HAL_SAI_Init+0x294>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d102      	bne.n	800a704 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a6fe:	4b88      	ldr	r3, [pc, #544]	; (800a920 <HAL_SAI_Init+0x298>)
 800a700:	61bb      	str	r3, [r7, #24]
 800a702:	e01b      	b.n	800a73c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a86      	ldr	r2, [pc, #536]	; (800a924 <HAL_SAI_Init+0x29c>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d004      	beq.n	800a718 <HAL_SAI_Init+0x90>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a85      	ldr	r2, [pc, #532]	; (800a928 <HAL_SAI_Init+0x2a0>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d102      	bne.n	800a71e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a718:	4b84      	ldr	r3, [pc, #528]	; (800a92c <HAL_SAI_Init+0x2a4>)
 800a71a:	61bb      	str	r3, [r7, #24]
 800a71c:	e00e      	b.n	800a73c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a7a      	ldr	r2, [pc, #488]	; (800a90c <HAL_SAI_Init+0x284>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d004      	beq.n	800a732 <HAL_SAI_Init+0xaa>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a80      	ldr	r2, [pc, #512]	; (800a930 <HAL_SAI_Init+0x2a8>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d102      	bne.n	800a738 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a732:	4b80      	ldr	r3, [pc, #512]	; (800a934 <HAL_SAI_Init+0x2ac>)
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	e001      	b.n	800a73c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e23d      	b.n	800abb8 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7f8 f865 	bl	8002820 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fa40 	bl	800abdc <SAI_Disable>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e228      	b.n	800abb8 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2202      	movs	r2, #2
 800a76a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	2b02      	cmp	r3, #2
 800a774:	d00c      	beq.n	800a790 <HAL_SAI_Init+0x108>
 800a776:	2b02      	cmp	r3, #2
 800a778:	d80d      	bhi.n	800a796 <HAL_SAI_Init+0x10e>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <HAL_SAI_Init+0xfc>
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d003      	beq.n	800a78a <HAL_SAI_Init+0x102>
 800a782:	e008      	b.n	800a796 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a788:	e008      	b.n	800a79c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a78a:	2310      	movs	r3, #16
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a78e:	e005      	b.n	800a79c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a790:	2320      	movs	r3, #32
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a794:	e002      	b.n	800a79c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a79a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	2b05      	cmp	r3, #5
 800a7a2:	d832      	bhi.n	800a80a <HAL_SAI_Init+0x182>
 800a7a4:	a201      	add	r2, pc, #4	; (adr r2, 800a7ac <HAL_SAI_Init+0x124>)
 800a7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7aa:	bf00      	nop
 800a7ac:	0800a7c5 	.word	0x0800a7c5
 800a7b0:	0800a7cb 	.word	0x0800a7cb
 800a7b4:	0800a7d3 	.word	0x0800a7d3
 800a7b8:	0800a7db 	.word	0x0800a7db
 800a7bc:	0800a7eb 	.word	0x0800a7eb
 800a7c0:	0800a7fb 	.word	0x0800a7fb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	61fb      	str	r3, [r7, #28]
      break;
 800a7c8:	e022      	b.n	800a810 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a7ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ce:	61fb      	str	r3, [r7, #28]
      break;
 800a7d0:	e01e      	b.n	800a810 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a7d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7d6:	61fb      	str	r3, [r7, #28]
      break;
 800a7d8:	e01a      	b.n	800a810 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a7da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7de:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	f043 0301 	orr.w	r3, r3, #1
 800a7e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7e8:	e012      	b.n	800a810 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a7ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7ee:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	f043 0302 	orr.w	r3, r3, #2
 800a7f6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7f8:	e00a      	b.n	800a810 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a7fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	f043 0303 	orr.w	r3, r3, #3
 800a806:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a808:	e002      	b.n	800a810 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	61fb      	str	r3, [r7, #28]
      break;
 800a80e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a814:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a1b      	ldr	r3, [r3, #32]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 80c5 	beq.w	800a9aa <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a37      	ldr	r2, [pc, #220]	; (800a908 <HAL_SAI_Init+0x280>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d004      	beq.n	800a838 <HAL_SAI_Init+0x1b0>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a37      	ldr	r2, [pc, #220]	; (800a910 <HAL_SAI_Init+0x288>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d106      	bne.n	800a846 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a838:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a83c:	f04f 0100 	mov.w	r1, #0
 800a840:	f7fe fb16 	bl	8008e70 <HAL_RCCEx_GetPeriphCLKFreq>
 800a844:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a33      	ldr	r2, [pc, #204]	; (800a918 <HAL_SAI_Init+0x290>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d004      	beq.n	800a85a <HAL_SAI_Init+0x1d2>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a31      	ldr	r2, [pc, #196]	; (800a91c <HAL_SAI_Init+0x294>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d106      	bne.n	800a868 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a85a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a85e:	f04f 0100 	mov.w	r1, #0
 800a862:	f7fe fb05 	bl	8008e70 <HAL_RCCEx_GetPeriphCLKFreq>
 800a866:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a2d      	ldr	r2, [pc, #180]	; (800a924 <HAL_SAI_Init+0x29c>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d004      	beq.n	800a87c <HAL_SAI_Init+0x1f4>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a2c      	ldr	r2, [pc, #176]	; (800a928 <HAL_SAI_Init+0x2a0>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d106      	bne.n	800a88a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a87c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a880:	f04f 0100 	mov.w	r1, #0
 800a884:	f7fe faf4 	bl	8008e70 <HAL_RCCEx_GetPeriphCLKFreq>
 800a888:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a1f      	ldr	r2, [pc, #124]	; (800a90c <HAL_SAI_Init+0x284>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d106      	bne.n	800a8a2 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a894:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a898:	f04f 0100 	mov.w	r1, #0
 800a89c:	f7fe fae8 	bl	8008e70 <HAL_RCCEx_GetPeriphCLKFreq>
 800a8a0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a22      	ldr	r2, [pc, #136]	; (800a930 <HAL_SAI_Init+0x2a8>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d106      	bne.n	800a8ba <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a8ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a8b0:	f04f 0100 	mov.w	r1, #0
 800a8b4:	f7fe fadc 	bl	8008e70 <HAL_RCCEx_GetPeriphCLKFreq>
 800a8b8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a8c2:	d139      	bne.n	800a938 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d102      	bne.n	800a8d2 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a8cc:	2340      	movs	r3, #64	; 0x40
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	e00a      	b.n	800a8e8 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d6:	2b08      	cmp	r3, #8
 800a8d8:	d103      	bne.n	800a8e2 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a8da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	e002      	b.n	800a8e8 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	005b      	lsls	r3, r3, #1
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	fb02 f303 	mul.w	r3, r2, r3
 800a8fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800a902:	613b      	str	r3, [r7, #16]
 800a904:	e030      	b.n	800a968 <HAL_SAI_Init+0x2e0>
 800a906:	bf00      	nop
 800a908:	40015804 	.word	0x40015804
 800a90c:	58005404 	.word	0x58005404
 800a910:	40015824 	.word	0x40015824
 800a914:	40015800 	.word	0x40015800
 800a918:	40015c04 	.word	0x40015c04
 800a91c:	40015c24 	.word	0x40015c24
 800a920:	40015c00 	.word	0x40015c00
 800a924:	40016004 	.word	0x40016004
 800a928:	40016024 	.word	0x40016024
 800a92c:	40016000 	.word	0x40016000
 800a930:	58005424 	.word	0x58005424
 800a934:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a940:	d101      	bne.n	800a946 <HAL_SAI_Init+0x2be>
 800a942:	2302      	movs	r3, #2
 800a944:	e000      	b.n	800a948 <HAL_SAI_Init+0x2c0>
 800a946:	2301      	movs	r3, #1
 800a948:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	4619      	mov	r1, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	fb02 f303 	mul.w	r3, r2, r3
 800a960:	021b      	lsls	r3, r3, #8
 800a962:	fbb1 f3f3 	udiv	r3, r1, r3
 800a966:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	4a95      	ldr	r2, [pc, #596]	; (800abc0 <HAL_SAI_Init+0x538>)
 800a96c:	fba2 2303 	umull	r2, r3, r2, r3
 800a970:	08da      	lsrs	r2, r3, #3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a976:	6939      	ldr	r1, [r7, #16]
 800a978:	4b91      	ldr	r3, [pc, #580]	; (800abc0 <HAL_SAI_Init+0x538>)
 800a97a:	fba3 2301 	umull	r2, r3, r3, r1
 800a97e:	08da      	lsrs	r2, r3, #3
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	1aca      	subs	r2, r1, r3
 800a98a:	2a08      	cmp	r2, #8
 800a98c:	d904      	bls.n	800a998 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d104      	bne.n	800a9aa <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	085a      	lsrs	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <HAL_SAI_Init+0x332>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d109      	bne.n	800a9ce <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d101      	bne.n	800a9c6 <HAL_SAI_Init+0x33e>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e001      	b.n	800a9ca <HAL_SAI_Init+0x342>
 800a9c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9ca:	623b      	str	r3, [r7, #32]
 800a9cc:	e008      	b.n	800a9e0 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d102      	bne.n	800a9dc <HAL_SAI_Init+0x354>
 800a9d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9da:	e000      	b.n	800a9de <HAL_SAI_Init+0x356>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a9e0:	f7f8 f98a 	bl	8002cf8 <HAL_GetREVID>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9ea:	d331      	bcc.n	800aa50 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6819      	ldr	r1, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	4b73      	ldr	r3, [pc, #460]	; (800abc4 <HAL_SAI_Init+0x53c>)
 800a9f8:	400b      	ands	r3, r1
 800a9fa:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6819      	ldr	r1, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa0a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa10:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa16:	431a      	orrs	r2, r3
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800aa24:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa30:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	051b      	lsls	r3, r3, #20
 800aa38:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa3e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	e02d      	b.n	800aaac <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6819      	ldr	r1, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	4b5b      	ldr	r3, [pc, #364]	; (800abc8 <HAL_SAI_Init+0x540>)
 800aa5c:	400b      	ands	r3, r1
 800aa5e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6819      	ldr	r1, [r3, #0]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685a      	ldr	r2, [r3, #4]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa74:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800aa88:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa94:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9a:	051b      	lsls	r3, r3, #20
 800aa9c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aaa2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6859      	ldr	r1, [r3, #4]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	4b45      	ldr	r3, [pc, #276]	; (800abcc <HAL_SAI_Init+0x544>)
 800aab8:	400b      	ands	r3, r1
 800aaba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6859      	ldr	r1, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	69da      	ldr	r2, [r3, #28]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	431a      	orrs	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad0:	431a      	orrs	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	430a      	orrs	r2, r1
 800aad8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6899      	ldr	r1, [r3, #8]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	4b3a      	ldr	r3, [pc, #232]	; (800abd0 <HAL_SAI_Init+0x548>)
 800aae6:	400b      	ands	r3, r1
 800aae8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6899      	ldr	r1, [r3, #8]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aafa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800ab00:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800ab06:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ab10:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68d9      	ldr	r1, [r3, #12]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ab28:	400b      	ands	r3, r1
 800ab2a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68d9      	ldr	r1, [r3, #12]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab3a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab40:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ab42:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	021b      	lsls	r3, r3, #8
 800ab4c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a1e      	ldr	r2, [pc, #120]	; (800abd4 <HAL_SAI_Init+0x54c>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d004      	beq.n	800ab6a <HAL_SAI_Init+0x4e2>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a1c      	ldr	r2, [pc, #112]	; (800abd8 <HAL_SAI_Init+0x550>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d119      	bne.n	800ab9e <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6e:	f023 0201 	bic.w	r2, r3, #1
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d10e      	bne.n	800ab9e <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ab8c:	431a      	orrs	r2, r3
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab96:	f043 0201 	orr.w	r2, r3, #1
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3728      	adds	r7, #40	; 0x28
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	cccccccd 	.word	0xcccccccd
 800abc4:	f005c010 	.word	0xf005c010
 800abc8:	f805c010 	.word	0xf805c010
 800abcc:	ffff1ff0 	.word	0xffff1ff0
 800abd0:	fff88000 	.word	0xfff88000
 800abd4:	40015804 	.word	0x40015804
 800abd8:	58005404 	.word	0x58005404

0800abdc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800abe4:	4b18      	ldr	r3, [pc, #96]	; (800ac48 <SAI_Disable+0x6c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a18      	ldr	r2, [pc, #96]	; (800ac4c <SAI_Disable+0x70>)
 800abea:	fba2 2303 	umull	r2, r3, r2, r3
 800abee:	0b1b      	lsrs	r3, r3, #12
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ac06:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	72fb      	strb	r3, [r7, #11]
      break;
 800ac22:	e009      	b.n	800ac38 <SAI_Disable+0x5c>
    }
    count--;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e7      	bne.n	800ac08 <SAI_Disable+0x2c>

  return status;
 800ac38:	7afb      	ldrb	r3, [r7, #11]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	24000000 	.word	0x24000000
 800ac4c:	95cbec1b 	.word	0x95cbec1b

0800ac50 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e02b      	b.n	800acbc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d106      	bne.n	800ac7e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7f7 fdc7 	bl	800280c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2202      	movs	r2, #2
 800ac82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	4619      	mov	r1, r3
 800ac90:	4610      	mov	r0, r2
 800ac92:	f001 fabd 	bl	800c210 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6818      	ldr	r0, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	6839      	ldr	r1, [r7, #0]
 800aca2:	f001 fb11 	bl	800c2c8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800aca6:	4b07      	ldr	r3, [pc, #28]	; (800acc4 <HAL_SDRAM_Init+0x74>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a06      	ldr	r2, [pc, #24]	; (800acc4 <HAL_SDRAM_Init+0x74>)
 800acac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acb0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	52004000 	.word	0x52004000

0800acc8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e10f      	b.n	800aefa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a87      	ldr	r2, [pc, #540]	; (800af04 <HAL_SPI_Init+0x23c>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d00f      	beq.n	800ad0a <HAL_SPI_Init+0x42>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a86      	ldr	r2, [pc, #536]	; (800af08 <HAL_SPI_Init+0x240>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00a      	beq.n	800ad0a <HAL_SPI_Init+0x42>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a84      	ldr	r2, [pc, #528]	; (800af0c <HAL_SPI_Init+0x244>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d005      	beq.n	800ad0a <HAL_SPI_Init+0x42>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	2b0f      	cmp	r3, #15
 800ad04:	d901      	bls.n	800ad0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e0f7      	b.n	800aefa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f900 	bl	800af10 <SPI_GetPacketSize>
 800ad10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a7b      	ldr	r2, [pc, #492]	; (800af04 <HAL_SPI_Init+0x23c>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d00c      	beq.n	800ad36 <HAL_SPI_Init+0x6e>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a79      	ldr	r2, [pc, #484]	; (800af08 <HAL_SPI_Init+0x240>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d007      	beq.n	800ad36 <HAL_SPI_Init+0x6e>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a78      	ldr	r2, [pc, #480]	; (800af0c <HAL_SPI_Init+0x244>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d002      	beq.n	800ad36 <HAL_SPI_Init+0x6e>
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2b08      	cmp	r3, #8
 800ad34:	d811      	bhi.n	800ad5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad3a:	4a72      	ldr	r2, [pc, #456]	; (800af04 <HAL_SPI_Init+0x23c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d009      	beq.n	800ad54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a70      	ldr	r2, [pc, #448]	; (800af08 <HAL_SPI_Init+0x240>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d004      	beq.n	800ad54 <HAL_SPI_Init+0x8c>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a6f      	ldr	r2, [pc, #444]	; (800af0c <HAL_SPI_Init+0x244>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d104      	bne.n	800ad5e <HAL_SPI_Init+0x96>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b10      	cmp	r3, #16
 800ad58:	d901      	bls.n	800ad5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e0cd      	b.n	800aefa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d106      	bne.n	800ad78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7f7 fade 	bl	8002334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f022 0201 	bic.w	r2, r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ad9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ada4:	d119      	bne.n	800adda <HAL_SPI_Init+0x112>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adae:	d103      	bne.n	800adb8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d008      	beq.n	800adca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10c      	bne.n	800adda <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800adc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adc8:	d107      	bne.n	800adda <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800add8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00f      	beq.n	800ae06 <HAL_SPI_Init+0x13e>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	2b06      	cmp	r3, #6
 800adec:	d90b      	bls.n	800ae06 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	430a      	orrs	r2, r1
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	e007      	b.n	800ae16 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	69da      	ldr	r2, [r3, #28]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	431a      	orrs	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae28:	ea42 0103 	orr.w	r1, r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68da      	ldr	r2, [r3, #12]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	430a      	orrs	r2, r1
 800ae36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae40:	431a      	orrs	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae46:	431a      	orrs	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	431a      	orrs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	431a      	orrs	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	431a      	orrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6a:	431a      	orrs	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	431a      	orrs	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae76:	ea42 0103 	orr.w	r1, r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d113      	bne.n	800aeb6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aea0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aeb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f022 0201 	bic.w	r2, r2, #1
 800aec4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00a      	beq.n	800aee8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	40013000 	.word	0x40013000
 800af08:	40003800 	.word	0x40003800
 800af0c:	40003c00 	.word	0x40003c00

0800af10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af1c:	095b      	lsrs	r3, r3, #5
 800af1e:	3301      	adds	r3, #1
 800af20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	3301      	adds	r3, #1
 800af28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3307      	adds	r3, #7
 800af2e:	08db      	lsrs	r3, r3, #3
 800af30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	fb02 f303 	mul.w	r3, r2, r3
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	e042      	b.n	800afde <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d106      	bne.n	800af70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7f7 faac 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2224      	movs	r2, #36	; 0x24
 800af74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f022 0201 	bic.w	r2, r2, #1
 800af86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f8bb 	bl	800b104 <UART_SetConfig>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e022      	b.n	800afde <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fe17 	bl	800bbd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800afb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f042 0201 	orr.w	r2, r2, #1
 800afd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fe9e 	bl	800bd18 <UART_CheckIdleState>
 800afdc:	4603      	mov	r3, r0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3708      	adds	r7, #8
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b08a      	sub	sp, #40	; 0x28
 800afea:	af02      	add	r7, sp, #8
 800afec:	60f8      	str	r0, [r7, #12]
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	603b      	str	r3, [r7, #0]
 800aff2:	4613      	mov	r3, r2
 800aff4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800affc:	2b20      	cmp	r3, #32
 800affe:	d17b      	bne.n	800b0f8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d002      	beq.n	800b00c <HAL_UART_Transmit+0x26>
 800b006:	88fb      	ldrh	r3, [r7, #6]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e074      	b.n	800b0fa <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2221      	movs	r2, #33	; 0x21
 800b01c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b020:	f7f7 fe3a 	bl	8002c98 <HAL_GetTick>
 800b024:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	88fa      	ldrh	r2, [r7, #6]
 800b02a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	88fa      	ldrh	r2, [r7, #6]
 800b032:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b03e:	d108      	bne.n	800b052 <HAL_UART_Transmit+0x6c>
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d104      	bne.n	800b052 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b048:	2300      	movs	r3, #0
 800b04a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	61bb      	str	r3, [r7, #24]
 800b050:	e003      	b.n	800b05a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b056:	2300      	movs	r3, #0
 800b058:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b05a:	e030      	b.n	800b0be <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2200      	movs	r2, #0
 800b064:	2180      	movs	r1, #128	; 0x80
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f000 ff00 	bl	800be6c <UART_WaitOnFlagUntilTimeout>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d005      	beq.n	800b07e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e03d      	b.n	800b0fa <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10b      	bne.n	800b09c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	461a      	mov	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b092:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	3302      	adds	r3, #2
 800b098:	61bb      	str	r3, [r7, #24]
 800b09a:	e007      	b.n	800b0ac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	781a      	ldrb	r2, [r3, #0]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1c8      	bne.n	800b05c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2140      	movs	r1, #64	; 0x40
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 fec9 	bl	800be6c <UART_WaitOnFlagUntilTimeout>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d005      	beq.n	800b0ec <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e006      	b.n	800b0fa <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2220      	movs	r2, #32
 800b0f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e000      	b.n	800b0fa <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b0f8:	2302      	movs	r3, #2
  }
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3720      	adds	r7, #32
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b108:	b092      	sub	sp, #72	; 0x48
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	689a      	ldr	r2, [r3, #8]
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	431a      	orrs	r2, r3
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	431a      	orrs	r2, r3
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	69db      	ldr	r3, [r3, #28]
 800b128:	4313      	orrs	r3, r2
 800b12a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	4bbe      	ldr	r3, [pc, #760]	; (800b42c <UART_SetConfig+0x328>)
 800b134:	4013      	ands	r3, r2
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	6812      	ldr	r2, [r2, #0]
 800b13a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b13c:	430b      	orrs	r3, r1
 800b13e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	68da      	ldr	r2, [r3, #12]
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	430a      	orrs	r2, r1
 800b154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4ab3      	ldr	r2, [pc, #716]	; (800b430 <UART_SetConfig+0x32c>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d004      	beq.n	800b170 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b16c:	4313      	orrs	r3, r2
 800b16e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689a      	ldr	r2, [r3, #8]
 800b176:	4baf      	ldr	r3, [pc, #700]	; (800b434 <UART_SetConfig+0x330>)
 800b178:	4013      	ands	r3, r2
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	6812      	ldr	r2, [r2, #0]
 800b17e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b180:	430b      	orrs	r3, r1
 800b182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18a:	f023 010f 	bic.w	r1, r3, #15
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4aa6      	ldr	r2, [pc, #664]	; (800b438 <UART_SetConfig+0x334>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d177      	bne.n	800b294 <UART_SetConfig+0x190>
 800b1a4:	4ba5      	ldr	r3, [pc, #660]	; (800b43c <UART_SetConfig+0x338>)
 800b1a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1ac:	2b28      	cmp	r3, #40	; 0x28
 800b1ae:	d86d      	bhi.n	800b28c <UART_SetConfig+0x188>
 800b1b0:	a201      	add	r2, pc, #4	; (adr r2, 800b1b8 <UART_SetConfig+0xb4>)
 800b1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b6:	bf00      	nop
 800b1b8:	0800b25d 	.word	0x0800b25d
 800b1bc:	0800b28d 	.word	0x0800b28d
 800b1c0:	0800b28d 	.word	0x0800b28d
 800b1c4:	0800b28d 	.word	0x0800b28d
 800b1c8:	0800b28d 	.word	0x0800b28d
 800b1cc:	0800b28d 	.word	0x0800b28d
 800b1d0:	0800b28d 	.word	0x0800b28d
 800b1d4:	0800b28d 	.word	0x0800b28d
 800b1d8:	0800b265 	.word	0x0800b265
 800b1dc:	0800b28d 	.word	0x0800b28d
 800b1e0:	0800b28d 	.word	0x0800b28d
 800b1e4:	0800b28d 	.word	0x0800b28d
 800b1e8:	0800b28d 	.word	0x0800b28d
 800b1ec:	0800b28d 	.word	0x0800b28d
 800b1f0:	0800b28d 	.word	0x0800b28d
 800b1f4:	0800b28d 	.word	0x0800b28d
 800b1f8:	0800b26d 	.word	0x0800b26d
 800b1fc:	0800b28d 	.word	0x0800b28d
 800b200:	0800b28d 	.word	0x0800b28d
 800b204:	0800b28d 	.word	0x0800b28d
 800b208:	0800b28d 	.word	0x0800b28d
 800b20c:	0800b28d 	.word	0x0800b28d
 800b210:	0800b28d 	.word	0x0800b28d
 800b214:	0800b28d 	.word	0x0800b28d
 800b218:	0800b275 	.word	0x0800b275
 800b21c:	0800b28d 	.word	0x0800b28d
 800b220:	0800b28d 	.word	0x0800b28d
 800b224:	0800b28d 	.word	0x0800b28d
 800b228:	0800b28d 	.word	0x0800b28d
 800b22c:	0800b28d 	.word	0x0800b28d
 800b230:	0800b28d 	.word	0x0800b28d
 800b234:	0800b28d 	.word	0x0800b28d
 800b238:	0800b27d 	.word	0x0800b27d
 800b23c:	0800b28d 	.word	0x0800b28d
 800b240:	0800b28d 	.word	0x0800b28d
 800b244:	0800b28d 	.word	0x0800b28d
 800b248:	0800b28d 	.word	0x0800b28d
 800b24c:	0800b28d 	.word	0x0800b28d
 800b250:	0800b28d 	.word	0x0800b28d
 800b254:	0800b28d 	.word	0x0800b28d
 800b258:	0800b285 	.word	0x0800b285
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b262:	e222      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b264:	2304      	movs	r3, #4
 800b266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26a:	e21e      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b26c:	2308      	movs	r3, #8
 800b26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b272:	e21a      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b274:	2310      	movs	r3, #16
 800b276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27a:	e216      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b27c:	2320      	movs	r3, #32
 800b27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b282:	e212      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b284:	2340      	movs	r3, #64	; 0x40
 800b286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b28a:	e20e      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b28c:	2380      	movs	r3, #128	; 0x80
 800b28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b292:	e20a      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a69      	ldr	r2, [pc, #420]	; (800b440 <UART_SetConfig+0x33c>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d130      	bne.n	800b300 <UART_SetConfig+0x1fc>
 800b29e:	4b67      	ldr	r3, [pc, #412]	; (800b43c <UART_SetConfig+0x338>)
 800b2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a2:	f003 0307 	and.w	r3, r3, #7
 800b2a6:	2b05      	cmp	r3, #5
 800b2a8:	d826      	bhi.n	800b2f8 <UART_SetConfig+0x1f4>
 800b2aa:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <UART_SetConfig+0x1ac>)
 800b2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b0:	0800b2c9 	.word	0x0800b2c9
 800b2b4:	0800b2d1 	.word	0x0800b2d1
 800b2b8:	0800b2d9 	.word	0x0800b2d9
 800b2bc:	0800b2e1 	.word	0x0800b2e1
 800b2c0:	0800b2e9 	.word	0x0800b2e9
 800b2c4:	0800b2f1 	.word	0x0800b2f1
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ce:	e1ec      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b2d0:	2304      	movs	r3, #4
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d6:	e1e8      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b2d8:	2308      	movs	r3, #8
 800b2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2de:	e1e4      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b2e0:	2310      	movs	r3, #16
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e6:	e1e0      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b2e8:	2320      	movs	r3, #32
 800b2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ee:	e1dc      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b2f0:	2340      	movs	r3, #64	; 0x40
 800b2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2f6:	e1d8      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b2f8:	2380      	movs	r3, #128	; 0x80
 800b2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2fe:	e1d4      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a4f      	ldr	r2, [pc, #316]	; (800b444 <UART_SetConfig+0x340>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d130      	bne.n	800b36c <UART_SetConfig+0x268>
 800b30a:	4b4c      	ldr	r3, [pc, #304]	; (800b43c <UART_SetConfig+0x338>)
 800b30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b30e:	f003 0307 	and.w	r3, r3, #7
 800b312:	2b05      	cmp	r3, #5
 800b314:	d826      	bhi.n	800b364 <UART_SetConfig+0x260>
 800b316:	a201      	add	r2, pc, #4	; (adr r2, 800b31c <UART_SetConfig+0x218>)
 800b318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31c:	0800b335 	.word	0x0800b335
 800b320:	0800b33d 	.word	0x0800b33d
 800b324:	0800b345 	.word	0x0800b345
 800b328:	0800b34d 	.word	0x0800b34d
 800b32c:	0800b355 	.word	0x0800b355
 800b330:	0800b35d 	.word	0x0800b35d
 800b334:	2300      	movs	r3, #0
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33a:	e1b6      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b33c:	2304      	movs	r3, #4
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b342:	e1b2      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b344:	2308      	movs	r3, #8
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34a:	e1ae      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b34c:	2310      	movs	r3, #16
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b352:	e1aa      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b354:	2320      	movs	r3, #32
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35a:	e1a6      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b35c:	2340      	movs	r3, #64	; 0x40
 800b35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b362:	e1a2      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b364:	2380      	movs	r3, #128	; 0x80
 800b366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36a:	e19e      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a35      	ldr	r2, [pc, #212]	; (800b448 <UART_SetConfig+0x344>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d130      	bne.n	800b3d8 <UART_SetConfig+0x2d4>
 800b376:	4b31      	ldr	r3, [pc, #196]	; (800b43c <UART_SetConfig+0x338>)
 800b378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37a:	f003 0307 	and.w	r3, r3, #7
 800b37e:	2b05      	cmp	r3, #5
 800b380:	d826      	bhi.n	800b3d0 <UART_SetConfig+0x2cc>
 800b382:	a201      	add	r2, pc, #4	; (adr r2, 800b388 <UART_SetConfig+0x284>)
 800b384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b388:	0800b3a1 	.word	0x0800b3a1
 800b38c:	0800b3a9 	.word	0x0800b3a9
 800b390:	0800b3b1 	.word	0x0800b3b1
 800b394:	0800b3b9 	.word	0x0800b3b9
 800b398:	0800b3c1 	.word	0x0800b3c1
 800b39c:	0800b3c9 	.word	0x0800b3c9
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a6:	e180      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b3a8:	2304      	movs	r3, #4
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ae:	e17c      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b3b0:	2308      	movs	r3, #8
 800b3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b6:	e178      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b3b8:	2310      	movs	r3, #16
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3be:	e174      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b3c0:	2320      	movs	r3, #32
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c6:	e170      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b3c8:	2340      	movs	r3, #64	; 0x40
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ce:	e16c      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b3d0:	2380      	movs	r3, #128	; 0x80
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d6:	e168      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a1b      	ldr	r2, [pc, #108]	; (800b44c <UART_SetConfig+0x348>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d142      	bne.n	800b468 <UART_SetConfig+0x364>
 800b3e2:	4b16      	ldr	r3, [pc, #88]	; (800b43c <UART_SetConfig+0x338>)
 800b3e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	2b05      	cmp	r3, #5
 800b3ec:	d838      	bhi.n	800b460 <UART_SetConfig+0x35c>
 800b3ee:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <UART_SetConfig+0x2f0>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b40d 	.word	0x0800b40d
 800b3f8:	0800b415 	.word	0x0800b415
 800b3fc:	0800b41d 	.word	0x0800b41d
 800b400:	0800b425 	.word	0x0800b425
 800b404:	0800b451 	.word	0x0800b451
 800b408:	0800b459 	.word	0x0800b459
 800b40c:	2300      	movs	r3, #0
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b412:	e14a      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b414:	2304      	movs	r3, #4
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41a:	e146      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b41c:	2308      	movs	r3, #8
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b422:	e142      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b424:	2310      	movs	r3, #16
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42a:	e13e      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b42c:	cfff69f3 	.word	0xcfff69f3
 800b430:	58000c00 	.word	0x58000c00
 800b434:	11fff4ff 	.word	0x11fff4ff
 800b438:	40011000 	.word	0x40011000
 800b43c:	58024400 	.word	0x58024400
 800b440:	40004400 	.word	0x40004400
 800b444:	40004800 	.word	0x40004800
 800b448:	40004c00 	.word	0x40004c00
 800b44c:	40005000 	.word	0x40005000
 800b450:	2320      	movs	r3, #32
 800b452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b456:	e128      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b458:	2340      	movs	r3, #64	; 0x40
 800b45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45e:	e124      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b460:	2380      	movs	r3, #128	; 0x80
 800b462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b466:	e120      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4acb      	ldr	r2, [pc, #812]	; (800b79c <UART_SetConfig+0x698>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d176      	bne.n	800b560 <UART_SetConfig+0x45c>
 800b472:	4bcb      	ldr	r3, [pc, #812]	; (800b7a0 <UART_SetConfig+0x69c>)
 800b474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b47a:	2b28      	cmp	r3, #40	; 0x28
 800b47c:	d86c      	bhi.n	800b558 <UART_SetConfig+0x454>
 800b47e:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <UART_SetConfig+0x380>)
 800b480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b484:	0800b529 	.word	0x0800b529
 800b488:	0800b559 	.word	0x0800b559
 800b48c:	0800b559 	.word	0x0800b559
 800b490:	0800b559 	.word	0x0800b559
 800b494:	0800b559 	.word	0x0800b559
 800b498:	0800b559 	.word	0x0800b559
 800b49c:	0800b559 	.word	0x0800b559
 800b4a0:	0800b559 	.word	0x0800b559
 800b4a4:	0800b531 	.word	0x0800b531
 800b4a8:	0800b559 	.word	0x0800b559
 800b4ac:	0800b559 	.word	0x0800b559
 800b4b0:	0800b559 	.word	0x0800b559
 800b4b4:	0800b559 	.word	0x0800b559
 800b4b8:	0800b559 	.word	0x0800b559
 800b4bc:	0800b559 	.word	0x0800b559
 800b4c0:	0800b559 	.word	0x0800b559
 800b4c4:	0800b539 	.word	0x0800b539
 800b4c8:	0800b559 	.word	0x0800b559
 800b4cc:	0800b559 	.word	0x0800b559
 800b4d0:	0800b559 	.word	0x0800b559
 800b4d4:	0800b559 	.word	0x0800b559
 800b4d8:	0800b559 	.word	0x0800b559
 800b4dc:	0800b559 	.word	0x0800b559
 800b4e0:	0800b559 	.word	0x0800b559
 800b4e4:	0800b541 	.word	0x0800b541
 800b4e8:	0800b559 	.word	0x0800b559
 800b4ec:	0800b559 	.word	0x0800b559
 800b4f0:	0800b559 	.word	0x0800b559
 800b4f4:	0800b559 	.word	0x0800b559
 800b4f8:	0800b559 	.word	0x0800b559
 800b4fc:	0800b559 	.word	0x0800b559
 800b500:	0800b559 	.word	0x0800b559
 800b504:	0800b549 	.word	0x0800b549
 800b508:	0800b559 	.word	0x0800b559
 800b50c:	0800b559 	.word	0x0800b559
 800b510:	0800b559 	.word	0x0800b559
 800b514:	0800b559 	.word	0x0800b559
 800b518:	0800b559 	.word	0x0800b559
 800b51c:	0800b559 	.word	0x0800b559
 800b520:	0800b559 	.word	0x0800b559
 800b524:	0800b551 	.word	0x0800b551
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52e:	e0bc      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b530:	2304      	movs	r3, #4
 800b532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b536:	e0b8      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b538:	2308      	movs	r3, #8
 800b53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53e:	e0b4      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b540:	2310      	movs	r3, #16
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b546:	e0b0      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b548:	2320      	movs	r3, #32
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54e:	e0ac      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b550:	2340      	movs	r3, #64	; 0x40
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b556:	e0a8      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b558:	2380      	movs	r3, #128	; 0x80
 800b55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55e:	e0a4      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a8f      	ldr	r2, [pc, #572]	; (800b7a4 <UART_SetConfig+0x6a0>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d130      	bne.n	800b5cc <UART_SetConfig+0x4c8>
 800b56a:	4b8d      	ldr	r3, [pc, #564]	; (800b7a0 <UART_SetConfig+0x69c>)
 800b56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b56e:	f003 0307 	and.w	r3, r3, #7
 800b572:	2b05      	cmp	r3, #5
 800b574:	d826      	bhi.n	800b5c4 <UART_SetConfig+0x4c0>
 800b576:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <UART_SetConfig+0x478>)
 800b578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57c:	0800b595 	.word	0x0800b595
 800b580:	0800b59d 	.word	0x0800b59d
 800b584:	0800b5a5 	.word	0x0800b5a5
 800b588:	0800b5ad 	.word	0x0800b5ad
 800b58c:	0800b5b5 	.word	0x0800b5b5
 800b590:	0800b5bd 	.word	0x0800b5bd
 800b594:	2300      	movs	r3, #0
 800b596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59a:	e086      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b59c:	2304      	movs	r3, #4
 800b59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a2:	e082      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b5a4:	2308      	movs	r3, #8
 800b5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5aa:	e07e      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b5ac:	2310      	movs	r3, #16
 800b5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b2:	e07a      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b5b4:	2320      	movs	r3, #32
 800b5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ba:	e076      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b5bc:	2340      	movs	r3, #64	; 0x40
 800b5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5c2:	e072      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b5c4:	2380      	movs	r3, #128	; 0x80
 800b5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ca:	e06e      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a75      	ldr	r2, [pc, #468]	; (800b7a8 <UART_SetConfig+0x6a4>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d130      	bne.n	800b638 <UART_SetConfig+0x534>
 800b5d6:	4b72      	ldr	r3, [pc, #456]	; (800b7a0 <UART_SetConfig+0x69c>)
 800b5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5da:	f003 0307 	and.w	r3, r3, #7
 800b5de:	2b05      	cmp	r3, #5
 800b5e0:	d826      	bhi.n	800b630 <UART_SetConfig+0x52c>
 800b5e2:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <UART_SetConfig+0x4e4>)
 800b5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e8:	0800b601 	.word	0x0800b601
 800b5ec:	0800b609 	.word	0x0800b609
 800b5f0:	0800b611 	.word	0x0800b611
 800b5f4:	0800b619 	.word	0x0800b619
 800b5f8:	0800b621 	.word	0x0800b621
 800b5fc:	0800b629 	.word	0x0800b629
 800b600:	2300      	movs	r3, #0
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b606:	e050      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b608:	2304      	movs	r3, #4
 800b60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60e:	e04c      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b610:	2308      	movs	r3, #8
 800b612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b616:	e048      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b618:	2310      	movs	r3, #16
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b61e:	e044      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b620:	2320      	movs	r3, #32
 800b622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b626:	e040      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b628:	2340      	movs	r3, #64	; 0x40
 800b62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b62e:	e03c      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b630:	2380      	movs	r3, #128	; 0x80
 800b632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b636:	e038      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a5b      	ldr	r2, [pc, #364]	; (800b7ac <UART_SetConfig+0x6a8>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d130      	bne.n	800b6a4 <UART_SetConfig+0x5a0>
 800b642:	4b57      	ldr	r3, [pc, #348]	; (800b7a0 <UART_SetConfig+0x69c>)
 800b644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b646:	f003 0307 	and.w	r3, r3, #7
 800b64a:	2b05      	cmp	r3, #5
 800b64c:	d826      	bhi.n	800b69c <UART_SetConfig+0x598>
 800b64e:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <UART_SetConfig+0x550>)
 800b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b654:	0800b66d 	.word	0x0800b66d
 800b658:	0800b675 	.word	0x0800b675
 800b65c:	0800b67d 	.word	0x0800b67d
 800b660:	0800b685 	.word	0x0800b685
 800b664:	0800b68d 	.word	0x0800b68d
 800b668:	0800b695 	.word	0x0800b695
 800b66c:	2302      	movs	r3, #2
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b672:	e01a      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b674:	2304      	movs	r3, #4
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b67a:	e016      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b67c:	2308      	movs	r3, #8
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b682:	e012      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b684:	2310      	movs	r3, #16
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b68a:	e00e      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b68c:	2320      	movs	r3, #32
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b692:	e00a      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b694:	2340      	movs	r3, #64	; 0x40
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b69a:	e006      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b69c:	2380      	movs	r3, #128	; 0x80
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6a2:	e002      	b.n	800b6aa <UART_SetConfig+0x5a6>
 800b6a4:	2380      	movs	r3, #128	; 0x80
 800b6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a3f      	ldr	r2, [pc, #252]	; (800b7ac <UART_SetConfig+0x6a8>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	f040 80f8 	bne.w	800b8a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b6ba:	2b20      	cmp	r3, #32
 800b6bc:	dc46      	bgt.n	800b74c <UART_SetConfig+0x648>
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	f2c0 8082 	blt.w	800b7c8 <UART_SetConfig+0x6c4>
 800b6c4:	3b02      	subs	r3, #2
 800b6c6:	2b1e      	cmp	r3, #30
 800b6c8:	d87e      	bhi.n	800b7c8 <UART_SetConfig+0x6c4>
 800b6ca:	a201      	add	r2, pc, #4	; (adr r2, 800b6d0 <UART_SetConfig+0x5cc>)
 800b6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d0:	0800b753 	.word	0x0800b753
 800b6d4:	0800b7c9 	.word	0x0800b7c9
 800b6d8:	0800b75b 	.word	0x0800b75b
 800b6dc:	0800b7c9 	.word	0x0800b7c9
 800b6e0:	0800b7c9 	.word	0x0800b7c9
 800b6e4:	0800b7c9 	.word	0x0800b7c9
 800b6e8:	0800b76b 	.word	0x0800b76b
 800b6ec:	0800b7c9 	.word	0x0800b7c9
 800b6f0:	0800b7c9 	.word	0x0800b7c9
 800b6f4:	0800b7c9 	.word	0x0800b7c9
 800b6f8:	0800b7c9 	.word	0x0800b7c9
 800b6fc:	0800b7c9 	.word	0x0800b7c9
 800b700:	0800b7c9 	.word	0x0800b7c9
 800b704:	0800b7c9 	.word	0x0800b7c9
 800b708:	0800b77b 	.word	0x0800b77b
 800b70c:	0800b7c9 	.word	0x0800b7c9
 800b710:	0800b7c9 	.word	0x0800b7c9
 800b714:	0800b7c9 	.word	0x0800b7c9
 800b718:	0800b7c9 	.word	0x0800b7c9
 800b71c:	0800b7c9 	.word	0x0800b7c9
 800b720:	0800b7c9 	.word	0x0800b7c9
 800b724:	0800b7c9 	.word	0x0800b7c9
 800b728:	0800b7c9 	.word	0x0800b7c9
 800b72c:	0800b7c9 	.word	0x0800b7c9
 800b730:	0800b7c9 	.word	0x0800b7c9
 800b734:	0800b7c9 	.word	0x0800b7c9
 800b738:	0800b7c9 	.word	0x0800b7c9
 800b73c:	0800b7c9 	.word	0x0800b7c9
 800b740:	0800b7c9 	.word	0x0800b7c9
 800b744:	0800b7c9 	.word	0x0800b7c9
 800b748:	0800b7bb 	.word	0x0800b7bb
 800b74c:	2b40      	cmp	r3, #64	; 0x40
 800b74e:	d037      	beq.n	800b7c0 <UART_SetConfig+0x6bc>
 800b750:	e03a      	b.n	800b7c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b752:	f7fe f90d 	bl	8009970 <HAL_RCCEx_GetD3PCLK1Freq>
 800b756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b758:	e03c      	b.n	800b7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b75a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe f91c 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b768:	e034      	b.n	800b7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b76a:	f107 0318 	add.w	r3, r7, #24
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe fa68 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b778:	e02c      	b.n	800b7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b77a:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <UART_SetConfig+0x69c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 0320 	and.w	r3, r3, #32
 800b782:	2b00      	cmp	r3, #0
 800b784:	d016      	beq.n	800b7b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b786:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <UART_SetConfig+0x69c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	08db      	lsrs	r3, r3, #3
 800b78c:	f003 0303 	and.w	r3, r3, #3
 800b790:	4a07      	ldr	r2, [pc, #28]	; (800b7b0 <UART_SetConfig+0x6ac>)
 800b792:	fa22 f303 	lsr.w	r3, r2, r3
 800b796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b798:	e01c      	b.n	800b7d4 <UART_SetConfig+0x6d0>
 800b79a:	bf00      	nop
 800b79c:	40011400 	.word	0x40011400
 800b7a0:	58024400 	.word	0x58024400
 800b7a4:	40007800 	.word	0x40007800
 800b7a8:	40007c00 	.word	0x40007c00
 800b7ac:	58000c00 	.word	0x58000c00
 800b7b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b7b4:	4b9d      	ldr	r3, [pc, #628]	; (800ba2c <UART_SetConfig+0x928>)
 800b7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b8:	e00c      	b.n	800b7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7ba:	4b9d      	ldr	r3, [pc, #628]	; (800ba30 <UART_SetConfig+0x92c>)
 800b7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7be:	e009      	b.n	800b7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7c6:	e005      	b.n	800b7d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b7d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 81de 	beq.w	800bb98 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e0:	4a94      	ldr	r2, [pc, #592]	; (800ba34 <UART_SetConfig+0x930>)
 800b7e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	005b      	lsls	r3, r3, #1
 800b7f8:	4413      	add	r3, r2
 800b7fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d305      	bcc.n	800b80c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b808:	429a      	cmp	r2, r3
 800b80a:	d903      	bls.n	800b814 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b812:	e1c1      	b.n	800bb98 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b816:	2200      	movs	r2, #0
 800b818:	60bb      	str	r3, [r7, #8]
 800b81a:	60fa      	str	r2, [r7, #12]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	4a84      	ldr	r2, [pc, #528]	; (800ba34 <UART_SetConfig+0x930>)
 800b822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b826:	b29b      	uxth	r3, r3
 800b828:	2200      	movs	r2, #0
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	607a      	str	r2, [r7, #4]
 800b82e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b836:	f7f4 fdab 	bl	8000390 <__aeabi_uldivmod>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	4610      	mov	r0, r2
 800b840:	4619      	mov	r1, r3
 800b842:	f04f 0200 	mov.w	r2, #0
 800b846:	f04f 0300 	mov.w	r3, #0
 800b84a:	020b      	lsls	r3, r1, #8
 800b84c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b850:	0202      	lsls	r2, r0, #8
 800b852:	6979      	ldr	r1, [r7, #20]
 800b854:	6849      	ldr	r1, [r1, #4]
 800b856:	0849      	lsrs	r1, r1, #1
 800b858:	2000      	movs	r0, #0
 800b85a:	460c      	mov	r4, r1
 800b85c:	4605      	mov	r5, r0
 800b85e:	eb12 0804 	adds.w	r8, r2, r4
 800b862:	eb43 0905 	adc.w	r9, r3, r5
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	469a      	mov	sl, r3
 800b86e:	4693      	mov	fp, r2
 800b870:	4652      	mov	r2, sl
 800b872:	465b      	mov	r3, fp
 800b874:	4640      	mov	r0, r8
 800b876:	4649      	mov	r1, r9
 800b878:	f7f4 fd8a 	bl	8000390 <__aeabi_uldivmod>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4613      	mov	r3, r2
 800b882:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b88a:	d308      	bcc.n	800b89e <UART_SetConfig+0x79a>
 800b88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b892:	d204      	bcs.n	800b89e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b89a:	60da      	str	r2, [r3, #12]
 800b89c:	e17c      	b.n	800bb98 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b8a4:	e178      	b.n	800bb98 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	69db      	ldr	r3, [r3, #28]
 800b8aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8ae:	f040 80c5 	bne.w	800ba3c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b8b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b8b6:	2b20      	cmp	r3, #32
 800b8b8:	dc48      	bgt.n	800b94c <UART_SetConfig+0x848>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	db7b      	blt.n	800b9b6 <UART_SetConfig+0x8b2>
 800b8be:	2b20      	cmp	r3, #32
 800b8c0:	d879      	bhi.n	800b9b6 <UART_SetConfig+0x8b2>
 800b8c2:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <UART_SetConfig+0x7c4>)
 800b8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c8:	0800b953 	.word	0x0800b953
 800b8cc:	0800b95b 	.word	0x0800b95b
 800b8d0:	0800b9b7 	.word	0x0800b9b7
 800b8d4:	0800b9b7 	.word	0x0800b9b7
 800b8d8:	0800b963 	.word	0x0800b963
 800b8dc:	0800b9b7 	.word	0x0800b9b7
 800b8e0:	0800b9b7 	.word	0x0800b9b7
 800b8e4:	0800b9b7 	.word	0x0800b9b7
 800b8e8:	0800b973 	.word	0x0800b973
 800b8ec:	0800b9b7 	.word	0x0800b9b7
 800b8f0:	0800b9b7 	.word	0x0800b9b7
 800b8f4:	0800b9b7 	.word	0x0800b9b7
 800b8f8:	0800b9b7 	.word	0x0800b9b7
 800b8fc:	0800b9b7 	.word	0x0800b9b7
 800b900:	0800b9b7 	.word	0x0800b9b7
 800b904:	0800b9b7 	.word	0x0800b9b7
 800b908:	0800b983 	.word	0x0800b983
 800b90c:	0800b9b7 	.word	0x0800b9b7
 800b910:	0800b9b7 	.word	0x0800b9b7
 800b914:	0800b9b7 	.word	0x0800b9b7
 800b918:	0800b9b7 	.word	0x0800b9b7
 800b91c:	0800b9b7 	.word	0x0800b9b7
 800b920:	0800b9b7 	.word	0x0800b9b7
 800b924:	0800b9b7 	.word	0x0800b9b7
 800b928:	0800b9b7 	.word	0x0800b9b7
 800b92c:	0800b9b7 	.word	0x0800b9b7
 800b930:	0800b9b7 	.word	0x0800b9b7
 800b934:	0800b9b7 	.word	0x0800b9b7
 800b938:	0800b9b7 	.word	0x0800b9b7
 800b93c:	0800b9b7 	.word	0x0800b9b7
 800b940:	0800b9b7 	.word	0x0800b9b7
 800b944:	0800b9b7 	.word	0x0800b9b7
 800b948:	0800b9a9 	.word	0x0800b9a9
 800b94c:	2b40      	cmp	r3, #64	; 0x40
 800b94e:	d02e      	beq.n	800b9ae <UART_SetConfig+0x8aa>
 800b950:	e031      	b.n	800b9b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b952:	f7fc f857 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 800b956:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b958:	e033      	b.n	800b9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b95a:	f7fc f869 	bl	8007a30 <HAL_RCC_GetPCLK2Freq>
 800b95e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b960:	e02f      	b.n	800b9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe f818 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b970:	e027      	b.n	800b9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b972:	f107 0318 	add.w	r3, r7, #24
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe f964 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b980:	e01f      	b.n	800b9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b982:	4b2d      	ldr	r3, [pc, #180]	; (800ba38 <UART_SetConfig+0x934>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 0320 	and.w	r3, r3, #32
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d009      	beq.n	800b9a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b98e:	4b2a      	ldr	r3, [pc, #168]	; (800ba38 <UART_SetConfig+0x934>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	08db      	lsrs	r3, r3, #3
 800b994:	f003 0303 	and.w	r3, r3, #3
 800b998:	4a24      	ldr	r2, [pc, #144]	; (800ba2c <UART_SetConfig+0x928>)
 800b99a:	fa22 f303 	lsr.w	r3, r2, r3
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b9a0:	e00f      	b.n	800b9c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b9a2:	4b22      	ldr	r3, [pc, #136]	; (800ba2c <UART_SetConfig+0x928>)
 800b9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9a6:	e00c      	b.n	800b9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b9a8:	4b21      	ldr	r3, [pc, #132]	; (800ba30 <UART_SetConfig+0x92c>)
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ac:	e009      	b.n	800b9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9b4:	e005      	b.n	800b9c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b9c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 80e7 	beq.w	800bb98 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ce:	4a19      	ldr	r2, [pc, #100]	; (800ba34 <UART_SetConfig+0x930>)
 800b9d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9dc:	005a      	lsls	r2, r3, #1
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	085b      	lsrs	r3, r3, #1
 800b9e4:	441a      	add	r2, r3
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f2:	2b0f      	cmp	r3, #15
 800b9f4:	d916      	bls.n	800ba24 <UART_SetConfig+0x920>
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9fc:	d212      	bcs.n	800ba24 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	f023 030f 	bic.w	r3, r3, #15
 800ba06:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	085b      	lsrs	r3, r3, #1
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	f003 0307 	and.w	r3, r3, #7
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba16:	4313      	orrs	r3, r2
 800ba18:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ba20:	60da      	str	r2, [r3, #12]
 800ba22:	e0b9      	b.n	800bb98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ba2a:	e0b5      	b.n	800bb98 <UART_SetConfig+0xa94>
 800ba2c:	03d09000 	.word	0x03d09000
 800ba30:	003d0900 	.word	0x003d0900
 800ba34:	0800d3f8 	.word	0x0800d3f8
 800ba38:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ba3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ba40:	2b20      	cmp	r3, #32
 800ba42:	dc49      	bgt.n	800bad8 <UART_SetConfig+0x9d4>
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	db7c      	blt.n	800bb42 <UART_SetConfig+0xa3e>
 800ba48:	2b20      	cmp	r3, #32
 800ba4a:	d87a      	bhi.n	800bb42 <UART_SetConfig+0xa3e>
 800ba4c:	a201      	add	r2, pc, #4	; (adr r2, 800ba54 <UART_SetConfig+0x950>)
 800ba4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba52:	bf00      	nop
 800ba54:	0800badf 	.word	0x0800badf
 800ba58:	0800bae7 	.word	0x0800bae7
 800ba5c:	0800bb43 	.word	0x0800bb43
 800ba60:	0800bb43 	.word	0x0800bb43
 800ba64:	0800baef 	.word	0x0800baef
 800ba68:	0800bb43 	.word	0x0800bb43
 800ba6c:	0800bb43 	.word	0x0800bb43
 800ba70:	0800bb43 	.word	0x0800bb43
 800ba74:	0800baff 	.word	0x0800baff
 800ba78:	0800bb43 	.word	0x0800bb43
 800ba7c:	0800bb43 	.word	0x0800bb43
 800ba80:	0800bb43 	.word	0x0800bb43
 800ba84:	0800bb43 	.word	0x0800bb43
 800ba88:	0800bb43 	.word	0x0800bb43
 800ba8c:	0800bb43 	.word	0x0800bb43
 800ba90:	0800bb43 	.word	0x0800bb43
 800ba94:	0800bb0f 	.word	0x0800bb0f
 800ba98:	0800bb43 	.word	0x0800bb43
 800ba9c:	0800bb43 	.word	0x0800bb43
 800baa0:	0800bb43 	.word	0x0800bb43
 800baa4:	0800bb43 	.word	0x0800bb43
 800baa8:	0800bb43 	.word	0x0800bb43
 800baac:	0800bb43 	.word	0x0800bb43
 800bab0:	0800bb43 	.word	0x0800bb43
 800bab4:	0800bb43 	.word	0x0800bb43
 800bab8:	0800bb43 	.word	0x0800bb43
 800babc:	0800bb43 	.word	0x0800bb43
 800bac0:	0800bb43 	.word	0x0800bb43
 800bac4:	0800bb43 	.word	0x0800bb43
 800bac8:	0800bb43 	.word	0x0800bb43
 800bacc:	0800bb43 	.word	0x0800bb43
 800bad0:	0800bb43 	.word	0x0800bb43
 800bad4:	0800bb35 	.word	0x0800bb35
 800bad8:	2b40      	cmp	r3, #64	; 0x40
 800bada:	d02e      	beq.n	800bb3a <UART_SetConfig+0xa36>
 800badc:	e031      	b.n	800bb42 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bade:	f7fb ff91 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 800bae2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bae4:	e033      	b.n	800bb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bae6:	f7fb ffa3 	bl	8007a30 <HAL_RCC_GetPCLK2Freq>
 800baea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800baec:	e02f      	b.n	800bb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fd ff52 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bafc:	e027      	b.n	800bb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bafe:	f107 0318 	add.w	r3, r7, #24
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe f89e 	bl	8009c44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb0c:	e01f      	b.n	800bb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb0e:	4b2d      	ldr	r3, [pc, #180]	; (800bbc4 <UART_SetConfig+0xac0>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f003 0320 	and.w	r3, r3, #32
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d009      	beq.n	800bb2e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb1a:	4b2a      	ldr	r3, [pc, #168]	; (800bbc4 <UART_SetConfig+0xac0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	08db      	lsrs	r3, r3, #3
 800bb20:	f003 0303 	and.w	r3, r3, #3
 800bb24:	4a28      	ldr	r2, [pc, #160]	; (800bbc8 <UART_SetConfig+0xac4>)
 800bb26:	fa22 f303 	lsr.w	r3, r2, r3
 800bb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb2c:	e00f      	b.n	800bb4e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bb2e:	4b26      	ldr	r3, [pc, #152]	; (800bbc8 <UART_SetConfig+0xac4>)
 800bb30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb32:	e00c      	b.n	800bb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb34:	4b25      	ldr	r3, [pc, #148]	; (800bbcc <UART_SetConfig+0xac8>)
 800bb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb38:	e009      	b.n	800bb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb40:	e005      	b.n	800bb4e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bb42:	2300      	movs	r3, #0
 800bb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bb4c:	bf00      	nop
    }

    if (pclk != 0U)
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d021      	beq.n	800bb98 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb58:	4a1d      	ldr	r2, [pc, #116]	; (800bbd0 <UART_SetConfig+0xacc>)
 800bb5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb62:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	085b      	lsrs	r3, r3, #1
 800bb6c:	441a      	add	r2, r3
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	2b0f      	cmp	r3, #15
 800bb7c:	d909      	bls.n	800bb92 <UART_SetConfig+0xa8e>
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb84:	d205      	bcs.n	800bb92 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	60da      	str	r2, [r3, #12]
 800bb90:	e002      	b.n	800bb98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bbb4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3748      	adds	r7, #72	; 0x48
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbc2:	bf00      	nop
 800bbc4:	58024400 	.word	0x58024400
 800bbc8:	03d09000 	.word	0x03d09000
 800bbcc:	003d0900 	.word	0x003d0900
 800bbd0:	0800d3f8 	.word	0x0800d3f8

0800bbd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00a      	beq.n	800bbfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc02:	f003 0302 	and.w	r3, r3, #2
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00a      	beq.n	800bc20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00a      	beq.n	800bc42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	430a      	orrs	r2, r1
 800bc40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc46:	f003 0308 	and.w	r3, r3, #8
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00a      	beq.n	800bc64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	430a      	orrs	r2, r1
 800bc62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc68:	f003 0310 	and.w	r3, r3, #16
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00a      	beq.n	800bc86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	430a      	orrs	r2, r1
 800bc84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8a:	f003 0320 	and.w	r3, r3, #32
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01a      	beq.n	800bcea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcd2:	d10a      	bne.n	800bcea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00a      	beq.n	800bd0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	605a      	str	r2, [r3, #4]
  }
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b098      	sub	sp, #96	; 0x60
 800bd1c:	af02      	add	r7, sp, #8
 800bd1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd28:	f7f6 ffb6 	bl	8002c98 <HAL_GetTick>
 800bd2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 0308 	and.w	r3, r3, #8
 800bd38:	2b08      	cmp	r3, #8
 800bd3a:	d12f      	bne.n	800bd9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd44:	2200      	movs	r2, #0
 800bd46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f88e 	bl	800be6c <UART_WaitOnFlagUntilTimeout>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d022      	beq.n	800bd9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5e:	e853 3f00 	ldrex	r3, [r3]
 800bd62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd6a:	653b      	str	r3, [r7, #80]	; 0x50
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	461a      	mov	r2, r3
 800bd72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd74:	647b      	str	r3, [r7, #68]	; 0x44
 800bd76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd7c:	e841 2300 	strex	r3, r2, [r1]
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1e6      	bne.n	800bd56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2220      	movs	r2, #32
 800bd8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e063      	b.n	800be64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0304 	and.w	r3, r3, #4
 800bda6:	2b04      	cmp	r3, #4
 800bda8:	d149      	bne.n	800be3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 f857 	bl	800be6c <UART_WaitOnFlagUntilTimeout>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d03c      	beq.n	800be3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdcc:	e853 3f00 	ldrex	r3, [r3]
 800bdd0:	623b      	str	r3, [r7, #32]
   return(result);
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde2:	633b      	str	r3, [r7, #48]	; 0x30
 800bde4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bde8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdea:	e841 2300 	strex	r3, r2, [r1]
 800bdee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1e6      	bne.n	800bdc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	60fb      	str	r3, [r7, #12]
   return(result);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f023 0301 	bic.w	r3, r3, #1
 800be0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3308      	adds	r3, #8
 800be14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be16:	61fa      	str	r2, [r7, #28]
 800be18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	69b9      	ldr	r1, [r7, #24]
 800be1c:	69fa      	ldr	r2, [r7, #28]
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	617b      	str	r3, [r7, #20]
   return(result);
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e5      	bne.n	800bdf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2220      	movs	r2, #32
 800be2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e012      	b.n	800be64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2220      	movs	r2, #32
 800be42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2220      	movs	r2, #32
 800be4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3758      	adds	r7, #88	; 0x58
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	603b      	str	r3, [r7, #0]
 800be78:	4613      	mov	r3, r2
 800be7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be7c:	e049      	b.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be84:	d045      	beq.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be86:	f7f6 ff07 	bl	8002c98 <HAL_GetTick>
 800be8a:	4602      	mov	r2, r0
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	69ba      	ldr	r2, [r7, #24]
 800be92:	429a      	cmp	r2, r3
 800be94:	d302      	bcc.n	800be9c <UART_WaitOnFlagUntilTimeout+0x30>
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e048      	b.n	800bf32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 0304 	and.w	r3, r3, #4
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d031      	beq.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	f003 0308 	and.w	r3, r3, #8
 800beb8:	2b08      	cmp	r3, #8
 800beba:	d110      	bne.n	800bede <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2208      	movs	r2, #8
 800bec2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f839 	bl	800bf3c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2208      	movs	r2, #8
 800bece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e029      	b.n	800bf32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	69db      	ldr	r3, [r3, #28]
 800bee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beec:	d111      	bne.n	800bf12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f000 f81f 	bl	800bf3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2220      	movs	r2, #32
 800bf02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e00f      	b.n	800bf32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	69da      	ldr	r2, [r3, #28]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	bf0c      	ite	eq
 800bf22:	2301      	moveq	r3, #1
 800bf24:	2300      	movne	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	461a      	mov	r2, r3
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d0a6      	beq.n	800be7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b095      	sub	sp, #84	; 0x54
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4c:	e853 3f00 	ldrex	r3, [r3]
 800bf50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf62:	643b      	str	r3, [r7, #64]	; 0x40
 800bf64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf6a:	e841 2300 	strex	r3, r2, [r1]
 800bf6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1e6      	bne.n	800bf44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7e:	6a3b      	ldr	r3, [r7, #32]
 800bf80:	e853 3f00 	ldrex	r3, [r3]
 800bf84:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf86:	69fa      	ldr	r2, [r7, #28]
 800bf88:	4b1e      	ldr	r3, [pc, #120]	; (800c004 <UART_EndRxTransfer+0xc8>)
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3308      	adds	r3, #8
 800bf94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf96:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf9e:	e841 2300 	strex	r3, r2, [r1]
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1e5      	bne.n	800bf76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d118      	bne.n	800bfe4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	e853 3f00 	ldrex	r3, [r3]
 800bfbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	f023 0310 	bic.w	r3, r3, #16
 800bfc6:	647b      	str	r3, [r7, #68]	; 0x44
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd0:	61bb      	str	r3, [r7, #24]
 800bfd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd4:	6979      	ldr	r1, [r7, #20]
 800bfd6:	69ba      	ldr	r2, [r7, #24]
 800bfd8:	e841 2300 	strex	r3, r2, [r1]
 800bfdc:	613b      	str	r3, [r7, #16]
   return(result);
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1e6      	bne.n	800bfb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2220      	movs	r2, #32
 800bfe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bff8:	bf00      	nop
 800bffa:	3754      	adds	r7, #84	; 0x54
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	effffffe 	.word	0xeffffffe

0800c008 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c016:	2b01      	cmp	r3, #1
 800c018:	d101      	bne.n	800c01e <HAL_UARTEx_DisableFifoMode+0x16>
 800c01a:	2302      	movs	r3, #2
 800c01c:	e027      	b.n	800c06e <HAL_UARTEx_DisableFifoMode+0x66>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2224      	movs	r2, #36	; 0x24
 800c02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f022 0201 	bic.w	r2, r2, #1
 800c044:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c04c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2220      	movs	r2, #32
 800c060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d101      	bne.n	800c092 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c08e:	2302      	movs	r3, #2
 800c090:	e02d      	b.n	800c0ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2224      	movs	r2, #36	; 0x24
 800c09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f022 0201 	bic.w	r2, r2, #1
 800c0b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	430a      	orrs	r2, r1
 800c0cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f850 	bl	800c174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2220      	movs	r2, #32
 800c0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c106:	2b01      	cmp	r3, #1
 800c108:	d101      	bne.n	800c10e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c10a:	2302      	movs	r3, #2
 800c10c:	e02d      	b.n	800c16a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2224      	movs	r2, #36	; 0x24
 800c11a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f022 0201 	bic.w	r2, r2, #1
 800c134:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	683a      	ldr	r2, [r7, #0]
 800c146:	430a      	orrs	r2, r1
 800c148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f812 	bl	800c174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2220      	movs	r2, #32
 800c15c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c180:	2b00      	cmp	r3, #0
 800c182:	d108      	bne.n	800c196 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c194:	e031      	b.n	800c1fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c196:	2310      	movs	r3, #16
 800c198:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c19a:	2310      	movs	r3, #16
 800c19c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	0e5b      	lsrs	r3, r3, #25
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	f003 0307 	and.w	r3, r3, #7
 800c1ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	0f5b      	lsrs	r3, r3, #29
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	f003 0307 	and.w	r3, r3, #7
 800c1bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1be:	7bbb      	ldrb	r3, [r7, #14]
 800c1c0:	7b3a      	ldrb	r2, [r7, #12]
 800c1c2:	4911      	ldr	r1, [pc, #68]	; (800c208 <UARTEx_SetNbDataToProcess+0x94>)
 800c1c4:	5c8a      	ldrb	r2, [r1, r2]
 800c1c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1ca:	7b3a      	ldrb	r2, [r7, #12]
 800c1cc:	490f      	ldr	r1, [pc, #60]	; (800c20c <UARTEx_SetNbDataToProcess+0x98>)
 800c1ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	7b7a      	ldrb	r2, [r7, #13]
 800c1e0:	4909      	ldr	r1, [pc, #36]	; (800c208 <UARTEx_SetNbDataToProcess+0x94>)
 800c1e2:	5c8a      	ldrb	r2, [r1, r2]
 800c1e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c1e8:	7b7a      	ldrb	r2, [r7, #13]
 800c1ea:	4908      	ldr	r1, [pc, #32]	; (800c20c <UARTEx_SetNbDataToProcess+0x98>)
 800c1ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c1fa:	bf00      	nop
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	0800d410 	.word	0x0800d410
 800c20c:	0800d418 	.word	0x0800d418

0800c210 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d121      	bne.n	800c266 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	4b27      	ldr	r3, [pc, #156]	; (800c2c4 <FMC_SDRAM_Init+0xb4>)
 800c228:	4013      	ands	r3, r2
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	6851      	ldr	r1, [r2, #4]
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	6892      	ldr	r2, [r2, #8]
 800c232:	4311      	orrs	r1, r2
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	68d2      	ldr	r2, [r2, #12]
 800c238:	4311      	orrs	r1, r2
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	6912      	ldr	r2, [r2, #16]
 800c23e:	4311      	orrs	r1, r2
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	6952      	ldr	r2, [r2, #20]
 800c244:	4311      	orrs	r1, r2
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	6992      	ldr	r2, [r2, #24]
 800c24a:	4311      	orrs	r1, r2
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	69d2      	ldr	r2, [r2, #28]
 800c250:	4311      	orrs	r1, r2
 800c252:	683a      	ldr	r2, [r7, #0]
 800c254:	6a12      	ldr	r2, [r2, #32]
 800c256:	4311      	orrs	r1, r2
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c25c:	430a      	orrs	r2, r1
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	e026      	b.n	800c2b4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	69d9      	ldr	r1, [r3, #28]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	4319      	orrs	r1, r3
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27c:	430b      	orrs	r3, r1
 800c27e:	431a      	orrs	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	4b0e      	ldr	r3, [pc, #56]	; (800c2c4 <FMC_SDRAM_Init+0xb4>)
 800c28a:	4013      	ands	r3, r2
 800c28c:	683a      	ldr	r2, [r7, #0]
 800c28e:	6851      	ldr	r1, [r2, #4]
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	6892      	ldr	r2, [r2, #8]
 800c294:	4311      	orrs	r1, r2
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	68d2      	ldr	r2, [r2, #12]
 800c29a:	4311      	orrs	r1, r2
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	6912      	ldr	r2, [r2, #16]
 800c2a0:	4311      	orrs	r1, r2
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	6952      	ldr	r2, [r2, #20]
 800c2a6:	4311      	orrs	r1, r2
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	6992      	ldr	r2, [r2, #24]
 800c2ac:	430a      	orrs	r2, r1
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	ffff8000 	.word	0xffff8000

0800c2c8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d128      	bne.n	800c32c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	1e59      	subs	r1, r3, #1
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	011b      	lsls	r3, r3, #4
 800c2f0:	4319      	orrs	r1, r3
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	021b      	lsls	r3, r3, #8
 800c2fa:	4319      	orrs	r1, r3
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	3b01      	subs	r3, #1
 800c302:	031b      	lsls	r3, r3, #12
 800c304:	4319      	orrs	r1, r3
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	041b      	lsls	r3, r3, #16
 800c30e:	4319      	orrs	r1, r3
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	3b01      	subs	r3, #1
 800c316:	051b      	lsls	r3, r3, #20
 800c318:	4319      	orrs	r1, r3
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	3b01      	subs	r3, #1
 800c320:	061b      	lsls	r3, r3, #24
 800c322:	430b      	orrs	r3, r1
 800c324:	431a      	orrs	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	609a      	str	r2, [r3, #8]
 800c32a:	e02d      	b.n	800c388 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	689a      	ldr	r2, [r3, #8]
 800c330:	4b19      	ldr	r3, [pc, #100]	; (800c398 <FMC_SDRAM_Timing_Init+0xd0>)
 800c332:	4013      	ands	r3, r2
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	68d2      	ldr	r2, [r2, #12]
 800c338:	3a01      	subs	r2, #1
 800c33a:	0311      	lsls	r1, r2, #12
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	6952      	ldr	r2, [r2, #20]
 800c340:	3a01      	subs	r2, #1
 800c342:	0512      	lsls	r2, r2, #20
 800c344:	430a      	orrs	r2, r1
 800c346:	431a      	orrs	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	1e59      	subs	r1, r3, #1
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	3b01      	subs	r3, #1
 800c360:	011b      	lsls	r3, r3, #4
 800c362:	4319      	orrs	r1, r3
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	3b01      	subs	r3, #1
 800c36a:	021b      	lsls	r3, r3, #8
 800c36c:	4319      	orrs	r1, r3
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	3b01      	subs	r3, #1
 800c374:	041b      	lsls	r3, r3, #16
 800c376:	4319      	orrs	r1, r3
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	061b      	lsls	r3, r3, #24
 800c380:	430b      	orrs	r3, r1
 800c382:	431a      	orrs	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	ff0f0fff 	.word	0xff0f0fff

0800c39c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c39c:	b084      	sub	sp, #16
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	f107 001c 	add.w	r0, r7, #28
 800c3aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d120      	bne.n	800c3f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68da      	ldr	r2, [r3, #12]
 800c3c4:	4b2a      	ldr	r3, [pc, #168]	; (800c470 <USB_CoreInit+0xd4>)
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d105      	bne.n	800c3ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 faac 	bl	800c948 <USB_CoreReset>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73fb      	strb	r3, [r7, #15]
 800c3f4:	e01a      	b.n	800c42c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 faa0 	bl	800c948 <USB_CoreReset>
 800c408:	4603      	mov	r3, r0
 800c40a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d106      	bne.n	800c420 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c416:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	639a      	str	r2, [r3, #56]	; 0x38
 800c41e:	e005      	b.n	800c42c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c424:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d116      	bne.n	800c460 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c436:	b29a      	uxth	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c440:	4b0c      	ldr	r3, [pc, #48]	; (800c474 <USB_CoreInit+0xd8>)
 800c442:	4313      	orrs	r3, r2
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	f043 0206 	orr.w	r2, r3, #6
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f043 0220 	orr.w	r2, r3, #32
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c460:	7bfb      	ldrb	r3, [r7, #15]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c46c:	b004      	add	sp, #16
 800c46e:	4770      	bx	lr
 800c470:	ffbdffbf 	.word	0xffbdffbf
 800c474:	03ee0000 	.word	0x03ee0000

0800c478 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	f023 0201 	bic.w	r2, r3, #1
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c4b6:	78fb      	ldrb	r3, [r7, #3]
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d115      	bne.n	800c4e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c4c8:	2001      	movs	r0, #1
 800c4ca:	f7f6 fbf1 	bl	8002cb0 <HAL_Delay>
      ms++;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fa29 	bl	800c92c <USB_GetMode>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d01e      	beq.n	800c51e <USB_SetCurrentMode+0x84>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b31      	cmp	r3, #49	; 0x31
 800c4e4:	d9f0      	bls.n	800c4c8 <USB_SetCurrentMode+0x2e>
 800c4e6:	e01a      	b.n	800c51e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c4e8:	78fb      	ldrb	r3, [r7, #3]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d115      	bne.n	800c51a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c4fa:	2001      	movs	r0, #1
 800c4fc:	f7f6 fbd8 	bl	8002cb0 <HAL_Delay>
      ms++;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	3301      	adds	r3, #1
 800c504:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa10 	bl	800c92c <USB_GetMode>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d005      	beq.n	800c51e <USB_SetCurrentMode+0x84>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2b31      	cmp	r3, #49	; 0x31
 800c516:	d9f0      	bls.n	800c4fa <USB_SetCurrentMode+0x60>
 800c518:	e001      	b.n	800c51e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e005      	b.n	800c52a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b32      	cmp	r3, #50	; 0x32
 800c522:	d101      	bne.n	800c528 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c524:	2301      	movs	r3, #1
 800c526:	e000      	b.n	800c52a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c534:	b084      	sub	sp, #16
 800c536:	b580      	push	{r7, lr}
 800c538:	b086      	sub	sp, #24
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c54e:	2300      	movs	r3, #0
 800c550:	613b      	str	r3, [r7, #16]
 800c552:	e009      	b.n	800c568 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	3340      	adds	r3, #64	; 0x40
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	2200      	movs	r2, #0
 800c560:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	3301      	adds	r3, #1
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	2b0e      	cmp	r3, #14
 800c56c:	d9f2      	bls.n	800c554 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c570:	2b00      	cmp	r3, #0
 800c572:	d11c      	bne.n	800c5ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c582:	f043 0302 	orr.w	r3, r3, #2
 800c586:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c58c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	e005      	b.n	800c5ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	680b      	ldr	r3, [r1, #0]
 800c5d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d10c      	bne.n	800c5fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d104      	bne.n	800c5f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f965 	bl	800c8b8 <USB_SetDevSpeed>
 800c5ee:	e008      	b.n	800c602 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f960 	bl	800c8b8 <USB_SetDevSpeed>
 800c5f8:	e003      	b.n	800c602 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c5fa:	2103      	movs	r1, #3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f95b 	bl	800c8b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c602:	2110      	movs	r1, #16
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f8f3 	bl	800c7f0 <USB_FlushTxFifo>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d001      	beq.n	800c614 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f91f 	bl	800c858 <USB_FlushRxFifo>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c62a:	461a      	mov	r2, r3
 800c62c:	2300      	movs	r3, #0
 800c62e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c636:	461a      	mov	r2, r3
 800c638:	2300      	movs	r3, #0
 800c63a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c642:	461a      	mov	r2, r3
 800c644:	2300      	movs	r3, #0
 800c646:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c648:	2300      	movs	r3, #0
 800c64a:	613b      	str	r3, [r7, #16]
 800c64c:	e043      	b.n	800c6d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	015a      	lsls	r2, r3, #5
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	4413      	add	r3, r2
 800c656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c664:	d118      	bne.n	800c698 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10a      	bne.n	800c682 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	015a      	lsls	r2, r3, #5
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	4413      	add	r3, r2
 800c674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c678:	461a      	mov	r2, r3
 800c67a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	e013      	b.n	800c6aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	015a      	lsls	r2, r3, #5
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	4413      	add	r3, r2
 800c68a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68e:	461a      	mov	r2, r3
 800c690:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c694:	6013      	str	r3, [r2, #0]
 800c696:	e008      	b.n	800c6aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	015a      	lsls	r2, r3, #5
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	4413      	add	r3, r2
 800c6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	015a      	lsls	r2, r3, #5
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	015a      	lsls	r2, r3, #5
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c6ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	613b      	str	r3, [r7, #16]
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d3b7      	bcc.n	800c64e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6de:	2300      	movs	r3, #0
 800c6e0:	613b      	str	r3, [r7, #16]
 800c6e2:	e043      	b.n	800c76c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	015a      	lsls	r2, r3, #5
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6fa:	d118      	bne.n	800c72e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10a      	bne.n	800c718 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	015a      	lsls	r2, r3, #5
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	4413      	add	r3, r2
 800c70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70e:	461a      	mov	r2, r3
 800c710:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c714:	6013      	str	r3, [r2, #0]
 800c716:	e013      	b.n	800c740 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	015a      	lsls	r2, r3, #5
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4413      	add	r3, r2
 800c720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c724:	461a      	mov	r2, r3
 800c726:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c72a:	6013      	str	r3, [r2, #0]
 800c72c:	e008      	b.n	800c740 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	015a      	lsls	r2, r3, #5
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	4413      	add	r3, r2
 800c736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c73a:	461a      	mov	r2, r3
 800c73c:	2300      	movs	r3, #0
 800c73e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c74c:	461a      	mov	r2, r3
 800c74e:	2300      	movs	r3, #0
 800c750:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	015a      	lsls	r2, r3, #5
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	4413      	add	r3, r2
 800c75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c75e:	461a      	mov	r2, r3
 800c760:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c764:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	3301      	adds	r3, #1
 800c76a:	613b      	str	r3, [r7, #16]
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	429a      	cmp	r2, r3
 800c772:	d3b7      	bcc.n	800c6e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c77a:	691b      	ldr	r3, [r3, #16]
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c786:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c794:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d105      	bne.n	800c7a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	f043 0210 	orr.w	r2, r3, #16
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	699a      	ldr	r2, [r3, #24]
 800c7ac:	4b0e      	ldr	r3, [pc, #56]	; (800c7e8 <USB_DevInit+0x2b4>)
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d005      	beq.n	800c7c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	f043 0208 	orr.w	r2, r3, #8
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d105      	bne.n	800c7d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	699a      	ldr	r2, [r3, #24]
 800c7d0:	4b06      	ldr	r3, [pc, #24]	; (800c7ec <USB_DevInit+0x2b8>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3718      	adds	r7, #24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7e4:	b004      	add	sp, #16
 800c7e6:	4770      	bx	lr
 800c7e8:	803c3800 	.word	0x803c3800
 800c7ec:	40000004 	.word	0x40000004

0800c7f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3301      	adds	r3, #1
 800c802:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	4a13      	ldr	r2, [pc, #76]	; (800c854 <USB_FlushTxFifo+0x64>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d901      	bls.n	800c810 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e01b      	b.n	800c848 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	daf2      	bge.n	800c7fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c818:	2300      	movs	r3, #0
 800c81a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	019b      	lsls	r3, r3, #6
 800c820:	f043 0220 	orr.w	r2, r3, #32
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3301      	adds	r3, #1
 800c82c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	4a08      	ldr	r2, [pc, #32]	; (800c854 <USB_FlushTxFifo+0x64>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d901      	bls.n	800c83a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c836:	2303      	movs	r3, #3
 800c838:	e006      	b.n	800c848 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	f003 0320 	and.w	r3, r3, #32
 800c842:	2b20      	cmp	r3, #32
 800c844:	d0f0      	beq.n	800c828 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	00030d40 	.word	0x00030d40

0800c858 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c860:	2300      	movs	r3, #0
 800c862:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	3301      	adds	r3, #1
 800c868:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	4a11      	ldr	r2, [pc, #68]	; (800c8b4 <USB_FlushRxFifo+0x5c>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d901      	bls.n	800c876 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c872:	2303      	movs	r3, #3
 800c874:	e018      	b.n	800c8a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	daf2      	bge.n	800c864 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c87e:	2300      	movs	r3, #0
 800c880:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2210      	movs	r2, #16
 800c886:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3301      	adds	r3, #1
 800c88c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4a08      	ldr	r2, [pc, #32]	; (800c8b4 <USB_FlushRxFifo+0x5c>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d901      	bls.n	800c89a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	e006      	b.n	800c8a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	f003 0310 	and.w	r3, r3, #16
 800c8a2:	2b10      	cmp	r3, #16
 800c8a4:	d0f0      	beq.n	800c888 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3714      	adds	r7, #20
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr
 800c8b4:	00030d40 	.word	0x00030d40

0800c8b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	78fb      	ldrb	r3, [r7, #3]
 800c8d2:	68f9      	ldr	r1, [r7, #12]
 800c8d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b085      	sub	sp, #20
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c904:	f023 0303 	bic.w	r3, r3, #3
 800c908:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c918:	f043 0302 	orr.w	r3, r3, #2
 800c91c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3714      	adds	r7, #20
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	f003 0301 	and.w	r3, r3, #1
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c950:	2300      	movs	r3, #0
 800c952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	3301      	adds	r3, #1
 800c958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	4a13      	ldr	r2, [pc, #76]	; (800c9ac <USB_CoreReset+0x64>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d901      	bls.n	800c966 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e01b      	b.n	800c99e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	daf2      	bge.n	800c954 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	f043 0201 	orr.w	r2, r3, #1
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3301      	adds	r3, #1
 800c982:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	4a09      	ldr	r2, [pc, #36]	; (800c9ac <USB_CoreReset+0x64>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d901      	bls.n	800c990 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e006      	b.n	800c99e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	f003 0301 	and.w	r3, r3, #1
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d0f0      	beq.n	800c97e <USB_CoreReset+0x36>

  return HAL_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	00030d40 	.word	0x00030d40

0800c9b0 <__errno>:
 800c9b0:	4b01      	ldr	r3, [pc, #4]	; (800c9b8 <__errno+0x8>)
 800c9b2:	6818      	ldr	r0, [r3, #0]
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	24000010 	.word	0x24000010

0800c9bc <__libc_init_array>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	4d0d      	ldr	r5, [pc, #52]	; (800c9f4 <__libc_init_array+0x38>)
 800c9c0:	4c0d      	ldr	r4, [pc, #52]	; (800c9f8 <__libc_init_array+0x3c>)
 800c9c2:	1b64      	subs	r4, r4, r5
 800c9c4:	10a4      	asrs	r4, r4, #2
 800c9c6:	2600      	movs	r6, #0
 800c9c8:	42a6      	cmp	r6, r4
 800c9ca:	d109      	bne.n	800c9e0 <__libc_init_array+0x24>
 800c9cc:	4d0b      	ldr	r5, [pc, #44]	; (800c9fc <__libc_init_array+0x40>)
 800c9ce:	4c0c      	ldr	r4, [pc, #48]	; (800ca00 <__libc_init_array+0x44>)
 800c9d0:	f000 fca2 	bl	800d318 <_init>
 800c9d4:	1b64      	subs	r4, r4, r5
 800c9d6:	10a4      	asrs	r4, r4, #2
 800c9d8:	2600      	movs	r6, #0
 800c9da:	42a6      	cmp	r6, r4
 800c9dc:	d105      	bne.n	800c9ea <__libc_init_array+0x2e>
 800c9de:	bd70      	pop	{r4, r5, r6, pc}
 800c9e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9e4:	4798      	blx	r3
 800c9e6:	3601      	adds	r6, #1
 800c9e8:	e7ee      	b.n	800c9c8 <__libc_init_array+0xc>
 800c9ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ee:	4798      	blx	r3
 800c9f0:	3601      	adds	r6, #1
 800c9f2:	e7f2      	b.n	800c9da <__libc_init_array+0x1e>
 800c9f4:	0800d45c 	.word	0x0800d45c
 800c9f8:	0800d45c 	.word	0x0800d45c
 800c9fc:	0800d45c 	.word	0x0800d45c
 800ca00:	0800d460 	.word	0x0800d460

0800ca04 <memcpy>:
 800ca04:	440a      	add	r2, r1
 800ca06:	4291      	cmp	r1, r2
 800ca08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca0c:	d100      	bne.n	800ca10 <memcpy+0xc>
 800ca0e:	4770      	bx	lr
 800ca10:	b510      	push	{r4, lr}
 800ca12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca1a:	4291      	cmp	r1, r2
 800ca1c:	d1f9      	bne.n	800ca12 <memcpy+0xe>
 800ca1e:	bd10      	pop	{r4, pc}

0800ca20 <memset>:
 800ca20:	4402      	add	r2, r0
 800ca22:	4603      	mov	r3, r0
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d100      	bne.n	800ca2a <memset+0xa>
 800ca28:	4770      	bx	lr
 800ca2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca2e:	e7f9      	b.n	800ca24 <memset+0x4>

0800ca30 <sniprintf>:
 800ca30:	b40c      	push	{r2, r3}
 800ca32:	b530      	push	{r4, r5, lr}
 800ca34:	4b17      	ldr	r3, [pc, #92]	; (800ca94 <sniprintf+0x64>)
 800ca36:	1e0c      	subs	r4, r1, #0
 800ca38:	681d      	ldr	r5, [r3, #0]
 800ca3a:	b09d      	sub	sp, #116	; 0x74
 800ca3c:	da08      	bge.n	800ca50 <sniprintf+0x20>
 800ca3e:	238b      	movs	r3, #139	; 0x8b
 800ca40:	602b      	str	r3, [r5, #0]
 800ca42:	f04f 30ff 	mov.w	r0, #4294967295
 800ca46:	b01d      	add	sp, #116	; 0x74
 800ca48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca4c:	b002      	add	sp, #8
 800ca4e:	4770      	bx	lr
 800ca50:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ca54:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca58:	bf14      	ite	ne
 800ca5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ca5e:	4623      	moveq	r3, r4
 800ca60:	9304      	str	r3, [sp, #16]
 800ca62:	9307      	str	r3, [sp, #28]
 800ca64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca68:	9002      	str	r0, [sp, #8]
 800ca6a:	9006      	str	r0, [sp, #24]
 800ca6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ca72:	ab21      	add	r3, sp, #132	; 0x84
 800ca74:	a902      	add	r1, sp, #8
 800ca76:	4628      	mov	r0, r5
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	f000 f869 	bl	800cb50 <_svfiprintf_r>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	bfbc      	itt	lt
 800ca82:	238b      	movlt	r3, #139	; 0x8b
 800ca84:	602b      	strlt	r3, [r5, #0]
 800ca86:	2c00      	cmp	r4, #0
 800ca88:	d0dd      	beq.n	800ca46 <sniprintf+0x16>
 800ca8a:	9b02      	ldr	r3, [sp, #8]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	e7d9      	b.n	800ca46 <sniprintf+0x16>
 800ca92:	bf00      	nop
 800ca94:	24000010 	.word	0x24000010

0800ca98 <__ssputs_r>:
 800ca98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca9c:	688e      	ldr	r6, [r1, #8]
 800ca9e:	429e      	cmp	r6, r3
 800caa0:	4682      	mov	sl, r0
 800caa2:	460c      	mov	r4, r1
 800caa4:	4690      	mov	r8, r2
 800caa6:	461f      	mov	r7, r3
 800caa8:	d838      	bhi.n	800cb1c <__ssputs_r+0x84>
 800caaa:	898a      	ldrh	r2, [r1, #12]
 800caac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cab0:	d032      	beq.n	800cb18 <__ssputs_r+0x80>
 800cab2:	6825      	ldr	r5, [r4, #0]
 800cab4:	6909      	ldr	r1, [r1, #16]
 800cab6:	eba5 0901 	sub.w	r9, r5, r1
 800caba:	6965      	ldr	r5, [r4, #20]
 800cabc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cac4:	3301      	adds	r3, #1
 800cac6:	444b      	add	r3, r9
 800cac8:	106d      	asrs	r5, r5, #1
 800caca:	429d      	cmp	r5, r3
 800cacc:	bf38      	it	cc
 800cace:	461d      	movcc	r5, r3
 800cad0:	0553      	lsls	r3, r2, #21
 800cad2:	d531      	bpl.n	800cb38 <__ssputs_r+0xa0>
 800cad4:	4629      	mov	r1, r5
 800cad6:	f000 fb55 	bl	800d184 <_malloc_r>
 800cada:	4606      	mov	r6, r0
 800cadc:	b950      	cbnz	r0, 800caf4 <__ssputs_r+0x5c>
 800cade:	230c      	movs	r3, #12
 800cae0:	f8ca 3000 	str.w	r3, [sl]
 800cae4:	89a3      	ldrh	r3, [r4, #12]
 800cae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caea:	81a3      	strh	r3, [r4, #12]
 800caec:	f04f 30ff 	mov.w	r0, #4294967295
 800caf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf4:	6921      	ldr	r1, [r4, #16]
 800caf6:	464a      	mov	r2, r9
 800caf8:	f7ff ff84 	bl	800ca04 <memcpy>
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb06:	81a3      	strh	r3, [r4, #12]
 800cb08:	6126      	str	r6, [r4, #16]
 800cb0a:	6165      	str	r5, [r4, #20]
 800cb0c:	444e      	add	r6, r9
 800cb0e:	eba5 0509 	sub.w	r5, r5, r9
 800cb12:	6026      	str	r6, [r4, #0]
 800cb14:	60a5      	str	r5, [r4, #8]
 800cb16:	463e      	mov	r6, r7
 800cb18:	42be      	cmp	r6, r7
 800cb1a:	d900      	bls.n	800cb1e <__ssputs_r+0x86>
 800cb1c:	463e      	mov	r6, r7
 800cb1e:	6820      	ldr	r0, [r4, #0]
 800cb20:	4632      	mov	r2, r6
 800cb22:	4641      	mov	r1, r8
 800cb24:	f000 faa8 	bl	800d078 <memmove>
 800cb28:	68a3      	ldr	r3, [r4, #8]
 800cb2a:	1b9b      	subs	r3, r3, r6
 800cb2c:	60a3      	str	r3, [r4, #8]
 800cb2e:	6823      	ldr	r3, [r4, #0]
 800cb30:	4433      	add	r3, r6
 800cb32:	6023      	str	r3, [r4, #0]
 800cb34:	2000      	movs	r0, #0
 800cb36:	e7db      	b.n	800caf0 <__ssputs_r+0x58>
 800cb38:	462a      	mov	r2, r5
 800cb3a:	f000 fb97 	bl	800d26c <_realloc_r>
 800cb3e:	4606      	mov	r6, r0
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d1e1      	bne.n	800cb08 <__ssputs_r+0x70>
 800cb44:	6921      	ldr	r1, [r4, #16]
 800cb46:	4650      	mov	r0, sl
 800cb48:	f000 fab0 	bl	800d0ac <_free_r>
 800cb4c:	e7c7      	b.n	800cade <__ssputs_r+0x46>
	...

0800cb50 <_svfiprintf_r>:
 800cb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb54:	4698      	mov	r8, r3
 800cb56:	898b      	ldrh	r3, [r1, #12]
 800cb58:	061b      	lsls	r3, r3, #24
 800cb5a:	b09d      	sub	sp, #116	; 0x74
 800cb5c:	4607      	mov	r7, r0
 800cb5e:	460d      	mov	r5, r1
 800cb60:	4614      	mov	r4, r2
 800cb62:	d50e      	bpl.n	800cb82 <_svfiprintf_r+0x32>
 800cb64:	690b      	ldr	r3, [r1, #16]
 800cb66:	b963      	cbnz	r3, 800cb82 <_svfiprintf_r+0x32>
 800cb68:	2140      	movs	r1, #64	; 0x40
 800cb6a:	f000 fb0b 	bl	800d184 <_malloc_r>
 800cb6e:	6028      	str	r0, [r5, #0]
 800cb70:	6128      	str	r0, [r5, #16]
 800cb72:	b920      	cbnz	r0, 800cb7e <_svfiprintf_r+0x2e>
 800cb74:	230c      	movs	r3, #12
 800cb76:	603b      	str	r3, [r7, #0]
 800cb78:	f04f 30ff 	mov.w	r0, #4294967295
 800cb7c:	e0d1      	b.n	800cd22 <_svfiprintf_r+0x1d2>
 800cb7e:	2340      	movs	r3, #64	; 0x40
 800cb80:	616b      	str	r3, [r5, #20]
 800cb82:	2300      	movs	r3, #0
 800cb84:	9309      	str	r3, [sp, #36]	; 0x24
 800cb86:	2320      	movs	r3, #32
 800cb88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb90:	2330      	movs	r3, #48	; 0x30
 800cb92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd3c <_svfiprintf_r+0x1ec>
 800cb96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb9a:	f04f 0901 	mov.w	r9, #1
 800cb9e:	4623      	mov	r3, r4
 800cba0:	469a      	mov	sl, r3
 800cba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cba6:	b10a      	cbz	r2, 800cbac <_svfiprintf_r+0x5c>
 800cba8:	2a25      	cmp	r2, #37	; 0x25
 800cbaa:	d1f9      	bne.n	800cba0 <_svfiprintf_r+0x50>
 800cbac:	ebba 0b04 	subs.w	fp, sl, r4
 800cbb0:	d00b      	beq.n	800cbca <_svfiprintf_r+0x7a>
 800cbb2:	465b      	mov	r3, fp
 800cbb4:	4622      	mov	r2, r4
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	4638      	mov	r0, r7
 800cbba:	f7ff ff6d 	bl	800ca98 <__ssputs_r>
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	f000 80aa 	beq.w	800cd18 <_svfiprintf_r+0x1c8>
 800cbc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbc6:	445a      	add	r2, fp
 800cbc8:	9209      	str	r2, [sp, #36]	; 0x24
 800cbca:	f89a 3000 	ldrb.w	r3, [sl]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f000 80a2 	beq.w	800cd18 <_svfiprintf_r+0x1c8>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbde:	f10a 0a01 	add.w	sl, sl, #1
 800cbe2:	9304      	str	r3, [sp, #16]
 800cbe4:	9307      	str	r3, [sp, #28]
 800cbe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbea:	931a      	str	r3, [sp, #104]	; 0x68
 800cbec:	4654      	mov	r4, sl
 800cbee:	2205      	movs	r2, #5
 800cbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf4:	4851      	ldr	r0, [pc, #324]	; (800cd3c <_svfiprintf_r+0x1ec>)
 800cbf6:	f7f3 fb7b 	bl	80002f0 <memchr>
 800cbfa:	9a04      	ldr	r2, [sp, #16]
 800cbfc:	b9d8      	cbnz	r0, 800cc36 <_svfiprintf_r+0xe6>
 800cbfe:	06d0      	lsls	r0, r2, #27
 800cc00:	bf44      	itt	mi
 800cc02:	2320      	movmi	r3, #32
 800cc04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc08:	0711      	lsls	r1, r2, #28
 800cc0a:	bf44      	itt	mi
 800cc0c:	232b      	movmi	r3, #43	; 0x2b
 800cc0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc12:	f89a 3000 	ldrb.w	r3, [sl]
 800cc16:	2b2a      	cmp	r3, #42	; 0x2a
 800cc18:	d015      	beq.n	800cc46 <_svfiprintf_r+0xf6>
 800cc1a:	9a07      	ldr	r2, [sp, #28]
 800cc1c:	4654      	mov	r4, sl
 800cc1e:	2000      	movs	r0, #0
 800cc20:	f04f 0c0a 	mov.w	ip, #10
 800cc24:	4621      	mov	r1, r4
 800cc26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc2a:	3b30      	subs	r3, #48	; 0x30
 800cc2c:	2b09      	cmp	r3, #9
 800cc2e:	d94e      	bls.n	800ccce <_svfiprintf_r+0x17e>
 800cc30:	b1b0      	cbz	r0, 800cc60 <_svfiprintf_r+0x110>
 800cc32:	9207      	str	r2, [sp, #28]
 800cc34:	e014      	b.n	800cc60 <_svfiprintf_r+0x110>
 800cc36:	eba0 0308 	sub.w	r3, r0, r8
 800cc3a:	fa09 f303 	lsl.w	r3, r9, r3
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	9304      	str	r3, [sp, #16]
 800cc42:	46a2      	mov	sl, r4
 800cc44:	e7d2      	b.n	800cbec <_svfiprintf_r+0x9c>
 800cc46:	9b03      	ldr	r3, [sp, #12]
 800cc48:	1d19      	adds	r1, r3, #4
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	9103      	str	r1, [sp, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	bfbb      	ittet	lt
 800cc52:	425b      	neglt	r3, r3
 800cc54:	f042 0202 	orrlt.w	r2, r2, #2
 800cc58:	9307      	strge	r3, [sp, #28]
 800cc5a:	9307      	strlt	r3, [sp, #28]
 800cc5c:	bfb8      	it	lt
 800cc5e:	9204      	strlt	r2, [sp, #16]
 800cc60:	7823      	ldrb	r3, [r4, #0]
 800cc62:	2b2e      	cmp	r3, #46	; 0x2e
 800cc64:	d10c      	bne.n	800cc80 <_svfiprintf_r+0x130>
 800cc66:	7863      	ldrb	r3, [r4, #1]
 800cc68:	2b2a      	cmp	r3, #42	; 0x2a
 800cc6a:	d135      	bne.n	800ccd8 <_svfiprintf_r+0x188>
 800cc6c:	9b03      	ldr	r3, [sp, #12]
 800cc6e:	1d1a      	adds	r2, r3, #4
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	9203      	str	r2, [sp, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	bfb8      	it	lt
 800cc78:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc7c:	3402      	adds	r4, #2
 800cc7e:	9305      	str	r3, [sp, #20]
 800cc80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd4c <_svfiprintf_r+0x1fc>
 800cc84:	7821      	ldrb	r1, [r4, #0]
 800cc86:	2203      	movs	r2, #3
 800cc88:	4650      	mov	r0, sl
 800cc8a:	f7f3 fb31 	bl	80002f0 <memchr>
 800cc8e:	b140      	cbz	r0, 800cca2 <_svfiprintf_r+0x152>
 800cc90:	2340      	movs	r3, #64	; 0x40
 800cc92:	eba0 000a 	sub.w	r0, r0, sl
 800cc96:	fa03 f000 	lsl.w	r0, r3, r0
 800cc9a:	9b04      	ldr	r3, [sp, #16]
 800cc9c:	4303      	orrs	r3, r0
 800cc9e:	3401      	adds	r4, #1
 800cca0:	9304      	str	r3, [sp, #16]
 800cca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cca6:	4826      	ldr	r0, [pc, #152]	; (800cd40 <_svfiprintf_r+0x1f0>)
 800cca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccac:	2206      	movs	r2, #6
 800ccae:	f7f3 fb1f 	bl	80002f0 <memchr>
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	d038      	beq.n	800cd28 <_svfiprintf_r+0x1d8>
 800ccb6:	4b23      	ldr	r3, [pc, #140]	; (800cd44 <_svfiprintf_r+0x1f4>)
 800ccb8:	bb1b      	cbnz	r3, 800cd02 <_svfiprintf_r+0x1b2>
 800ccba:	9b03      	ldr	r3, [sp, #12]
 800ccbc:	3307      	adds	r3, #7
 800ccbe:	f023 0307 	bic.w	r3, r3, #7
 800ccc2:	3308      	adds	r3, #8
 800ccc4:	9303      	str	r3, [sp, #12]
 800ccc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc8:	4433      	add	r3, r6
 800ccca:	9309      	str	r3, [sp, #36]	; 0x24
 800cccc:	e767      	b.n	800cb9e <_svfiprintf_r+0x4e>
 800ccce:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	2001      	movs	r0, #1
 800ccd6:	e7a5      	b.n	800cc24 <_svfiprintf_r+0xd4>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	3401      	adds	r4, #1
 800ccdc:	9305      	str	r3, [sp, #20]
 800ccde:	4619      	mov	r1, r3
 800cce0:	f04f 0c0a 	mov.w	ip, #10
 800cce4:	4620      	mov	r0, r4
 800cce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccea:	3a30      	subs	r2, #48	; 0x30
 800ccec:	2a09      	cmp	r2, #9
 800ccee:	d903      	bls.n	800ccf8 <_svfiprintf_r+0x1a8>
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d0c5      	beq.n	800cc80 <_svfiprintf_r+0x130>
 800ccf4:	9105      	str	r1, [sp, #20]
 800ccf6:	e7c3      	b.n	800cc80 <_svfiprintf_r+0x130>
 800ccf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e7f0      	b.n	800cce4 <_svfiprintf_r+0x194>
 800cd02:	ab03      	add	r3, sp, #12
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	462a      	mov	r2, r5
 800cd08:	4b0f      	ldr	r3, [pc, #60]	; (800cd48 <_svfiprintf_r+0x1f8>)
 800cd0a:	a904      	add	r1, sp, #16
 800cd0c:	4638      	mov	r0, r7
 800cd0e:	f3af 8000 	nop.w
 800cd12:	1c42      	adds	r2, r0, #1
 800cd14:	4606      	mov	r6, r0
 800cd16:	d1d6      	bne.n	800ccc6 <_svfiprintf_r+0x176>
 800cd18:	89ab      	ldrh	r3, [r5, #12]
 800cd1a:	065b      	lsls	r3, r3, #25
 800cd1c:	f53f af2c 	bmi.w	800cb78 <_svfiprintf_r+0x28>
 800cd20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd22:	b01d      	add	sp, #116	; 0x74
 800cd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd28:	ab03      	add	r3, sp, #12
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	462a      	mov	r2, r5
 800cd2e:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <_svfiprintf_r+0x1f8>)
 800cd30:	a904      	add	r1, sp, #16
 800cd32:	4638      	mov	r0, r7
 800cd34:	f000 f87a 	bl	800ce2c <_printf_i>
 800cd38:	e7eb      	b.n	800cd12 <_svfiprintf_r+0x1c2>
 800cd3a:	bf00      	nop
 800cd3c:	0800d420 	.word	0x0800d420
 800cd40:	0800d42a 	.word	0x0800d42a
 800cd44:	00000000 	.word	0x00000000
 800cd48:	0800ca99 	.word	0x0800ca99
 800cd4c:	0800d426 	.word	0x0800d426

0800cd50 <_printf_common>:
 800cd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd54:	4616      	mov	r6, r2
 800cd56:	4699      	mov	r9, r3
 800cd58:	688a      	ldr	r2, [r1, #8]
 800cd5a:	690b      	ldr	r3, [r1, #16]
 800cd5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd60:	4293      	cmp	r3, r2
 800cd62:	bfb8      	it	lt
 800cd64:	4613      	movlt	r3, r2
 800cd66:	6033      	str	r3, [r6, #0]
 800cd68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	460c      	mov	r4, r1
 800cd70:	b10a      	cbz	r2, 800cd76 <_printf_common+0x26>
 800cd72:	3301      	adds	r3, #1
 800cd74:	6033      	str	r3, [r6, #0]
 800cd76:	6823      	ldr	r3, [r4, #0]
 800cd78:	0699      	lsls	r1, r3, #26
 800cd7a:	bf42      	ittt	mi
 800cd7c:	6833      	ldrmi	r3, [r6, #0]
 800cd7e:	3302      	addmi	r3, #2
 800cd80:	6033      	strmi	r3, [r6, #0]
 800cd82:	6825      	ldr	r5, [r4, #0]
 800cd84:	f015 0506 	ands.w	r5, r5, #6
 800cd88:	d106      	bne.n	800cd98 <_printf_common+0x48>
 800cd8a:	f104 0a19 	add.w	sl, r4, #25
 800cd8e:	68e3      	ldr	r3, [r4, #12]
 800cd90:	6832      	ldr	r2, [r6, #0]
 800cd92:	1a9b      	subs	r3, r3, r2
 800cd94:	42ab      	cmp	r3, r5
 800cd96:	dc26      	bgt.n	800cde6 <_printf_common+0x96>
 800cd98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd9c:	1e13      	subs	r3, r2, #0
 800cd9e:	6822      	ldr	r2, [r4, #0]
 800cda0:	bf18      	it	ne
 800cda2:	2301      	movne	r3, #1
 800cda4:	0692      	lsls	r2, r2, #26
 800cda6:	d42b      	bmi.n	800ce00 <_printf_common+0xb0>
 800cda8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdac:	4649      	mov	r1, r9
 800cdae:	4638      	mov	r0, r7
 800cdb0:	47c0      	blx	r8
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d01e      	beq.n	800cdf4 <_printf_common+0xa4>
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	68e5      	ldr	r5, [r4, #12]
 800cdba:	6832      	ldr	r2, [r6, #0]
 800cdbc:	f003 0306 	and.w	r3, r3, #6
 800cdc0:	2b04      	cmp	r3, #4
 800cdc2:	bf08      	it	eq
 800cdc4:	1aad      	subeq	r5, r5, r2
 800cdc6:	68a3      	ldr	r3, [r4, #8]
 800cdc8:	6922      	ldr	r2, [r4, #16]
 800cdca:	bf0c      	ite	eq
 800cdcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdd0:	2500      	movne	r5, #0
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	bfc4      	itt	gt
 800cdd6:	1a9b      	subgt	r3, r3, r2
 800cdd8:	18ed      	addgt	r5, r5, r3
 800cdda:	2600      	movs	r6, #0
 800cddc:	341a      	adds	r4, #26
 800cdde:	42b5      	cmp	r5, r6
 800cde0:	d11a      	bne.n	800ce18 <_printf_common+0xc8>
 800cde2:	2000      	movs	r0, #0
 800cde4:	e008      	b.n	800cdf8 <_printf_common+0xa8>
 800cde6:	2301      	movs	r3, #1
 800cde8:	4652      	mov	r2, sl
 800cdea:	4649      	mov	r1, r9
 800cdec:	4638      	mov	r0, r7
 800cdee:	47c0      	blx	r8
 800cdf0:	3001      	adds	r0, #1
 800cdf2:	d103      	bne.n	800cdfc <_printf_common+0xac>
 800cdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdfc:	3501      	adds	r5, #1
 800cdfe:	e7c6      	b.n	800cd8e <_printf_common+0x3e>
 800ce00:	18e1      	adds	r1, r4, r3
 800ce02:	1c5a      	adds	r2, r3, #1
 800ce04:	2030      	movs	r0, #48	; 0x30
 800ce06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce0a:	4422      	add	r2, r4
 800ce0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce14:	3302      	adds	r3, #2
 800ce16:	e7c7      	b.n	800cda8 <_printf_common+0x58>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	4649      	mov	r1, r9
 800ce1e:	4638      	mov	r0, r7
 800ce20:	47c0      	blx	r8
 800ce22:	3001      	adds	r0, #1
 800ce24:	d0e6      	beq.n	800cdf4 <_printf_common+0xa4>
 800ce26:	3601      	adds	r6, #1
 800ce28:	e7d9      	b.n	800cdde <_printf_common+0x8e>
	...

0800ce2c <_printf_i>:
 800ce2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce30:	7e0f      	ldrb	r7, [r1, #24]
 800ce32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce34:	2f78      	cmp	r7, #120	; 0x78
 800ce36:	4691      	mov	r9, r2
 800ce38:	4680      	mov	r8, r0
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	469a      	mov	sl, r3
 800ce3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce42:	d807      	bhi.n	800ce54 <_printf_i+0x28>
 800ce44:	2f62      	cmp	r7, #98	; 0x62
 800ce46:	d80a      	bhi.n	800ce5e <_printf_i+0x32>
 800ce48:	2f00      	cmp	r7, #0
 800ce4a:	f000 80d8 	beq.w	800cffe <_printf_i+0x1d2>
 800ce4e:	2f58      	cmp	r7, #88	; 0x58
 800ce50:	f000 80a3 	beq.w	800cf9a <_printf_i+0x16e>
 800ce54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce5c:	e03a      	b.n	800ced4 <_printf_i+0xa8>
 800ce5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce62:	2b15      	cmp	r3, #21
 800ce64:	d8f6      	bhi.n	800ce54 <_printf_i+0x28>
 800ce66:	a101      	add	r1, pc, #4	; (adr r1, 800ce6c <_printf_i+0x40>)
 800ce68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce6c:	0800cec5 	.word	0x0800cec5
 800ce70:	0800ced9 	.word	0x0800ced9
 800ce74:	0800ce55 	.word	0x0800ce55
 800ce78:	0800ce55 	.word	0x0800ce55
 800ce7c:	0800ce55 	.word	0x0800ce55
 800ce80:	0800ce55 	.word	0x0800ce55
 800ce84:	0800ced9 	.word	0x0800ced9
 800ce88:	0800ce55 	.word	0x0800ce55
 800ce8c:	0800ce55 	.word	0x0800ce55
 800ce90:	0800ce55 	.word	0x0800ce55
 800ce94:	0800ce55 	.word	0x0800ce55
 800ce98:	0800cfe5 	.word	0x0800cfe5
 800ce9c:	0800cf09 	.word	0x0800cf09
 800cea0:	0800cfc7 	.word	0x0800cfc7
 800cea4:	0800ce55 	.word	0x0800ce55
 800cea8:	0800ce55 	.word	0x0800ce55
 800ceac:	0800d007 	.word	0x0800d007
 800ceb0:	0800ce55 	.word	0x0800ce55
 800ceb4:	0800cf09 	.word	0x0800cf09
 800ceb8:	0800ce55 	.word	0x0800ce55
 800cebc:	0800ce55 	.word	0x0800ce55
 800cec0:	0800cfcf 	.word	0x0800cfcf
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	1d1a      	adds	r2, r3, #4
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	602a      	str	r2, [r5, #0]
 800cecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ced0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ced4:	2301      	movs	r3, #1
 800ced6:	e0a3      	b.n	800d020 <_printf_i+0x1f4>
 800ced8:	6820      	ldr	r0, [r4, #0]
 800ceda:	6829      	ldr	r1, [r5, #0]
 800cedc:	0606      	lsls	r6, r0, #24
 800cede:	f101 0304 	add.w	r3, r1, #4
 800cee2:	d50a      	bpl.n	800cefa <_printf_i+0xce>
 800cee4:	680e      	ldr	r6, [r1, #0]
 800cee6:	602b      	str	r3, [r5, #0]
 800cee8:	2e00      	cmp	r6, #0
 800ceea:	da03      	bge.n	800cef4 <_printf_i+0xc8>
 800ceec:	232d      	movs	r3, #45	; 0x2d
 800ceee:	4276      	negs	r6, r6
 800cef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cef4:	485e      	ldr	r0, [pc, #376]	; (800d070 <_printf_i+0x244>)
 800cef6:	230a      	movs	r3, #10
 800cef8:	e019      	b.n	800cf2e <_printf_i+0x102>
 800cefa:	680e      	ldr	r6, [r1, #0]
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf02:	bf18      	it	ne
 800cf04:	b236      	sxthne	r6, r6
 800cf06:	e7ef      	b.n	800cee8 <_printf_i+0xbc>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	6820      	ldr	r0, [r4, #0]
 800cf0c:	1d19      	adds	r1, r3, #4
 800cf0e:	6029      	str	r1, [r5, #0]
 800cf10:	0601      	lsls	r1, r0, #24
 800cf12:	d501      	bpl.n	800cf18 <_printf_i+0xec>
 800cf14:	681e      	ldr	r6, [r3, #0]
 800cf16:	e002      	b.n	800cf1e <_printf_i+0xf2>
 800cf18:	0646      	lsls	r6, r0, #25
 800cf1a:	d5fb      	bpl.n	800cf14 <_printf_i+0xe8>
 800cf1c:	881e      	ldrh	r6, [r3, #0]
 800cf1e:	4854      	ldr	r0, [pc, #336]	; (800d070 <_printf_i+0x244>)
 800cf20:	2f6f      	cmp	r7, #111	; 0x6f
 800cf22:	bf0c      	ite	eq
 800cf24:	2308      	moveq	r3, #8
 800cf26:	230a      	movne	r3, #10
 800cf28:	2100      	movs	r1, #0
 800cf2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf2e:	6865      	ldr	r5, [r4, #4]
 800cf30:	60a5      	str	r5, [r4, #8]
 800cf32:	2d00      	cmp	r5, #0
 800cf34:	bfa2      	ittt	ge
 800cf36:	6821      	ldrge	r1, [r4, #0]
 800cf38:	f021 0104 	bicge.w	r1, r1, #4
 800cf3c:	6021      	strge	r1, [r4, #0]
 800cf3e:	b90e      	cbnz	r6, 800cf44 <_printf_i+0x118>
 800cf40:	2d00      	cmp	r5, #0
 800cf42:	d04d      	beq.n	800cfe0 <_printf_i+0x1b4>
 800cf44:	4615      	mov	r5, r2
 800cf46:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf4a:	fb03 6711 	mls	r7, r3, r1, r6
 800cf4e:	5dc7      	ldrb	r7, [r0, r7]
 800cf50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf54:	4637      	mov	r7, r6
 800cf56:	42bb      	cmp	r3, r7
 800cf58:	460e      	mov	r6, r1
 800cf5a:	d9f4      	bls.n	800cf46 <_printf_i+0x11a>
 800cf5c:	2b08      	cmp	r3, #8
 800cf5e:	d10b      	bne.n	800cf78 <_printf_i+0x14c>
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	07de      	lsls	r6, r3, #31
 800cf64:	d508      	bpl.n	800cf78 <_printf_i+0x14c>
 800cf66:	6923      	ldr	r3, [r4, #16]
 800cf68:	6861      	ldr	r1, [r4, #4]
 800cf6a:	4299      	cmp	r1, r3
 800cf6c:	bfde      	ittt	le
 800cf6e:	2330      	movle	r3, #48	; 0x30
 800cf70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf78:	1b52      	subs	r2, r2, r5
 800cf7a:	6122      	str	r2, [r4, #16]
 800cf7c:	f8cd a000 	str.w	sl, [sp]
 800cf80:	464b      	mov	r3, r9
 800cf82:	aa03      	add	r2, sp, #12
 800cf84:	4621      	mov	r1, r4
 800cf86:	4640      	mov	r0, r8
 800cf88:	f7ff fee2 	bl	800cd50 <_printf_common>
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	d14c      	bne.n	800d02a <_printf_i+0x1fe>
 800cf90:	f04f 30ff 	mov.w	r0, #4294967295
 800cf94:	b004      	add	sp, #16
 800cf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf9a:	4835      	ldr	r0, [pc, #212]	; (800d070 <_printf_i+0x244>)
 800cf9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cfa0:	6829      	ldr	r1, [r5, #0]
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cfa8:	6029      	str	r1, [r5, #0]
 800cfaa:	061d      	lsls	r5, r3, #24
 800cfac:	d514      	bpl.n	800cfd8 <_printf_i+0x1ac>
 800cfae:	07df      	lsls	r7, r3, #31
 800cfb0:	bf44      	itt	mi
 800cfb2:	f043 0320 	orrmi.w	r3, r3, #32
 800cfb6:	6023      	strmi	r3, [r4, #0]
 800cfb8:	b91e      	cbnz	r6, 800cfc2 <_printf_i+0x196>
 800cfba:	6823      	ldr	r3, [r4, #0]
 800cfbc:	f023 0320 	bic.w	r3, r3, #32
 800cfc0:	6023      	str	r3, [r4, #0]
 800cfc2:	2310      	movs	r3, #16
 800cfc4:	e7b0      	b.n	800cf28 <_printf_i+0xfc>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	f043 0320 	orr.w	r3, r3, #32
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	2378      	movs	r3, #120	; 0x78
 800cfd0:	4828      	ldr	r0, [pc, #160]	; (800d074 <_printf_i+0x248>)
 800cfd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfd6:	e7e3      	b.n	800cfa0 <_printf_i+0x174>
 800cfd8:	0659      	lsls	r1, r3, #25
 800cfda:	bf48      	it	mi
 800cfdc:	b2b6      	uxthmi	r6, r6
 800cfde:	e7e6      	b.n	800cfae <_printf_i+0x182>
 800cfe0:	4615      	mov	r5, r2
 800cfe2:	e7bb      	b.n	800cf5c <_printf_i+0x130>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	6826      	ldr	r6, [r4, #0]
 800cfe8:	6961      	ldr	r1, [r4, #20]
 800cfea:	1d18      	adds	r0, r3, #4
 800cfec:	6028      	str	r0, [r5, #0]
 800cfee:	0635      	lsls	r5, r6, #24
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	d501      	bpl.n	800cff8 <_printf_i+0x1cc>
 800cff4:	6019      	str	r1, [r3, #0]
 800cff6:	e002      	b.n	800cffe <_printf_i+0x1d2>
 800cff8:	0670      	lsls	r0, r6, #25
 800cffa:	d5fb      	bpl.n	800cff4 <_printf_i+0x1c8>
 800cffc:	8019      	strh	r1, [r3, #0]
 800cffe:	2300      	movs	r3, #0
 800d000:	6123      	str	r3, [r4, #16]
 800d002:	4615      	mov	r5, r2
 800d004:	e7ba      	b.n	800cf7c <_printf_i+0x150>
 800d006:	682b      	ldr	r3, [r5, #0]
 800d008:	1d1a      	adds	r2, r3, #4
 800d00a:	602a      	str	r2, [r5, #0]
 800d00c:	681d      	ldr	r5, [r3, #0]
 800d00e:	6862      	ldr	r2, [r4, #4]
 800d010:	2100      	movs	r1, #0
 800d012:	4628      	mov	r0, r5
 800d014:	f7f3 f96c 	bl	80002f0 <memchr>
 800d018:	b108      	cbz	r0, 800d01e <_printf_i+0x1f2>
 800d01a:	1b40      	subs	r0, r0, r5
 800d01c:	6060      	str	r0, [r4, #4]
 800d01e:	6863      	ldr	r3, [r4, #4]
 800d020:	6123      	str	r3, [r4, #16]
 800d022:	2300      	movs	r3, #0
 800d024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d028:	e7a8      	b.n	800cf7c <_printf_i+0x150>
 800d02a:	6923      	ldr	r3, [r4, #16]
 800d02c:	462a      	mov	r2, r5
 800d02e:	4649      	mov	r1, r9
 800d030:	4640      	mov	r0, r8
 800d032:	47d0      	blx	sl
 800d034:	3001      	adds	r0, #1
 800d036:	d0ab      	beq.n	800cf90 <_printf_i+0x164>
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	079b      	lsls	r3, r3, #30
 800d03c:	d413      	bmi.n	800d066 <_printf_i+0x23a>
 800d03e:	68e0      	ldr	r0, [r4, #12]
 800d040:	9b03      	ldr	r3, [sp, #12]
 800d042:	4298      	cmp	r0, r3
 800d044:	bfb8      	it	lt
 800d046:	4618      	movlt	r0, r3
 800d048:	e7a4      	b.n	800cf94 <_printf_i+0x168>
 800d04a:	2301      	movs	r3, #1
 800d04c:	4632      	mov	r2, r6
 800d04e:	4649      	mov	r1, r9
 800d050:	4640      	mov	r0, r8
 800d052:	47d0      	blx	sl
 800d054:	3001      	adds	r0, #1
 800d056:	d09b      	beq.n	800cf90 <_printf_i+0x164>
 800d058:	3501      	adds	r5, #1
 800d05a:	68e3      	ldr	r3, [r4, #12]
 800d05c:	9903      	ldr	r1, [sp, #12]
 800d05e:	1a5b      	subs	r3, r3, r1
 800d060:	42ab      	cmp	r3, r5
 800d062:	dcf2      	bgt.n	800d04a <_printf_i+0x21e>
 800d064:	e7eb      	b.n	800d03e <_printf_i+0x212>
 800d066:	2500      	movs	r5, #0
 800d068:	f104 0619 	add.w	r6, r4, #25
 800d06c:	e7f5      	b.n	800d05a <_printf_i+0x22e>
 800d06e:	bf00      	nop
 800d070:	0800d431 	.word	0x0800d431
 800d074:	0800d442 	.word	0x0800d442

0800d078 <memmove>:
 800d078:	4288      	cmp	r0, r1
 800d07a:	b510      	push	{r4, lr}
 800d07c:	eb01 0402 	add.w	r4, r1, r2
 800d080:	d902      	bls.n	800d088 <memmove+0x10>
 800d082:	4284      	cmp	r4, r0
 800d084:	4623      	mov	r3, r4
 800d086:	d807      	bhi.n	800d098 <memmove+0x20>
 800d088:	1e43      	subs	r3, r0, #1
 800d08a:	42a1      	cmp	r1, r4
 800d08c:	d008      	beq.n	800d0a0 <memmove+0x28>
 800d08e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d092:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d096:	e7f8      	b.n	800d08a <memmove+0x12>
 800d098:	4402      	add	r2, r0
 800d09a:	4601      	mov	r1, r0
 800d09c:	428a      	cmp	r2, r1
 800d09e:	d100      	bne.n	800d0a2 <memmove+0x2a>
 800d0a0:	bd10      	pop	{r4, pc}
 800d0a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0aa:	e7f7      	b.n	800d09c <memmove+0x24>

0800d0ac <_free_r>:
 800d0ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0ae:	2900      	cmp	r1, #0
 800d0b0:	d044      	beq.n	800d13c <_free_r+0x90>
 800d0b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0b6:	9001      	str	r0, [sp, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f1a1 0404 	sub.w	r4, r1, #4
 800d0be:	bfb8      	it	lt
 800d0c0:	18e4      	addlt	r4, r4, r3
 800d0c2:	f000 f913 	bl	800d2ec <__malloc_lock>
 800d0c6:	4a1e      	ldr	r2, [pc, #120]	; (800d140 <_free_r+0x94>)
 800d0c8:	9801      	ldr	r0, [sp, #4]
 800d0ca:	6813      	ldr	r3, [r2, #0]
 800d0cc:	b933      	cbnz	r3, 800d0dc <_free_r+0x30>
 800d0ce:	6063      	str	r3, [r4, #4]
 800d0d0:	6014      	str	r4, [r2, #0]
 800d0d2:	b003      	add	sp, #12
 800d0d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0d8:	f000 b90e 	b.w	800d2f8 <__malloc_unlock>
 800d0dc:	42a3      	cmp	r3, r4
 800d0de:	d908      	bls.n	800d0f2 <_free_r+0x46>
 800d0e0:	6825      	ldr	r5, [r4, #0]
 800d0e2:	1961      	adds	r1, r4, r5
 800d0e4:	428b      	cmp	r3, r1
 800d0e6:	bf01      	itttt	eq
 800d0e8:	6819      	ldreq	r1, [r3, #0]
 800d0ea:	685b      	ldreq	r3, [r3, #4]
 800d0ec:	1949      	addeq	r1, r1, r5
 800d0ee:	6021      	streq	r1, [r4, #0]
 800d0f0:	e7ed      	b.n	800d0ce <_free_r+0x22>
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	b10b      	cbz	r3, 800d0fc <_free_r+0x50>
 800d0f8:	42a3      	cmp	r3, r4
 800d0fa:	d9fa      	bls.n	800d0f2 <_free_r+0x46>
 800d0fc:	6811      	ldr	r1, [r2, #0]
 800d0fe:	1855      	adds	r5, r2, r1
 800d100:	42a5      	cmp	r5, r4
 800d102:	d10b      	bne.n	800d11c <_free_r+0x70>
 800d104:	6824      	ldr	r4, [r4, #0]
 800d106:	4421      	add	r1, r4
 800d108:	1854      	adds	r4, r2, r1
 800d10a:	42a3      	cmp	r3, r4
 800d10c:	6011      	str	r1, [r2, #0]
 800d10e:	d1e0      	bne.n	800d0d2 <_free_r+0x26>
 800d110:	681c      	ldr	r4, [r3, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	6053      	str	r3, [r2, #4]
 800d116:	4421      	add	r1, r4
 800d118:	6011      	str	r1, [r2, #0]
 800d11a:	e7da      	b.n	800d0d2 <_free_r+0x26>
 800d11c:	d902      	bls.n	800d124 <_free_r+0x78>
 800d11e:	230c      	movs	r3, #12
 800d120:	6003      	str	r3, [r0, #0]
 800d122:	e7d6      	b.n	800d0d2 <_free_r+0x26>
 800d124:	6825      	ldr	r5, [r4, #0]
 800d126:	1961      	adds	r1, r4, r5
 800d128:	428b      	cmp	r3, r1
 800d12a:	bf04      	itt	eq
 800d12c:	6819      	ldreq	r1, [r3, #0]
 800d12e:	685b      	ldreq	r3, [r3, #4]
 800d130:	6063      	str	r3, [r4, #4]
 800d132:	bf04      	itt	eq
 800d134:	1949      	addeq	r1, r1, r5
 800d136:	6021      	streq	r1, [r4, #0]
 800d138:	6054      	str	r4, [r2, #4]
 800d13a:	e7ca      	b.n	800d0d2 <_free_r+0x26>
 800d13c:	b003      	add	sp, #12
 800d13e:	bd30      	pop	{r4, r5, pc}
 800d140:	24000ed0 	.word	0x24000ed0

0800d144 <sbrk_aligned>:
 800d144:	b570      	push	{r4, r5, r6, lr}
 800d146:	4e0e      	ldr	r6, [pc, #56]	; (800d180 <sbrk_aligned+0x3c>)
 800d148:	460c      	mov	r4, r1
 800d14a:	6831      	ldr	r1, [r6, #0]
 800d14c:	4605      	mov	r5, r0
 800d14e:	b911      	cbnz	r1, 800d156 <sbrk_aligned+0x12>
 800d150:	f000 f8bc 	bl	800d2cc <_sbrk_r>
 800d154:	6030      	str	r0, [r6, #0]
 800d156:	4621      	mov	r1, r4
 800d158:	4628      	mov	r0, r5
 800d15a:	f000 f8b7 	bl	800d2cc <_sbrk_r>
 800d15e:	1c43      	adds	r3, r0, #1
 800d160:	d00a      	beq.n	800d178 <sbrk_aligned+0x34>
 800d162:	1cc4      	adds	r4, r0, #3
 800d164:	f024 0403 	bic.w	r4, r4, #3
 800d168:	42a0      	cmp	r0, r4
 800d16a:	d007      	beq.n	800d17c <sbrk_aligned+0x38>
 800d16c:	1a21      	subs	r1, r4, r0
 800d16e:	4628      	mov	r0, r5
 800d170:	f000 f8ac 	bl	800d2cc <_sbrk_r>
 800d174:	3001      	adds	r0, #1
 800d176:	d101      	bne.n	800d17c <sbrk_aligned+0x38>
 800d178:	f04f 34ff 	mov.w	r4, #4294967295
 800d17c:	4620      	mov	r0, r4
 800d17e:	bd70      	pop	{r4, r5, r6, pc}
 800d180:	24000ed4 	.word	0x24000ed4

0800d184 <_malloc_r>:
 800d184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d188:	1ccd      	adds	r5, r1, #3
 800d18a:	f025 0503 	bic.w	r5, r5, #3
 800d18e:	3508      	adds	r5, #8
 800d190:	2d0c      	cmp	r5, #12
 800d192:	bf38      	it	cc
 800d194:	250c      	movcc	r5, #12
 800d196:	2d00      	cmp	r5, #0
 800d198:	4607      	mov	r7, r0
 800d19a:	db01      	blt.n	800d1a0 <_malloc_r+0x1c>
 800d19c:	42a9      	cmp	r1, r5
 800d19e:	d905      	bls.n	800d1ac <_malloc_r+0x28>
 800d1a0:	230c      	movs	r3, #12
 800d1a2:	603b      	str	r3, [r7, #0]
 800d1a4:	2600      	movs	r6, #0
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ac:	4e2e      	ldr	r6, [pc, #184]	; (800d268 <_malloc_r+0xe4>)
 800d1ae:	f000 f89d 	bl	800d2ec <__malloc_lock>
 800d1b2:	6833      	ldr	r3, [r6, #0]
 800d1b4:	461c      	mov	r4, r3
 800d1b6:	bb34      	cbnz	r4, 800d206 <_malloc_r+0x82>
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	4638      	mov	r0, r7
 800d1bc:	f7ff ffc2 	bl	800d144 <sbrk_aligned>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	d14d      	bne.n	800d262 <_malloc_r+0xde>
 800d1c6:	6834      	ldr	r4, [r6, #0]
 800d1c8:	4626      	mov	r6, r4
 800d1ca:	2e00      	cmp	r6, #0
 800d1cc:	d140      	bne.n	800d250 <_malloc_r+0xcc>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	4631      	mov	r1, r6
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	eb04 0803 	add.w	r8, r4, r3
 800d1d8:	f000 f878 	bl	800d2cc <_sbrk_r>
 800d1dc:	4580      	cmp	r8, r0
 800d1de:	d13a      	bne.n	800d256 <_malloc_r+0xd2>
 800d1e0:	6821      	ldr	r1, [r4, #0]
 800d1e2:	3503      	adds	r5, #3
 800d1e4:	1a6d      	subs	r5, r5, r1
 800d1e6:	f025 0503 	bic.w	r5, r5, #3
 800d1ea:	3508      	adds	r5, #8
 800d1ec:	2d0c      	cmp	r5, #12
 800d1ee:	bf38      	it	cc
 800d1f0:	250c      	movcc	r5, #12
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	4638      	mov	r0, r7
 800d1f6:	f7ff ffa5 	bl	800d144 <sbrk_aligned>
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	d02b      	beq.n	800d256 <_malloc_r+0xd2>
 800d1fe:	6823      	ldr	r3, [r4, #0]
 800d200:	442b      	add	r3, r5
 800d202:	6023      	str	r3, [r4, #0]
 800d204:	e00e      	b.n	800d224 <_malloc_r+0xa0>
 800d206:	6822      	ldr	r2, [r4, #0]
 800d208:	1b52      	subs	r2, r2, r5
 800d20a:	d41e      	bmi.n	800d24a <_malloc_r+0xc6>
 800d20c:	2a0b      	cmp	r2, #11
 800d20e:	d916      	bls.n	800d23e <_malloc_r+0xba>
 800d210:	1961      	adds	r1, r4, r5
 800d212:	42a3      	cmp	r3, r4
 800d214:	6025      	str	r5, [r4, #0]
 800d216:	bf18      	it	ne
 800d218:	6059      	strne	r1, [r3, #4]
 800d21a:	6863      	ldr	r3, [r4, #4]
 800d21c:	bf08      	it	eq
 800d21e:	6031      	streq	r1, [r6, #0]
 800d220:	5162      	str	r2, [r4, r5]
 800d222:	604b      	str	r3, [r1, #4]
 800d224:	4638      	mov	r0, r7
 800d226:	f104 060b 	add.w	r6, r4, #11
 800d22a:	f000 f865 	bl	800d2f8 <__malloc_unlock>
 800d22e:	f026 0607 	bic.w	r6, r6, #7
 800d232:	1d23      	adds	r3, r4, #4
 800d234:	1af2      	subs	r2, r6, r3
 800d236:	d0b6      	beq.n	800d1a6 <_malloc_r+0x22>
 800d238:	1b9b      	subs	r3, r3, r6
 800d23a:	50a3      	str	r3, [r4, r2]
 800d23c:	e7b3      	b.n	800d1a6 <_malloc_r+0x22>
 800d23e:	6862      	ldr	r2, [r4, #4]
 800d240:	42a3      	cmp	r3, r4
 800d242:	bf0c      	ite	eq
 800d244:	6032      	streq	r2, [r6, #0]
 800d246:	605a      	strne	r2, [r3, #4]
 800d248:	e7ec      	b.n	800d224 <_malloc_r+0xa0>
 800d24a:	4623      	mov	r3, r4
 800d24c:	6864      	ldr	r4, [r4, #4]
 800d24e:	e7b2      	b.n	800d1b6 <_malloc_r+0x32>
 800d250:	4634      	mov	r4, r6
 800d252:	6876      	ldr	r6, [r6, #4]
 800d254:	e7b9      	b.n	800d1ca <_malloc_r+0x46>
 800d256:	230c      	movs	r3, #12
 800d258:	603b      	str	r3, [r7, #0]
 800d25a:	4638      	mov	r0, r7
 800d25c:	f000 f84c 	bl	800d2f8 <__malloc_unlock>
 800d260:	e7a1      	b.n	800d1a6 <_malloc_r+0x22>
 800d262:	6025      	str	r5, [r4, #0]
 800d264:	e7de      	b.n	800d224 <_malloc_r+0xa0>
 800d266:	bf00      	nop
 800d268:	24000ed0 	.word	0x24000ed0

0800d26c <_realloc_r>:
 800d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	4680      	mov	r8, r0
 800d272:	4614      	mov	r4, r2
 800d274:	460e      	mov	r6, r1
 800d276:	b921      	cbnz	r1, 800d282 <_realloc_r+0x16>
 800d278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27c:	4611      	mov	r1, r2
 800d27e:	f7ff bf81 	b.w	800d184 <_malloc_r>
 800d282:	b92a      	cbnz	r2, 800d290 <_realloc_r+0x24>
 800d284:	f7ff ff12 	bl	800d0ac <_free_r>
 800d288:	4625      	mov	r5, r4
 800d28a:	4628      	mov	r0, r5
 800d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d290:	f000 f838 	bl	800d304 <_malloc_usable_size_r>
 800d294:	4284      	cmp	r4, r0
 800d296:	4607      	mov	r7, r0
 800d298:	d802      	bhi.n	800d2a0 <_realloc_r+0x34>
 800d29a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d29e:	d812      	bhi.n	800d2c6 <_realloc_r+0x5a>
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	f7ff ff6e 	bl	800d184 <_malloc_r>
 800d2a8:	4605      	mov	r5, r0
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d0ed      	beq.n	800d28a <_realloc_r+0x1e>
 800d2ae:	42bc      	cmp	r4, r7
 800d2b0:	4622      	mov	r2, r4
 800d2b2:	4631      	mov	r1, r6
 800d2b4:	bf28      	it	cs
 800d2b6:	463a      	movcs	r2, r7
 800d2b8:	f7ff fba4 	bl	800ca04 <memcpy>
 800d2bc:	4631      	mov	r1, r6
 800d2be:	4640      	mov	r0, r8
 800d2c0:	f7ff fef4 	bl	800d0ac <_free_r>
 800d2c4:	e7e1      	b.n	800d28a <_realloc_r+0x1e>
 800d2c6:	4635      	mov	r5, r6
 800d2c8:	e7df      	b.n	800d28a <_realloc_r+0x1e>
	...

0800d2cc <_sbrk_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4d06      	ldr	r5, [pc, #24]	; (800d2e8 <_sbrk_r+0x1c>)
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	4608      	mov	r0, r1
 800d2d6:	602b      	str	r3, [r5, #0]
 800d2d8:	f7f5 fb70 	bl	80029bc <_sbrk>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_sbrk_r+0x1a>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_sbrk_r+0x1a>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	24000ed8 	.word	0x24000ed8

0800d2ec <__malloc_lock>:
 800d2ec:	4801      	ldr	r0, [pc, #4]	; (800d2f4 <__malloc_lock+0x8>)
 800d2ee:	f000 b811 	b.w	800d314 <__retarget_lock_acquire_recursive>
 800d2f2:	bf00      	nop
 800d2f4:	24000edc 	.word	0x24000edc

0800d2f8 <__malloc_unlock>:
 800d2f8:	4801      	ldr	r0, [pc, #4]	; (800d300 <__malloc_unlock+0x8>)
 800d2fa:	f000 b80c 	b.w	800d316 <__retarget_lock_release_recursive>
 800d2fe:	bf00      	nop
 800d300:	24000edc 	.word	0x24000edc

0800d304 <_malloc_usable_size_r>:
 800d304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d308:	1f18      	subs	r0, r3, #4
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	bfbc      	itt	lt
 800d30e:	580b      	ldrlt	r3, [r1, r0]
 800d310:	18c0      	addlt	r0, r0, r3
 800d312:	4770      	bx	lr

0800d314 <__retarget_lock_acquire_recursive>:
 800d314:	4770      	bx	lr

0800d316 <__retarget_lock_release_recursive>:
 800d316:	4770      	bx	lr

0800d318 <_init>:
 800d318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31a:	bf00      	nop
 800d31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d31e:	bc08      	pop	{r3}
 800d320:	469e      	mov	lr, r3
 800d322:	4770      	bx	lr

0800d324 <_fini>:
 800d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d326:	bf00      	nop
 800d328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32a:	bc08      	pop	{r3}
 800d32c:	469e      	mov	lr, r3
 800d32e:	4770      	bx	lr


STM32H750B-DK_I2C_Basic_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cec0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800d160  0800d160  0001d160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d2a4  0800d2a4  0001d2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d2ac  0800d2ac  0001d2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d2b0  0800d2b0  0001d2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800d2b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800d314  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800d374  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee4  24000120  0800d3d4  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001004  0800d3d4  00021004  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ee19  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004565  00000000  00000000  0004efaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022d0  00000000  00000000  00053510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b33  00000000  00000000  000557e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040d5c  00000000  00000000  00057313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d574  00000000  00000000  0009806f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019bc00  00000000  00000000  000c55e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009fbc  00000000  00000000  002611e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0026b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d148 	.word	0x0800d148

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800d148 	.word	0x0800d148

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b087      	sub	sp, #28
 8000690:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
int i=0;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
uint8_t Space[] = " - ";
 8000696:	4b75      	ldr	r3, [pc, #468]	; (800086c <main+0x1e0>)
 8000698:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f002 fa89 	bl	8002bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f907 	bl	80008b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a2:	f000 f991 	bl	80009c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 ff35 	bl	8001514 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006aa:	f000 f9bd 	bl	8000a28 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ae:	f000 fa33 	bl	8000b18 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006b2:	f000 fa95 	bl	8000be0 <MX_ADC3_Init>
  MX_ETH_Init();
 80006b6:	f000 faf5 	bl	8000ca4 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006ba:	f000 fb3f 	bl	8000d3c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006be:	f000 fba1 	bl	8000e04 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006c2:	f000 fed9 	bl	8001478 <MX_FMC_Init>
  MX_LTDC_Init();
 80006c6:	f000 fc41 	bl	8000f4c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006ca:	f000 fcf1 	bl	80010b0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006ce:	f000 fd1b 	bl	8001108 <MX_RTC_Init>
  MX_SAI2_Init();
 80006d2:	f000 fd41 	bl	8001158 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006d6:	f000 fdfd 	bl	80012d4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006da:	f000 fe4f 	bl	800137c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006de:	f000 fe99 	bl	8001414 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80006e2:	f000 fbf3 	bl	8000ecc <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);    // Set LCD_RST to high
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ec:	4860      	ldr	r0, [pc, #384]	; (8000870 <main+0x1e4>)
 80006ee:	f004 fe0d 	bl	800530c <HAL_GPIO_WritePin>


  /*-[ I2C Bus Scanning ]-*/
		snprintf(SendBuffer,BUFSIZE,"I2C Scanning started !\n\r");
 80006f2:	4a60      	ldr	r2, [pc, #384]	; (8000874 <main+0x1e8>)
 80006f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f8:	485f      	ldr	r0, [pc, #380]	; (8000878 <main+0x1ec>)
 80006fa:	f00c f86d 	bl	800c7d8 <sniprintf>
		HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 80006fe:	485e      	ldr	r0, [pc, #376]	; (8000878 <main+0x1ec>)
 8000700:	f7ff fdee 	bl	80002e0 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	b29a      	uxth	r2, r3
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	495b      	ldr	r1, [pc, #364]	; (8000878 <main+0x1ec>)
 800070c:	485b      	ldr	r0, [pc, #364]	; (800087c <main+0x1f0>)
 800070e:	f00a fb7e 	bl	800ae0e <HAL_UART_Transmit>

		 for(i=1; i<128; i++)
 8000712:	2301      	movs	r3, #1
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	e032      	b.n	800077e <main+0xf2>
		 {
			 retval = HAL_I2C_IsDeviceReady(&hi2c4, (uint16_t)(i<<1), 3, 5);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	b29b      	uxth	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	b299      	uxth	r1, r3
 8000720:	2305      	movs	r3, #5
 8000722:	2203      	movs	r2, #3
 8000724:	4856      	ldr	r0, [pc, #344]	; (8000880 <main+0x1f4>)
 8000726:	f004 ffcf 	bl	80056c8 <HAL_I2C_IsDeviceReady>
 800072a:	4603      	mov	r3, r0
 800072c:	461a      	mov	r2, r3
 800072e:	4b55      	ldr	r3, [pc, #340]	; (8000884 <main+0x1f8>)
 8000730:	701a      	strb	r2, [r3, #0]
			 if (retval != HAL_OK) /* No ACK Received At That Address */
 8000732:	4b54      	ldr	r3, [pc, #336]	; (8000884 <main+0x1f8>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <main+0xbc>
			 {
				 HAL_UART_Transmit(&huart3, Space, sizeof(Space), 100);
 800073a:	4639      	mov	r1, r7
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2204      	movs	r2, #4
 8000740:	484e      	ldr	r0, [pc, #312]	; (800087c <main+0x1f0>)
 8000742:	f00a fb64 	bl	800ae0e <HAL_UART_Transmit>
 8000746:	e017      	b.n	8000778 <main+0xec>
			 }
			 else if(retval == HAL_OK)
 8000748:	4b4e      	ldr	r3, [pc, #312]	; (8000884 <main+0x1f8>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d113      	bne.n	8000778 <main+0xec>
			 {
				 snprintf(SendBuffer,BUFSIZE,"0x%02X[0x%02X]", i, i<<1);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a4b      	ldr	r2, [pc, #300]	; (8000888 <main+0x1fc>)
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	4846      	ldr	r0, [pc, #280]	; (8000878 <main+0x1ec>)
 8000760:	f00c f83a 	bl	800c7d8 <sniprintf>
				HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),1);
 8000764:	4844      	ldr	r0, [pc, #272]	; (8000878 <main+0x1ec>)
 8000766:	f7ff fdbb 	bl	80002e0 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	2301      	movs	r3, #1
 8000770:	4941      	ldr	r1, [pc, #260]	; (8000878 <main+0x1ec>)
 8000772:	4842      	ldr	r0, [pc, #264]	; (800087c <main+0x1f0>)
 8000774:	f00a fb4b 	bl	800ae0e <HAL_UART_Transmit>
		 for(i=1; i<128; i++)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b7f      	cmp	r3, #127	; 0x7f
 8000782:	ddc9      	ble.n	8000718 <main+0x8c>
			 }
		 }
			snprintf(SendBuffer,BUFSIZE,"I2C Scanning stopped !\n\r");
 8000784:	4a41      	ldr	r2, [pc, #260]	; (800088c <main+0x200>)
 8000786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078a:	483b      	ldr	r0, [pc, #236]	; (8000878 <main+0x1ec>)
 800078c:	f00c f824 	bl	800c7d8 <sniprintf>
			HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000790:	4839      	ldr	r0, [pc, #228]	; (8000878 <main+0x1ec>)
 8000792:	f7ff fda5 	bl	80002e0 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	4936      	ldr	r1, [pc, #216]	; (8000878 <main+0x1ec>)
 800079e:	4837      	ldr	r0, [pc, #220]	; (800087c <main+0x1f0>)
 80007a0:	f00a fb35 	bl	800ae0e <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	4839      	ldr	r0, [pc, #228]	; (8000890 <main+0x204>)
 80007aa:	f004 fdc8 	bl	800533e <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	4838      	ldr	r0, [pc, #224]	; (8000894 <main+0x208>)
 80007b4:	f004 fd92 	bl	80052dc <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b36      	ldr	r3, [pc, #216]	; (8000898 <main+0x20c>)
 80007be:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, KeyState);
 80007c0:	4b35      	ldr	r3, [pc, #212]	; (8000898 <main+0x20c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	2104      	movs	r1, #4
 80007ca:	4834      	ldr	r0, [pc, #208]	; (800089c <main+0x210>)
 80007cc:	f004 fd9e 	bl	800530c <HAL_GPIO_WritePin>

		// Reading from address 0x1a register R0 (addr. 0x00) default value should be 0x8994 - Both variations work !
	    //dataBuffer[0] = 0; dataBuffer[1] = 0x00;
	    //retval = HAL_I2C_Master_Transmit(&hi2c4, (0x1a << 1), dataBuffer, 2, HAL_MAX_DELAY);
	    //retval = HAL_I2C_Master_Receive(&hi2c4, (0x1a << 1), dataBuffer, 2, HAL_MAX_DELAY);
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x1a << 1), 0, I2C_MEMADD_SIZE_16BIT,dataBuffer, 2, HAL_MAX_DELAY);
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	9302      	str	r3, [sp, #8]
 80007d6:	2302      	movs	r3, #2
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <main+0x214>)
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2302      	movs	r3, #2
 80007e0:	2200      	movs	r2, #0
 80007e2:	2134      	movs	r1, #52	; 0x34
 80007e4:	4826      	ldr	r0, [pc, #152]	; (8000880 <main+0x1f4>)
 80007e6:	f004 fe55 	bl	8005494 <HAL_I2C_Mem_Read>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <main+0x1f8>)
 80007f0:	701a      	strb	r2, [r3, #0]

		// Reading from address 0x38 register Vendor's Chip ID (addr. 0xA8) default value should be 0x51=81  - Both variations work !
	    //dataBuffer[5] = 0xA8;
	    //retval = HAL_I2C_Master_Transmit(&hi2c4, (0x38 << 1), &dataBuffer[5], 1, HAL_MAX_DELAY);
	    //retval = HAL_I2C_Master_Receive(&hi2c4, (0x38 << 1), &dataBuffer[5], 1, HAL_MAX_DELAY);
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA8, I2C_MEMADD_SIZE_8BIT,&dataBuffer[5], 1, HAL_MAX_DELAY);
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	2301      	movs	r3, #1
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <main+0x218>)
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	22a8      	movs	r2, #168	; 0xa8
 8000804:	2170      	movs	r1, #112	; 0x70
 8000806:	481e      	ldr	r0, [pc, #120]	; (8000880 <main+0x1f4>)
 8000808:	f004 fe44 	bl	8005494 <HAL_I2C_Mem_Read>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <main+0x1f8>)
 8000812:	701a      	strb	r2, [r3, #0]


	    snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Audio Chip ID: 0x%4x Touch ID: 0x%2x=%d\n\r",Counter++,KeyState, dataBuffer[0]*256+dataBuffer[1],dataBuffer[5],dataBuffer[5]);
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <main+0x21c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	4923      	ldr	r1, [pc, #140]	; (80008a8 <main+0x21c>)
 800081c:	600a      	str	r2, [r1, #0]
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <main+0x20c>)
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	491f      	ldr	r1, [pc, #124]	; (80008a0 <main+0x214>)
 8000824:	7809      	ldrb	r1, [r1, #0]
 8000826:	0209      	lsls	r1, r1, #8
 8000828:	481d      	ldr	r0, [pc, #116]	; (80008a0 <main+0x214>)
 800082a:	7840      	ldrb	r0, [r0, #1]
 800082c:	4401      	add	r1, r0
 800082e:	481c      	ldr	r0, [pc, #112]	; (80008a0 <main+0x214>)
 8000830:	7940      	ldrb	r0, [r0, #5]
 8000832:	4604      	mov	r4, r0
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <main+0x214>)
 8000836:	7940      	ldrb	r0, [r0, #5]
 8000838:	9003      	str	r0, [sp, #12]
 800083a:	9402      	str	r4, [sp, #8]
 800083c:	9101      	str	r1, [sp, #4]
 800083e:	9200      	str	r2, [sp, #0]
 8000840:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <main+0x220>)
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <main+0x1ec>)
 8000848:	f00b ffc6 	bl	800c7d8 <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <main+0x1ec>)
 800084e:	f7ff fd47 	bl	80002e0 <strlen>
 8000852:	4603      	mov	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	2364      	movs	r3, #100	; 0x64
 8000858:	4907      	ldr	r1, [pc, #28]	; (8000878 <main+0x1ec>)
 800085a:	4808      	ldr	r0, [pc, #32]	; (800087c <main+0x1f0>)
 800085c:	f00a fad7 	bl	800ae0e <HAL_UART_Transmit>

	    HAL_Delay(1000);
 8000860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000864:	f002 fa36 	bl	8002cd4 <HAL_Delay>
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8000868:	e79c      	b.n	80007a4 <main+0x118>
 800086a:	bf00      	nop
 800086c:	00202d20 	.word	0x00202d20
 8000870:	58020400 	.word	0x58020400
 8000874:	0800d160 	.word	0x0800d160
 8000878:	24000d88 	.word	0x24000d88
 800087c:	240007b4 	.word	0x240007b4
 8000880:	24000490 	.word	0x24000490
 8000884:	24000e9a 	.word	0x24000e9a
 8000888:	0800d17c 	.word	0x0800d17c
 800088c:	0800d18c 	.word	0x0800d18c
 8000890:	58022000 	.word	0x58022000
 8000894:	58020800 	.word	0x58020800
 8000898:	24000e8c 	.word	0x24000e8c
 800089c:	58022400 	.word	0x58022400
 80008a0:	24000e90 	.word	0x24000e90
 80008a4:	24000e95 	.word	0x24000e95
 80008a8:	24000e88 	.word	0x24000e88
 80008ac:	0800d1a8 	.word	0x0800d1a8

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09c      	sub	sp, #112	; 0x70
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	224c      	movs	r2, #76	; 0x4c
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f00b ffbe 	bl	800c840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2220      	movs	r2, #32
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00b ffb8 	bl	800c840 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008d0:	2002      	movs	r0, #2
 80008d2:	f005 feed 	bl	80066b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <SystemClock_Config+0x10c>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	4a37      	ldr	r2, [pc, #220]	; (80009bc <SystemClock_Config+0x10c>)
 80008e0:	f023 0301 	bic.w	r3, r3, #1
 80008e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <SystemClock_Config+0x10c>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <SystemClock_Config+0x110>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f8:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <SystemClock_Config+0x110>)
 80008fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <SystemClock_Config+0x110>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800090c:	bf00      	nop
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <SystemClock_Config+0x110>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800091a:	d1f8      	bne.n	800090e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800091c:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <SystemClock_Config+0x114>)
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	f023 0303 	bic.w	r3, r3, #3
 8000924:	4a27      	ldr	r2, [pc, #156]	; (80009c4 <SystemClock_Config+0x114>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800092c:	230b      	movs	r3, #11
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000930:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000936:	2301      	movs	r3, #1
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800093e:	2301      	movs	r3, #1
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000946:	2302      	movs	r3, #2
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800094a:	2316      	movs	r3, #22
 800094c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 800094e:	23a9      	movs	r3, #169	; 0xa9
 8000950:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000956:	2304      	movs	r3, #4
 8000958:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800095e:	2300      	movs	r3, #0
 8000960:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000962:	2300      	movs	r3, #0
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4618      	mov	r0, r3
 8000970:	f005 ffa2 	bl	80068b8 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800097a:	f000 ff75 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	233f      	movs	r3, #63	; 0x3f
 8000980:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2101      	movs	r1, #1
 80009a2:	4618      	mov	r0, r3
 80009a4:	f006 fbe2 	bl	800716c <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x102>
  {
    Error_Handler();
 80009ae:	f000 ff5b 	bl	8001868 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3770      	adds	r7, #112	; 0x70
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	58000400 	.word	0x58000400
 80009c0:	58024800 	.word	0x58024800
 80009c4:	58024400 	.word	0x58024400

080009c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0b0      	sub	sp, #192	; 0xc0
 80009cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	22c0      	movs	r2, #192	; 0xc0
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f00b ff33 	bl	800c840 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009de:	f04f 0300 	mov.w	r3, #0
 80009e2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009ea:	230c      	movs	r3, #12
 80009ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80009ee:	2305      	movs	r3, #5
 80009f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009fa:	23c0      	movs	r3, #192	; 0xc0
 80009fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009fe:	2320      	movs	r3, #32
 8000a00:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f006 ff38 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a1a:	f000 ff25 	bl	8001868 <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	37c0      	adds	r7, #192	; 0xc0
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a4c:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a4e:	4a31      	ldr	r2, [pc, #196]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a60:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a66:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aaa:	4819      	ldr	r0, [pc, #100]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000aac:	f002 faf8 	bl	80030a0 <HAL_ADC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ab6:	f000 fed7 	bl	8001868 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000ac6:	f003 f90f 	bl	8003ce8 <HAL_ADCEx_MultiModeConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ad0:	f000 feca 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ae0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ae4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000af8:	f002 fc74 	bl	80033e4 <HAL_ADC_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b02:	f000 feb1 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	24000174 	.word	0x24000174
 8000b14:	40022000 	.word	0x40022000

08000b18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	615a      	str	r2, [r3, #20]
 8000b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b32:	4a2a      	ldr	r2, [pc, #168]	; (8000bdc <MX_ADC2_Init+0xc4>)
 8000b34:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b50:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b8e:	4812      	ldr	r0, [pc, #72]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b90:	f002 fa86 	bl	80030a0 <HAL_ADC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b9a:	f000 fe65 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000baa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000bc2:	f002 fc0f 	bl	80033e4 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000bcc:	f000 fe4c 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	240001d8 	.word	0x240001d8
 8000bdc:	40022100 	.word	0x40022100

08000be0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
 8000bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bf8:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000bfa:	4a28      	ldr	r2, [pc, #160]	; (8000c9c <MX_ADC3_Init+0xbc>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c4e:	4812      	ldr	r0, [pc, #72]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c50:	f002 fa26 	bl	80030a0 <HAL_ADC_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c5a:	f000 fe05 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_ADC3_Init+0xc0>)
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c62:	2306      	movs	r3, #6
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c6a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c6e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c70:	2304      	movs	r3, #4
 8000c72:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c82:	f002 fbaf 	bl	80033e4 <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000c8c:	f000 fdec 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2400023c 	.word	0x2400023c
 8000c9c:	58026000 	.word	0x58026000
 8000ca0:	1d500080 	.word	0x1d500080

08000ca4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_ETH_Init+0x80>)
 8000caa:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <MX_ETH_Init+0x84>)
 8000cac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cbc:	22e1      	movs	r2, #225	; 0xe1
 8000cbe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cd6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_ETH_Init+0x80>)
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <MX_ETH_Init+0x8c>)
 8000ce2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_ETH_Init+0x80>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <MX_ETH_Init+0x90>)
 8000ce8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cf0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cf4:	f003 f9ba 	bl	800406c <HAL_ETH_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000cfe:	f000 fdb3 	bl	8001868 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d02:	2238      	movs	r2, #56	; 0x38
 8000d04:	2100      	movs	r1, #0
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d08:	f00b fd9a 	bl	800c840 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d0e:	2221      	movs	r2, #33	; 0x21
 8000d10:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d18:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	240002a0 	.word	0x240002a0
 8000d28:	40028000 	.word	0x40028000
 8000d2c:	24000e9c 	.word	0x24000e9c
 8000d30:	240000c0 	.word	0x240000c0
 8000d34:	24000060 	.word	0x24000060
 8000d38:	2400013c 	.word	0x2400013c

08000d3c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d40:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d42:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <MX_FDCAN1_Init+0xc4>)
 8000d44:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d78:	2202      	movs	r2, #2
 8000d7a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dae:	2204      	movs	r2, #4
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dea:	f003 fd63 	bl	80048b4 <HAL_FDCAN_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000df4:	f000 fd38 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	24000350 	.word	0x24000350
 8000e00:	4000a000 	.word	0x4000a000

08000e04 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <MX_FDCAN2_Init+0xc4>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e2e:	2210      	movs	r2, #16
 8000e30:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e76:	2204      	movs	r2, #4
 8000e78:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000eb2:	f003 fcff 	bl	80048b4 <HAL_FDCAN_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ebc:	f000 fcd4 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	240003f0 	.word	0x240003f0
 8000ec8:	4000a400 	.word	0x4000a400

08000ecc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <MX_I2C4_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <MX_I2C4_Init+0x7c>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f06:	480e      	ldr	r0, [pc, #56]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000f08:	f004 fa34 	bl	8005374 <HAL_I2C_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f12:	f000 fca9 	bl	8001868 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f16:	2100      	movs	r1, #0
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000f1a:	f004 ff41 	bl	8005da0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f24:	f000 fca0 	bl	8001868 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000f2c:	f004 ff83 	bl	8005e36 <HAL_I2CEx_ConfigDigitalFilter>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f000 fc97 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24000490 	.word	0x24000490
 8000f44:	58001c00 	.word	0x58001c00
 8000f48:	10707dbc 	.word	0x10707dbc

08000f4c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b09a      	sub	sp, #104	; 0x68
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f56:	2234      	movs	r2, #52	; 0x34
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00b fc70 	bl	800c840 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2234      	movs	r2, #52	; 0x34
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00b fc6a 	bl	800c840 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f6c:	4b4e      	ldr	r3, [pc, #312]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f6e:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <MX_LTDC_Init+0x160>)
 8000f70:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f72:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f7e:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f84:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f8a:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f90:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f96:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f98:	220e      	movs	r2, #14
 8000f9a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f9c:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000fa2:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fa4:	f240 228e 	movw	r2, #654	; 0x28e
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fac:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fb4:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fbc:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fc2:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fda:	4833      	ldr	r0, [pc, #204]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fdc:	f004 ff78 	bl	8005ed0 <HAL_LTDC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fe6:	f000 fc3f 	bl	8001868 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800100c:	2305      	movs	r3, #5
 800100e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800102e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8001038:	f005 f81a 	bl	8006070 <HAL_LTDC_ConfigLayer>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001042:	f000 fc11 	bl	8001868 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001066:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001068:	2305      	movs	r3, #5
 800106a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	2201      	movs	r2, #1
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8001092:	f004 ffed 	bl	8006070 <HAL_LTDC_ConfigLayer>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800109c:	f000 fbe4 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3768      	adds	r7, #104	; 0x68
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	240004e4 	.word	0x240004e4
 80010ac:	50001000 	.word	0x50001000

080010b0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_QUADSPI_Init+0x54>)
 80010b8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010bc:	22ff      	movs	r2, #255	; 0xff
 80010be:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010ec:	f005 fb2a 	bl	8006744 <HAL_QSPI_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010f6:	f000 fbb7 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2400058c 	.word	0x2400058c
 8001104:	52005000 	.word	0x52005000

08001108 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_RTC_Init+0x48>)
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <MX_RTC_Init+0x4c>)
 8001110:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_RTC_Init+0x48>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <MX_RTC_Init+0x48>)
 800111a:	227f      	movs	r2, #127	; 0x7f
 800111c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_RTC_Init+0x48>)
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_RTC_Init+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_RTC_Init+0x48>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_RTC_Init+0x48>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_RTC_Init+0x48>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_RTC_Init+0x48>)
 800113e:	f009 f89f 	bl	800a280 <HAL_RTC_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001148:	f000 fb8e 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	240005d8 	.word	0x240005d8
 8001154:	58004000 	.word	0x58004000

08001158 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <MX_SAI2_Init+0x168>)
 800115e:	4a59      	ldr	r2, [pc, #356]	; (80012c4 <MX_SAI2_Init+0x16c>)
 8001160:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001162:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001164:	2200      	movs	r2, #0
 8001166:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001168:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <MX_SAI2_Init+0x168>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800116e:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001170:	2240      	movs	r2, #64	; 0x40
 8001172:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001176:	2200      	movs	r2, #0
 8001178:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800117a:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <MX_SAI2_Init+0x168>)
 800117c:	2200      	movs	r2, #0
 800117e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001180:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800118c:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <MX_SAI2_Init+0x168>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001192:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001198:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <MX_SAI2_Init+0x168>)
 800119a:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <MX_SAI2_Init+0x170>)
 800119c:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80011b6:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80011cc:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011ce:	2208      	movs	r2, #8
 80011d0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011d8:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011da:	2200      	movs	r2, #0
 80011dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80011ea:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011fe:	2200      	movs	r2, #0
 8001200:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001202:	482f      	ldr	r0, [pc, #188]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001204:	f009 f954 	bl	800a4b0 <HAL_SAI_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 800120e:	f000 fb2b 	bl	8001868 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_SAI2_Init+0x174>)
 8001214:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <MX_SAI2_Init+0x178>)
 8001216:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_SAI2_Init+0x174>)
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_SAI2_Init+0x174>)
 8001220:	2203      	movs	r2, #3
 8001222:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_SAI2_Init+0x174>)
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_SAI2_Init+0x174>)
 800122c:	2200      	movs	r2, #0
 800122e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_SAI2_Init+0x174>)
 8001232:	2200      	movs	r2, #0
 8001234:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_SAI2_Init+0x174>)
 8001238:	2201      	movs	r2, #1
 800123a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_SAI2_Init+0x174>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_SAI2_Init+0x174>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_SAI2_Init+0x174>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_SAI2_Init+0x174>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_SAI2_Init+0x174>)
 8001256:	2200      	movs	r2, #0
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_SAI2_Init+0x174>)
 800125c:	2200      	movs	r2, #0
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_SAI2_Init+0x174>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_SAI2_Init+0x174>)
 800126a:	2201      	movs	r2, #1
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_SAI2_Init+0x174>)
 8001270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_SAI2_Init+0x174>)
 8001278:	2208      	movs	r2, #8
 800127a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_SAI2_Init+0x174>)
 800127e:	2201      	movs	r2, #1
 8001280:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_SAI2_Init+0x174>)
 8001284:	2200      	movs	r2, #0
 8001286:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_SAI2_Init+0x174>)
 800128a:	2200      	movs	r2, #0
 800128c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_SAI2_Init+0x174>)
 8001290:	2200      	movs	r2, #0
 8001292:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_SAI2_Init+0x174>)
 8001296:	2200      	movs	r2, #0
 8001298:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_SAI2_Init+0x174>)
 800129c:	2200      	movs	r2, #0
 800129e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_SAI2_Init+0x174>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_SAI2_Init+0x174>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_SAI2_Init+0x174>)
 80012ae:	f009 f8ff 	bl	800a4b0 <HAL_SAI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80012b8:	f000 fad6 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	240005fc 	.word	0x240005fc
 80012c4:	40015c04 	.word	0x40015c04
 80012c8:	0002ee00 	.word	0x0002ee00
 80012cc:	24000694 	.word	0x24000694
 80012d0:	40015c24 	.word	0x40015c24

080012d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012da:	4a27      	ldr	r2, [pc, #156]	; (8001378 <MX_SPI2_Init+0xa4>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_SPI2_Init+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_SPI2_Init+0xa0>)
 800131e:	2200      	movs	r2, #0
 8001320:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_SPI2_Init+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <MX_SPI2_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_SPI2_Init+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_SPI2_Init+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001362:	f009 fbc5 	bl	800aaf0 <HAL_SPI_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 800136c:	f000 fa7c 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2400072c 	.word	0x2400072c
 8001378:	40003800 	.word	0x40003800

0800137c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001382:	4a23      	ldr	r2, [pc, #140]	; (8001410 <MX_USART3_UART_Init+0x94>)
 8001384:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013c6:	f009 fcd2 	bl	800ad6e <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013d0:	f000 fa4a 	bl	8001868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013d8:	f00a fd63 	bl	800bea2 <HAL_UARTEx_SetTxFifoThreshold>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f000 fa41 	bl	8001868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4808      	ldr	r0, [pc, #32]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013ea:	f00a fd98 	bl	800bf1e <HAL_UARTEx_SetRxFifoThreshold>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 fa38 	bl	8001868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013fa:	f00a fd19 	bl	800be30 <HAL_UARTEx_DisableFifoMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001404:	f000 fa30 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	240007b4 	.word	0x240007b4
 8001410:	40004800 	.word	0x40004800

08001414 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800141c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001420:	2209      	movs	r2, #9
 8001422:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001426:	2202      	movs	r2, #2
 8001428:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001432:	2202      	movs	r2, #2
 8001434:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800144a:	2201      	movs	r2, #1
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001450:	2201      	movs	r2, #1
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001456:	2200      	movs	r2, #0
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800145c:	f004 ffe0 	bl	8006420 <HAL_PCD_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001466:	f000 f9ff 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24000848 	.word	0x24000848
 8001474:	40080000 	.word	0x40080000

08001478 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_FMC_Init+0x94>)
 8001492:	4a1f      	ldr	r2, [pc, #124]	; (8001510 <MX_FMC_Init+0x98>)
 8001494:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_FMC_Init+0x94>)
 8001498:	2201      	movs	r2, #1
 800149a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_FMC_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_FMC_Init+0x94>)
 80014a4:	2204      	movs	r2, #4
 80014a6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_FMC_Init+0x94>)
 80014aa:	2210      	movs	r2, #16
 80014ac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_FMC_Init+0x94>)
 80014b0:	2240      	movs	r2, #64	; 0x40
 80014b2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_FMC_Init+0x94>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_FMC_Init+0x94>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_FMC_Init+0x94>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_FMC_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_FMC_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80014d2:	2310      	movs	r3, #16
 80014d4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80014d6:	2310      	movs	r3, #16
 80014d8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80014da:	2310      	movs	r3, #16
 80014dc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80014de:	2310      	movs	r3, #16
 80014e0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80014e2:	2310      	movs	r3, #16
 80014e4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80014e6:	2310      	movs	r3, #16
 80014e8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80014ea:	2310      	movs	r3, #16
 80014ec:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_FMC_Init+0x94>)
 80014f4:	f009 fac0 	bl	800aa78 <HAL_SDRAM_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80014fe:	f000 f9b3 	bl	8001868 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000d54 	.word	0x24000d54
 8001510:	52004140 	.word	0x52004140

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b090      	sub	sp, #64	; 0x40
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800152a:	4bbf      	ldr	r3, [pc, #764]	; (8001828 <MX_GPIO_Init+0x314>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	4abd      	ldr	r2, [pc, #756]	; (8001828 <MX_GPIO_Init+0x314>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153a:	4bbb      	ldr	r3, [pc, #748]	; (8001828 <MX_GPIO_Init+0x314>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4bb7      	ldr	r3, [pc, #732]	; (8001828 <MX_GPIO_Init+0x314>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	4ab6      	ldr	r2, [pc, #728]	; (8001828 <MX_GPIO_Init+0x314>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001558:	4bb3      	ldr	r3, [pc, #716]	; (8001828 <MX_GPIO_Init+0x314>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001566:	4bb0      	ldr	r3, [pc, #704]	; (8001828 <MX_GPIO_Init+0x314>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	4aae      	ldr	r2, [pc, #696]	; (8001828 <MX_GPIO_Init+0x314>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001576:	4bac      	ldr	r3, [pc, #688]	; (8001828 <MX_GPIO_Init+0x314>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001584:	4ba8      	ldr	r3, [pc, #672]	; (8001828 <MX_GPIO_Init+0x314>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	4aa7      	ldr	r2, [pc, #668]	; (8001828 <MX_GPIO_Init+0x314>)
 800158c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001594:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <MX_GPIO_Init+0x314>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4ba1      	ldr	r3, [pc, #644]	; (8001828 <MX_GPIO_Init+0x314>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	4a9f      	ldr	r2, [pc, #636]	; (8001828 <MX_GPIO_Init+0x314>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b2:	4b9d      	ldr	r3, [pc, #628]	; (8001828 <MX_GPIO_Init+0x314>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b99      	ldr	r3, [pc, #612]	; (8001828 <MX_GPIO_Init+0x314>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	4a98      	ldr	r2, [pc, #608]	; (8001828 <MX_GPIO_Init+0x314>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d0:	4b95      	ldr	r3, [pc, #596]	; (8001828 <MX_GPIO_Init+0x314>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	4b92      	ldr	r3, [pc, #584]	; (8001828 <MX_GPIO_Init+0x314>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	4a90      	ldr	r2, [pc, #576]	; (8001828 <MX_GPIO_Init+0x314>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ee:	4b8e      	ldr	r3, [pc, #568]	; (8001828 <MX_GPIO_Init+0x314>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015fc:	4b8a      	ldr	r3, [pc, #552]	; (8001828 <MX_GPIO_Init+0x314>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	4a89      	ldr	r2, [pc, #548]	; (8001828 <MX_GPIO_Init+0x314>)
 8001604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160c:	4b86      	ldr	r3, [pc, #536]	; (8001828 <MX_GPIO_Init+0x314>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	4b83      	ldr	r3, [pc, #524]	; (8001828 <MX_GPIO_Init+0x314>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4a81      	ldr	r2, [pc, #516]	; (8001828 <MX_GPIO_Init+0x314>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <MX_GPIO_Init+0x314>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001638:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <MX_GPIO_Init+0x314>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	4a7a      	ldr	r2, [pc, #488]	; (8001828 <MX_GPIO_Init+0x314>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001648:	4b77      	ldr	r3, [pc, #476]	; (8001828 <MX_GPIO_Init+0x314>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001656:	4b74      	ldr	r3, [pc, #464]	; (8001828 <MX_GPIO_Init+0x314>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	4a72      	ldr	r2, [pc, #456]	; (8001828 <MX_GPIO_Init+0x314>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001666:	4b70      	ldr	r3, [pc, #448]	; (8001828 <MX_GPIO_Init+0x314>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167a:	486c      	ldr	r0, [pc, #432]	; (800182c <MX_GPIO_Init+0x318>)
 800167c:	f003 fe46 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f241 0104 	movw	r1, #4100	; 0x1004
 8001686:	486a      	ldr	r0, [pc, #424]	; (8001830 <MX_GPIO_Init+0x31c>)
 8001688:	f003 fe40 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2104      	movs	r1, #4
 8001690:	4868      	ldr	r0, [pc, #416]	; (8001834 <MX_GPIO_Init+0x320>)
 8001692:	f003 fe3b 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016a8:	2303      	movs	r3, #3
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b0:	4619      	mov	r1, r3
 80016b2:	4861      	ldr	r0, [pc, #388]	; (8001838 <MX_GPIO_Init+0x324>)
 80016b4:	f003 fc62 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c8:	4619      	mov	r1, r3
 80016ca:	485c      	ldr	r0, [pc, #368]	; (800183c <MX_GPIO_Init+0x328>)
 80016cc:	f003 fc56 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80016d0:	2330      	movs	r3, #48	; 0x30
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80016e0:	230a      	movs	r3, #10
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e8:	4619      	mov	r1, r3
 80016ea:	4855      	ldr	r0, [pc, #340]	; (8001840 <MX_GPIO_Init+0x32c>)
 80016ec:	f003 fc46 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80016f0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	484f      	ldr	r0, [pc, #316]	; (8001844 <MX_GPIO_Init+0x330>)
 8001706:	f003 fc39 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800170a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171c:	4619      	mov	r1, r3
 800171e:	484a      	ldr	r0, [pc, #296]	; (8001848 <MX_GPIO_Init+0x334>)
 8001720:	f003 fc2c 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001736:	2301      	movs	r3, #1
 8001738:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173e:	4619      	mov	r1, r3
 8001740:	4840      	ldr	r0, [pc, #256]	; (8001844 <MX_GPIO_Init+0x330>)
 8001742:	f003 fc1b 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001756:	2306      	movs	r3, #6
 8001758:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	483a      	ldr	r0, [pc, #232]	; (800184c <MX_GPIO_Init+0x338>)
 8001762:	f003 fc0b 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177c:	4619      	mov	r1, r3
 800177e:	482b      	ldr	r0, [pc, #172]	; (800182c <MX_GPIO_Init+0x318>)
 8001780:	f003 fbfc 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001784:	2304      	movs	r3, #4
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001788:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	482c      	ldr	r0, [pc, #176]	; (800184c <MX_GPIO_Init+0x338>)
 800179a:	f003 fbef 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800179e:	2301      	movs	r3, #1
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	4619      	mov	r1, r3
 80017b0:	4827      	ldr	r0, [pc, #156]	; (8001850 <MX_GPIO_Init+0x33c>)
 80017b2:	f003 fbe3 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80017b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ca:	4619      	mov	r1, r3
 80017cc:	481a      	ldr	r0, [pc, #104]	; (8001838 <MX_GPIO_Init+0x324>)
 80017ce:	f003 fbd5 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d2:	2340      	movs	r3, #64	; 0x40
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80017e2:	2309      	movs	r3, #9
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ea:	4619      	mov	r1, r3
 80017ec:	4815      	ldr	r0, [pc, #84]	; (8001844 <MX_GPIO_Init+0x330>)
 80017ee:	f003 fbc5 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80017f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <MX_GPIO_Init+0x31c>)
 800180c:	f003 fbb6 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001810:	2304      	movs	r3, #4
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001824:	4619      	mov	r1, r3
 8001826:	e015      	b.n	8001854 <MX_GPIO_Init+0x340>
 8001828:	58024400 	.word	0x58024400
 800182c:	58022000 	.word	0x58022000
 8001830:	58020400 	.word	0x58020400
 8001834:	58022400 	.word	0x58022400
 8001838:	58021c00 	.word	0x58021c00
 800183c:	58020c00 	.word	0x58020c00
 8001840:	58021000 	.word	0x58021000
 8001844:	58020000 	.word	0x58020000
 8001848:	58020800 	.word	0x58020800
 800184c:	58021800 	.word	0x58021800
 8001850:	58022800 	.word	0x58022800
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <MX_GPIO_Init+0x350>)
 8001856:	f003 fb91 	bl	8004f7c <HAL_GPIO_Init>

}
 800185a:	bf00      	nop
 800185c:	3740      	adds	r7, #64	; 0x40
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	58022400 	.word	0x58022400

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_MspInit+0x30>)
 800187c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_MspInit+0x30>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x30>)
 800188c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	58024400 	.word	0x58024400

080018a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b090      	sub	sp, #64	; 0x40
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a72      	ldr	r2, [pc, #456]	; (8001a90 <HAL_ADC_MspInit+0x1e8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d14e      	bne.n	8001968 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018ca:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a70      	ldr	r2, [pc, #448]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 80018d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018d4:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10e      	bne.n	80018fa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018dc:	4b6e      	ldr	r3, [pc, #440]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80018de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018e2:	4a6d      	ldr	r2, [pc, #436]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80018e4:	f043 0320 	orr.w	r3, r3, #32
 80018e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018ec:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80018ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001900:	4a65      	ldr	r2, [pc, #404]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800190a:	4b63      	ldr	r3, [pc, #396]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191e:	4a5e      	ldr	r2, [pc, #376]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001928:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001936:	2301      	movs	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	4854      	ldr	r0, [pc, #336]	; (8001a9c <HAL_ADC_MspInit+0x1f4>)
 800194a:	f003 fb17 	bl	8004f7c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800194e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001952:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001956:	f001 fa01 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800195a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800195e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001962:	f001 f9fb 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001966:	e08f      	b.n	8001a88 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a4c      	ldr	r2, [pc, #304]	; (8001aa0 <HAL_ADC_MspInit+0x1f8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d133      	bne.n	80019da <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001972:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 800197a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800197c:	4b45      	ldr	r3, [pc, #276]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10e      	bne.n	80019a2 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001984:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001986:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198a:	4a43      	ldr	r2, [pc, #268]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 800198c:	f043 0320 	orr.w	r3, r3, #32
 8001990:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001994:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001996:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	4a3b      	ldr	r2, [pc, #236]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80019c0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019c4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80019c8:	f001 f9c8 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80019cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019d0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80019d4:	f001 f9c2 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
}
 80019d8:	e056      	b.n	8001a88 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a31      	ldr	r2, [pc, #196]	; (8001aa4 <HAL_ADC_MspInit+0x1fc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d151      	bne.n	8001a88 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ea:	4a2b      	ldr	r2, [pc, #172]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a0a:	f043 0320 	orr.w	r3, r3, #32
 8001a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a44:	2303      	movs	r3, #3
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a50:	4619      	mov	r1, r3
 8001a52:	4815      	ldr	r0, [pc, #84]	; (8001aa8 <HAL_ADC_MspInit+0x200>)
 8001a54:	f003 fa92 	bl	8004f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <HAL_ADC_MspInit+0x1f4>)
 8001a6c:	f003 fa86 	bl	8004f7c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001a70:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001a74:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001a78:	f001 f970 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001a80:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001a84:	f001 f96a 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001a88:	bf00      	nop
 8001a8a:	3740      	adds	r7, #64	; 0x40
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40022000 	.word	0x40022000
 8001a94:	24000ea4 	.word	0x24000ea4
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	58020800 	.word	0x58020800
 8001aa0:	40022100 	.word	0x40022100
 8001aa4:	58026000 	.word	0x58026000
 8001aa8:	58021400 	.word	0x58021400

08001aac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b092      	sub	sp, #72	; 0x48
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a87      	ldr	r2, [pc, #540]	; (8001ce8 <HAL_ETH_MspInit+0x23c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	f040 8108 	bne.w	8001ce0 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001ad0:	4b86      	ldr	r3, [pc, #536]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad6:	4a85      	ldr	r2, [pc, #532]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001adc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ae0:	4b82      	ldr	r3, [pc, #520]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001ae2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001aee:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af4:	4a7d      	ldr	r2, [pc, #500]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001afe:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001b0c:	4b77      	ldr	r3, [pc, #476]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b12:	4a76      	ldr	r2, [pc, #472]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b1c:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b28:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b2a:	4b70      	ldr	r3, [pc, #448]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	4a6e      	ldr	r2, [pc, #440]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3a:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4e:	4a67      	ldr	r2, [pc, #412]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b58:	4b64      	ldr	r3, [pc, #400]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b66:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a5f      	ldr	r2, [pc, #380]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8a:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b94:	4b55      	ldr	r3, [pc, #340]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba2:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	4a49      	ldr	r2, [pc, #292]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be4:	4a41      	ldr	r2, [pc, #260]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001be6:	f043 0302 	orr.w	r3, r3, #2
 8001bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bee:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001bfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c0e:	230b      	movs	r3, #11
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c16:	4619      	mov	r1, r3
 8001c18:	4835      	ldr	r0, [pc, #212]	; (8001cf0 <HAL_ETH_MspInit+0x244>)
 8001c1a:	f003 f9af 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c2e:	230b      	movs	r3, #11
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c36:	4619      	mov	r1, r3
 8001c38:	482e      	ldr	r0, [pc, #184]	; (8001cf4 <HAL_ETH_MspInit+0x248>)
 8001c3a:	f003 f99f 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c50:	230b      	movs	r3, #11
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4827      	ldr	r0, [pc, #156]	; (8001cf8 <HAL_ETH_MspInit+0x24c>)
 8001c5c:	f003 f98e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001c60:	233e      	movs	r3, #62	; 0x3e
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c70:	230b      	movs	r3, #11
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4820      	ldr	r0, [pc, #128]	; (8001cfc <HAL_ETH_MspInit+0x250>)
 8001c7c:	f003 f97e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001c80:	230c      	movs	r3, #12
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c90:	230b      	movs	r3, #11
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4819      	ldr	r0, [pc, #100]	; (8001d00 <HAL_ETH_MspInit+0x254>)
 8001c9c:	f003 f96e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001ca0:	2386      	movs	r3, #134	; 0x86
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cb0:	230b      	movs	r3, #11
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <HAL_ETH_MspInit+0x258>)
 8001cbc:	f003 f95e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cd0:	230b      	movs	r3, #11
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480b      	ldr	r0, [pc, #44]	; (8001d08 <HAL_ETH_MspInit+0x25c>)
 8001cdc:	f003 f94e 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3748      	adds	r7, #72	; 0x48
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40028000 	.word	0x40028000
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	58021800 	.word	0x58021800
 8001cf4:	58021000 	.word	0x58021000
 8001cf8:	58022000 	.word	0x58022000
 8001cfc:	58020800 	.word	0x58020800
 8001d00:	58021c00 	.word	0x58021c00
 8001d04:	58020000 	.word	0x58020000
 8001d08:	58020400 	.word	0x58020400

08001d0c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0bc      	sub	sp, #240	; 0xf0
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d24:	f107 0318 	add.w	r3, r7, #24
 8001d28:	22c0      	movs	r2, #192	; 0xc0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f00a fd87 	bl	800c840 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a57      	ldr	r2, [pc, #348]	; (8001e94 <HAL_FDCAN_MspInit+0x188>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d151      	bne.n	8001de0 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d50:	f107 0318 	add.w	r3, r7, #24
 8001d54:	4618      	mov	r0, r3
 8001d56:	f005 fd95 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001d60:	f7ff fd82 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	4a4b      	ldr	r2, [pc, #300]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001d6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10e      	bne.n	8001d94 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d7c:	4a47      	ldr	r2, [pc, #284]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d82:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001d86:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d88:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d94:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	4a40      	ldr	r2, [pc, #256]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001db2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001dcc:	2309      	movs	r3, #9
 8001dce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dd2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4831      	ldr	r0, [pc, #196]	; (8001ea0 <HAL_FDCAN_MspInit+0x194>)
 8001dda:	f003 f8cf 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001dde:	e055      	b.n	8001e8c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <HAL_FDCAN_MspInit+0x198>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d150      	bne.n	8001e8c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001dea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001df6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001dfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 fd3e 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001e0e:	f7ff fd2b 	bl	8001868 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001e1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10e      	bne.n	8001e42 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001e60:	f242 0320 	movw	r3, #8224	; 0x2020
 8001e64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e84:	4619      	mov	r1, r3
 8001e86:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <HAL_FDCAN_MspInit+0x19c>)
 8001e88:	f003 f878 	bl	8004f7c <HAL_GPIO_Init>
}
 8001e8c:	bf00      	nop
 8001e8e:	37f0      	adds	r7, #240	; 0xf0
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	4000a000 	.word	0x4000a000
 8001e98:	24000ea8 	.word	0x24000ea8
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	58021c00 	.word	0x58021c00
 8001ea4:	4000a400 	.word	0x4000a400
 8001ea8:	58020400 	.word	0x58020400

08001eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0ba      	sub	sp, #232	; 0xe8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	22c0      	movs	r2, #192	; 0xc0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00a fcb7 	bl	800c840 <memset>
  if(hi2c->Instance==I2C4)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_I2C_MspInit+0xc8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d146      	bne.n	8001f6a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001edc:	f04f 0210 	mov.w	r2, #16
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f005 fcc6 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001efe:	f7ff fcb3 	bl	8001868 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f20:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f44:	4619      	mov	r1, r3
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <HAL_I2C_MspInit+0xd0>)
 8001f48:	f003 f818 	bl	8004f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	37e8      	adds	r7, #232	; 0xe8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	58001c00 	.word	0x58001c00
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58020c00 	.word	0x58020c00

08001f80 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0be      	sub	sp, #248	; 0xf8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f98:	f107 0320 	add.w	r3, r7, #32
 8001f9c:	22c0      	movs	r2, #192	; 0xc0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00a fc4d 	bl	800c840 <memset>
  if(hltdc->Instance==LTDC)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a66      	ldr	r2, [pc, #408]	; (8002144 <HAL_LTDC_MspInit+0x1c4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	f040 80c4 	bne.w	800213a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fb2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001fd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fdc:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe2:	f107 0320 	add.w	r3, r7, #32
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f005 fc4c 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001ff2:	f7ff fc39 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ff6:	4b54      	ldr	r3, [pc, #336]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8001ff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002006:	4b50      	ldr	r3, [pc, #320]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	4a4b      	ldr	r2, [pc, #300]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 800201c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002032:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002038:	4a43      	ldr	r2, [pc, #268]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a3c      	ldr	r2, [pc, #240]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002074:	4a34      	ldr	r2, [pc, #208]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207e:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800208c:	23fc      	movs	r3, #252	; 0xfc
 800208e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a4:	230e      	movs	r3, #14
 80020a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4826      	ldr	r0, [pc, #152]	; (800214c <HAL_LTDC_MspInit+0x1cc>)
 80020b2:	f002 ff63 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80020b6:	f24d 2303 	movw	r3, #53763	; 0xd203
 80020ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020d0:	230e      	movs	r3, #14
 80020d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020da:	4619      	mov	r1, r3
 80020dc:	481c      	ldr	r0, [pc, #112]	; (8002150 <HAL_LTDC_MspInit+0x1d0>)
 80020de:	f002 ff4d 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80020e2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80020e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020fc:	230e      	movs	r3, #14
 80020fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002102:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002106:	4619      	mov	r1, r3
 8002108:	4812      	ldr	r0, [pc, #72]	; (8002154 <HAL_LTDC_MspInit+0x1d4>)
 800210a:	f002 ff37 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800210e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002128:	230e      	movs	r3, #14
 800212a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800212e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002132:	4619      	mov	r1, r3
 8002134:	4808      	ldr	r0, [pc, #32]	; (8002158 <HAL_LTDC_MspInit+0x1d8>)
 8002136:	f002 ff21 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	37f8      	adds	r7, #248	; 0xf8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	50001000 	.word	0x50001000
 8002148:	58024400 	.word	0x58024400
 800214c:	58022800 	.word	0x58022800
 8002150:	58022000 	.word	0x58022000
 8002154:	58022400 	.word	0x58022400
 8002158:	58021c00 	.word	0x58021c00

0800215c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0bc      	sub	sp, #240	; 0xf0
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0318 	add.w	r3, r7, #24
 8002178:	22c0      	movs	r2, #192	; 0xc0
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f00a fb5f 	bl	800c840 <memset>
  if(hqspi->Instance==QUADSPI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <HAL_QSPI_MspInit+0x184>)
 8002188:	4293      	cmp	r3, r2
 800218a:	f040 80a5 	bne.w	80022d8 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800218e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800219a:	2300      	movs	r3, #0
 800219c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	4618      	mov	r0, r3
 80021a4:	f005 fb6e 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80021ae:	f7ff fb5b 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021b2:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021b8:	4a4a      	ldr	r2, [pc, #296]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021be:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80021c2:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d6:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f4:	4a3b      	ldr	r2, [pc, #236]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021f6:	f043 0320 	orr.w	r3, r3, #32
 80021fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002212:	4a34      	ldr	r2, [pc, #208]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 800221e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800222a:	2340      	movs	r3, #64	; 0x40
 800222c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002242:	230a      	movs	r3, #10
 8002244:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800224c:	4619      	mov	r1, r3
 800224e:	4826      	ldr	r0, [pc, #152]	; (80022e8 <HAL_QSPI_MspInit+0x18c>)
 8002250:	f002 fe94 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002254:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800226e:	2309      	movs	r3, #9
 8002270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002274:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002278:	4619      	mov	r1, r3
 800227a:	481c      	ldr	r0, [pc, #112]	; (80022ec <HAL_QSPI_MspInit+0x190>)
 800227c:	f002 fe7e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800229a:	230a      	movs	r3, #10
 800229c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022a4:	4619      	mov	r1, r3
 80022a6:	4811      	ldr	r0, [pc, #68]	; (80022ec <HAL_QSPI_MspInit+0x190>)
 80022a8:	f002 fe68 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022c6:	2309      	movs	r3, #9
 80022c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022d0:	4619      	mov	r1, r3
 80022d2:	4807      	ldr	r0, [pc, #28]	; (80022f0 <HAL_QSPI_MspInit+0x194>)
 80022d4:	f002 fe52 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	37f0      	adds	r7, #240	; 0xf0
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	52005000 	.word	0x52005000
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58020400 	.word	0x58020400
 80022ec:	58021400 	.word	0x58021400
 80022f0:	58020c00 	.word	0x58020c00

080022f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b0b2      	sub	sp, #200	; 0xc8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	22c0      	movs	r2, #192	; 0xc0
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f00a fa9b 	bl	800c840 <memset>
  if(hrtc->Instance==RTC)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_RTC_MspInit+0x5c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d119      	bne.n	8002348 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002314:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	4618      	mov	r0, r3
 800232e:	f005 faa9 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002338:	f7ff fa96 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RTC_MspInit+0x60>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_RTC_MspInit+0x60>)
 8002342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002346:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	37c8      	adds	r7, #200	; 0xc8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	58004000 	.word	0x58004000
 8002354:	58024400 	.word	0x58024400

08002358 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b0bc      	sub	sp, #240	; 0xf0
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002370:	f107 0318 	add.w	r3, r7, #24
 8002374:	22c0      	movs	r2, #192	; 0xc0
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f00a fa61 	bl	800c840 <memset>
  if(hspi->Instance==SPI2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a55      	ldr	r2, [pc, #340]	; (80024d8 <HAL_SPI_MspInit+0x180>)
 8002384:	4293      	cmp	r3, r2
 8002386:	f040 80a3 	bne.w	80024d0 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800238a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002396:	2300      	movs	r3, #0
 8002398:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	4618      	mov	r0, r3
 80023a0:	f005 fa70 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80023aa:	f7ff fa5d 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023ae:	4b4b      	ldr	r3, [pc, #300]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b4:	4a49      	ldr	r2, [pc, #292]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a42      	ldr	r2, [pc, #264]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f0:	4a3a      	ldr	r2, [pc, #232]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fa:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002408:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_SPI_MspInit+0x184>)
 800240a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240e:	4a33      	ldr	r2, [pc, #204]	; (80024dc <HAL_SPI_MspInit+0x184>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002418:	4b30      	ldr	r3, [pc, #192]	; (80024dc <HAL_SPI_MspInit+0x184>)
 800241a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002426:	2310      	movs	r3, #16
 8002428:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800243e:	2307      	movs	r3, #7
 8002440:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002444:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002448:	4619      	mov	r1, r3
 800244a:	4825      	ldr	r0, [pc, #148]	; (80024e0 <HAL_SPI_MspInit+0x188>)
 800244c:	f002 fd96 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002450:	2308      	movs	r3, #8
 8002452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002468:	2305      	movs	r3, #5
 800246a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800246e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002472:	4619      	mov	r1, r3
 8002474:	481b      	ldr	r0, [pc, #108]	; (80024e4 <HAL_SPI_MspInit+0x18c>)
 8002476:	f002 fd81 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800247a:	2304      	movs	r3, #4
 800247c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002492:	2305      	movs	r3, #5
 8002494:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002498:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800249c:	4619      	mov	r1, r3
 800249e:	4812      	ldr	r0, [pc, #72]	; (80024e8 <HAL_SPI_MspInit+0x190>)
 80024a0:	f002 fd6c 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024be:	2305      	movs	r3, #5
 80024c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HAL_SPI_MspInit+0x188>)
 80024cc:	f002 fd56 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024d0:	bf00      	nop
 80024d2:	37f0      	adds	r7, #240	; 0xf0
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40003800 	.word	0x40003800
 80024dc:	58024400 	.word	0x58024400
 80024e0:	58020400 	.word	0x58020400
 80024e4:	58020c00 	.word	0x58020c00
 80024e8:	58022000 	.word	0x58022000

080024ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0ba      	sub	sp, #232	; 0xe8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	22c0      	movs	r2, #192	; 0xc0
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f00a f997 	bl	800c840 <memset>
  if(huart->Instance==USART3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d146      	bne.n	80025aa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800251c:	f04f 0202 	mov.w	r2, #2
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4618      	mov	r0, r3
 8002534:	f005 f9a6 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800253e:	f7ff f993 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 800254a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002566:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800257e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002598:	2307      	movs	r3, #7
 800259a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_UART_MspInit+0xd0>)
 80025a6:	f002 fce9 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	37e8      	adds	r7, #232	; 0xe8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40004800 	.word	0x40004800
 80025b8:	58024400 	.word	0x58024400
 80025bc:	58020400 	.word	0x58020400

080025c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0ba      	sub	sp, #232	; 0xe8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	22c0      	movs	r2, #192	; 0xc0
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00a f92d 	bl	800c840 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a30      	ldr	r2, [pc, #192]	; (80026ac <HAL_PCD_MspInit+0xec>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d159      	bne.n	80026a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80025f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80025fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	4618      	mov	r0, r3
 800260a:	f005 f93b 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002614:	f7ff f928 	bl	8001868 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002618:	f004 f884 	bl	8006724 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002622:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 800262e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800263a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800264e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002652:	4619      	mov	r1, r3
 8002654:	4817      	ldr	r0, [pc, #92]	; (80026b4 <HAL_PCD_MspInit+0xf4>)
 8002656:	f002 fc91 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800265a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800265e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002674:	230a      	movs	r3, #10
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800267e:	4619      	mov	r1, r3
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <HAL_PCD_MspInit+0xf4>)
 8002682:	f002 fc7b 	bl	8004f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 8002688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800268c:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 800268e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002692:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 8002698:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800269c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80026a4:	bf00      	nop
 80026a6:	37e8      	adds	r7, #232	; 0xe8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40080000 	.word	0x40080000
 80026b0:	58024400 	.word	0x58024400
 80026b4:	58020000 	.word	0x58020000

080026b8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b0b8      	sub	sp, #224	; 0xe0
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_FMC_MspInit+0x15c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 8099 	bne.w	800280a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80026d8:	4b4e      	ldr	r3, [pc, #312]	; (8002814 <HAL_FMC_MspInit+0x15c>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	22c0      	movs	r2, #192	; 0xc0
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00a f8aa 	bl	800c840 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80026ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	4618      	mov	r0, r3
 8002702:	f005 f8bf 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800270c:	f7ff f8ac 	bl	8001868 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002710:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_FMC_MspInit+0x160>)
 8002712:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002716:	4a40      	ldr	r2, [pc, #256]	; (8002818 <HAL_FMC_MspInit+0x160>)
 8002718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800271c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002720:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_FMC_MspInit+0x160>)
 8002722:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800272e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002732:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002748:	230c      	movs	r3, #12
 800274a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002752:	4619      	mov	r1, r3
 8002754:	4831      	ldr	r0, [pc, #196]	; (800281c <HAL_FMC_MspInit+0x164>)
 8002756:	f002 fc11 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800275a:	f248 1333 	movw	r3, #33075	; 0x8133
 800275e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002774:	230c      	movs	r3, #12
 8002776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800277a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800277e:	4619      	mov	r1, r3
 8002780:	4827      	ldr	r0, [pc, #156]	; (8002820 <HAL_FMC_MspInit+0x168>)
 8002782:	f002 fbfb 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002786:	f24c 7303 	movw	r3, #50947	; 0xc703
 800278a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279a:	2303      	movs	r3, #3
 800279c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a0:	230c      	movs	r3, #12
 80027a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027aa:	4619      	mov	r1, r3
 80027ac:	481d      	ldr	r0, [pc, #116]	; (8002824 <HAL_FMC_MspInit+0x16c>)
 80027ae:	f002 fbe5 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80027b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80027b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027cc:	230c      	movs	r3, #12
 80027ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027d6:	4619      	mov	r1, r3
 80027d8:	4813      	ldr	r0, [pc, #76]	; (8002828 <HAL_FMC_MspInit+0x170>)
 80027da:	f002 fbcf 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027de:	23e0      	movs	r3, #224	; 0xe0
 80027e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027f6:	230c      	movs	r3, #12
 80027f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002800:	4619      	mov	r1, r3
 8002802:	480a      	ldr	r0, [pc, #40]	; (800282c <HAL_FMC_MspInit+0x174>)
 8002804:	f002 fbba 	bl	8004f7c <HAL_GPIO_Init>
 8002808:	e000      	b.n	800280c <HAL_FMC_MspInit+0x154>
    return;
 800280a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800280c:	37e0      	adds	r7, #224	; 0xe0
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	24000eac 	.word	0x24000eac
 8002818:	58024400 	.word	0x58024400
 800281c:	58021000 	.word	0x58021000
 8002820:	58021800 	.word	0x58021800
 8002824:	58020c00 	.word	0x58020c00
 8002828:	58021400 	.word	0x58021400
 800282c:	58021c00 	.word	0x58021c00

08002830 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002838:	f7ff ff3e 	bl	80026b8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b0ba      	sub	sp, #232	; 0xe8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	22c0      	movs	r2, #192	; 0xc0
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f009 fff3 	bl	800c840 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a45      	ldr	r2, [pc, #276]	; (8002974 <HAL_SAI_MspInit+0x130>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d13e      	bne.n	80028e2 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002870:	2300      	movs	r3, #0
 8002872:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4618      	mov	r0, r3
 800287a:	f005 f803 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002884:	f7fe fff0 	bl	8001868 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002888:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_SAI_MspInit+0x134>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10e      	bne.n	80028ae <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002890:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_SAI_MspInit+0x138>)
 8002892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002896:	4a39      	ldr	r2, [pc, #228]	; (800297c <HAL_SAI_MspInit+0x138>)
 8002898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800289c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_SAI_MspInit+0x138>)
 80028a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80028ae:	4b32      	ldr	r3, [pc, #200]	; (8002978 <HAL_SAI_MspInit+0x134>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a30      	ldr	r2, [pc, #192]	; (8002978 <HAL_SAI_MspInit+0x134>)
 80028b6:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80028b8:	23f0      	movs	r3, #240	; 0xf0
 80028ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028d0:	230a      	movs	r3, #10
 80028d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028da:	4619      	mov	r1, r3
 80028dc:	4828      	ldr	r0, [pc, #160]	; (8002980 <HAL_SAI_MspInit+0x13c>)
 80028de:	f002 fb4d 	bl	8004f7c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a27      	ldr	r2, [pc, #156]	; (8002984 <HAL_SAI_MspInit+0x140>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d13f      	bne.n	800296c <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80028ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4618      	mov	r0, r3
 8002902:	f004 ffbf 	bl	8007884 <HAL_RCCEx_PeriphCLKConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 800290c:	f7fe ffac 	bl	8001868 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_SAI_MspInit+0x134>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10e      	bne.n	8002936 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_SAI_MspInit+0x138>)
 800291a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_SAI_MspInit+0x138>)
 8002920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002924:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_SAI_MspInit+0x138>)
 800292a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800292e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_SAI_MspInit+0x134>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <HAL_SAI_MspInit+0x134>)
 800293e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800295a:	230a      	movs	r3, #10
 800295c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002960:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002964:	4619      	mov	r1, r3
 8002966:	4808      	ldr	r0, [pc, #32]	; (8002988 <HAL_SAI_MspInit+0x144>)
 8002968:	f002 fb08 	bl	8004f7c <HAL_GPIO_Init>

    }
}
 800296c:	bf00      	nop
 800296e:	37e8      	adds	r7, #232	; 0xe8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40015c04 	.word	0x40015c04
 8002978:	24000eb0 	.word	0x24000eb0
 800297c:	58024400 	.word	0x58024400
 8002980:	58022000 	.word	0x58022000
 8002984:	40015c24 	.word	0x40015c24
 8002988:	58021800 	.word	0x58021800

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <NMI_Handler+0x4>

08002992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <HardFault_Handler+0x4>

08002998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <MemManage_Handler+0x4>

0800299e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <BusFault_Handler+0x4>

080029a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <UsageFault_Handler+0x4>

080029aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d8:	f000 f95c 	bl	8002c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e8:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <_sbrk+0x5c>)
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <_sbrk+0x60>)
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <_sbrk+0x64>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <_sbrk+0x64>)
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <_sbrk+0x68>)
 8002a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <_sbrk+0x64>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d207      	bcs.n	8002a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a10:	f009 ff1e 	bl	800c850 <__errno>
 8002a14:	4603      	mov	r3, r0
 8002a16:	220c      	movs	r2, #12
 8002a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	e009      	b.n	8002a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <_sbrk+0x64>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <_sbrk+0x64>)
 8002a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	24080000 	.word	0x24080000
 8002a40:	00000400 	.word	0x00000400
 8002a44:	24000eb4 	.word	0x24000eb4
 8002a48:	24001008 	.word	0x24001008

08002a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <SystemInit+0xe4>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	4a36      	ldr	r2, [pc, #216]	; (8002b30 <SystemInit+0xe4>)
 8002a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a60:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <SystemInit+0xe8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	2b06      	cmp	r3, #6
 8002a6a:	d807      	bhi.n	8002a7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <SystemInit+0xe8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 030f 	bic.w	r3, r3, #15
 8002a74:	4a2f      	ldr	r2, [pc, #188]	; (8002b34 <SystemInit+0xe8>)
 8002a76:	f043 0307 	orr.w	r3, r3, #7
 8002a7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a7c:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <SystemInit+0xec>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2d      	ldr	r2, [pc, #180]	; (8002b38 <SystemInit+0xec>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <SystemInit+0xec>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <SystemInit+0xec>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4929      	ldr	r1, [pc, #164]	; (8002b38 <SystemInit+0xec>)
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <SystemInit+0xf0>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <SystemInit+0xe8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002aa6:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <SystemInit+0xe8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 030f 	bic.w	r3, r3, #15
 8002aae:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <SystemInit+0xe8>)
 8002ab0:	f043 0307 	orr.w	r3, r3, #7
 8002ab4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <SystemInit+0xec>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002abc:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <SystemInit+0xec>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <SystemInit+0xec>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <SystemInit+0xec>)
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <SystemInit+0xf4>)
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <SystemInit+0xec>)
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <SystemInit+0xf8>)
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ad4:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <SystemInit+0xec>)
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <SystemInit+0xfc>)
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <SystemInit+0xec>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <SystemInit+0xec>)
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <SystemInit+0xfc>)
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <SystemInit+0xec>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <SystemInit+0xec>)
 8002aee:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <SystemInit+0xfc>)
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <SystemInit+0xec>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <SystemInit+0xec>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <SystemInit+0xec>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <SystemInit+0xec>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <SystemInit+0x100>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <SystemInit+0x104>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b16:	d202      	bcs.n	8002b1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <SystemInit+0x108>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <SystemInit+0x10c>)
 8002b20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00
 8002b34:	52002000 	.word	0x52002000
 8002b38:	58024400 	.word	0x58024400
 8002b3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b40:	02020200 	.word	0x02020200
 8002b44:	01ff0000 	.word	0x01ff0000
 8002b48:	01010280 	.word	0x01010280
 8002b4c:	5c001000 	.word	0x5c001000
 8002b50:	ffff0000 	.word	0xffff0000
 8002b54:	51008108 	.word	0x51008108
 8002b58:	52004000 	.word	0x52004000

08002b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b60:	f7ff ff74 	bl	8002a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b64:	480c      	ldr	r0, [pc, #48]	; (8002b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b66:	490d      	ldr	r1, [pc, #52]	; (8002b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b68:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b6c:	e002      	b.n	8002b74 <LoopCopyDataInit>

08002b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b72:	3304      	adds	r3, #4

08002b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b78:	d3f9      	bcc.n	8002b6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b80:	e001      	b.n	8002b86 <LoopFillZerobss>

08002b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b84:	3204      	adds	r2, #4

08002b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b88:	d3fb      	bcc.n	8002b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b8a:	f009 fe67 	bl	800c85c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b8e:	f7fd fd7d 	bl	800068c <main>
  bx  lr
 8002b92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b9c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002ba0:	0800d2b4 	.word	0x0800d2b4
  ldr r2, =_sbss
 8002ba4:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8002ba8:	24001004 	.word	0x24001004

08002bac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bac:	e7fe      	b.n	8002bac <ADC3_IRQHandler>
	...

08002bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb6:	2003      	movs	r0, #3
 8002bb8:	f001 fa26 	bl	8004008 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bbc:	f004 fc8c 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_Init+0x68>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	4913      	ldr	r1, [pc, #76]	; (8002c1c <HAL_Init+0x6c>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_Init+0x68>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <HAL_Init+0x6c>)
 8002be4:	5cd3      	ldrb	r3, [r2, r3]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	4a0b      	ldr	r2, [pc, #44]	; (8002c20 <HAL_Init+0x70>)
 8002bf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <HAL_Init+0x74>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f000 f814 	bl	8002c28 <HAL_InitTick>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e002      	b.n	8002c10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c0a:	f7fe fe33 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	0800d238 	.word	0x0800d238
 8002c20:	24000004 	.word	0x24000004
 8002c24:	24000000 	.word	0x24000000

08002c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_InitTick+0x60>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e021      	b.n	8002c80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_InitTick+0x64>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_InitTick+0x60>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f9fd 	bl	8004052 <HAL_SYSTICK_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00e      	b.n	8002c80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b0f      	cmp	r3, #15
 8002c66:	d80a      	bhi.n	8002c7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f001 f9d5 	bl	800401e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c74:	4a06      	ldr	r2, [pc, #24]	; (8002c90 <HAL_InitTick+0x68>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e000      	b.n	8002c80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2400000c 	.word	0x2400000c
 8002c8c:	24000000 	.word	0x24000000
 8002c90:	24000008 	.word	0x24000008

08002c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_IncTick+0x20>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_IncTick+0x24>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_IncTick+0x24>)
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	2400000c 	.word	0x2400000c
 8002cb8:	24000eb8 	.word	0x24000eb8

08002cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_GetTick+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	24000eb8 	.word	0x24000eb8

08002cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cdc:	f7ff ffee 	bl	8002cbc <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d005      	beq.n	8002cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_Delay+0x44>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cfa:	bf00      	nop
 8002cfc:	f7ff ffde 	bl	8002cbc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d8f7      	bhi.n	8002cfc <HAL_Delay+0x28>
  {
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2400000c 	.word	0x2400000c

08002d1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_GetREVID+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0c1b      	lsrs	r3, r3, #16
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	5c001000 	.word	0x5c001000

08002d34 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d44:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	58000400 	.word	0x58000400

08002d5c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	401a      	ands	r2, r3
 8002d70:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	58000400 	.word	0x58000400

08002d88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	609a      	str	r2, [r3, #8]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3360      	adds	r3, #96	; 0x60
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	611a      	str	r2, [r3, #16]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b087      	sub	sp, #28
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3360      	adds	r3, #96	; 0x60
 8002e72:	461a      	mov	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	601a      	str	r2, [r3, #0]
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3330      	adds	r3, #48	; 0x30
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	211f      	movs	r1, #31
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	401a      	ands	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 011f 	and.w	r1, r3, #31
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3314      	adds	r3, #20
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	0e5b      	lsrs	r3, r3, #25
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	0d1b      	lsrs	r3, r3, #20
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	2107      	movs	r1, #7
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	401a      	ands	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	0d1b      	lsrs	r3, r3, #20
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	431a      	orrs	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0318 	and.w	r3, r3, #24
 8002f6a:	4908      	ldr	r1, [pc, #32]	; (8002f8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f6c:	40d9      	lsrs	r1, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	400b      	ands	r3, r1
 8002f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	000fffff 	.word	0x000fffff

08002f90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6093      	str	r3, [r2, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	5fffffc0 	.word	0x5fffffc0

08002fb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc8:	d101      	bne.n	8002fce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <LL_ADC_EnableInternalRegulator+0x24>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	6fffffc0 	.word	0x6fffffc0

08003004 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003018:	d101      	bne.n	800301e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <LL_ADC_IsEnabled+0x18>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <LL_ADC_IsEnabled+0x1a>
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b04      	cmp	r3, #4
 8003064:	d101      	bne.n	800306a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b08      	cmp	r3, #8
 800308a:	d101      	bne.n	8003090 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e18f      	b.n	80033da <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fe fbed 	bl	80018a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff67 	bl	8002fb4 <LL_ADC_IsDeepPowerDownEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff4d 	bl	8002f90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff82 	bl	8003004 <LL_ADC_IsInternalRegulatorEnabled>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d114      	bne.n	8003130 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff66 	bl	8002fdc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003110:	4b87      	ldr	r3, [pc, #540]	; (8003330 <HAL_ADC_Init+0x290>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	4a87      	ldr	r2, [pc, #540]	; (8003334 <HAL_ADC_Init+0x294>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	3301      	adds	r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003122:	e002      	b.n	800312a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3b01      	subs	r3, #1
 8003128:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f9      	bne.n	8003124 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff65 	bl	8003004 <LL_ADC_IsInternalRegulatorEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10d      	bne.n	800315c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff76 	bl	8003052 <LL_ADC_REG_IsConversionOngoing>
 8003166:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 8129 	bne.w	80033c8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f040 8125 	bne.w	80033c8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003186:	f043 0202 	orr.w	r2, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff4a 	bl	800302c <LL_ADC_IsEnabled>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d136      	bne.n	800320c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a65      	ldr	r2, [pc, #404]	; (8003338 <HAL_ADC_Init+0x298>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_ADC_Init+0x112>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a63      	ldr	r2, [pc, #396]	; (800333c <HAL_ADC_Init+0x29c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10e      	bne.n	80031d0 <HAL_ADC_Init+0x130>
 80031b2:	4861      	ldr	r0, [pc, #388]	; (8003338 <HAL_ADC_Init+0x298>)
 80031b4:	f7ff ff3a 	bl	800302c <LL_ADC_IsEnabled>
 80031b8:	4604      	mov	r4, r0
 80031ba:	4860      	ldr	r0, [pc, #384]	; (800333c <HAL_ADC_Init+0x29c>)
 80031bc:	f7ff ff36 	bl	800302c <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4323      	orrs	r3, r4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e008      	b.n	80031e2 <HAL_ADC_Init+0x142>
 80031d0:	485b      	ldr	r0, [pc, #364]	; (8003340 <HAL_ADC_Init+0x2a0>)
 80031d2:	f7ff ff2b 	bl	800302c <LL_ADC_IsEnabled>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d012      	beq.n	800320c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a53      	ldr	r2, [pc, #332]	; (8003338 <HAL_ADC_Init+0x298>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_ADC_Init+0x15a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a51      	ldr	r2, [pc, #324]	; (800333c <HAL_ADC_Init+0x29c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Init+0x15e>
 80031fa:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_ADC_Init+0x2a4>)
 80031fc:	e000      	b.n	8003200 <HAL_ADC_Init+0x160>
 80031fe:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_ADC_Init+0x2a8>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f7ff fdbe 	bl	8002d88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800320c:	f7ff fd86 	bl	8002d1c <HAL_GetREVID>
 8003210:	4603      	mov	r3, r0
 8003212:	f241 0203 	movw	r2, #4099	; 0x1003
 8003216:	4293      	cmp	r3, r2
 8003218:	d914      	bls.n	8003244 <HAL_ADC_Init+0x1a4>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b10      	cmp	r3, #16
 8003220:	d110      	bne.n	8003244 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7d5b      	ldrb	r3, [r3, #21]
 8003226:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800322c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003232:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7f1b      	ldrb	r3, [r3, #28]
 8003238:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800323a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800323c:	f043 030c 	orr.w	r3, r3, #12
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e00d      	b.n	8003260 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7d5b      	ldrb	r3, [r3, #21]
 8003248:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800324e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003254:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7f1b      	ldrb	r3, [r3, #28]
 800325a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7f1b      	ldrb	r3, [r3, #28]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	3b01      	subs	r3, #1
 800326e:	045b      	lsls	r3, r3, #17
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	4b2c      	ldr	r3, [pc, #176]	; (800334c <HAL_ADC_Init+0x2ac>)
 800329a:	4013      	ands	r3, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	69b9      	ldr	r1, [r7, #24]
 80032a2:	430b      	orrs	r3, r1
 80032a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fed1 	bl	8003052 <LL_ADC_REG_IsConversionOngoing>
 80032b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fede 	bl	8003078 <LL_ADC_INJ_IsConversionOngoing>
 80032bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d15f      	bne.n	8003384 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d15c      	bne.n	8003384 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7d1b      	ldrb	r3, [r3, #20]
 80032ce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <HAL_ADC_Init+0x2b0>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d130      	bne.n	8003358 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_ADC_Init+0x2b4>)
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800330a:	3a01      	subs	r2, #1
 800330c:	0411      	lsls	r1, r2, #16
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800331e:	430a      	orrs	r2, r1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	611a      	str	r2, [r3, #16]
 800332c:	e01c      	b.n	8003368 <HAL_ADC_Init+0x2c8>
 800332e:	bf00      	nop
 8003330:	24000000 	.word	0x24000000
 8003334:	053e2d63 	.word	0x053e2d63
 8003338:	40022000 	.word	0x40022000
 800333c:	40022100 	.word	0x40022100
 8003340:	58026000 	.word	0x58026000
 8003344:	40022300 	.word	0x40022300
 8003348:	58026300 	.word	0x58026300
 800334c:	fff0c003 	.word	0xfff0c003
 8003350:	ffffbffc 	.word	0xffffbffc
 8003354:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fb80 	bl	8003a84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10c      	bne.n	80033a6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f023 010f 	bic.w	r1, r3, #15
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	1e5a      	subs	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
 80033a4:	e007      	b.n	80033b6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 020f 	bic.w	r2, r2, #15
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	f043 0201 	orr.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
 80033c6:	e007      	b.n	80033d8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	f043 0210 	orr.w	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	bf00      	nop

080033e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b0a1      	sub	sp, #132	; 0x84
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a9d      	ldr	r2, [pc, #628]	; (8003674 <HAL_ADC_ConfigChannel+0x290>)
 80033fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_ADC_ConfigChannel+0x2a>
 800340a:	2302      	movs	r3, #2
 800340c:	e321      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x66e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fe19 	bl	8003052 <LL_ADC_REG_IsConversionOngoing>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 8306 	bne.w	8003a34 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x62>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	0e9b      	lsrs	r3, r3, #26
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2201      	movs	r2, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	e016      	b.n	8003474 <HAL_ADC_ConfigChannel+0x90>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003456:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800345e:	2320      	movs	r3, #32
 8003460:	e003      	b.n	800346a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2201      	movs	r2, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	69d1      	ldr	r1, [r2, #28]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	430b      	orrs	r3, r1
 8003480:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	f7ff fd02 	bl	8002e98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fdda 	bl	8003052 <LL_ADC_REG_IsConversionOngoing>
 800349e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fde7 	bl	8003078 <LL_ADC_INJ_IsConversionOngoing>
 80034aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 80b3 	bne.w	800361a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 80af 	bne.w	800361a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f7ff fd11 	bl	8002ef0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034ce:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_ADC_ConfigChannel+0x294>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80034d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034da:	d10b      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x110>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	e01d      	b.n	8003530 <HAL_ADC_ConfigChannel+0x14c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <HAL_ADC_ConfigChannel+0x136>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	e00a      	b.n	8003530 <HAL_ADC_ConfigChannel+0x14c>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d027      	beq.n	800358a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6919      	ldr	r1, [r3, #16]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003548:	f7ff fc52 	bl	8002df0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6919      	ldr	r1, [r3, #16]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	7e5b      	ldrb	r3, [r3, #25]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d102      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x17e>
 800355c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003560:	e000      	b.n	8003564 <HAL_ADC_ConfigChannel+0x180>
 8003562:	2300      	movs	r3, #0
 8003564:	461a      	mov	r2, r3
 8003566:	f7ff fc7c 	bl	8002e62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6919      	ldr	r1, [r3, #16]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	7e1b      	ldrb	r3, [r3, #24]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x19c>
 800357a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800357e:	e000      	b.n	8003582 <HAL_ADC_ConfigChannel+0x19e>
 8003580:	2300      	movs	r3, #0
 8003582:	461a      	mov	r2, r3
 8003584:	f7ff fc54 	bl	8002e30 <LL_ADC_SetDataRightShift>
 8003588:	e047      	b.n	800361a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003590:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	069b      	lsls	r3, r3, #26
 800359a:	429a      	cmp	r2, r3
 800359c:	d107      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	069b      	lsls	r3, r3, #26
 80035be:	429a      	cmp	r2, r3
 80035c0:	d107      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	069b      	lsls	r3, r3, #26
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d107      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	069b      	lsls	r3, r3, #26
 8003606:	429a      	cmp	r2, r3
 8003608:	d107      	bne.n	800361a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003618:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fd04 	bl	800302c <LL_ADC_IsEnabled>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 820d 	bne.w	8003a46 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	461a      	mov	r2, r3
 800363a:	f7ff fc85 	bl	8002f48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <HAL_ADC_ConfigChannel+0x290>)
 8003644:	4293      	cmp	r3, r2
 8003646:	f040 8133 	bne.w	80038b0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003656:	2b00      	cmp	r3, #0
 8003658:	d110      	bne.n	800367c <HAL_ADC_ConfigChannel+0x298>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	3301      	adds	r3, #1
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2b09      	cmp	r3, #9
 8003668:	bf94      	ite	ls
 800366a:	2301      	movls	r3, #1
 800366c:	2300      	movhi	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e01e      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x2cc>
 8003672:	bf00      	nop
 8003674:	47ff0000 	.word	0x47ff0000
 8003678:	5c001000 	.word	0x5c001000
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800368a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800368e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e003      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2b09      	cmp	r3, #9
 80036a8:	bf94      	ite	ls
 80036aa:	2301      	movls	r3, #1
 80036ac:	2300      	movhi	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d079      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d107      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x2ec>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	3301      	adds	r3, #1
 80036c8:	069b      	lsls	r3, r3, #26
 80036ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ce:	e015      	b.n	80036fc <HAL_ADC_ConfigChannel+0x318>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80036e8:	2320      	movs	r3, #32
 80036ea:	e003      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80036ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	069b      	lsls	r3, r3, #26
 80036f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_ADC_ConfigChannel+0x338>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0e9b      	lsrs	r3, r3, #26
 800370e:	3301      	adds	r3, #1
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	e017      	b.n	800374c <HAL_ADC_ConfigChannel+0x368>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800372e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	ea42 0103 	orr.w	r1, r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x38e>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	0e9b      	lsrs	r3, r3, #26
 8003762:	3301      	adds	r3, #1
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	051b      	lsls	r3, r3, #20
 8003770:	e018      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x3c0>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800378a:	2320      	movs	r3, #32
 800378c:	e003      	b.n	8003796 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	fab3 f383 	clz	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a4:	430b      	orrs	r3, r1
 80037a6:	e07e      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x3e0>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0e9b      	lsrs	r3, r3, #26
 80037ba:	3301      	adds	r3, #1
 80037bc:	069b      	lsls	r3, r3, #26
 80037be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037c2:	e015      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x40c>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e003      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	069b      	lsls	r3, r3, #26
 80037ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x42c>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0e9b      	lsrs	r3, r3, #26
 8003802:	3301      	adds	r3, #1
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2101      	movs	r1, #1
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	e017      	b.n	8003840 <HAL_ADC_ConfigChannel+0x45c>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	61bb      	str	r3, [r7, #24]
  return result;
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e003      	b.n	8003834 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f303 	lsl.w	r3, r1, r3
 8003840:	ea42 0103 	orr.w	r1, r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <HAL_ADC_ConfigChannel+0x488>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	3301      	adds	r3, #1
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	3b1e      	subs	r3, #30
 8003864:	051b      	lsls	r3, r3, #20
 8003866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800386a:	e01b      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x4c0>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	60fb      	str	r3, [r7, #12]
  return result;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e003      	b.n	8003890 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3301      	adds	r3, #1
 8003892:	f003 021f 	and.w	r2, r3, #31
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	3b1e      	subs	r3, #30
 800389e:	051b      	lsls	r3, r3, #20
 80038a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a4:	430b      	orrs	r3, r1
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	4619      	mov	r1, r3
 80038ac:	f7ff fb20 	bl	8002ef0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f280 80c6 	bge.w	8003a46 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a67      	ldr	r2, [pc, #412]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_ADC_ConfigChannel+0x4ea>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x4ee>
 80038ce:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <HAL_ADC_ConfigChannel+0x680>)
 80038d0:	e000      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x4f0>
 80038d2:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <HAL_ADC_ConfigChannel+0x684>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fa7d 	bl	8002dd4 <LL_ADC_GetCommonPathInternalCh>
 80038da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a5e      	ldr	r2, [pc, #376]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_ADC_ConfigChannel+0x50c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a5d      	ldr	r2, [pc, #372]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d10e      	bne.n	800390e <HAL_ADC_ConfigChannel+0x52a>
 80038f0:	485a      	ldr	r0, [pc, #360]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80038f2:	f7ff fb9b 	bl	800302c <LL_ADC_IsEnabled>
 80038f6:	4604      	mov	r4, r0
 80038f8:	4859      	ldr	r0, [pc, #356]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 80038fa:	f7ff fb97 	bl	800302c <LL_ADC_IsEnabled>
 80038fe:	4603      	mov	r3, r0
 8003900:	4323      	orrs	r3, r4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e008      	b.n	8003920 <HAL_ADC_ConfigChannel+0x53c>
 800390e:	4857      	ldr	r0, [pc, #348]	; (8003a6c <HAL_ADC_ConfigChannel+0x688>)
 8003910:	f7ff fb8c 	bl	800302c <LL_ADC_IsEnabled>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d07d      	beq.n	8003a20 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a51      	ldr	r2, [pc, #324]	; (8003a70 <HAL_ADC_ConfigChannel+0x68c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d130      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x5ac>
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d12b      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a4b      	ldr	r2, [pc, #300]	; (8003a6c <HAL_ADC_ConfigChannel+0x688>)
 800393e:	4293      	cmp	r3, r2
 8003940:	f040 8081 	bne.w	8003a46 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a44      	ldr	r2, [pc, #272]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_ADC_ConfigChannel+0x574>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x578>
 8003958:	4a42      	ldr	r2, [pc, #264]	; (8003a64 <HAL_ADC_ConfigChannel+0x680>)
 800395a:	e000      	b.n	800395e <HAL_ADC_ConfigChannel+0x57a>
 800395c:	4a42      	ldr	r2, [pc, #264]	; (8003a68 <HAL_ADC_ConfigChannel+0x684>)
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f7ff fa21 	bl	8002dae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800396c:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_ADC_ConfigChannel+0x690>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	4a41      	ldr	r2, [pc, #260]	; (8003a78 <HAL_ADC_ConfigChannel+0x694>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	3301      	adds	r3, #1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003980:	e002      	b.n	8003988 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3b01      	subs	r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f9      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800398e:	e05a      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a39      	ldr	r2, [pc, #228]	; (8003a7c <HAL_ADC_ConfigChannel+0x698>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d11e      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x5f4>
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d119      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a30      	ldr	r2, [pc, #192]	; (8003a6c <HAL_ADC_ConfigChannel+0x688>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d14b      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2a      	ldr	r2, [pc, #168]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_ADC_ConfigChannel+0x5de>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x5e2>
 80039c2:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <HAL_ADC_ConfigChannel+0x680>)
 80039c4:	e000      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x5e4>
 80039c6:	4a28      	ldr	r2, [pc, #160]	; (8003a68 <HAL_ADC_ConfigChannel+0x684>)
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f7ff f9ec 	bl	8002dae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d6:	e036      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <HAL_ADC_ConfigChannel+0x69c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d131      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d12c      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_ADC_ConfigChannel+0x688>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d127      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d004      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x626>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x62a>
 8003a0a:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_ADC_ConfigChannel+0x680>)
 8003a0c:	e000      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x62c>
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_ADC_ConfigChannel+0x684>)
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f7ff f9c8 	bl	8002dae <LL_ADC_SetCommonPathInternalCh>
 8003a1e:	e012      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a32:	e008      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3784      	adds	r7, #132	; 0x84
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40022100 	.word	0x40022100
 8003a64:	40022300 	.word	0x40022300
 8003a68:	58026300 	.word	0x58026300
 8003a6c:	58026000 	.word	0x58026000
 8003a70:	cb840000 	.word	0xcb840000
 8003a74:	24000000 	.word	0x24000000
 8003a78:	053e2d63 	.word	0x053e2d63
 8003a7c:	c7520000 	.word	0xc7520000
 8003a80:	cfb80000 	.word	0xcfb80000

08003a84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7a      	ldr	r2, [pc, #488]	; (8003c7c <ADC_ConfigureBoostMode+0x1f8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <ADC_ConfigureBoostMode+0x1c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a79      	ldr	r2, [pc, #484]	; (8003c80 <ADC_ConfigureBoostMode+0x1fc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d109      	bne.n	8003ab4 <ADC_ConfigureBoostMode+0x30>
 8003aa0:	4b78      	ldr	r3, [pc, #480]	; (8003c84 <ADC_ConfigureBoostMode+0x200>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e008      	b.n	8003ac6 <ADC_ConfigureBoostMode+0x42>
 8003ab4:	4b74      	ldr	r3, [pc, #464]	; (8003c88 <ADC_ConfigureBoostMode+0x204>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01c      	beq.n	8003b04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003aca:	f003 fe7f 	bl	80077cc <HAL_RCC_GetHCLKFreq>
 8003ace:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ad8:	d010      	beq.n	8003afc <ADC_ConfigureBoostMode+0x78>
 8003ada:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ade:	d873      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x144>
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d002      	beq.n	8003aec <ADC_ConfigureBoostMode+0x68>
 8003ae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aea:	d16d      	bne.n	8003bc8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	60fb      	str	r3, [r7, #12]
        break;
 8003afa:	e068      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	60fb      	str	r3, [r7, #12]
        break;
 8003b02:	e064      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	f005 f8c4 	bl	8008c98 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b1a:	d051      	beq.n	8003bc0 <ADC_ConfigureBoostMode+0x13c>
 8003b1c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b20:	d854      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b22:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b26:	d047      	beq.n	8003bb8 <ADC_ConfigureBoostMode+0x134>
 8003b28:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b2c:	d84e      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b2e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b32:	d03d      	beq.n	8003bb0 <ADC_ConfigureBoostMode+0x12c>
 8003b34:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b38:	d848      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b3e:	d033      	beq.n	8003ba8 <ADC_ConfigureBoostMode+0x124>
 8003b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b44:	d842      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b46:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b4a:	d029      	beq.n	8003ba0 <ADC_ConfigureBoostMode+0x11c>
 8003b4c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b50:	d83c      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b52:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b56:	d01a      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b58:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b5c:	d836      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b5e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b62:	d014      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b64:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b68:	d830      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6e:	d00e      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b74:	d82a      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b7a:	d008      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b7c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b80:	d824      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b86:	d002      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b8c:	d11e      	bne.n	8003bcc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0c9b      	lsrs	r3, r3, #18
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	60fb      	str	r3, [r7, #12]
        break;
 8003b9e:	e016      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	60fb      	str	r3, [r7, #12]
        break;
 8003ba6:	e012      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	60fb      	str	r3, [r7, #12]
        break;
 8003bae:	e00e      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	60fb      	str	r3, [r7, #12]
        break;
 8003bb6:	e00a      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	09db      	lsrs	r3, r3, #7
 8003bbc:	60fb      	str	r3, [r7, #12]
        break;
 8003bbe:	e006      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	60fb      	str	r3, [r7, #12]
        break;
 8003bc6:	e002      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
        break;
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003bcc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003bce:	f7ff f8a5 	bl	8002d1c <HAL_GetREVID>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d815      	bhi.n	8003c08 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <ADC_ConfigureBoostMode+0x208>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d908      	bls.n	8003bf6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bf4:	e03e      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c04:	609a      	str	r2, [r3, #8]
}
 8003c06:	e035      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <ADC_ConfigureBoostMode+0x20c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d808      	bhi.n	8003c28 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c24:	609a      	str	r2, [r3, #8]
}
 8003c26:	e025      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <ADC_ConfigureBoostMode+0x210>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d80a      	bhi.n	8003c46 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c42:	609a      	str	r2, [r3, #8]
}
 8003c44:	e016      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <ADC_ConfigureBoostMode+0x214>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d80a      	bhi.n	8003c64 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	609a      	str	r2, [r3, #8]
}
 8003c62:	e007      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c72:	609a      	str	r2, [r3, #8]
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40022000 	.word	0x40022000
 8003c80:	40022100 	.word	0x40022100
 8003c84:	40022300 	.word	0x40022300
 8003c88:	58026300 	.word	0x58026300
 8003c8c:	01312d00 	.word	0x01312d00
 8003c90:	005f5e10 	.word	0x005f5e10
 8003c94:	00bebc20 	.word	0x00bebc20
 8003c98:	017d7840 	.word	0x017d7840

08003c9c <LL_ADC_IsEnabled>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <LL_ADC_IsEnabled+0x18>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_ADC_IsEnabled+0x1a>
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d101      	bne.n	8003cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b09f      	sub	sp, #124	; 0x7c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e0be      	b.n	8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5c      	ldr	r2, [pc, #368]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d102      	bne.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d20:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	e001      	b.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10b      	bne.n	8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e09d      	b.n	8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ffb9 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 8003d50:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ffb3 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d17f      	bne.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d17c      	bne.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a47      	ldr	r2, [pc, #284]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a46      	ldr	r2, [pc, #280]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d7c:	4b45      	ldr	r3, [pc, #276]	; (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d7e:	e000      	b.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d80:	4b45      	ldr	r3, [pc, #276]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d039      	beq.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3a      	ldr	r2, [pc, #232]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a38      	ldr	r2, [pc, #224]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10e      	bne.n	8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003db2:	4836      	ldr	r0, [pc, #216]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003db4:	f7ff ff72 	bl	8003c9c <LL_ADC_IsEnabled>
 8003db8:	4604      	mov	r4, r0
 8003dba:	4835      	ldr	r0, [pc, #212]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dbc:	f7ff ff6e 	bl	8003c9c <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4323      	orrs	r3, r4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e008      	b.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003dd0:	4832      	ldr	r0, [pc, #200]	; (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003dd2:	f7ff ff63 	bl	8003c9c <LL_ADC_IsEnabled>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d047      	beq.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	6811      	ldr	r1, [r2, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	6892      	ldr	r2, [r2, #8]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dfe:	e03a      	b.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10e      	bne.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e20:	481a      	ldr	r0, [pc, #104]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e22:	f7ff ff3b 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e26:	4604      	mov	r4, r0
 8003e28:	4819      	ldr	r0, [pc, #100]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e2a:	f7ff ff37 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4323      	orrs	r3, r4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e008      	b.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e3e:	4817      	ldr	r0, [pc, #92]	; (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e40:	f7ff ff2c 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e60:	e009      	b.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e74:	e000      	b.n	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	377c      	adds	r7, #124	; 0x7c
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd90      	pop	{r4, r7, pc}
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40022100 	.word	0x40022100
 8003e94:	40022300 	.word	0x40022300
 8003e98:	58026300 	.word	0x58026300
 8003e9c:	58026000 	.word	0x58026000
 8003ea0:	fffff0e0 	.word	0xfffff0e0

08003ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed2:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	60d3      	str	r3, [r2, #12]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00
 8003ee8:	05fa0000 	.word	0x05fa0000

08003eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0307 	and.w	r3, r3, #7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	6039      	str	r1, [r7, #0]
 8003f12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	db0a      	blt.n	8003f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	490c      	ldr	r1, [pc, #48]	; (8003f54 <__NVIC_SetPriority+0x4c>)
 8003f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f26:	0112      	lsls	r2, r2, #4
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f30:	e00a      	b.n	8003f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4908      	ldr	r1, [pc, #32]	; (8003f58 <__NVIC_SetPriority+0x50>)
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3b04      	subs	r3, #4
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	440b      	add	r3, r1
 8003f46:	761a      	strb	r2, [r3, #24]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000e100 	.word	0xe000e100
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f1c3 0307 	rsb	r3, r3, #7
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	bf28      	it	cs
 8003f7a:	2304      	movcs	r3, #4
 8003f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3304      	adds	r3, #4
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d902      	bls.n	8003f8c <NVIC_EncodePriority+0x30>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3b03      	subs	r3, #3
 8003f8a:	e000      	b.n	8003f8e <NVIC_EncodePriority+0x32>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	f04f 32ff 	mov.w	r2, #4294967295
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	43d9      	mvns	r1, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	4313      	orrs	r3, r2
         );
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3724      	adds	r7, #36	; 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fd4:	d301      	bcc.n	8003fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e00f      	b.n	8003ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <SysTick_Config+0x40>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fe2:	210f      	movs	r1, #15
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	f7ff ff8e 	bl	8003f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <SysTick_Config+0x40>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <SysTick_Config+0x40>)
 8003ff4:	2207      	movs	r2, #7
 8003ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	e000e010 	.word	0xe000e010

08004008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ff47 	bl	8003ea4 <__NVIC_SetPriorityGrouping>
}
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b086      	sub	sp, #24
 8004022:	af00      	add	r7, sp, #0
 8004024:	4603      	mov	r3, r0
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800402c:	f7ff ff5e 	bl	8003eec <__NVIC_GetPriorityGrouping>
 8004030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff ff90 	bl	8003f5c <NVIC_EncodePriority>
 800403c:	4602      	mov	r2, r0
 800403e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff5f 	bl	8003f08 <__NVIC_SetPriority>
}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ffb2 	bl	8003fc4 <SysTick_Config>
 8004060:	4603      	mov	r3, r0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0cf      	b.n	800421e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2223      	movs	r2, #35	; 0x23
 800408c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fd fd0b 	bl	8001aac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004096:	4b64      	ldr	r3, [pc, #400]	; (8004228 <HAL_ETH_Init+0x1bc>)
 8004098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800409c:	4a62      	ldr	r2, [pc, #392]	; (8004228 <HAL_ETH_Init+0x1bc>)
 800409e:	f043 0302 	orr.w	r3, r3, #2
 80040a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040a6:	4b60      	ldr	r3, [pc, #384]	; (8004228 <HAL_ETH_Init+0x1bc>)
 80040a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	7a1b      	ldrb	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80040bc:	2000      	movs	r0, #0
 80040be:	f7fe fe39 	bl	8002d34 <HAL_SYSCFG_ETHInterfaceSelect>
 80040c2:	e003      	b.n	80040cc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80040c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80040c8:	f7fe fe34 	bl	8002d34 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80040cc:	4b57      	ldr	r3, [pc, #348]	; (800422c <HAL_ETH_Init+0x1c0>)
 80040ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e8:	f7fe fde8 	bl	8002cbc <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040ee:	e011      	b.n	8004114 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80040f0:	f7fe fde4 	bl	8002cbc <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040fe:	d909      	bls.n	8004114 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2204      	movs	r2, #4
 8004104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	22e0      	movs	r2, #224	; 0xe0
 800410c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e084      	b.n	800421e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e4      	bne.n	80040f0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f886 	bl	8004238 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800412c:	f003 fb4e 	bl	80077cc <HAL_RCC_GetHCLKFreq>
 8004130:	4603      	mov	r3, r0
 8004132:	4a3f      	ldr	r2, [pc, #252]	; (8004230 <HAL_ETH_Init+0x1c4>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	0c9a      	lsrs	r2, r3, #18
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3a01      	subs	r2, #1
 8004140:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa71 	bl	800462c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004152:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004156:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004166:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	22e0      	movs	r2, #224	; 0xe0
 8004182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e049      	b.n	800421e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004192:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004196:	4b27      	ldr	r3, [pc, #156]	; (8004234 <HAL_ETH_Init+0x1c8>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6952      	ldr	r2, [r2, #20]
 800419e:	0051      	lsls	r1, r2, #1
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041aa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fad9 	bl	8004766 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fb1f 	bl	80047f8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	3305      	adds	r3, #5
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	021a      	lsls	r2, r3, #8
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	3303      	adds	r3, #3
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	061a      	lsls	r2, r3, #24
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	3302      	adds	r3, #2
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	3301      	adds	r3, #1
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004206:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004208:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2210      	movs	r2, #16
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400
 800422c:	58000400 	.word	0x58000400
 8004230:	431bde83 	.word	0x431bde83
 8004234:	ffff8001 	.word	0xffff8001

08004238 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004248:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004250:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004252:	f003 fabb 	bl	80077cc <HAL_RCC_GetHCLKFreq>
 8004256:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d908      	bls.n	8004272 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d804      	bhi.n	8004272 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e027      	b.n	80042c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d908      	bls.n	800428c <HAL_ETH_SetMDIOClockRange+0x54>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d204      	bcs.n	800428c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e01a      	b.n	80042c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d303      	bcc.n	800429c <HAL_ETH_SetMDIOClockRange+0x64>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d911      	bls.n	80042c0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d908      	bls.n	80042b6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <HAL_ETH_SetMDIOClockRange+0xac>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d804      	bhi.n	80042b6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e005      	b.n	80042c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e000      	b.n	80042c2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80042c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	01312cff 	.word	0x01312cff
 80042d8:	02160ebf 	.word	0x02160ebf
 80042dc:	03938700 	.word	0x03938700
 80042e0:	05f5e0ff 	.word	0x05f5e0ff
 80042e4:	08f0d17f 	.word	0x08f0d17f

080042e8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80042fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	791b      	ldrb	r3, [r3, #4]
 8004300:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	7b1b      	ldrb	r3, [r3, #12]
 8004308:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800430a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	7b5b      	ldrb	r3, [r3, #13]
 8004310:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	7b9b      	ldrb	r3, [r3, #14]
 8004318:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800431a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	7bdb      	ldrb	r3, [r3, #15]
 8004320:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004322:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	7c12      	ldrb	r2, [r2, #16]
 8004328:	2a00      	cmp	r2, #0
 800432a:	d102      	bne.n	8004332 <ETH_SetMACConfig+0x4a>
 800432c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004330:	e000      	b.n	8004334 <ETH_SetMACConfig+0x4c>
 8004332:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004334:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	7c52      	ldrb	r2, [r2, #17]
 800433a:	2a00      	cmp	r2, #0
 800433c:	d102      	bne.n	8004344 <ETH_SetMACConfig+0x5c>
 800433e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004342:	e000      	b.n	8004346 <ETH_SetMACConfig+0x5e>
 8004344:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004346:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	7c9b      	ldrb	r3, [r3, #18]
 800434c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800434e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004354:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800435a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	7f1b      	ldrb	r3, [r3, #28]
 8004360:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004362:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	7f5b      	ldrb	r3, [r3, #29]
 8004368:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800436a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	7f92      	ldrb	r2, [r2, #30]
 8004370:	2a00      	cmp	r2, #0
 8004372:	d102      	bne.n	800437a <ETH_SetMACConfig+0x92>
 8004374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004378:	e000      	b.n	800437c <ETH_SetMACConfig+0x94>
 800437a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800437c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	7fdb      	ldrb	r3, [r3, #31]
 8004382:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004384:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	f892 2020 	ldrb.w	r2, [r2, #32]
 800438c:	2a00      	cmp	r2, #0
 800438e:	d102      	bne.n	8004396 <ETH_SetMACConfig+0xae>
 8004390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004394:	e000      	b.n	8004398 <ETH_SetMACConfig+0xb0>
 8004396:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004398:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800439e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80043a8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b56      	ldr	r3, [pc, #344]	; (8004514 <ETH_SetMACConfig+0x22c>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043e6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80043f0:	2a00      	cmp	r2, #0
 80043f2:	d102      	bne.n	80043fa <ETH_SetMACConfig+0x112>
 80043f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043f8:	e000      	b.n	80043fc <ETH_SetMACConfig+0x114>
 80043fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043fc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4b42      	ldr	r3, [pc, #264]	; (8004518 <ETH_SetMACConfig+0x230>)
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	430b      	orrs	r3, r1
 8004418:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004420:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	4b3a      	ldr	r3, [pc, #232]	; (800451c <ETH_SetMACConfig+0x234>)
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	430b      	orrs	r3, r1
 800443c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004444:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800444a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004452:	2a00      	cmp	r2, #0
 8004454:	d101      	bne.n	800445a <ETH_SetMACConfig+0x172>
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	e000      	b.n	800445c <ETH_SetMACConfig+0x174>
 800445a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800445c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004462:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800446e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	430b      	orrs	r3, r1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004484:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800448c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f023 0103 	bic.w	r1, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80044b2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80044ce:	2a00      	cmp	r2, #0
 80044d0:	d101      	bne.n	80044d6 <ETH_SetMACConfig+0x1ee>
 80044d2:	2240      	movs	r2, #64	; 0x40
 80044d4:	e000      	b.n	80044d8 <ETH_SetMACConfig+0x1f0>
 80044d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80044d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80044e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80044ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80044f8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	430a      	orrs	r2, r1
 8004504:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	00048083 	.word	0x00048083
 8004518:	c0f88000 	.word	0xc0f88000
 800451c:	fffffef0 	.word	0xfffffef0

08004520 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b38      	ldr	r3, [pc, #224]	; (8004618 <ETH_SetDMAConfig+0xf8>)
 8004536:	4013      	ands	r3, r2
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	6811      	ldr	r1, [r2, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004546:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	791b      	ldrb	r3, [r3, #4]
 800454c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004552:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	7b1b      	ldrb	r3, [r3, #12]
 8004558:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	4b2c      	ldr	r3, [pc, #176]	; (800461c <ETH_SetDMAConfig+0xfc>)
 800456a:	4013      	ands	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	68f9      	ldr	r1, [r7, #12]
 8004572:	430b      	orrs	r3, r1
 8004574:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004578:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	7b5b      	ldrb	r3, [r3, #13]
 800457e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004590:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004594:	4b22      	ldr	r3, [pc, #136]	; (8004620 <ETH_SetDMAConfig+0x100>)
 8004596:	4013      	ands	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	430b      	orrs	r3, r1
 80045a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045a4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	7d1b      	ldrb	r3, [r3, #20]
 80045b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80045b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	7f5b      	ldrb	r3, [r3, #29]
 80045b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80045ca:	4b16      	ldr	r3, [pc, #88]	; (8004624 <ETH_SetDMAConfig+0x104>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045da:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	7f1b      	ldrb	r3, [r3, #28]
 80045e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <ETH_SetDMAConfig+0x108>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	68f9      	ldr	r1, [r7, #12]
 8004602:	430b      	orrs	r3, r1
 8004604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004608:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	ffff87fd 	.word	0xffff87fd
 800461c:	ffff2ffe 	.word	0xffff2ffe
 8004620:	fffec000 	.word	0xfffec000
 8004624:	ffc0efef 	.word	0xffc0efef
 8004628:	7fc0ffff 	.word	0x7fc0ffff

0800462c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b0a4      	sub	sp, #144	; 0x90
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800463a:	2300      	movs	r3, #0
 800463c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800465c:	2300      	movs	r3, #0
 800465e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800466c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004674:	2300      	movs	r3, #0
 8004676:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004684:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004688:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004690:	2300      	movs	r3, #0
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800469a:	2300      	movs	r3, #0
 800469c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80046a6:	2300      	movs	r3, #0
 80046a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80046ae:	2300      	movs	r3, #0
 80046b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80046c4:	2320      	movs	r3, #32
 80046c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80046d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80046dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80046e8:	2302      	movs	r3, #2
 80046ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004706:	2300      	movs	r3, #0
 8004708:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fde6 	bl	80042e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800471c:	2301      	movs	r3, #1
 800471e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004720:	2301      	movs	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004724:	2300      	movs	r3, #0
 8004726:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800472e:	2300      	movs	r3, #0
 8004730:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004732:	2300      	movs	r3, #0
 8004734:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004736:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800473a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800473c:	2300      	movs	r3, #0
 800473e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004740:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004744:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004746:	2300      	movs	r3, #0
 8004748:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800474c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fee1 	bl	8004520 <ETH_SetDMAConfig>
}
 800475e:	bf00      	nop
 8004760:	3790      	adds	r7, #144	; 0x90
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e01d      	b.n	80047b0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68d9      	ldr	r1, [r3, #12]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	440b      	add	r3, r1
 8004784:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2200      	movs	r2, #0
 8004790:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2200      	movs	r2, #0
 8004796:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	3206      	adds	r2, #6
 80047a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d9de      	bls.n	8004774 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c4:	461a      	mov	r2, r3
 80047c6:	2303      	movs	r3, #3
 80047c8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e023      	b.n	800484e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6919      	ldr	r1, [r3, #16]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	440b      	add	r3, r1
 8004816:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2200      	movs	r2, #0
 800483a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	3212      	adds	r2, #18
 8004844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d9d8      	bls.n	8004806 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487a:	461a      	mov	r2, r3
 800487c:	2303      	movs	r3, #3
 800487e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b098      	sub	sp, #96	; 0x60
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80048bc:	4a84      	ldr	r2, [pc, #528]	; (8004ad0 <HAL_FDCAN_Init+0x21c>)
 80048be:	f107 030c 	add.w	r3, r7, #12
 80048c2:	4611      	mov	r1, r2
 80048c4:	224c      	movs	r2, #76	; 0x4c
 80048c6:	4618      	mov	r0, r3
 80048c8:	f007 ffee 	bl	800c8a8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e1c6      	b.n	8004c64 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7e      	ldr	r2, [pc, #504]	; (8004ad4 <HAL_FDCAN_Init+0x220>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d106      	bne.n	80048ee <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fd fa02 	bl	8001d0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0210 	bic.w	r2, r2, #16
 8004916:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004918:	f7fe f9d0 	bl	8002cbc <HAL_GetTick>
 800491c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800491e:	e014      	b.n	800494a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004920:	f7fe f9cc 	bl	8002cbc <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b0a      	cmp	r3, #10
 800492c:	d90d      	bls.n	800494a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2203      	movs	r2, #3
 8004942:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e18c      	b.n	8004c64 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d0e3      	beq.n	8004920 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004968:	f7fe f9a8 	bl	8002cbc <HAL_GetTick>
 800496c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800496e:	e014      	b.n	800499a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004970:	f7fe f9a4 	bl	8002cbc <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b0a      	cmp	r3, #10
 800497c:	d90d      	bls.n	800499a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004984:	f043 0201 	orr.w	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2203      	movs	r2, #3
 8004992:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e164      	b.n	8004c64 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0e3      	beq.n	8004970 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0202 	orr.w	r2, r2, #2
 80049b6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	7c1b      	ldrb	r3, [r3, #16]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d108      	bne.n	80049d2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ce:	619a      	str	r2, [r3, #24]
 80049d0:	e007      	b.n	80049e2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	7c5b      	ldrb	r3, [r3, #17]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d108      	bne.n	80049fc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699a      	ldr	r2, [r3, #24]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f8:	619a      	str	r2, [r3, #24]
 80049fa:	e007      	b.n	8004a0c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a0a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	7c9b      	ldrb	r3, [r3, #18]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d108      	bne.n	8004a26 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a22:	619a      	str	r2, [r3, #24]
 8004a24:	e007      	b.n	8004a36 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a34:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004a5a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0210 	bic.w	r2, r2, #16
 8004a6a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d108      	bne.n	8004a86 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0204 	orr.w	r2, r2, #4
 8004a82:	619a      	str	r2, [r3, #24]
 8004a84:	e030      	b.n	8004ae8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02c      	beq.n	8004ae8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d020      	beq.n	8004ad8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aa4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0210 	orr.w	r2, r2, #16
 8004ab4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d114      	bne.n	8004ae8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0220 	orr.w	r2, r2, #32
 8004acc:	619a      	str	r2, [r3, #24]
 8004ace:	e00b      	b.n	8004ae8 <HAL_FDCAN_Init+0x234>
 8004ad0:	0800d1ec 	.word	0x0800d1ec
 8004ad4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0220 	orr.w	r2, r2, #32
 8004ae6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004af8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b00:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b10:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b12:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1c:	d115      	bne.n	8004b4a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b2c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	3b01      	subs	r3, #1
 8004b34:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b36:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b46:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b48:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b70:	4413      	add	r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b7e:	f023 0107 	bic.w	r1, r3, #7
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	3360      	adds	r3, #96	; 0x60
 8004b8a:	443b      	add	r3, r7
 8004b8c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004baa:	f023 0107 	bic.w	r1, r3, #7
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	3360      	adds	r3, #96	; 0x60
 8004bb6:	443b      	add	r3, r7
 8004bb8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d012      	beq.n	8004bf4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004bd6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	3360      	adds	r3, #96	; 0x60
 8004be2:	443b      	add	r3, r7
 8004be4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004be8:	011a      	lsls	r2, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c04:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	3360      	adds	r3, #96	; 0x60
 8004c10:	443b      	add	r3, r7
 8004c12:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <HAL_FDCAN_Init+0x3b8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d107      	bne.n	8004c3c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f022 0203 	bic.w	r2, r2, #3
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f80b 	bl	8004c70 <FDCAN_CalcultateRamBlockAddresses>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004c60:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3760      	adds	r7, #96	; 0x60
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	4000a000 	.word	0x4000a000

08004c70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c86:	4ba7      	ldr	r3, [pc, #668]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	0091      	lsls	r1, r2, #2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	430b      	orrs	r3, r1
 8004c94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	041a      	lsls	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	4413      	add	r3, r2
 8004cbc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cc6:	4b97      	ldr	r3, [pc, #604]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	0091      	lsls	r1, r2, #2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	041a      	lsls	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004d08:	4b86      	ldr	r3, [pc, #536]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	0091      	lsls	r1, r2, #2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	430b      	orrs	r3, r1
 8004d16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	041a      	lsls	r2, r3, #16
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d50:	4b74      	ldr	r3, [pc, #464]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	0091      	lsls	r1, r2, #2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d72:	041a      	lsls	r2, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004d98:	4b62      	ldr	r3, [pc, #392]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	0091      	lsls	r1, r2, #2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	430b      	orrs	r3, r1
 8004da6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	4413      	add	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004dc4:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	0091      	lsls	r1, r2, #2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dde:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	041a      	lsls	r2, r3, #16
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004e06:	4b47      	ldr	r3, [pc, #284]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	0091      	lsls	r1, r2, #2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	430b      	orrs	r3, r1
 8004e14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e20:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e28:	041a      	lsls	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e3c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e44:	061a      	lsls	r2, r3, #24
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e54:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004e56:	4413      	add	r3, r2
 8004e58:	009a      	lsls	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	441a      	add	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d915      	bls.n	8004f4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004f20:	e006      	b.n	8004f30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004f22:	bf00      	nop
 8004f24:	ffff0003 	.word	0xffff0003
 8004f28:	10002b00 	.word	0x10002b00
 8004f2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2203      	movs	r2, #3
 8004f44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e010      	b.n	8004f6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e005      	b.n	8004f60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3f3      	bcc.n	8004f54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f8a:	4b89      	ldr	r3, [pc, #548]	; (80051b0 <HAL_GPIO_Init+0x234>)
 8004f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f8e:	e194      	b.n	80052ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	2101      	movs	r1, #1
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8186 	beq.w	80052b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d005      	beq.n	8004fc0 <HAL_GPIO_Init+0x44>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d130      	bne.n	8005022 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	2203      	movs	r2, #3
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 0201 	and.w	r2, r3, #1
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b03      	cmp	r3, #3
 800502c:	d017      	beq.n	800505e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	2203      	movs	r2, #3
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	43db      	mvns	r3, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4013      	ands	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d123      	bne.n	80050b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	08da      	lsrs	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3208      	adds	r2, #8
 8005072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	220f      	movs	r2, #15
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	08da      	lsrs	r2, r3, #3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3208      	adds	r2, #8
 80050ac:	69b9      	ldr	r1, [r7, #24]
 80050ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	2203      	movs	r2, #3
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4013      	ands	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0203 	and.w	r2, r3, #3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4313      	orrs	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 80e0 	beq.w	80052b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f4:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <HAL_GPIO_Init+0x238>)
 80050f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050fa:	4a2e      	ldr	r2, [pc, #184]	; (80051b4 <HAL_GPIO_Init+0x238>)
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005104:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <HAL_GPIO_Init+0x238>)
 8005106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005112:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <HAL_GPIO_Init+0x23c>)
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	3302      	adds	r3, #2
 800511a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	220f      	movs	r2, #15
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a20      	ldr	r2, [pc, #128]	; (80051bc <HAL_GPIO_Init+0x240>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d052      	beq.n	80051e4 <HAL_GPIO_Init+0x268>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <HAL_GPIO_Init+0x244>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d031      	beq.n	80051aa <HAL_GPIO_Init+0x22e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_GPIO_Init+0x248>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d02b      	beq.n	80051a6 <HAL_GPIO_Init+0x22a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_GPIO_Init+0x24c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d025      	beq.n	80051a2 <HAL_GPIO_Init+0x226>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <HAL_GPIO_Init+0x250>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01f      	beq.n	800519e <HAL_GPIO_Init+0x222>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <HAL_GPIO_Init+0x254>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d019      	beq.n	800519a <HAL_GPIO_Init+0x21e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <HAL_GPIO_Init+0x258>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_GPIO_Init+0x21a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <HAL_GPIO_Init+0x25c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00d      	beq.n	8005192 <HAL_GPIO_Init+0x216>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a18      	ldr	r2, [pc, #96]	; (80051dc <HAL_GPIO_Init+0x260>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d007      	beq.n	800518e <HAL_GPIO_Init+0x212>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <HAL_GPIO_Init+0x264>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d101      	bne.n	800518a <HAL_GPIO_Init+0x20e>
 8005186:	2309      	movs	r3, #9
 8005188:	e02d      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 800518a:	230a      	movs	r3, #10
 800518c:	e02b      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 800518e:	2308      	movs	r3, #8
 8005190:	e029      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 8005192:	2307      	movs	r3, #7
 8005194:	e027      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 8005196:	2306      	movs	r3, #6
 8005198:	e025      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 800519a:	2305      	movs	r3, #5
 800519c:	e023      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 800519e:	2304      	movs	r3, #4
 80051a0:	e021      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 80051a2:	2303      	movs	r3, #3
 80051a4:	e01f      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e01d      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e01b      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 80051ae:	bf00      	nop
 80051b0:	58000080 	.word	0x58000080
 80051b4:	58024400 	.word	0x58024400
 80051b8:	58000400 	.word	0x58000400
 80051bc:	58020000 	.word	0x58020000
 80051c0:	58020400 	.word	0x58020400
 80051c4:	58020800 	.word	0x58020800
 80051c8:	58020c00 	.word	0x58020c00
 80051cc:	58021000 	.word	0x58021000
 80051d0:	58021400 	.word	0x58021400
 80051d4:	58021800 	.word	0x58021800
 80051d8:	58021c00 	.word	0x58021c00
 80051dc:	58022000 	.word	0x58022000
 80051e0:	58022400 	.word	0x58022400
 80051e4:	2300      	movs	r3, #0
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	f002 0203 	and.w	r2, r2, #3
 80051ec:	0092      	lsls	r2, r2, #2
 80051ee:	4093      	lsls	r3, r2
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051f6:	4938      	ldr	r1, [pc, #224]	; (80052d8 <HAL_GPIO_Init+0x35c>)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	3302      	adds	r3, #2
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800522a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	43db      	mvns	r3, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f47f ae63 	bne.w	8004f90 <HAL_GPIO_Init+0x14>
  }
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	3724      	adds	r7, #36	; 0x24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	58000400 	.word	0x58000400

080052dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	887b      	ldrh	r3, [r7, #2]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e001      	b.n	80052fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	807b      	strh	r3, [r7, #2]
 8005318:	4613      	mov	r3, r2
 800531a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800531c:	787b      	ldrb	r3, [r7, #1]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005322:	887a      	ldrh	r2, [r7, #2]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005328:	e003      	b.n	8005332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800532a:	887b      	ldrh	r3, [r7, #2]
 800532c:	041a      	lsls	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	619a      	str	r2, [r3, #24]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005350:	887a      	ldrh	r2, [r7, #2]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4013      	ands	r3, r2
 8005356:	041a      	lsls	r2, r3, #16
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	43d9      	mvns	r1, r3
 800535c:	887b      	ldrh	r3, [r7, #2]
 800535e:	400b      	ands	r3, r1
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	619a      	str	r2, [r3, #24]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
	...

08005374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07f      	b.n	8005486 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fc fd86 	bl	8001eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2224      	movs	r2, #36	; 0x24
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d107      	bne.n	80053ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	e006      	b.n	80053fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d104      	bne.n	800540e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800540c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <HAL_I2C_Init+0x11c>)
 800541a:	430b      	orrs	r3, r1
 800541c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800542c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69d9      	ldr	r1, [r3, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	02008000 	.word	0x02008000

08005494 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	817b      	strh	r3, [r7, #10]
 80054a6:	460b      	mov	r3, r1
 80054a8:	813b      	strh	r3, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	f040 80fd 	bne.w	80056b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_I2C_Mem_Read+0x34>
 80054c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0f1      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_I2C_Mem_Read+0x4e>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0ea      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054ea:	f7fd fbe7 	bl	8002cbc <HAL_GetTick>
 80054ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2319      	movs	r3, #25
 80054f6:	2201      	movs	r2, #1
 80054f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fa63 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0d5      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2222      	movs	r2, #34	; 0x22
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2240      	movs	r2, #64	; 0x40
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800552c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005534:	88f8      	ldrh	r0, [r7, #6]
 8005536:	893a      	ldrh	r2, [r7, #8]
 8005538:	8979      	ldrh	r1, [r7, #10]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	4603      	mov	r3, r0
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f9c7 	bl	80058d8 <I2C_RequestMemoryRead>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0ad      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	2bff      	cmp	r3, #255	; 0xff
 8005564:	d90e      	bls.n	8005584 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	22ff      	movs	r2, #255	; 0xff
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005570:	b2da      	uxtb	r2, r3
 8005572:	8979      	ldrh	r1, [r7, #10]
 8005574:	4b52      	ldr	r3, [pc, #328]	; (80056c0 <HAL_I2C_Mem_Read+0x22c>)
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fbdd 	bl	8005d3c <I2C_TransferConfig>
 8005582:	e00f      	b.n	80055a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005592:	b2da      	uxtb	r2, r3
 8005594:	8979      	ldrh	r1, [r7, #10]
 8005596:	4b4a      	ldr	r3, [pc, #296]	; (80056c0 <HAL_I2C_Mem_Read+0x22c>)
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 fbcc 	bl	8005d3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	2200      	movs	r2, #0
 80055ac:	2104      	movs	r1, #4
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fa0a 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e07c      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d034      	beq.n	8005664 <HAL_I2C_Mem_Read+0x1d0>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d130      	bne.n	8005664 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	2200      	movs	r2, #0
 800560a:	2180      	movs	r1, #128	; 0x80
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f9db 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e04d      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	2bff      	cmp	r3, #255	; 0xff
 8005624:	d90e      	bls.n	8005644 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	22ff      	movs	r2, #255	; 0xff
 800562a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005630:	b2da      	uxtb	r2, r3
 8005632:	8979      	ldrh	r1, [r7, #10]
 8005634:	2300      	movs	r3, #0
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fb7d 	bl	8005d3c <I2C_TransferConfig>
 8005642:	e00f      	b.n	8005664 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005652:	b2da      	uxtb	r2, r3
 8005654:	8979      	ldrh	r1, [r7, #10]
 8005656:	2300      	movs	r3, #0
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fb6c 	bl	8005d3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d19a      	bne.n	80055a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 fa3e 	bl	8005af4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e01a      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2220      	movs	r2, #32
 8005688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6859      	ldr	r1, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_I2C_Mem_Read+0x230>)
 8005696:	400b      	ands	r3, r1
 8005698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	80002400 	.word	0x80002400
 80056c4:	fe00e800 	.word	0xfe00e800

080056c8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	; 0x28
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	460b      	mov	r3, r1
 80056d6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	f040 80ef 	bne.w	80058c8 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f8:	d101      	bne.n	80056fe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
 80056fc:	e0e5      	b.n	80058ca <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_I2C_IsDeviceReady+0x44>
 8005708:	2302      	movs	r3, #2
 800570a:	e0de      	b.n	80058ca <HAL_I2C_IsDeviceReady+0x202>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2224      	movs	r2, #36	; 0x24
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d105      	bne.n	8005736 <HAL_I2C_IsDeviceReady+0x6e>
 800572a:	897b      	ldrh	r3, [r7, #10]
 800572c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005730:	4b68      	ldr	r3, [pc, #416]	; (80058d4 <HAL_I2C_IsDeviceReady+0x20c>)
 8005732:	4313      	orrs	r3, r2
 8005734:	e004      	b.n	8005740 <HAL_I2C_IsDeviceReady+0x78>
 8005736:	897b      	ldrh	r3, [r7, #10]
 8005738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800573c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005746:	f7fd fab9 	bl	8002cbc <HAL_GetTick>
 800574a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b20      	cmp	r3, #32
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b10      	cmp	r3, #16
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005778:	e034      	b.n	80057e4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d01a      	beq.n	80057b8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005782:	f7fd fa9b 	bl	8002cbc <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <HAL_I2C_IsDeviceReady+0xd0>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10f      	bne.n	80057b8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e088      	b.n	80058ca <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b10      	cmp	r3, #16
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80057e4:	7ffb      	ldrb	r3, [r7, #31]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <HAL_I2C_IsDeviceReady+0x128>
 80057ea:	7fbb      	ldrb	r3, [r7, #30]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0c4      	beq.n	800577a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d01a      	beq.n	8005834 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2200      	movs	r2, #0
 8005806:	2120      	movs	r1, #32
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f8dd 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e058      	b.n	80058ca <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2220      	movs	r2, #32
 800581e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	e04a      	b.n	80058ca <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	2120      	movs	r1, #32
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f8c2 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e03d      	b.n	80058ca <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2210      	movs	r2, #16
 8005854:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2220      	movs	r2, #32
 800585c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d118      	bne.n	8005898 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005874:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2200      	movs	r2, #0
 800587e:	2120      	movs	r1, #32
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f8a1 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e01c      	b.n	80058ca <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2220      	movs	r2, #32
 8005896:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	3301      	adds	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	f63f af3d 	bhi.w	8005722 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
  }
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	02002000 	.word	0x02002000

080058d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	817b      	strh	r3, [r7, #10]
 80058ea:	460b      	mov	r3, r1
 80058ec:	813b      	strh	r3, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	8979      	ldrh	r1, [r7, #10]
 80058f8:	4b20      	ldr	r3, [pc, #128]	; (800597c <I2C_RequestMemoryRead+0xa4>)
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2300      	movs	r3, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fa1c 	bl	8005d3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	69b9      	ldr	r1, [r7, #24]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f8ac 	bl	8005a66 <I2C_WaitOnTXISFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e02c      	b.n	8005972 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d105      	bne.n	800592a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800591e:	893b      	ldrh	r3, [r7, #8]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
 8005928:	e015      	b.n	8005956 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800592a:	893b      	ldrh	r3, [r7, #8]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	b29b      	uxth	r3, r3
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	69b9      	ldr	r1, [r7, #24]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f892 	bl	8005a66 <I2C_WaitOnTXISFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e012      	b.n	8005972 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800594c:	893b      	ldrh	r3, [r7, #8]
 800594e:	b2da      	uxtb	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2200      	movs	r2, #0
 800595e:	2140      	movs	r1, #64	; 0x40
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f831 	bl	80059c8 <I2C_WaitOnFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	80002000 	.word	0x80002000

08005980 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b02      	cmp	r3, #2
 8005994:	d103      	bne.n	800599e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d007      	beq.n	80059bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	619a      	str	r2, [r3, #24]
  }
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059d8:	e031      	b.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d02d      	beq.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7fd f96b 	bl	8002cbc <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d122      	bne.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4013      	ands	r3, r2
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d113      	bne.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e00f      	b.n	8005a5e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699a      	ldr	r2, [r3, #24]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4013      	ands	r3, r2
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	bf0c      	ite	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	2300      	movne	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d0be      	beq.n	80059da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a72:	e033      	b.n	8005adc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f87f 	bl	8005b7c <I2C_IsErrorOccurred>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e031      	b.n	8005aec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d025      	beq.n	8005adc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a90:	f7fd f914 	bl	8002cbc <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d302      	bcc.n	8005aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d11a      	bne.n	8005adc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d013      	beq.n	8005adc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab8:	f043 0220 	orr.w	r2, r3, #32
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e007      	b.n	8005aec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d1c4      	bne.n	8005a74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b00:	e02f      	b.n	8005b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f838 	bl	8005b7c <I2C_IsErrorOccurred>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e02d      	b.n	8005b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b16:	f7fd f8d1 	bl	8002cbc <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d302      	bcc.n	8005b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d11a      	bne.n	8005b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d013      	beq.n	8005b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	f043 0220 	orr.w	r2, r3, #32
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e007      	b.n	8005b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d1c8      	bne.n	8005b02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	; 0x28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d068      	beq.n	8005c7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2210      	movs	r2, #16
 8005bae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bb0:	e049      	b.n	8005c46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d045      	beq.n	8005c46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bba:	f7fd f87f 	bl	8002cbc <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d302      	bcc.n	8005bd0 <I2C_IsErrorOccurred+0x54>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d13a      	bne.n	8005c46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005be2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf2:	d121      	bne.n	8005c38 <I2C_IsErrorOccurred+0xbc>
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bfa:	d01d      	beq.n	8005c38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005bfc:	7cfb      	ldrb	r3, [r7, #19]
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d01a      	beq.n	8005c38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c12:	f7fd f853 	bl	8002cbc <HAL_GetTick>
 8005c16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c18:	e00e      	b.n	8005c38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c1a:	f7fd f84f 	bl	8002cbc <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b19      	cmp	r3, #25
 8005c26:	d907      	bls.n	8005c38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	f043 0320 	orr.w	r3, r3, #32
 8005c2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005c36:	e006      	b.n	8005c46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d1e9      	bne.n	8005c1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d003      	beq.n	8005c5c <I2C_IsErrorOccurred+0xe0>
 8005c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0aa      	beq.n	8005bb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	f043 0304 	orr.w	r3, r3, #4
 8005c72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	f043 0308 	orr.w	r3, r3, #8
 8005cb4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00b      	beq.n	8005ce8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	f043 0302 	orr.w	r3, r3, #2
 8005cd6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01c      	beq.n	8005d2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff fe45 	bl	8005980 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6859      	ldr	r1, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <I2C_IsErrorOccurred+0x1bc>)
 8005d02:	400b      	ands	r3, r1
 8005d04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3728      	adds	r7, #40	; 0x28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	fe00e800 	.word	0xfe00e800

08005d3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	817b      	strh	r3, [r7, #10]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d4e:	897b      	ldrh	r3, [r7, #10]
 8005d50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d54:	7a7b      	ldrb	r3, [r7, #9]
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	0d5b      	lsrs	r3, r3, #21
 8005d76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <I2C_TransferConfig+0x60>)
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	ea02 0103 	and.w	r1, r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	03ff63ff 	.word	0x03ff63ff

08005da0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d138      	bne.n	8005e28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e032      	b.n	8005e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2224      	movs	r2, #36	; 0x24
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005df2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6819      	ldr	r1, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	e000      	b.n	8005e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
  }
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d139      	bne.n	8005ec0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e033      	b.n	8005ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2224      	movs	r2, #36	; 0x24
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0201 	bic.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e000      	b.n	8005ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ec0:	2302      	movs	r3, #2
  }
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e0bf      	b.n	8006062 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fc f842 	bl	8001f80 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f12:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6999      	ldr	r1, [r3, #24]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f28:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6899      	ldr	r1, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b4a      	ldr	r3, [pc, #296]	; (800606c <HAL_LTDC_Init+0x19c>)
 8005f44:	400b      	ands	r3, r1
 8005f46:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6899      	ldr	r1, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68d9      	ldr	r1, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b3e      	ldr	r3, [pc, #248]	; (800606c <HAL_LTDC_Init+0x19c>)
 8005f72:	400b      	ands	r3, r1
 8005f74:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68d9      	ldr	r1, [r3, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1a      	ldr	r2, [r3, #32]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6919      	ldr	r1, [r3, #16]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b33      	ldr	r3, [pc, #204]	; (800606c <HAL_LTDC_Init+0x19c>)
 8005fa0:	400b      	ands	r3, r1
 8005fa2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6919      	ldr	r1, [r3, #16]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6959      	ldr	r1, [r3, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b27      	ldr	r3, [pc, #156]	; (800606c <HAL_LTDC_Init+0x19c>)
 8005fce:	400b      	ands	r3, r1
 8005fd0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	041b      	lsls	r3, r3, #16
 8005fd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6959      	ldr	r1, [r3, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006012:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0206 	orr.w	r2, r2, #6
 800603e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	f000f800 	.word	0xf000f800

08006070 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006070:	b5b0      	push	{r4, r5, r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_LTDC_ConfigLayer+0x1a>
 8006086:	2302      	movs	r3, #2
 8006088:	e02c      	b.n	80060e4 <HAL_LTDC_ConfigLayer+0x74>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2134      	movs	r1, #52	; 0x34
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	4413      	add	r3, r2
 80060a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f811 	bl	80060ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2201      	movs	r2, #1
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bdb0      	pop	{r4, r5, r7, pc}

080060ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b089      	sub	sp, #36	; 0x24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	0c1b      	lsrs	r3, r3, #16
 8006104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006108:	4413      	add	r3, r2
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	01db      	lsls	r3, r3, #7
 8006118:	4413      	add	r3, r2
 800611a:	3384      	adds	r3, #132	; 0x84
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	4611      	mov	r1, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	01d2      	lsls	r2, r2, #7
 8006128:	440a      	add	r2, r1
 800612a:	3284      	adds	r2, #132	; 0x84
 800612c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006130:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	0c1b      	lsrs	r3, r3, #16
 800613e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006142:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006144:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4619      	mov	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	01db      	lsls	r3, r3, #7
 8006150:	440b      	add	r3, r1
 8006152:	3384      	adds	r3, #132	; 0x84
 8006154:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800615a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800616a:	4413      	add	r3, r2
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	01db      	lsls	r3, r3, #7
 800617a:	4413      	add	r3, r2
 800617c:	3384      	adds	r3, #132	; 0x84
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	4611      	mov	r1, r2
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	01d2      	lsls	r2, r2, #7
 800618a:	440a      	add	r2, r1
 800618c:	3284      	adds	r2, #132	; 0x84
 800618e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006192:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a2:	4413      	add	r3, r2
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4619      	mov	r1, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	01db      	lsls	r3, r3, #7
 80061b0:	440b      	add	r3, r1
 80061b2:	3384      	adds	r3, #132	; 0x84
 80061b4:	4619      	mov	r1, r3
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	01db      	lsls	r3, r3, #7
 80061c6:	4413      	add	r3, r2
 80061c8:	3384      	adds	r3, #132	; 0x84
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	4611      	mov	r1, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	01d2      	lsls	r2, r2, #7
 80061d6:	440a      	add	r2, r1
 80061d8:	3284      	adds	r2, #132	; 0x84
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	01db      	lsls	r3, r3, #7
 80061ea:	4413      	add	r3, r2
 80061ec:	3384      	adds	r3, #132	; 0x84
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	061b      	lsls	r3, r3, #24
 8006210:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	01db      	lsls	r3, r3, #7
 800621c:	4413      	add	r3, r2
 800621e:	3384      	adds	r3, #132	; 0x84
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	01db      	lsls	r3, r3, #7
 800622c:	4413      	add	r3, r2
 800622e:	3384      	adds	r3, #132	; 0x84
 8006230:	461a      	mov	r2, r3
 8006232:	2300      	movs	r3, #0
 8006234:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800623c:	461a      	mov	r2, r3
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	431a      	orrs	r2, r3
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	431a      	orrs	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4619      	mov	r1, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	01db      	lsls	r3, r3, #7
 8006250:	440b      	add	r3, r1
 8006252:	3384      	adds	r3, #132	; 0x84
 8006254:	4619      	mov	r1, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	01db      	lsls	r3, r3, #7
 8006266:	4413      	add	r3, r2
 8006268:	3384      	adds	r3, #132	; 0x84
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	4611      	mov	r1, r2
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	01d2      	lsls	r2, r2, #7
 8006276:	440a      	add	r2, r1
 8006278:	3284      	adds	r2, #132	; 0x84
 800627a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800627e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	01db      	lsls	r3, r3, #7
 800628a:	4413      	add	r3, r2
 800628c:	3384      	adds	r3, #132	; 0x84
 800628e:	461a      	mov	r2, r3
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	01db      	lsls	r3, r3, #7
 80062a0:	4413      	add	r3, r2
 80062a2:	3384      	adds	r3, #132	; 0x84
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4619      	mov	r1, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	01db      	lsls	r3, r3, #7
 80062b0:	440b      	add	r3, r1
 80062b2:	3384      	adds	r3, #132	; 0x84
 80062b4:	4619      	mov	r1, r3
 80062b6:	4b58      	ldr	r3, [pc, #352]	; (8006418 <LTDC_SetConfig+0x32c>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	6809      	ldr	r1, [r1, #0]
 80062c8:	4608      	mov	r0, r1
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	01c9      	lsls	r1, r1, #7
 80062ce:	4401      	add	r1, r0
 80062d0:	3184      	adds	r1, #132	; 0x84
 80062d2:	4313      	orrs	r3, r2
 80062d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	01db      	lsls	r3, r3, #7
 80062e0:	4413      	add	r3, r2
 80062e2:	3384      	adds	r3, #132	; 0x84
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	01db      	lsls	r3, r3, #7
 80062f0:	4413      	add	r3, r2
 80062f2:	3384      	adds	r3, #132	; 0x84
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	01db      	lsls	r3, r3, #7
 8006304:	4413      	add	r3, r2
 8006306:	3384      	adds	r3, #132	; 0x84
 8006308:	461a      	mov	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006318:	2304      	movs	r3, #4
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	e01b      	b.n	8006356 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d102      	bne.n	800632c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006326:	2303      	movs	r3, #3
 8006328:	61fb      	str	r3, [r7, #28]
 800632a:	e014      	b.n	8006356 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2b04      	cmp	r3, #4
 8006332:	d00b      	beq.n	800634c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006338:	2b02      	cmp	r3, #2
 800633a:	d007      	beq.n	800634c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006340:	2b03      	cmp	r3, #3
 8006342:	d003      	beq.n	800634c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006348:	2b07      	cmp	r3, #7
 800634a:	d102      	bne.n	8006352 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800634c:	2302      	movs	r3, #2
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e001      	b.n	8006356 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006352:	2301      	movs	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	01db      	lsls	r3, r3, #7
 8006360:	4413      	add	r3, r2
 8006362:	3384      	adds	r3, #132	; 0x84
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	4611      	mov	r1, r2
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	01d2      	lsls	r2, r2, #7
 8006370:	440a      	add	r2, r1
 8006372:	3284      	adds	r2, #132	; 0x84
 8006374:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006378:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	fb02 f303 	mul.w	r3, r2, r3
 8006384:	041a      	lsls	r2, r3, #16
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6859      	ldr	r1, [r3, #4]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	1acb      	subs	r3, r1, r3
 8006390:	69f9      	ldr	r1, [r7, #28]
 8006392:	fb01 f303 	mul.w	r3, r1, r3
 8006396:	3307      	adds	r3, #7
 8006398:	68f9      	ldr	r1, [r7, #12]
 800639a:	6809      	ldr	r1, [r1, #0]
 800639c:	4608      	mov	r0, r1
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	01c9      	lsls	r1, r1, #7
 80063a2:	4401      	add	r1, r0
 80063a4:	3184      	adds	r1, #132	; 0x84
 80063a6:	4313      	orrs	r3, r2
 80063a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	01db      	lsls	r3, r3, #7
 80063b4:	4413      	add	r3, r2
 80063b6:	3384      	adds	r3, #132	; 0x84
 80063b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4619      	mov	r1, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	01db      	lsls	r3, r3, #7
 80063c4:	440b      	add	r3, r1
 80063c6:	3384      	adds	r3, #132	; 0x84
 80063c8:	4619      	mov	r1, r3
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <LTDC_SetConfig+0x330>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	01db      	lsls	r3, r3, #7
 80063da:	4413      	add	r3, r2
 80063dc:	3384      	adds	r3, #132	; 0x84
 80063de:	461a      	mov	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	01db      	lsls	r3, r3, #7
 80063f0:	4413      	add	r3, r2
 80063f2:	3384      	adds	r3, #132	; 0x84
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	4611      	mov	r1, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	01d2      	lsls	r2, r2, #7
 8006400:	440a      	add	r2, r1
 8006402:	3284      	adds	r2, #132	; 0x84
 8006404:	f043 0301 	orr.w	r3, r3, #1
 8006408:	6013      	str	r3, [r2, #0]
}
 800640a:	bf00      	nop
 800640c:	3724      	adds	r7, #36	; 0x24
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	fffff8f8 	.word	0xfffff8f8
 800641c:	fffff800 	.word	0xfffff800

08006420 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006422:	b08f      	sub	sp, #60	; 0x3c
 8006424:	af0a      	add	r7, sp, #40	; 0x28
 8006426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e116      	b.n	8006660 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7fc f8b7 	bl	80025c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2203      	movs	r2, #3
 8006456:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006462:	2b00      	cmp	r3, #0
 8006464:	d102      	bne.n	800646c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f005 ff15 	bl	800c2a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	687e      	ldr	r6, [r7, #4]
 800647e:	466d      	mov	r5, sp
 8006480:	f106 0410 	add.w	r4, r6, #16
 8006484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800648a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800648c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006490:	e885 0003 	stmia.w	r5, {r0, r1}
 8006494:	1d33      	adds	r3, r6, #4
 8006496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006498:	6838      	ldr	r0, [r7, #0]
 800649a:	f005 fe93 	bl	800c1c4 <USB_CoreInit>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0d7      	b.n	8006660 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f005 ff03 	bl	800c2c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
 80064c0:	e04a      	b.n	8006558 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064c2:	7bfa      	ldrb	r2, [r7, #15]
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	333d      	adds	r3, #61	; 0x3d
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064d6:	7bfa      	ldrb	r2, [r7, #15]
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	4613      	mov	r3, r2
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	333c      	adds	r3, #60	; 0x3c
 80064e6:	7bfa      	ldrb	r2, [r7, #15]
 80064e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80064ea:	7bfa      	ldrb	r2, [r7, #15]
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	b298      	uxth	r0, r3
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	3356      	adds	r3, #86	; 0x56
 80064fe:	4602      	mov	r2, r0
 8006500:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006502:	7bfa      	ldrb	r2, [r7, #15]
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	3340      	adds	r3, #64	; 0x40
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006516:	7bfa      	ldrb	r2, [r7, #15]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	3344      	adds	r3, #68	; 0x44
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800652a:	7bfa      	ldrb	r2, [r7, #15]
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	3348      	adds	r3, #72	; 0x48
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800653e:	7bfa      	ldrb	r2, [r7, #15]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	334c      	adds	r3, #76	; 0x4c
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	3301      	adds	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
 8006558:	7bfa      	ldrb	r2, [r7, #15]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	429a      	cmp	r2, r3
 8006560:	d3af      	bcc.n	80064c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
 8006566:	e044      	b.n	80065f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006568:	7bfa      	ldrb	r2, [r7, #15]
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	440b      	add	r3, r1
 8006576:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800657a:	2200      	movs	r2, #0
 800657c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800657e:	7bfa      	ldrb	r2, [r7, #15]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006590:	7bfa      	ldrb	r2, [r7, #15]
 8006592:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006594:	7bfa      	ldrb	r2, [r7, #15]
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	4613      	mov	r3, r2
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065aa:	7bfa      	ldrb	r2, [r7, #15]
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065c0:	7bfa      	ldrb	r2, [r7, #15]
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4613      	mov	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065d6:	7bfa      	ldrb	r2, [r7, #15]
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	4613      	mov	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	3301      	adds	r3, #1
 80065f0:	73fb      	strb	r3, [r7, #15]
 80065f2:	7bfa      	ldrb	r2, [r7, #15]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d3b5      	bcc.n	8006568 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	603b      	str	r3, [r7, #0]
 8006602:	687e      	ldr	r6, [r7, #4]
 8006604:	466d      	mov	r5, sp
 8006606:	f106 0410 	add.w	r4, r6, #16
 800660a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800660c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800660e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006612:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006616:	e885 0003 	stmia.w	r5, {r0, r1}
 800661a:	1d33      	adds	r3, r6, #4
 800661c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800661e:	6838      	ldr	r0, [r7, #0]
 8006620:	f005 fe9c 	bl	800c35c <USB_DevInit>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e014      	b.n	8006660 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	2b01      	cmp	r3, #1
 800664c:	d102      	bne.n	8006654 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f80a 	bl	8006668 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f006 f85a 	bl	800c712 <USB_DevDisconnect>

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006668 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_PCDEx_ActivateLPM+0x44>)
 8006698:	4313      	orrs	r3, r2
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	10000003 	.word	0x10000003

080066b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80066b8:	4b19      	ldr	r3, [pc, #100]	; (8006720 <HAL_PWREx_ConfigSupply+0x70>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d00a      	beq.n	80066da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066c4:	4b16      	ldr	r3, [pc, #88]	; (8006720 <HAL_PWREx_ConfigSupply+0x70>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d001      	beq.n	80066d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e01f      	b.n	8006716 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e01d      	b.n	8006716 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066da:	4b11      	ldr	r3, [pc, #68]	; (8006720 <HAL_PWREx_ConfigSupply+0x70>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f023 0207 	bic.w	r2, r3, #7
 80066e2:	490f      	ldr	r1, [pc, #60]	; (8006720 <HAL_PWREx_ConfigSupply+0x70>)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066ea:	f7fc fae7 	bl	8002cbc <HAL_GetTick>
 80066ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066f0:	e009      	b.n	8006706 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066f2:	f7fc fae3 	bl	8002cbc <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006700:	d901      	bls.n	8006706 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e007      	b.n	8006716 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006706:	4b06      	ldr	r3, [pc, #24]	; (8006720 <HAL_PWREx_ConfigSupply+0x70>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800670e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006712:	d1ee      	bne.n	80066f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	58024800 	.word	0x58024800

08006724 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	4a04      	ldr	r2, [pc, #16]	; (8006740 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800672e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006732:	60d3      	str	r3, [r2, #12]
}
 8006734:	bf00      	nop
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	58024800 	.word	0x58024800

08006744 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af02      	add	r7, sp, #8
 800674a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800674c:	f7fc fab6 	bl	8002cbc <HAL_GetTick>
 8006750:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e05f      	b.n	800681c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d107      	bne.n	8006778 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fb fcf7 	bl	800215c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800676e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f85a 	bl	800682c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	3b01      	subs	r3, #1
 8006788:	021a      	lsls	r2, r3, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	2120      	movs	r1, #32
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f852 	bl	8006848 <QSPI_WaitFlagStateUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d135      	bne.n	800681a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <HAL_QSPI_Init+0xe0>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6852      	ldr	r2, [r2, #4]
 80067bc:	0611      	lsls	r1, r2, #24
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	68d2      	ldr	r2, [r2, #12]
 80067c2:	4311      	orrs	r1, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	69d2      	ldr	r2, [r2, #28]
 80067c8:	4311      	orrs	r1, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6a12      	ldr	r2, [r2, #32]
 80067ce:	4311      	orrs	r1, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	430b      	orrs	r3, r1
 80067d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_QSPI_Init+0xe4>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6912      	ldr	r2, [r2, #16]
 80067e6:	0411      	lsls	r1, r2, #16
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6952      	ldr	r2, [r2, #20]
 80067ec:	4311      	orrs	r1, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6992      	ldr	r2, [r2, #24]
 80067f2:	4311      	orrs	r1, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800681a:	7afb      	ldrb	r3, [r7, #11]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	00ffff2f 	.word	0x00ffff2f
 8006828:	ffe0f8fe 	.word	0xffe0f8fe

0800682c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006858:	e01a      	b.n	8006890 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d016      	beq.n	8006890 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fc fa2b 	bl	8002cbc <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10b      	bne.n	8006890 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2204      	movs	r2, #4
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	f043 0201 	orr.w	r2, r3, #1
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e00e      	b.n	80068ae <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4013      	ands	r3, r2
 800689a:	2b00      	cmp	r3, #0
 800689c:	bf14      	ite	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	2300      	moveq	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d1d6      	bne.n	800685a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08c      	sub	sp, #48	; 0x30
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f000 bc48 	b.w	800715c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8088 	beq.w	80069ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068da:	4b99      	ldr	r3, [pc, #612]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068e4:	4b96      	ldr	r3, [pc, #600]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d007      	beq.n	8006900 <HAL_RCC_OscConfig+0x48>
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	2b18      	cmp	r3, #24
 80068f4:	d111      	bne.n	800691a <HAL_RCC_OscConfig+0x62>
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	f003 0303 	and.w	r3, r3, #3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d10c      	bne.n	800691a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006900:	4b8f      	ldr	r3, [pc, #572]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d06d      	beq.n	80069e8 <HAL_RCC_OscConfig+0x130>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d169      	bne.n	80069e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f000 bc21 	b.w	800715c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006922:	d106      	bne.n	8006932 <HAL_RCC_OscConfig+0x7a>
 8006924:	4b86      	ldr	r3, [pc, #536]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a85      	ldr	r2, [pc, #532]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 800692a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	e02e      	b.n	8006990 <HAL_RCC_OscConfig+0xd8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10c      	bne.n	8006954 <HAL_RCC_OscConfig+0x9c>
 800693a:	4b81      	ldr	r3, [pc, #516]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a80      	ldr	r2, [pc, #512]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	4b7e      	ldr	r3, [pc, #504]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a7d      	ldr	r2, [pc, #500]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 800694c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e01d      	b.n	8006990 <HAL_RCC_OscConfig+0xd8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0xc0>
 800695e:	4b78      	ldr	r3, [pc, #480]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a77      	ldr	r2, [pc, #476]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	4b75      	ldr	r3, [pc, #468]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a74      	ldr	r2, [pc, #464]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	e00b      	b.n	8006990 <HAL_RCC_OscConfig+0xd8>
 8006978:	4b71      	ldr	r3, [pc, #452]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a70      	ldr	r2, [pc, #448]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 800697e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	4b6e      	ldr	r3, [pc, #440]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a6d      	ldr	r2, [pc, #436]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 800698a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d013      	beq.n	80069c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fc f990 	bl	8002cbc <HAL_GetTick>
 800699c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a0:	f7fc f98c 	bl	8002cbc <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b64      	cmp	r3, #100	; 0x64
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e3d4      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069b2:	4b63      	ldr	r3, [pc, #396]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0xe8>
 80069be:	e014      	b.n	80069ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fc f97c 	bl	8002cbc <HAL_GetTick>
 80069c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c8:	f7fc f978 	bl	8002cbc <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	; 0x64
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e3c0      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069da:	4b59      	ldr	r3, [pc, #356]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x110>
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 80ca 	beq.w	8006b8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069f8:	4b51      	ldr	r3, [pc, #324]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a02:	4b4f      	ldr	r3, [pc, #316]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <HAL_RCC_OscConfig+0x166>
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	2b18      	cmp	r3, #24
 8006a12:	d156      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x20a>
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d151      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a1e:	4b48      	ldr	r3, [pc, #288]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <HAL_RCC_OscConfig+0x17e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e392      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a36:	4b42      	ldr	r3, [pc, #264]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f023 0219 	bic.w	r2, r3, #25
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	493f      	ldr	r1, [pc, #252]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fc f938 	bl	8002cbc <HAL_GetTick>
 8006a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a50:	f7fc f934 	bl	8002cbc <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e37c      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a62:	4b37      	ldr	r3, [pc, #220]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0f0      	beq.n	8006a50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a6e:	f7fc f955 	bl	8002d1c <HAL_GetREVID>
 8006a72:	4603      	mov	r3, r0
 8006a74:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d817      	bhi.n	8006aac <HAL_RCC_OscConfig+0x1f4>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d108      	bne.n	8006a96 <HAL_RCC_OscConfig+0x1de>
 8006a84:	4b2e      	ldr	r3, [pc, #184]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a8c:	4a2c      	ldr	r2, [pc, #176]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a94:	e07a      	b.n	8006b8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a96:	4b2a      	ldr	r3, [pc, #168]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	031b      	lsls	r3, r3, #12
 8006aa4:	4926      	ldr	r1, [pc, #152]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aaa:	e06f      	b.n	8006b8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aac:	4b24      	ldr	r3, [pc, #144]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	061b      	lsls	r3, r3, #24
 8006aba:	4921      	ldr	r1, [pc, #132]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ac0:	e064      	b.n	8006b8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d047      	beq.n	8006b5a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aca:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f023 0219 	bic.w	r2, r3, #25
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	491a      	ldr	r1, [pc, #104]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006adc:	f7fc f8ee 	bl	8002cbc <HAL_GetTick>
 8006ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae4:	f7fc f8ea 	bl	8002cbc <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e332      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006af6:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b02:	f7fc f90b 	bl	8002d1c <HAL_GetREVID>
 8006b06:	4603      	mov	r3, r0
 8006b08:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d819      	bhi.n	8006b44 <HAL_RCC_OscConfig+0x28c>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	d108      	bne.n	8006b2a <HAL_RCC_OscConfig+0x272>
 8006b18:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b20:	4a07      	ldr	r2, [pc, #28]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b26:	6053      	str	r3, [r2, #4]
 8006b28:	e030      	b.n	8006b8c <HAL_RCC_OscConfig+0x2d4>
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	031b      	lsls	r3, r3, #12
 8006b38:	4901      	ldr	r1, [pc, #4]	; (8006b40 <HAL_RCC_OscConfig+0x288>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	604b      	str	r3, [r1, #4]
 8006b3e:	e025      	b.n	8006b8c <HAL_RCC_OscConfig+0x2d4>
 8006b40:	58024400 	.word	0x58024400
 8006b44:	4b9a      	ldr	r3, [pc, #616]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	061b      	lsls	r3, r3, #24
 8006b52:	4997      	ldr	r1, [pc, #604]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	604b      	str	r3, [r1, #4]
 8006b58:	e018      	b.n	8006b8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b5a:	4b95      	ldr	r3, [pc, #596]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a94      	ldr	r2, [pc, #592]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006b60:	f023 0301 	bic.w	r3, r3, #1
 8006b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b66:	f7fc f8a9 	bl	8002cbc <HAL_GetTick>
 8006b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b6e:	f7fc f8a5 	bl	8002cbc <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e2ed      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b80:	4b8b      	ldr	r3, [pc, #556]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f0      	bne.n	8006b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 80a9 	beq.w	8006cec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b9a:	4b85      	ldr	r3, [pc, #532]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ba4:	4b82      	ldr	r3, [pc, #520]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d007      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x308>
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b18      	cmp	r3, #24
 8006bb4:	d13a      	bne.n	8006c2c <HAL_RCC_OscConfig+0x374>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d135      	bne.n	8006c2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bc0:	4b7b      	ldr	r3, [pc, #492]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x320>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d001      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e2c1      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bd8:	f7fc f8a0 	bl	8002d1c <HAL_GetREVID>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f241 0203 	movw	r2, #4099	; 0x1003
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d817      	bhi.n	8006c16 <HAL_RCC_OscConfig+0x35e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d108      	bne.n	8006c00 <HAL_RCC_OscConfig+0x348>
 8006bee:	4b70      	ldr	r3, [pc, #448]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006bf6:	4a6e      	ldr	r2, [pc, #440]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bfc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bfe:	e075      	b.n	8006cec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c00:	4b6b      	ldr	r3, [pc, #428]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	069b      	lsls	r3, r3, #26
 8006c0e:	4968      	ldr	r1, [pc, #416]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c14:	e06a      	b.n	8006cec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c16:	4b66      	ldr	r3, [pc, #408]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	061b      	lsls	r3, r3, #24
 8006c24:	4962      	ldr	r1, [pc, #392]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c2a:	e05f      	b.n	8006cec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d042      	beq.n	8006cba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c34:	4b5e      	ldr	r3, [pc, #376]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a5d      	ldr	r2, [pc, #372]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fc f83c 	bl	8002cbc <HAL_GetTick>
 8006c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c48:	f7fc f838 	bl	8002cbc <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e280      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c5a:	4b55      	ldr	r3, [pc, #340]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c66:	f7fc f859 	bl	8002d1c <HAL_GetREVID>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d817      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x3ec>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d108      	bne.n	8006c8e <HAL_RCC_OscConfig+0x3d6>
 8006c7c:	4b4c      	ldr	r3, [pc, #304]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c84:	4a4a      	ldr	r2, [pc, #296]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c8a:	6053      	str	r3, [r2, #4]
 8006c8c:	e02e      	b.n	8006cec <HAL_RCC_OscConfig+0x434>
 8006c8e:	4b48      	ldr	r3, [pc, #288]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	069b      	lsls	r3, r3, #26
 8006c9c:	4944      	ldr	r1, [pc, #272]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	604b      	str	r3, [r1, #4]
 8006ca2:	e023      	b.n	8006cec <HAL_RCC_OscConfig+0x434>
 8006ca4:	4b42      	ldr	r3, [pc, #264]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	061b      	lsls	r3, r3, #24
 8006cb2:	493f      	ldr	r1, [pc, #252]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60cb      	str	r3, [r1, #12]
 8006cb8:	e018      	b.n	8006cec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cba:	4b3d      	ldr	r3, [pc, #244]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a3c      	ldr	r2, [pc, #240]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc6:	f7fb fff9 	bl	8002cbc <HAL_GetTick>
 8006cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ccc:	e008      	b.n	8006ce0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006cce:	f7fb fff5 	bl	8002cbc <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e23d      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ce0:	4b33      	ldr	r3, [pc, #204]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f0      	bne.n	8006cce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d036      	beq.n	8006d66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d019      	beq.n	8006d34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d00:	4b2b      	ldr	r3, [pc, #172]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d04:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0c:	f7fb ffd6 	bl	8002cbc <HAL_GetTick>
 8006d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d14:	f7fb ffd2 	bl	8002cbc <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e21a      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d26:	4b22      	ldr	r3, [pc, #136]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <HAL_RCC_OscConfig+0x45c>
 8006d32:	e018      	b.n	8006d66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d34:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d38:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d40:	f7fb ffbc 	bl	8002cbc <HAL_GetTick>
 8006d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d48:	f7fb ffb8 	bl	8002cbc <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e200      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1f0      	bne.n	8006d48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d039      	beq.n	8006de6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01c      	beq.n	8006db4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a0c      	ldr	r2, [pc, #48]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d86:	f7fb ff99 	bl	8002cbc <HAL_GetTick>
 8006d8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d8e:	f7fb ff95 	bl	8002cbc <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e1dd      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006da0:	4b03      	ldr	r3, [pc, #12]	; (8006db0 <HAL_RCC_OscConfig+0x4f8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0f0      	beq.n	8006d8e <HAL_RCC_OscConfig+0x4d6>
 8006dac:	e01b      	b.n	8006de6 <HAL_RCC_OscConfig+0x52e>
 8006dae:	bf00      	nop
 8006db0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006db4:	4b9b      	ldr	r3, [pc, #620]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a9a      	ldr	r2, [pc, #616]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dc0:	f7fb ff7c 	bl	8002cbc <HAL_GetTick>
 8006dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dc8:	f7fb ff78 	bl	8002cbc <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e1c0      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dda:	4b92      	ldr	r3, [pc, #584]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 8081 	beq.w	8006ef6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006df4:	4b8c      	ldr	r3, [pc, #560]	; (8007028 <HAL_RCC_OscConfig+0x770>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a8b      	ldr	r2, [pc, #556]	; (8007028 <HAL_RCC_OscConfig+0x770>)
 8006dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e00:	f7fb ff5c 	bl	8002cbc <HAL_GetTick>
 8006e04:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e08:	f7fb ff58 	bl	8002cbc <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b64      	cmp	r3, #100	; 0x64
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e1a0      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1a:	4b83      	ldr	r3, [pc, #524]	; (8007028 <HAL_RCC_OscConfig+0x770>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0f0      	beq.n	8006e08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d106      	bne.n	8006e3c <HAL_RCC_OscConfig+0x584>
 8006e2e:	4b7d      	ldr	r3, [pc, #500]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	4a7c      	ldr	r2, [pc, #496]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	6713      	str	r3, [r2, #112]	; 0x70
 8006e3a:	e02d      	b.n	8006e98 <HAL_RCC_OscConfig+0x5e0>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10c      	bne.n	8006e5e <HAL_RCC_OscConfig+0x5a6>
 8006e44:	4b77      	ldr	r3, [pc, #476]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e48:	4a76      	ldr	r2, [pc, #472]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e50:	4b74      	ldr	r3, [pc, #464]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e54:	4a73      	ldr	r2, [pc, #460]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e56:	f023 0304 	bic.w	r3, r3, #4
 8006e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5c:	e01c      	b.n	8006e98 <HAL_RCC_OscConfig+0x5e0>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b05      	cmp	r3, #5
 8006e64:	d10c      	bne.n	8006e80 <HAL_RCC_OscConfig+0x5c8>
 8006e66:	4b6f      	ldr	r3, [pc, #444]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	4a6e      	ldr	r2, [pc, #440]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e6c:	f043 0304 	orr.w	r3, r3, #4
 8006e70:	6713      	str	r3, [r2, #112]	; 0x70
 8006e72:	4b6c      	ldr	r3, [pc, #432]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	4a6b      	ldr	r2, [pc, #428]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7e:	e00b      	b.n	8006e98 <HAL_RCC_OscConfig+0x5e0>
 8006e80:	4b68      	ldr	r3, [pc, #416]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	4a67      	ldr	r2, [pc, #412]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e86:	f023 0301 	bic.w	r3, r3, #1
 8006e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8c:	4b65      	ldr	r3, [pc, #404]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e90:	4a64      	ldr	r2, [pc, #400]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006e92:	f023 0304 	bic.w	r3, r3, #4
 8006e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d015      	beq.n	8006ecc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea0:	f7fb ff0c 	bl	8002cbc <HAL_GetTick>
 8006ea4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ea6:	e00a      	b.n	8006ebe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea8:	f7fb ff08 	bl	8002cbc <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e14e      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ebe:	4b59      	ldr	r3, [pc, #356]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0ee      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x5f0>
 8006eca:	e014      	b.n	8006ef6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ecc:	f7fb fef6 	bl	8002cbc <HAL_GetTick>
 8006ed0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ed2:	e00a      	b.n	8006eea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed4:	f7fb fef2 	bl	8002cbc <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e138      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eea:	4b4e      	ldr	r3, [pc, #312]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1ee      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 812d 	beq.w	800715a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f00:	4b48      	ldr	r3, [pc, #288]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f08:	2b18      	cmp	r3, #24
 8006f0a:	f000 80bd 	beq.w	8007088 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	f040 809e 	bne.w	8007054 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f18:	4b42      	ldr	r3, [pc, #264]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a41      	ldr	r2, [pc, #260]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f24:	f7fb feca 	bl	8002cbc <HAL_GetTick>
 8006f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f2c:	f7fb fec6 	bl	8002cbc <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e10e      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f3e:	4b39      	ldr	r3, [pc, #228]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1f0      	bne.n	8006f2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f4a:	4b36      	ldr	r3, [pc, #216]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f4e:	4b37      	ldr	r3, [pc, #220]	; (800702c <HAL_RCC_OscConfig+0x774>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f5a:	0112      	lsls	r2, r2, #4
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	4931      	ldr	r1, [pc, #196]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	628b      	str	r3, [r1, #40]	; 0x28
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f72:	3b01      	subs	r3, #1
 8006f74:	025b      	lsls	r3, r3, #9
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	041b      	lsls	r3, r3, #16
 8006f82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	061b      	lsls	r3, r3, #24
 8006f90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f94:	4923      	ldr	r1, [pc, #140]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f9a:	4b22      	ldr	r3, [pc, #136]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	4a21      	ldr	r2, [pc, #132]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fa6:	4b1f      	ldr	r3, [pc, #124]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006faa:	4b21      	ldr	r3, [pc, #132]	; (8007030 <HAL_RCC_OscConfig+0x778>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fb2:	00d2      	lsls	r2, r2, #3
 8006fb4:	491b      	ldr	r1, [pc, #108]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fba:	4b1a      	ldr	r3, [pc, #104]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	f023 020c 	bic.w	r2, r3, #12
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	4917      	ldr	r1, [pc, #92]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fcc:	4b15      	ldr	r3, [pc, #84]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	f023 0202 	bic.w	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd8:	4912      	ldr	r1, [pc, #72]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fde:	4b11      	ldr	r3, [pc, #68]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe2:	4a10      	ldr	r2, [pc, #64]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fea:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	4a0d      	ldr	r2, [pc, #52]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	4a0a      	ldr	r2, [pc, #40]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8006ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007000:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007002:	4b08      	ldr	r3, [pc, #32]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	4a07      	ldr	r2, [pc, #28]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a04      	ldr	r2, [pc, #16]	; (8007024 <HAL_RCC_OscConfig+0x76c>)
 8007014:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701a:	f7fb fe4f 	bl	8002cbc <HAL_GetTick>
 800701e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007020:	e011      	b.n	8007046 <HAL_RCC_OscConfig+0x78e>
 8007022:	bf00      	nop
 8007024:	58024400 	.word	0x58024400
 8007028:	58024800 	.word	0x58024800
 800702c:	fffffc0c 	.word	0xfffffc0c
 8007030:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007034:	f7fb fe42 	bl	8002cbc <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e08a      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007046:	4b47      	ldr	r3, [pc, #284]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0f0      	beq.n	8007034 <HAL_RCC_OscConfig+0x77c>
 8007052:	e082      	b.n	800715a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007054:	4b43      	ldr	r3, [pc, #268]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a42      	ldr	r2, [pc, #264]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 800705a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800705e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007060:	f7fb fe2c 	bl	8002cbc <HAL_GetTick>
 8007064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007068:	f7fb fe28 	bl	8002cbc <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e070      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800707a:	4b3a      	ldr	r3, [pc, #232]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1f0      	bne.n	8007068 <HAL_RCC_OscConfig+0x7b0>
 8007086:	e068      	b.n	800715a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007088:	4b36      	ldr	r3, [pc, #216]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800708e:	4b35      	ldr	r3, [pc, #212]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	2b01      	cmp	r3, #1
 800709a:	d031      	beq.n	8007100 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f003 0203 	and.w	r2, r3, #3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d12a      	bne.n	8007100 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	091b      	lsrs	r3, r3, #4
 80070ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d122      	bne.n	8007100 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d11a      	bne.n	8007100 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	0a5b      	lsrs	r3, r3, #9
 80070ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070d8:	429a      	cmp	r2, r3
 80070da:	d111      	bne.n	8007100 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	0c1b      	lsrs	r3, r3, #16
 80070e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d108      	bne.n	8007100 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	0e1b      	lsrs	r3, r3, #24
 80070f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d001      	beq.n	8007104 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e02b      	b.n	800715c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007104:	4b17      	ldr	r3, [pc, #92]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 8007106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007108:	08db      	lsrs	r3, r3, #3
 800710a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800710e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	429a      	cmp	r2, r3
 8007118:	d01f      	beq.n	800715a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800711a:	4b12      	ldr	r3, [pc, #72]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	4a11      	ldr	r2, [pc, #68]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 8007120:	f023 0301 	bic.w	r3, r3, #1
 8007124:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007126:	f7fb fdc9 	bl	8002cbc <HAL_GetTick>
 800712a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800712c:	bf00      	nop
 800712e:	f7fb fdc5 	bl	8002cbc <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	4293      	cmp	r3, r2
 8007138:	d0f9      	beq.n	800712e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 800713c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800713e:	4b0a      	ldr	r3, [pc, #40]	; (8007168 <HAL_RCC_OscConfig+0x8b0>)
 8007140:	4013      	ands	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007146:	00d2      	lsls	r2, r2, #3
 8007148:	4906      	ldr	r1, [pc, #24]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 800714a:	4313      	orrs	r3, r2
 800714c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	4a04      	ldr	r2, [pc, #16]	; (8007164 <HAL_RCC_OscConfig+0x8ac>)
 8007154:	f043 0301 	orr.w	r3, r3, #1
 8007158:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3730      	adds	r7, #48	; 0x30
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	58024400 	.word	0x58024400
 8007168:	ffff0007 	.word	0xffff0007

0800716c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e19c      	b.n	80074ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007180:	4b8a      	ldr	r3, [pc, #552]	; (80073ac <HAL_RCC_ClockConfig+0x240>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d910      	bls.n	80071b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718e:	4b87      	ldr	r3, [pc, #540]	; (80073ac <HAL_RCC_ClockConfig+0x240>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f023 020f 	bic.w	r2, r3, #15
 8007196:	4985      	ldr	r1, [pc, #532]	; (80073ac <HAL_RCC_ClockConfig+0x240>)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	4313      	orrs	r3, r2
 800719c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800719e:	4b83      	ldr	r3, [pc, #524]	; (80073ac <HAL_RCC_ClockConfig+0x240>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d001      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e184      	b.n	80074ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	4b7b      	ldr	r3, [pc, #492]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d908      	bls.n	80071de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071cc:	4b78      	ldr	r3, [pc, #480]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	4975      	ldr	r1, [pc, #468]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d010      	beq.n	800720c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695a      	ldr	r2, [r3, #20]
 80071ee:	4b70      	ldr	r3, [pc, #448]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d908      	bls.n	800720c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071fa:	4b6d      	ldr	r3, [pc, #436]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	496a      	ldr	r1, [pc, #424]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 8007208:	4313      	orrs	r3, r2
 800720a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b00      	cmp	r3, #0
 8007216:	d010      	beq.n	800723a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	4b64      	ldr	r3, [pc, #400]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007224:	429a      	cmp	r2, r3
 8007226:	d908      	bls.n	800723a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007228:	4b61      	ldr	r3, [pc, #388]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	495e      	ldr	r1, [pc, #376]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 8007236:	4313      	orrs	r3, r2
 8007238:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	d010      	beq.n	8007268 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007252:	429a      	cmp	r2, r3
 8007254:	d908      	bls.n	8007268 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007256:	4b56      	ldr	r3, [pc, #344]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	4953      	ldr	r1, [pc, #332]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 8007264:	4313      	orrs	r3, r2
 8007266:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d010      	beq.n	8007296 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	4b4d      	ldr	r3, [pc, #308]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	429a      	cmp	r2, r3
 8007282:	d908      	bls.n	8007296 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007284:	4b4a      	ldr	r3, [pc, #296]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	f023 020f 	bic.w	r2, r3, #15
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	4947      	ldr	r1, [pc, #284]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 8007292:	4313      	orrs	r3, r2
 8007294:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d055      	beq.n	800734e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072a2:	4b43      	ldr	r3, [pc, #268]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	4940      	ldr	r1, [pc, #256]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d107      	bne.n	80072cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072bc:	4b3c      	ldr	r3, [pc, #240]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d121      	bne.n	800730c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0f6      	b.n	80074ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d107      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072d4:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d115      	bne.n	800730c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e0ea      	b.n	80074ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d107      	bne.n	80072fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072ec:	4b30      	ldr	r3, [pc, #192]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d109      	bne.n	800730c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0de      	b.n	80074ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072fc:	4b2c      	ldr	r3, [pc, #176]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e0d6      	b.n	80074ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800730c:	4b28      	ldr	r3, [pc, #160]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f023 0207 	bic.w	r2, r3, #7
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	4925      	ldr	r1, [pc, #148]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 800731a:	4313      	orrs	r3, r2
 800731c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731e:	f7fb fccd 	bl	8002cbc <HAL_GetTick>
 8007322:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007324:	e00a      	b.n	800733c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007326:	f7fb fcc9 	bl	8002cbc <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f241 3288 	movw	r2, #5000	; 0x1388
 8007334:	4293      	cmp	r3, r2
 8007336:	d901      	bls.n	800733c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e0be      	b.n	80074ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800733c:	4b1c      	ldr	r3, [pc, #112]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	429a      	cmp	r2, r3
 800734c:	d1eb      	bne.n	8007326 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d010      	beq.n	800737c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	429a      	cmp	r2, r3
 8007368:	d208      	bcs.n	800737c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800736a:	4b11      	ldr	r3, [pc, #68]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	f023 020f 	bic.w	r2, r3, #15
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	490e      	ldr	r1, [pc, #56]	; (80073b0 <HAL_RCC_ClockConfig+0x244>)
 8007378:	4313      	orrs	r3, r2
 800737a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800737c:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <HAL_RCC_ClockConfig+0x240>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d214      	bcs.n	80073b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b08      	ldr	r3, [pc, #32]	; (80073ac <HAL_RCC_ClockConfig+0x240>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 020f 	bic.w	r2, r3, #15
 8007392:	4906      	ldr	r1, [pc, #24]	; (80073ac <HAL_RCC_ClockConfig+0x240>)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800739a:	4b04      	ldr	r3, [pc, #16]	; (80073ac <HAL_RCC_ClockConfig+0x240>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d005      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e086      	b.n	80074ba <HAL_RCC_ClockConfig+0x34e>
 80073ac:	52002000 	.word	0x52002000
 80073b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d010      	beq.n	80073e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	4b3f      	ldr	r3, [pc, #252]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d208      	bcs.n	80073e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073d0:	4b3c      	ldr	r3, [pc, #240]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	4939      	ldr	r1, [pc, #228]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d010      	beq.n	8007410 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695a      	ldr	r2, [r3, #20]
 80073f2:	4b34      	ldr	r3, [pc, #208]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d208      	bcs.n	8007410 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073fe:	4b31      	ldr	r3, [pc, #196]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	492e      	ldr	r1, [pc, #184]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 800740c:	4313      	orrs	r3, r2
 800740e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0310 	and.w	r3, r3, #16
 8007418:	2b00      	cmp	r3, #0
 800741a:	d010      	beq.n	800743e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699a      	ldr	r2, [r3, #24]
 8007420:	4b28      	ldr	r3, [pc, #160]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007428:	429a      	cmp	r2, r3
 800742a:	d208      	bcs.n	800743e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800742c:	4b25      	ldr	r3, [pc, #148]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	4922      	ldr	r1, [pc, #136]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 800743a:	4313      	orrs	r3, r2
 800743c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b00      	cmp	r3, #0
 8007448:	d010      	beq.n	800746c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69da      	ldr	r2, [r3, #28]
 800744e:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007456:	429a      	cmp	r2, r3
 8007458:	d208      	bcs.n	800746c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800745a:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	4917      	ldr	r1, [pc, #92]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 8007468:	4313      	orrs	r3, r2
 800746a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800746c:	f000 f834 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 8007470:	4602      	mov	r2, r0
 8007472:	4b14      	ldr	r3, [pc, #80]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	0a1b      	lsrs	r3, r3, #8
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	4912      	ldr	r1, [pc, #72]	; (80074c8 <HAL_RCC_ClockConfig+0x35c>)
 800747e:	5ccb      	ldrb	r3, [r1, r3]
 8007480:	f003 031f 	and.w	r3, r3, #31
 8007484:	fa22 f303 	lsr.w	r3, r2, r3
 8007488:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800748a:	4b0e      	ldr	r3, [pc, #56]	; (80074c4 <HAL_RCC_ClockConfig+0x358>)
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	f003 030f 	and.w	r3, r3, #15
 8007492:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <HAL_RCC_ClockConfig+0x35c>)
 8007494:	5cd3      	ldrb	r3, [r2, r3]
 8007496:	f003 031f 	and.w	r3, r3, #31
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
 80074a0:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <HAL_RCC_ClockConfig+0x360>)
 80074a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074a4:	4a0a      	ldr	r2, [pc, #40]	; (80074d0 <HAL_RCC_ClockConfig+0x364>)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80074aa:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <HAL_RCC_ClockConfig+0x368>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fb fbba 	bl	8002c28 <HAL_InitTick>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	58024400 	.word	0x58024400
 80074c8:	0800d238 	.word	0x0800d238
 80074cc:	24000004 	.word	0x24000004
 80074d0:	24000000 	.word	0x24000000
 80074d4:	24000008 	.word	0x24000008

080074d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	b089      	sub	sp, #36	; 0x24
 80074dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074de:	4bb3      	ldr	r3, [pc, #716]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074e6:	2b18      	cmp	r3, #24
 80074e8:	f200 8155 	bhi.w	8007796 <HAL_RCC_GetSysClockFreq+0x2be>
 80074ec:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007559 	.word	0x08007559
 80074f8:	08007797 	.word	0x08007797
 80074fc:	08007797 	.word	0x08007797
 8007500:	08007797 	.word	0x08007797
 8007504:	08007797 	.word	0x08007797
 8007508:	08007797 	.word	0x08007797
 800750c:	08007797 	.word	0x08007797
 8007510:	08007797 	.word	0x08007797
 8007514:	0800757f 	.word	0x0800757f
 8007518:	08007797 	.word	0x08007797
 800751c:	08007797 	.word	0x08007797
 8007520:	08007797 	.word	0x08007797
 8007524:	08007797 	.word	0x08007797
 8007528:	08007797 	.word	0x08007797
 800752c:	08007797 	.word	0x08007797
 8007530:	08007797 	.word	0x08007797
 8007534:	08007585 	.word	0x08007585
 8007538:	08007797 	.word	0x08007797
 800753c:	08007797 	.word	0x08007797
 8007540:	08007797 	.word	0x08007797
 8007544:	08007797 	.word	0x08007797
 8007548:	08007797 	.word	0x08007797
 800754c:	08007797 	.word	0x08007797
 8007550:	08007797 	.word	0x08007797
 8007554:	0800758b 	.word	0x0800758b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007558:	4b94      	ldr	r3, [pc, #592]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d009      	beq.n	8007578 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007564:	4b91      	ldr	r3, [pc, #580]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	08db      	lsrs	r3, r3, #3
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	4a90      	ldr	r2, [pc, #576]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
 8007574:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007576:	e111      	b.n	800779c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007578:	4b8d      	ldr	r3, [pc, #564]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800757a:	61bb      	str	r3, [r7, #24]
      break;
 800757c:	e10e      	b.n	800779c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800757e:	4b8d      	ldr	r3, [pc, #564]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007580:	61bb      	str	r3, [r7, #24]
      break;
 8007582:	e10b      	b.n	800779c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007584:	4b8c      	ldr	r3, [pc, #560]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007586:	61bb      	str	r3, [r7, #24]
      break;
 8007588:	e108      	b.n	800779c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800758a:	4b88      	ldr	r3, [pc, #544]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800758c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007594:	4b85      	ldr	r3, [pc, #532]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800759e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075a0:	4b82      	ldr	r3, [pc, #520]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075aa:	4b80      	ldr	r3, [pc, #512]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ae:	08db      	lsrs	r3, r3, #3
 80075b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	fb02 f303 	mul.w	r3, r2, r3
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 80e1 	beq.w	8007790 <HAL_RCC_GetSysClockFreq+0x2b8>
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	f000 8083 	beq.w	80076dc <HAL_RCC_GetSysClockFreq+0x204>
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2b02      	cmp	r3, #2
 80075da:	f200 80a1 	bhi.w	8007720 <HAL_RCC_GetSysClockFreq+0x248>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <HAL_RCC_GetSysClockFreq+0x114>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d056      	beq.n	8007698 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075ea:	e099      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ec:	4b6f      	ldr	r3, [pc, #444]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d02d      	beq.n	8007654 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075f8:	4b6c      	ldr	r3, [pc, #432]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	08db      	lsrs	r3, r3, #3
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	4a6b      	ldr	r2, [pc, #428]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007604:	fa22 f303 	lsr.w	r3, r2, r3
 8007608:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007622:	4b62      	ldr	r3, [pc, #392]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007632:	ed97 6a02 	vldr	s12, [r7, #8]
 8007636:	eddf 5a61 	vldr	s11, [pc, #388]	; 80077bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800763a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007652:	e087      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80077c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007666:	4b51      	ldr	r3, [pc, #324]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007676:	ed97 6a02 	vldr	s12, [r7, #8]
 800767a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80077bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800767e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007696:	e065      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80077c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076aa:	4b40      	ldr	r3, [pc, #256]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80076be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80077bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80076c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076da:	e043      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80077c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ee:	4b2f      	ldr	r3, [pc, #188]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007702:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80077bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800771e:	e021      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80077c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800772e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007732:	4b1e      	ldr	r3, [pc, #120]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007742:	ed97 6a02 	vldr	s12, [r7, #8]
 8007746:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80077bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800774a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007762:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007764:	4b11      	ldr	r3, [pc, #68]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	0a5b      	lsrs	r3, r3, #9
 800776a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776e:	3301      	adds	r3, #1
 8007770:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	ee07 3a90 	vmov	s15, r3
 8007778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800777c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007788:	ee17 3a90 	vmov	r3, s15
 800778c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800778e:	e005      	b.n	800779c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	61bb      	str	r3, [r7, #24]
      break;
 8007794:	e002      	b.n	800779c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007796:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007798:	61bb      	str	r3, [r7, #24]
      break;
 800779a:	bf00      	nop
  }

  return sysclockfreq;
 800779c:	69bb      	ldr	r3, [r7, #24]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3724      	adds	r7, #36	; 0x24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	58024400 	.word	0x58024400
 80077b0:	03d09000 	.word	0x03d09000
 80077b4:	003d0900 	.word	0x003d0900
 80077b8:	017d7840 	.word	0x017d7840
 80077bc:	46000000 	.word	0x46000000
 80077c0:	4c742400 	.word	0x4c742400
 80077c4:	4a742400 	.word	0x4a742400
 80077c8:	4bbebc20 	.word	0x4bbebc20

080077cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077d2:	f7ff fe81 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b10      	ldr	r3, [pc, #64]	; (800781c <HAL_RCC_GetHCLKFreq+0x50>)
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	0a1b      	lsrs	r3, r3, #8
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	490f      	ldr	r1, [pc, #60]	; (8007820 <HAL_RCC_GetHCLKFreq+0x54>)
 80077e4:	5ccb      	ldrb	r3, [r1, r3]
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077f0:	4b0a      	ldr	r3, [pc, #40]	; (800781c <HAL_RCC_GetHCLKFreq+0x50>)
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	4a09      	ldr	r2, [pc, #36]	; (8007820 <HAL_RCC_GetHCLKFreq+0x54>)
 80077fa:	5cd3      	ldrb	r3, [r2, r3]
 80077fc:	f003 031f 	and.w	r3, r3, #31
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	fa22 f303 	lsr.w	r3, r2, r3
 8007806:	4a07      	ldr	r2, [pc, #28]	; (8007824 <HAL_RCC_GetHCLKFreq+0x58>)
 8007808:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800780a:	4a07      	ldr	r2, [pc, #28]	; (8007828 <HAL_RCC_GetHCLKFreq+0x5c>)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007810:	4b04      	ldr	r3, [pc, #16]	; (8007824 <HAL_RCC_GetHCLKFreq+0x58>)
 8007812:	681b      	ldr	r3, [r3, #0]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	58024400 	.word	0x58024400
 8007820:	0800d238 	.word	0x0800d238
 8007824:	24000004 	.word	0x24000004
 8007828:	24000000 	.word	0x24000000

0800782c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007830:	f7ff ffcc 	bl	80077cc <HAL_RCC_GetHCLKFreq>
 8007834:	4602      	mov	r2, r0
 8007836:	4b06      	ldr	r3, [pc, #24]	; (8007850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	4904      	ldr	r1, [pc, #16]	; (8007854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007842:	5ccb      	ldrb	r3, [r1, r3]
 8007844:	f003 031f 	and.w	r3, r3, #31
 8007848:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800784c:	4618      	mov	r0, r3
 800784e:	bd80      	pop	{r7, pc}
 8007850:	58024400 	.word	0x58024400
 8007854:	0800d238 	.word	0x0800d238

08007858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800785c:	f7ff ffb6 	bl	80077cc <HAL_RCC_GetHCLKFreq>
 8007860:	4602      	mov	r2, r0
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	4904      	ldr	r1, [pc, #16]	; (8007880 <HAL_RCC_GetPCLK2Freq+0x28>)
 800786e:	5ccb      	ldrb	r3, [r1, r3]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007878:	4618      	mov	r0, r3
 800787a:	bd80      	pop	{r7, pc}
 800787c:	58024400 	.word	0x58024400
 8007880:	0800d238 	.word	0x0800d238

08007884 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007888:	b0ca      	sub	sp, #296	; 0x128
 800788a:	af00      	add	r7, sp, #0
 800788c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007890:	2300      	movs	r3, #0
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007896:	2300      	movs	r3, #0
 8007898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80078a8:	2500      	movs	r5, #0
 80078aa:	ea54 0305 	orrs.w	r3, r4, r5
 80078ae:	d049      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078ba:	d02f      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80078bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078c0:	d828      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078c6:	d01a      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078cc:	d822      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d6:	d007      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078d8:	e01c      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078da:	4bb8      	ldr	r3, [pc, #736]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	4ab7      	ldr	r2, [pc, #732]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078e6:	e01a      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ec:	3308      	adds	r3, #8
 80078ee:	2102      	movs	r1, #2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f002 fb61 	bl	8009fb8 <RCCEx_PLL2_Config>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078fc:	e00f      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007902:	3328      	adds	r3, #40	; 0x28
 8007904:	2102      	movs	r1, #2
 8007906:	4618      	mov	r0, r3
 8007908:	f002 fc08 	bl	800a11c <RCCEx_PLL3_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007912:	e004      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800791a:	e000      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800791c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800791e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007926:	4ba5      	ldr	r3, [pc, #660]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007934:	4aa1      	ldr	r2, [pc, #644]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007936:	430b      	orrs	r3, r1
 8007938:	6513      	str	r3, [r2, #80]	; 0x50
 800793a:	e003      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007950:	f04f 0900 	mov.w	r9, #0
 8007954:	ea58 0309 	orrs.w	r3, r8, r9
 8007958:	d047      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007960:	2b04      	cmp	r3, #4
 8007962:	d82a      	bhi.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007964:	a201      	add	r2, pc, #4	; (adr r2, 800796c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796a:	bf00      	nop
 800796c:	08007981 	.word	0x08007981
 8007970:	0800798f 	.word	0x0800798f
 8007974:	080079a5 	.word	0x080079a5
 8007978:	080079c3 	.word	0x080079c3
 800797c:	080079c3 	.word	0x080079c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007980:	4b8e      	ldr	r3, [pc, #568]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	4a8d      	ldr	r2, [pc, #564]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800798c:	e01a      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800798e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007992:	3308      	adds	r3, #8
 8007994:	2100      	movs	r1, #0
 8007996:	4618      	mov	r0, r3
 8007998:	f002 fb0e 	bl	8009fb8 <RCCEx_PLL2_Config>
 800799c:	4603      	mov	r3, r0
 800799e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079a2:	e00f      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a8:	3328      	adds	r3, #40	; 0x28
 80079aa:	2100      	movs	r1, #0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f002 fbb5 	bl	800a11c <RCCEx_PLL3_Config>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079b8:	e004      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079c0:	e000      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80079c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079cc:	4b7b      	ldr	r3, [pc, #492]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d0:	f023 0107 	bic.w	r1, r3, #7
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	4a78      	ldr	r2, [pc, #480]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079dc:	430b      	orrs	r3, r1
 80079de:	6513      	str	r3, [r2, #80]	; 0x50
 80079e0:	e003      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80079f6:	f04f 0b00 	mov.w	fp, #0
 80079fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80079fe:	d04c      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0a:	d030      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a10:	d829      	bhi.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a12:	2bc0      	cmp	r3, #192	; 0xc0
 8007a14:	d02d      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a16:	2bc0      	cmp	r3, #192	; 0xc0
 8007a18:	d825      	bhi.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a1a:	2b80      	cmp	r3, #128	; 0x80
 8007a1c:	d018      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007a1e:	2b80      	cmp	r3, #128	; 0x80
 8007a20:	d821      	bhi.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007a26:	2b40      	cmp	r3, #64	; 0x40
 8007a28:	d007      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007a2a:	e01c      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a2c:	4b63      	ldr	r3, [pc, #396]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	4a62      	ldr	r2, [pc, #392]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a38:	e01c      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a3e:	3308      	adds	r3, #8
 8007a40:	2100      	movs	r1, #0
 8007a42:	4618      	mov	r0, r3
 8007a44:	f002 fab8 	bl	8009fb8 <RCCEx_PLL2_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a4e:	e011      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a54:	3328      	adds	r3, #40	; 0x28
 8007a56:	2100      	movs	r1, #0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f002 fb5f 	bl	800a11c <RCCEx_PLL3_Config>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a64:	e006      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a6c:	e002      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a6e:	bf00      	nop
 8007a70:	e000      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a7c:	4b4f      	ldr	r3, [pc, #316]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a80:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a8a:	4a4c      	ldr	r2, [pc, #304]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	6513      	str	r3, [r2, #80]	; 0x50
 8007a90:	e003      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007aa6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ab0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	d053      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ac6:	d035      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007acc:	d82e      	bhi.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ace:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ad2:	d031      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ad4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ad8:	d828      	bhi.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ade:	d01a      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ae4:	d822      	bhi.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aee:	d007      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007af0:	e01c      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af2:	4b32      	ldr	r3, [pc, #200]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	4a31      	ldr	r2, [pc, #196]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007afe:	e01c      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b04:	3308      	adds	r3, #8
 8007b06:	2100      	movs	r1, #0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f002 fa55 	bl	8009fb8 <RCCEx_PLL2_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b14:	e011      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1a:	3328      	adds	r3, #40	; 0x28
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f002 fafc 	bl	800a11c <RCCEx_PLL3_Config>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b2a:	e006      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b32:	e002      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b34:	bf00      	nop
 8007b36:	e000      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10b      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b42:	4b1e      	ldr	r3, [pc, #120]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b52:	4a1a      	ldr	r2, [pc, #104]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6593      	str	r3, [r2, #88]	; 0x58
 8007b58:	e003      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007b6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b72:	2300      	movs	r3, #0
 8007b74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	d056      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b8e:	d038      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b94:	d831      	bhi.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b9a:	d034      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ba0:	d82b      	bhi.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ba6:	d01d      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bac:	d825      	bhi.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d006      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007bb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bb6:	d00a      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007bb8:	e01f      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bba:	bf00      	nop
 8007bbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc0:	4ba2      	ldr	r3, [pc, #648]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	4aa1      	ldr	r2, [pc, #644]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bcc:	e01c      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f002 f9ee 	bl	8009fb8 <RCCEx_PLL2_Config>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007be2:	e011      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be8:	3328      	adds	r3, #40	; 0x28
 8007bea:	2100      	movs	r1, #0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f002 fa95 	bl	800a11c <RCCEx_PLL3_Config>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bf8:	e006      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c00:	e002      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c02:	bf00      	nop
 8007c04:	e000      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10b      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c10:	4b8e      	ldr	r3, [pc, #568]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c14:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c20:	4a8a      	ldr	r2, [pc, #552]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c22:	430b      	orrs	r3, r1
 8007c24:	6593      	str	r3, [r2, #88]	; 0x58
 8007c26:	e003      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c40:	2300      	movs	r3, #0
 8007c42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	d03a      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c56:	2b30      	cmp	r3, #48	; 0x30
 8007c58:	d01f      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007c5a:	2b30      	cmp	r3, #48	; 0x30
 8007c5c:	d819      	bhi.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d00c      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d815      	bhi.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d019      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d111      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c6e:	4b77      	ldr	r3, [pc, #476]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	4a76      	ldr	r2, [pc, #472]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c7a:	e011      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c80:	3308      	adds	r3, #8
 8007c82:	2102      	movs	r1, #2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f002 f997 	bl	8009fb8 <RCCEx_PLL2_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c90:	e006      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c98:	e002      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c9a:	bf00      	nop
 8007c9c:	e000      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10a      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ca8:	4b68      	ldr	r3, [pc, #416]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb6:	4a65      	ldr	r2, [pc, #404]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cbc:	e003      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cdc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	d051      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf0:	d035      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf6:	d82e      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cfc:	d031      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007cfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d02:	d828      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d08:	d01a      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0e:	d822      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d18:	d007      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007d1a:	e01c      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d1c:	4b4b      	ldr	r3, [pc, #300]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	4a4a      	ldr	r2, [pc, #296]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d28:	e01c      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d2e:	3308      	adds	r3, #8
 8007d30:	2100      	movs	r1, #0
 8007d32:	4618      	mov	r0, r3
 8007d34:	f002 f940 	bl	8009fb8 <RCCEx_PLL2_Config>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d3e:	e011      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d44:	3328      	adds	r3, #40	; 0x28
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f002 f9e7 	bl	800a11c <RCCEx_PLL3_Config>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d54:	e006      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d5c:	e002      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d5e:	bf00      	nop
 8007d60:	e000      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10a      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d6c:	4b37      	ldr	r3, [pc, #220]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7a:	4a34      	ldr	r2, [pc, #208]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	6513      	str	r3, [r2, #80]	; 0x50
 8007d80:	e003      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007da0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007da4:	460b      	mov	r3, r1
 8007da6:	4313      	orrs	r3, r2
 8007da8:	d056      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007db4:	d033      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007db6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dba:	d82c      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dc0:	d02f      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007dc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dc6:	d826      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dcc:	d02b      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007dce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dd2:	d820      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dd8:	d012      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007dda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dde:	d81a      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d022      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de8:	d115      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dee:	3308      	adds	r3, #8
 8007df0:	2101      	movs	r1, #1
 8007df2:	4618      	mov	r0, r3
 8007df4:	f002 f8e0 	bl	8009fb8 <RCCEx_PLL2_Config>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007dfe:	e015      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e04:	3328      	adds	r3, #40	; 0x28
 8007e06:	2101      	movs	r1, #1
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f002 f987 	bl	800a11c <RCCEx_PLL3_Config>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e14:	e00a      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e1c:	e006      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e1e:	bf00      	nop
 8007e20:	e004      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e22:	bf00      	nop
 8007e24:	e002      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e26:	bf00      	nop
 8007e28:	e000      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10d      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e42:	4a02      	ldr	r2, [pc, #8]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e44:	430b      	orrs	r3, r1
 8007e46:	6513      	str	r3, [r2, #80]	; 0x50
 8007e48:	e006      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e4a:	bf00      	nop
 8007e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4313      	orrs	r3, r2
 8007e76:	d055      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e84:	d033      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e8a:	d82c      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e90:	d02f      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e96:	d826      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e9c:	d02b      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007e9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ea2:	d820      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea8:	d012      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eae:	d81a      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d022      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb8:	d115      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f002 f878 	bl	8009fb8 <RCCEx_PLL2_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ece:	e015      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed4:	3328      	adds	r3, #40	; 0x28
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f002 f91f 	bl	800a11c <RCCEx_PLL3_Config>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ee4:	e00a      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007eec:	e006      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007eee:	bf00      	nop
 8007ef0:	e004      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ef2:	bf00      	nop
 8007ef4:	e002      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ef6:	bf00      	nop
 8007ef8:	e000      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10b      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f04:	4ba3      	ldr	r3, [pc, #652]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f08:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f14:	4a9f      	ldr	r2, [pc, #636]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f16:	430b      	orrs	r3, r1
 8007f18:	6593      	str	r3, [r2, #88]	; 0x58
 8007f1a:	e003      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f34:	2300      	movs	r3, #0
 8007f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4313      	orrs	r3, r2
 8007f42:	d037      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f4e:	d00e      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f54:	d816      	bhi.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d018      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f5e:	d111      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f60:	4b8c      	ldr	r3, [pc, #560]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	4a8b      	ldr	r2, [pc, #556]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f6c:	e00f      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f72:	3308      	adds	r3, #8
 8007f74:	2101      	movs	r1, #1
 8007f76:	4618      	mov	r0, r3
 8007f78:	f002 f81e 	bl	8009fb8 <RCCEx_PLL2_Config>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f82:	e004      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f8a:	e000      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10a      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f96:	4b7f      	ldr	r3, [pc, #508]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa4:	4a7b      	ldr	r2, [pc, #492]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	6513      	str	r3, [r2, #80]	; 0x50
 8007faa:	e003      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007fca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	d039      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d81c      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007fde:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08008021 	.word	0x08008021
 8007fe8:	08007ff5 	.word	0x08007ff5
 8007fec:	08008003 	.word	0x08008003
 8007ff0:	08008021 	.word	0x08008021
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff4:	4b67      	ldr	r3, [pc, #412]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	4a66      	ldr	r2, [pc, #408]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008000:	e00f      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008006:	3308      	adds	r3, #8
 8008008:	2102      	movs	r1, #2
 800800a:	4618      	mov	r0, r3
 800800c:	f001 ffd4 	bl	8009fb8 <RCCEx_PLL2_Config>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008016:	e004      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800801e:	e000      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10a      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800802a:	4b5a      	ldr	r3, [pc, #360]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800802c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802e:	f023 0103 	bic.w	r1, r3, #3
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008038:	4a56      	ldr	r2, [pc, #344]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800803a:	430b      	orrs	r3, r1
 800803c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800803e:	e003      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008054:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008058:	2300      	movs	r3, #0
 800805a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800805e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008062:	460b      	mov	r3, r1
 8008064:	4313      	orrs	r3, r2
 8008066:	f000 809f 	beq.w	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800806a:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a4a      	ldr	r2, [pc, #296]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008074:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008076:	f7fa fe21 	bl	8002cbc <HAL_GetTick>
 800807a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800807e:	e00b      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008080:	f7fa fe1c 	bl	8002cbc <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b64      	cmp	r3, #100	; 0x64
 800808e:	d903      	bls.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008096:	e005      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008098:	4b3f      	ldr	r3, [pc, #252]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0ed      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80080a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d179      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080ac:	4b39      	ldr	r3, [pc, #228]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080b8:	4053      	eors	r3, r2
 80080ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d015      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080c2:	4b34      	ldr	r3, [pc, #208]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080ce:	4b31      	ldr	r3, [pc, #196]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d2:	4a30      	ldr	r2, [pc, #192]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080da:	4b2e      	ldr	r3, [pc, #184]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080de:	4a2d      	ldr	r2, [pc, #180]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080e6:	4a2b      	ldr	r2, [pc, #172]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80080ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080fa:	d118      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080fc:	f7fa fdde 	bl	8002cbc <HAL_GetTick>
 8008100:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008104:	e00d      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008106:	f7fa fdd9 	bl	8002cbc <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008110:	1ad2      	subs	r2, r2, r3
 8008112:	f241 3388 	movw	r3, #5000	; 0x1388
 8008116:	429a      	cmp	r2, r3
 8008118:	d903      	bls.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008120:	e005      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008122:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0eb      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800812e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008132:	2b00      	cmp	r3, #0
 8008134:	d129      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800813a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800813e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008146:	d10e      	bne.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008148:	4b12      	ldr	r3, [pc, #72]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008154:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008158:	091a      	lsrs	r2, r3, #4
 800815a:	4b10      	ldr	r3, [pc, #64]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800815c:	4013      	ands	r3, r2
 800815e:	4a0d      	ldr	r2, [pc, #52]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008160:	430b      	orrs	r3, r1
 8008162:	6113      	str	r3, [r2, #16]
 8008164:	e005      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	4a0a      	ldr	r2, [pc, #40]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800816c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008170:	6113      	str	r3, [r2, #16]
 8008172:	4b08      	ldr	r3, [pc, #32]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008174:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800817e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008182:	4a04      	ldr	r2, [pc, #16]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008184:	430b      	orrs	r3, r1
 8008186:	6713      	str	r3, [r2, #112]	; 0x70
 8008188:	e00e      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800818a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800818e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008192:	e009      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008194:	58024400 	.word	0x58024400
 8008198:	58024800 	.word	0x58024800
 800819c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f002 0301 	and.w	r3, r2, #1
 80081b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081b8:	2300      	movs	r3, #0
 80081ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f000 8089 	beq.w	80082dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80081ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081d0:	2b28      	cmp	r3, #40	; 0x28
 80081d2:	d86b      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80081d4:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081da:	bf00      	nop
 80081dc:	080082b5 	.word	0x080082b5
 80081e0:	080082ad 	.word	0x080082ad
 80081e4:	080082ad 	.word	0x080082ad
 80081e8:	080082ad 	.word	0x080082ad
 80081ec:	080082ad 	.word	0x080082ad
 80081f0:	080082ad 	.word	0x080082ad
 80081f4:	080082ad 	.word	0x080082ad
 80081f8:	080082ad 	.word	0x080082ad
 80081fc:	08008281 	.word	0x08008281
 8008200:	080082ad 	.word	0x080082ad
 8008204:	080082ad 	.word	0x080082ad
 8008208:	080082ad 	.word	0x080082ad
 800820c:	080082ad 	.word	0x080082ad
 8008210:	080082ad 	.word	0x080082ad
 8008214:	080082ad 	.word	0x080082ad
 8008218:	080082ad 	.word	0x080082ad
 800821c:	08008297 	.word	0x08008297
 8008220:	080082ad 	.word	0x080082ad
 8008224:	080082ad 	.word	0x080082ad
 8008228:	080082ad 	.word	0x080082ad
 800822c:	080082ad 	.word	0x080082ad
 8008230:	080082ad 	.word	0x080082ad
 8008234:	080082ad 	.word	0x080082ad
 8008238:	080082ad 	.word	0x080082ad
 800823c:	080082b5 	.word	0x080082b5
 8008240:	080082ad 	.word	0x080082ad
 8008244:	080082ad 	.word	0x080082ad
 8008248:	080082ad 	.word	0x080082ad
 800824c:	080082ad 	.word	0x080082ad
 8008250:	080082ad 	.word	0x080082ad
 8008254:	080082ad 	.word	0x080082ad
 8008258:	080082ad 	.word	0x080082ad
 800825c:	080082b5 	.word	0x080082b5
 8008260:	080082ad 	.word	0x080082ad
 8008264:	080082ad 	.word	0x080082ad
 8008268:	080082ad 	.word	0x080082ad
 800826c:	080082ad 	.word	0x080082ad
 8008270:	080082ad 	.word	0x080082ad
 8008274:	080082ad 	.word	0x080082ad
 8008278:	080082ad 	.word	0x080082ad
 800827c:	080082b5 	.word	0x080082b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008284:	3308      	adds	r3, #8
 8008286:	2101      	movs	r1, #1
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fe95 	bl	8009fb8 <RCCEx_PLL2_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008294:	e00f      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800829a:	3328      	adds	r3, #40	; 0x28
 800829c:	2101      	movs	r1, #1
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 ff3c 	bl	800a11c <RCCEx_PLL3_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80082aa:	e004      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082b2:	e000      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80082b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10a      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082be:	4bbf      	ldr	r3, [pc, #764]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80082c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082cc:	4abb      	ldr	r2, [pc, #748]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082ce:	430b      	orrs	r3, r1
 80082d0:	6553      	str	r3, [r2, #84]	; 0x54
 80082d2:	e003      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f002 0302 	and.w	r3, r2, #2
 80082e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082ec:	2300      	movs	r3, #0
 80082ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80082f6:	460b      	mov	r3, r1
 80082f8:	4313      	orrs	r3, r2
 80082fa:	d041      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008302:	2b05      	cmp	r3, #5
 8008304:	d824      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008359 	.word	0x08008359
 8008310:	08008325 	.word	0x08008325
 8008314:	0800833b 	.word	0x0800833b
 8008318:	08008359 	.word	0x08008359
 800831c:	08008359 	.word	0x08008359
 8008320:	08008359 	.word	0x08008359
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008328:	3308      	adds	r3, #8
 800832a:	2101      	movs	r1, #1
 800832c:	4618      	mov	r0, r3
 800832e:	f001 fe43 	bl	8009fb8 <RCCEx_PLL2_Config>
 8008332:	4603      	mov	r3, r0
 8008334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008338:	e00f      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833e:	3328      	adds	r3, #40	; 0x28
 8008340:	2101      	movs	r1, #1
 8008342:	4618      	mov	r0, r3
 8008344:	f001 feea 	bl	800a11c <RCCEx_PLL3_Config>
 8008348:	4603      	mov	r3, r0
 800834a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800834e:	e004      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008356:	e000      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800835a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008362:	4b96      	ldr	r3, [pc, #600]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008366:	f023 0107 	bic.w	r1, r3, #7
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008370:	4a92      	ldr	r2, [pc, #584]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008372:	430b      	orrs	r3, r1
 8008374:	6553      	str	r3, [r2, #84]	; 0x54
 8008376:	e003      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800837c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f002 0304 	and.w	r3, r2, #4
 800838c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008396:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800839a:	460b      	mov	r3, r1
 800839c:	4313      	orrs	r3, r2
 800839e:	d044      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083a8:	2b05      	cmp	r3, #5
 80083aa:	d825      	bhi.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	08008401 	.word	0x08008401
 80083b8:	080083cd 	.word	0x080083cd
 80083bc:	080083e3 	.word	0x080083e3
 80083c0:	08008401 	.word	0x08008401
 80083c4:	08008401 	.word	0x08008401
 80083c8:	08008401 	.word	0x08008401
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d0:	3308      	adds	r3, #8
 80083d2:	2101      	movs	r1, #1
 80083d4:	4618      	mov	r0, r3
 80083d6:	f001 fdef 	bl	8009fb8 <RCCEx_PLL2_Config>
 80083da:	4603      	mov	r3, r0
 80083dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083e0:	e00f      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083e6:	3328      	adds	r3, #40	; 0x28
 80083e8:	2101      	movs	r1, #1
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 fe96 	bl	800a11c <RCCEx_PLL3_Config>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083f6:	e004      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083fe:	e000      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10b      	bne.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800840a:	4b6c      	ldr	r3, [pc, #432]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840e:	f023 0107 	bic.w	r1, r3, #7
 8008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800841a:	4a68      	ldr	r2, [pc, #416]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800841c:	430b      	orrs	r3, r1
 800841e:	6593      	str	r3, [r2, #88]	; 0x58
 8008420:	e003      	b.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800842a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	f002 0320 	and.w	r3, r2, #32
 8008436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800843a:	2300      	movs	r3, #0
 800843c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008444:	460b      	mov	r3, r1
 8008446:	4313      	orrs	r3, r2
 8008448:	d055      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800844a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800844e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008456:	d033      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800845c:	d82c      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008462:	d02f      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008468:	d826      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800846a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800846e:	d02b      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008470:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008474:	d820      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800847a:	d012      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800847c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008480:	d81a      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d022      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800848a:	d115      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800848c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008490:	3308      	adds	r3, #8
 8008492:	2100      	movs	r1, #0
 8008494:	4618      	mov	r0, r3
 8008496:	f001 fd8f 	bl	8009fb8 <RCCEx_PLL2_Config>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084a0:	e015      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a6:	3328      	adds	r3, #40	; 0x28
 80084a8:	2102      	movs	r1, #2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fe36 	bl	800a11c <RCCEx_PLL3_Config>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084b6:	e00a      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084be:	e006      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084c0:	bf00      	nop
 80084c2:	e004      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084c4:	bf00      	nop
 80084c6:	e002      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084c8:	bf00      	nop
 80084ca:	e000      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10b      	bne.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084d6:	4b39      	ldr	r3, [pc, #228]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80084de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e6:	4a35      	ldr	r2, [pc, #212]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084e8:	430b      	orrs	r3, r1
 80084ea:	6553      	str	r3, [r2, #84]	; 0x54
 80084ec:	e003      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008506:	2300      	movs	r3, #0
 8008508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800850c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008510:	460b      	mov	r3, r1
 8008512:	4313      	orrs	r3, r2
 8008514:	d058      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800851e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008522:	d033      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008524:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008528:	d82c      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800852a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852e:	d02f      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008534:	d826      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800853a:	d02b      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800853c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008540:	d820      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008546:	d012      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800854c:	d81a      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d022      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008556:	d115      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800855c:	3308      	adds	r3, #8
 800855e:	2100      	movs	r1, #0
 8008560:	4618      	mov	r0, r3
 8008562:	f001 fd29 	bl	8009fb8 <RCCEx_PLL2_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800856c:	e015      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008572:	3328      	adds	r3, #40	; 0x28
 8008574:	2102      	movs	r1, #2
 8008576:	4618      	mov	r0, r3
 8008578:	f001 fdd0 	bl	800a11c <RCCEx_PLL3_Config>
 800857c:	4603      	mov	r3, r0
 800857e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008582:	e00a      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800858a:	e006      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800858c:	bf00      	nop
 800858e:	e004      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008590:	bf00      	nop
 8008592:	e002      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008594:	bf00      	nop
 8008596:	e000      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800859a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10e      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085a2:	4b06      	ldr	r3, [pc, #24]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80085aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085b2:	4a02      	ldr	r2, [pc, #8]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085b4:	430b      	orrs	r3, r1
 80085b6:	6593      	str	r3, [r2, #88]	; 0x58
 80085b8:	e006      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80085ba:	bf00      	nop
 80085bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80085d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085d8:	2300      	movs	r3, #0
 80085da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80085e2:	460b      	mov	r3, r1
 80085e4:	4313      	orrs	r3, r2
 80085e6:	d055      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80085e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085f4:	d033      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80085f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085fa:	d82c      	bhi.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008600:	d02f      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008606:	d826      	bhi.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008608:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800860c:	d02b      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800860e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008612:	d820      	bhi.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008618:	d012      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800861a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800861e:	d81a      	bhi.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d022      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008628:	d115      	bne.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800862a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862e:	3308      	adds	r3, #8
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fcc0 	bl	8009fb8 <RCCEx_PLL2_Config>
 8008638:	4603      	mov	r3, r0
 800863a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800863e:	e015      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008644:	3328      	adds	r3, #40	; 0x28
 8008646:	2102      	movs	r1, #2
 8008648:	4618      	mov	r0, r3
 800864a:	f001 fd67 	bl	800a11c <RCCEx_PLL3_Config>
 800864e:	4603      	mov	r3, r0
 8008650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008654:	e00a      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800865c:	e006      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800865e:	bf00      	nop
 8008660:	e004      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008662:	bf00      	nop
 8008664:	e002      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008666:	bf00      	nop
 8008668:	e000      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800866a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008674:	4ba1      	ldr	r3, [pc, #644]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008678:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008684:	4a9d      	ldr	r2, [pc, #628]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008686:	430b      	orrs	r3, r1
 8008688:	6593      	str	r3, [r2, #88]	; 0x58
 800868a:	e003      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008690:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f002 0308 	and.w	r3, r2, #8
 80086a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086a4:	2300      	movs	r3, #0
 80086a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80086ae:	460b      	mov	r3, r1
 80086b0:	4313      	orrs	r3, r2
 80086b2:	d01e      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80086b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c0:	d10c      	bne.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c6:	3328      	adds	r3, #40	; 0x28
 80086c8:	2102      	movs	r1, #2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 fd26 	bl	800a11c <RCCEx_PLL3_Config>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086dc:	4b87      	ldr	r3, [pc, #540]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ec:	4a83      	ldr	r2, [pc, #524]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086ee:	430b      	orrs	r3, r1
 80086f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f002 0310 	and.w	r3, r2, #16
 80086fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008702:	2300      	movs	r3, #0
 8008704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008708:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800870c:	460b      	mov	r3, r1
 800870e:	4313      	orrs	r3, r2
 8008710:	d01e      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800871a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871e:	d10c      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008724:	3328      	adds	r3, #40	; 0x28
 8008726:	2102      	movs	r1, #2
 8008728:	4618      	mov	r0, r3
 800872a:	f001 fcf7 	bl	800a11c <RCCEx_PLL3_Config>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800873a:	4b70      	ldr	r3, [pc, #448]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800873c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800874a:	4a6c      	ldr	r2, [pc, #432]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800874c:	430b      	orrs	r3, r1
 800874e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800875c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008760:	2300      	movs	r3, #0
 8008762:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008766:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800876a:	460b      	mov	r3, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	d03e      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800877c:	d022      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800877e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008782:	d81b      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878c:	d00b      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800878e:	e015      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008794:	3308      	adds	r3, #8
 8008796:	2100      	movs	r1, #0
 8008798:	4618      	mov	r0, r3
 800879a:	f001 fc0d 	bl	8009fb8 <RCCEx_PLL2_Config>
 800879e:	4603      	mov	r3, r0
 80087a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087a4:	e00f      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087aa:	3328      	adds	r3, #40	; 0x28
 80087ac:	2102      	movs	r1, #2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 fcb4 	bl	800a11c <RCCEx_PLL3_Config>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087ba:	e004      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087c2:	e000      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80087c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10b      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087ce:	4b4b      	ldr	r3, [pc, #300]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80087d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087de:	4a47      	ldr	r2, [pc, #284]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087e0:	430b      	orrs	r3, r1
 80087e2:	6593      	str	r3, [r2, #88]	; 0x58
 80087e4:	e003      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80087fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80087fc:	2300      	movs	r3, #0
 80087fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008800:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008804:	460b      	mov	r3, r1
 8008806:	4313      	orrs	r3, r2
 8008808:	d03b      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008812:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008816:	d01f      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008818:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800881c:	d818      	bhi.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800881e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008822:	d003      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008828:	d007      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800882a:	e011      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800882c:	4b33      	ldr	r3, [pc, #204]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	4a32      	ldr	r2, [pc, #200]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008838:	e00f      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800883e:	3328      	adds	r3, #40	; 0x28
 8008840:	2101      	movs	r1, #1
 8008842:	4618      	mov	r0, r3
 8008844:	f001 fc6a 	bl	800a11c <RCCEx_PLL3_Config>
 8008848:	4603      	mov	r3, r0
 800884a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800884e:	e004      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008856:	e000      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800885a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10b      	bne.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008862:	4b26      	ldr	r3, [pc, #152]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008866:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800886a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800886e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008872:	4a22      	ldr	r2, [pc, #136]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008874:	430b      	orrs	r3, r1
 8008876:	6553      	str	r3, [r2, #84]	; 0x54
 8008878:	e003      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800887e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800888e:	673b      	str	r3, [r7, #112]	; 0x70
 8008890:	2300      	movs	r3, #0
 8008892:	677b      	str	r3, [r7, #116]	; 0x74
 8008894:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008898:	460b      	mov	r3, r1
 800889a:	4313      	orrs	r3, r2
 800889c:	d034      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80088a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ac:	d007      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80088ae:	e011      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b0:	4b12      	ldr	r3, [pc, #72]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	4a11      	ldr	r2, [pc, #68]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088bc:	e00e      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c2:	3308      	adds	r3, #8
 80088c4:	2102      	movs	r1, #2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f001 fb76 	bl	8009fb8 <RCCEx_PLL2_Config>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088d2:	e003      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10d      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f2:	4a02      	ldr	r2, [pc, #8]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088f4:	430b      	orrs	r3, r1
 80088f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088f8:	e006      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80088fa:	bf00      	nop
 80088fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008914:	66bb      	str	r3, [r7, #104]	; 0x68
 8008916:	2300      	movs	r3, #0
 8008918:	66fb      	str	r3, [r7, #108]	; 0x6c
 800891a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800891e:	460b      	mov	r3, r1
 8008920:	4313      	orrs	r3, r2
 8008922:	d00c      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008928:	3328      	adds	r3, #40	; 0x28
 800892a:	2102      	movs	r1, #2
 800892c:	4618      	mov	r0, r3
 800892e:	f001 fbf5 	bl	800a11c <RCCEx_PLL3_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800894a:	663b      	str	r3, [r7, #96]	; 0x60
 800894c:	2300      	movs	r3, #0
 800894e:	667b      	str	r3, [r7, #100]	; 0x64
 8008950:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008954:	460b      	mov	r3, r1
 8008956:	4313      	orrs	r3, r2
 8008958:	d038      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800895a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800895e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008966:	d018      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800896c:	d811      	bhi.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800896e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008972:	d014      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008978:	d80b      	bhi.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d011      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800897e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008982:	d106      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008984:	4bc3      	ldr	r3, [pc, #780]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4ac2      	ldr	r2, [pc, #776]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800898a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800898e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008990:	e008      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008998:	e004      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800899a:	bf00      	nop
 800899c:	e002      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800899e:	bf00      	nop
 80089a0:	e000      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80089a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10b      	bne.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089ac:	4bb9      	ldr	r3, [pc, #740]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089bc:	4ab5      	ldr	r2, [pc, #724]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089be:	430b      	orrs	r3, r1
 80089c0:	6553      	str	r3, [r2, #84]	; 0x54
 80089c2:	e003      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80089d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80089da:	2300      	movs	r3, #0
 80089dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80089e2:	460b      	mov	r3, r1
 80089e4:	4313      	orrs	r3, r2
 80089e6:	d009      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089e8:	4baa      	ldr	r3, [pc, #680]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f6:	4aa7      	ldr	r2, [pc, #668]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089f8:	430b      	orrs	r3, r1
 80089fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008a08:	653b      	str	r3, [r7, #80]	; 0x50
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	657b      	str	r3, [r7, #84]	; 0x54
 8008a0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008a12:	460b      	mov	r3, r1
 8008a14:	4313      	orrs	r3, r2
 8008a16:	d00a      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a18:	4b9e      	ldr	r3, [pc, #632]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a28:	4a9a      	ldr	r2, [pc, #616]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a2a:	430b      	orrs	r3, r1
 8008a2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008a44:	460b      	mov	r3, r1
 8008a46:	4313      	orrs	r3, r2
 8008a48:	d009      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a4a:	4b92      	ldr	r3, [pc, #584]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a4e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a58:	4a8e      	ldr	r2, [pc, #568]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5a:	430b      	orrs	r3, r1
 8008a5c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008a74:	460b      	mov	r3, r1
 8008a76:	4313      	orrs	r3, r2
 8008a78:	d00e      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a7a:	4b86      	ldr	r3, [pc, #536]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	4a85      	ldr	r2, [pc, #532]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a84:	6113      	str	r3, [r2, #16]
 8008a86:	4b83      	ldr	r3, [pc, #524]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a88:	6919      	ldr	r1, [r3, #16]
 8008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a92:	4a80      	ldr	r2, [pc, #512]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a94:	430b      	orrs	r3, r1
 8008a96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aaa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	d009      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ab4:	4b77      	ldr	r3, [pc, #476]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac2:	4a74      	ldr	r2, [pc, #464]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ac4:	430b      	orrs	r3, r1
 8008ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ada:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	d00a      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ae4:	4b6b      	ldr	r3, [pc, #428]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008af4:	4a67      	ldr	r2, [pc, #412]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af6:	430b      	orrs	r3, r1
 8008af8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	2100      	movs	r1, #0
 8008b04:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008b10:	460b      	mov	r3, r1
 8008b12:	4313      	orrs	r3, r2
 8008b14:	d011      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f001 fa4a 	bl	8009fb8 <RCCEx_PLL2_Config>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	2100      	movs	r1, #0
 8008b44:	6239      	str	r1, [r7, #32]
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b50:	460b      	mov	r3, r1
 8008b52:	4313      	orrs	r3, r2
 8008b54:	d011      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 fa2a 	bl	8009fb8 <RCCEx_PLL2_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b82:	2100      	movs	r1, #0
 8008b84:	61b9      	str	r1, [r7, #24]
 8008b86:	f003 0304 	and.w	r3, r3, #4
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b90:	460b      	mov	r3, r1
 8008b92:	4313      	orrs	r3, r2
 8008b94:	d011      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	2102      	movs	r1, #2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 fa0a 	bl	8009fb8 <RCCEx_PLL2_Config>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	6139      	str	r1, [r7, #16]
 8008bc6:	f003 0308 	and.w	r3, r3, #8
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	d011      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bda:	3328      	adds	r3, #40	; 0x28
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f001 fa9c 	bl	800a11c <RCCEx_PLL3_Config>
 8008be4:	4603      	mov	r3, r0
 8008be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	2100      	movs	r1, #0
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	f003 0310 	and.w	r3, r3, #16
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c10:	460b      	mov	r3, r1
 8008c12:	4313      	orrs	r3, r2
 8008c14:	d011      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c1a:	3328      	adds	r3, #40	; 0x28
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 fa7c 	bl	800a11c <RCCEx_PLL3_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	2100      	movs	r1, #0
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	607b      	str	r3, [r7, #4]
 8008c4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c50:	460b      	mov	r3, r1
 8008c52:	4313      	orrs	r3, r2
 8008c54:	d011      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5a:	3328      	adds	r3, #40	; 0x28
 8008c5c:	2102      	movs	r1, #2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 fa5c 	bl	800a11c <RCCEx_PLL3_Config>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008c7a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	e000      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c94:	58024400 	.word	0x58024400

08008c98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b090      	sub	sp, #64	; 0x40
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008caa:	430b      	orrs	r3, r1
 8008cac:	f040 8094 	bne.w	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008cb0:	4b9e      	ldr	r3, [pc, #632]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb4:	f003 0307 	and.w	r3, r3, #7
 8008cb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	f200 8087 	bhi.w	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008cdd 	.word	0x08008cdd
 8008ccc:	08008d05 	.word	0x08008d05
 8008cd0:	08008d2d 	.word	0x08008d2d
 8008cd4:	08008dc9 	.word	0x08008dc9
 8008cd8:	08008d55 	.word	0x08008d55
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cdc:	4b93      	ldr	r3, [pc, #588]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ce8:	d108      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f001 f810 	bl	8009d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf8:	f000 bd45 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d00:	f000 bd41 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d04:	4b89      	ldr	r3, [pc, #548]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d10:	d108      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d12:	f107 0318 	add.w	r3, r7, #24
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fd54 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d20:	f000 bd31 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d28:	f000 bd2d 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d2c:	4b7f      	ldr	r3, [pc, #508]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d38:	d108      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3a:	f107 030c 	add.w	r3, r7, #12
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fe94 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d48:	f000 bd1d 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d50:	f000 bd19 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d54:	4b75      	ldr	r3, [pc, #468]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d5e:	4b73      	ldr	r3, [pc, #460]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0304 	and.w	r3, r3, #4
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d10c      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d109      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d70:	4b6e      	ldr	r3, [pc, #440]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	08db      	lsrs	r3, r3, #3
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	4a6d      	ldr	r2, [pc, #436]	; (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d82:	e01f      	b.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d84:	4b69      	ldr	r3, [pc, #420]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d90:	d106      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d98:	d102      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d9a:	4b66      	ldr	r3, [pc, #408]	; (8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d9e:	e011      	b.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008da0:	4b62      	ldr	r3, [pc, #392]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dac:	d106      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db4:	d102      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008db6:	4b60      	ldr	r3, [pc, #384]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dba:	e003      	b.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008dc0:	f000 bce1 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dc4:	f000 bcdf 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dc8:	4b5c      	ldr	r3, [pc, #368]	; (8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dcc:	f000 bcdb 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd4:	f000 bcd7 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ddc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008de0:	430b      	orrs	r3, r1
 8008de2:	f040 80ad 	bne.w	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008de6:	4b51      	ldr	r3, [pc, #324]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008dee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df6:	d056      	beq.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dfe:	f200 8090 	bhi.w	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	2bc0      	cmp	r3, #192	; 0xc0
 8008e06:	f000 8088 	beq.w	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	2bc0      	cmp	r3, #192	; 0xc0
 8008e0e:	f200 8088 	bhi.w	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	2b80      	cmp	r3, #128	; 0x80
 8008e16:	d032      	beq.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	2b80      	cmp	r3, #128	; 0x80
 8008e1c:	f200 8081 	bhi.w	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	2b40      	cmp	r3, #64	; 0x40
 8008e2a:	d014      	beq.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008e2c:	e079      	b.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e2e:	4b3f      	ldr	r3, [pc, #252]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e3a:	d108      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 ff67 	bl	8009d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e4a:	f000 bc9c 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e52:	f000 bc98 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e56:	4b35      	ldr	r3, [pc, #212]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e62:	d108      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e64:	f107 0318 	add.w	r3, r7, #24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fcab 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e72:	f000 bc88 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e7a:	f000 bc84 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e7e:	4b2b      	ldr	r3, [pc, #172]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e8a:	d108      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e8c:	f107 030c 	add.w	r3, r7, #12
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fdeb 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e9a:	f000 bc74 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea2:	f000 bc70 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ea6:	4b21      	ldr	r3, [pc, #132]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008eae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008eb0:	4b1e      	ldr	r3, [pc, #120]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d10c      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ec2:	4b1a      	ldr	r3, [pc, #104]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	08db      	lsrs	r3, r3, #3
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	4a18      	ldr	r2, [pc, #96]	; (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ece:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed4:	e01f      	b.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ed6:	4b15      	ldr	r3, [pc, #84]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee2:	d106      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eea:	d102      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008eec:	4b11      	ldr	r3, [pc, #68]	; (8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef0:	e011      	b.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ef2:	4b0e      	ldr	r3, [pc, #56]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008efe:	d106      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f06:	d102      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f08:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f0c:	e003      	b.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f12:	f000 bc38 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f16:	f000 bc36 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f1a:	4b08      	ldr	r3, [pc, #32]	; (8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f1e:	f000 bc32 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f26:	f000 bc2e 	b.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f2a:	bf00      	nop
 8008f2c:	58024400 	.word	0x58024400
 8008f30:	03d09000 	.word	0x03d09000
 8008f34:	003d0900 	.word	0x003d0900
 8008f38:	017d7840 	.word	0x017d7840
 8008f3c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f44:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	f040 809c 	bne.w	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008f4e:	4b9e      	ldr	r3, [pc, #632]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f52:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008f56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f5e:	d054      	beq.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f66:	f200 808b 	bhi.w	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f70:	f000 8083 	beq.w	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f7a:	f200 8081 	bhi.w	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f84:	d02f      	beq.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f8c:	d878      	bhi.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f9a:	d012      	beq.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008f9c:	e070      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f9e:	4b8a      	ldr	r3, [pc, #552]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008faa:	d107      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 feaf 	bl	8009d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fba:	e3e4      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc0:	e3e1      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fc2:	4b81      	ldr	r3, [pc, #516]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fce:	d107      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd0:	f107 0318 	add.w	r3, r7, #24
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fbf5 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fde:	e3d2      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe4:	e3cf      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fe6:	4b78      	ldr	r3, [pc, #480]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff2:	d107      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ff4:	f107 030c 	add.w	r3, r7, #12
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fd37 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009002:	e3c0      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009008:	e3bd      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800900a:	4b6f      	ldr	r3, [pc, #444]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800900c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800900e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009012:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009014:	4b6c      	ldr	r3, [pc, #432]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0304 	and.w	r3, r3, #4
 800901c:	2b04      	cmp	r3, #4
 800901e:	d10c      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009026:	4b68      	ldr	r3, [pc, #416]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	08db      	lsrs	r3, r3, #3
 800902c:	f003 0303 	and.w	r3, r3, #3
 8009030:	4a66      	ldr	r2, [pc, #408]	; (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009032:	fa22 f303 	lsr.w	r3, r2, r3
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009038:	e01e      	b.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800903a:	4b63      	ldr	r3, [pc, #396]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009046:	d106      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800904e:	d102      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009050:	4b5f      	ldr	r3, [pc, #380]	; (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009054:	e010      	b.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009056:	4b5c      	ldr	r3, [pc, #368]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800905e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009062:	d106      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906a:	d102      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800906c:	4b59      	ldr	r3, [pc, #356]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009070:	e002      	b.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009076:	e386      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009078:	e385      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800907a:	4b57      	ldr	r3, [pc, #348]	; (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800907e:	e382      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009084:	e37f      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800908a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800908e:	430b      	orrs	r3, r1
 8009090:	f040 80a7 	bne.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009094:	4b4c      	ldr	r3, [pc, #304]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009098:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800909c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090a4:	d055      	beq.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090ac:	f200 8096 	bhi.w	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090b6:	f000 8084 	beq.w	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090c0:	f200 808c 	bhi.w	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ca:	d030      	beq.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090d2:	f200 8083 	bhi.w	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d004      	beq.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090e2:	d012      	beq.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80090e4:	e07a      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090e6:	4b38      	ldr	r3, [pc, #224]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090f2:	d107      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fe0b 	bl	8009d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009102:	e340      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009108:	e33d      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800910a:	4b2f      	ldr	r3, [pc, #188]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009116:	d107      	bne.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009118:	f107 0318 	add.w	r3, r7, #24
 800911c:	4618      	mov	r0, r3
 800911e:	f000 fb51 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009126:	e32e      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800912c:	e32b      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800912e:	4b26      	ldr	r3, [pc, #152]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913a:	d107      	bne.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800913c:	f107 030c 	add.w	r3, r7, #12
 8009140:	4618      	mov	r0, r3
 8009142:	f000 fc93 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800914a:	e31c      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009150:	e319      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009152:	4b1d      	ldr	r3, [pc, #116]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009156:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800915a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800915c:	4b1a      	ldr	r3, [pc, #104]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b04      	cmp	r3, #4
 8009166:	d10c      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916a:	2b00      	cmp	r3, #0
 800916c:	d109      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800916e:	4b16      	ldr	r3, [pc, #88]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	08db      	lsrs	r3, r3, #3
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	4a14      	ldr	r2, [pc, #80]	; (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800917a:	fa22 f303 	lsr.w	r3, r2, r3
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009180:	e01e      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009182:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800918e:	d106      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009196:	d102      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009198:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800919a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919c:	e010      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800919e:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091aa:	d106      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80091ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b2:	d102      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091b4:	4b07      	ldr	r3, [pc, #28]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091b8:	e002      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80091be:	e2e2      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091c0:	e2e1      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091c2:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c6:	e2de      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091c8:	58024400 	.word	0x58024400
 80091cc:	03d09000 	.word	0x03d09000
 80091d0:	003d0900 	.word	0x003d0900
 80091d4:	017d7840 	.word	0x017d7840
 80091d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e0:	e2d1      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80091e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80091ea:	430b      	orrs	r3, r1
 80091ec:	f040 809c 	bne.w	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80091f0:	4b93      	ldr	r3, [pc, #588]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80091f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009200:	d054      	beq.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009208:	f200 808b 	bhi.w	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009212:	f000 8083 	beq.w	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800921c:	f200 8081 	bhi.w	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009226:	d02f      	beq.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800922e:	d878      	bhi.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800923c:	d012      	beq.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800923e:	e070      	b.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009240:	4b7f      	ldr	r3, [pc, #508]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800924c:	d107      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800924e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fd5e 	bl	8009d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800925c:	e293      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009262:	e290      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009264:	4b76      	ldr	r3, [pc, #472]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800926c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009270:	d107      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009272:	f107 0318 	add.w	r3, r7, #24
 8009276:	4618      	mov	r0, r3
 8009278:	f000 faa4 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009280:	e281      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009286:	e27e      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009288:	4b6d      	ldr	r3, [pc, #436]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009294:	d107      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009296:	f107 030c 	add.w	r3, r7, #12
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fbe6 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a4:	e26f      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092aa:	e26c      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092ac:	4b64      	ldr	r3, [pc, #400]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092b6:	4b62      	ldr	r3, [pc, #392]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d10c      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80092c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d109      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092c8:	4b5d      	ldr	r3, [pc, #372]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	08db      	lsrs	r3, r3, #3
 80092ce:	f003 0303 	and.w	r3, r3, #3
 80092d2:	4a5c      	ldr	r2, [pc, #368]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80092d4:	fa22 f303 	lsr.w	r3, r2, r3
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092da:	e01e      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092dc:	4b58      	ldr	r3, [pc, #352]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e8:	d106      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80092ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092f0:	d102      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092f2:	4b55      	ldr	r3, [pc, #340]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f6:	e010      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092f8:	4b51      	ldr	r3, [pc, #324]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009304:	d106      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930c:	d102      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800930e:	4b4f      	ldr	r3, [pc, #316]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009312:	e002      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009318:	e235      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800931a:	e234      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800931c:	4b4c      	ldr	r3, [pc, #304]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009320:	e231      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009322:	2300      	movs	r3, #0
 8009324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009326:	e22e      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800932c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009330:	430b      	orrs	r3, r1
 8009332:	f040 808f 	bne.w	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009336:	4b42      	ldr	r3, [pc, #264]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800933e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009346:	d06b      	beq.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800934e:	d874      	bhi.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009352:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009356:	d056      	beq.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800935e:	d86c      	bhi.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009362:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009366:	d03b      	beq.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800936e:	d864      	bhi.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009376:	d021      	beq.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800937e:	d85c      	bhi.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	2b00      	cmp	r3, #0
 8009384:	d004      	beq.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800938c:	d004      	beq.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800938e:	e054      	b.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009390:	f7fe fa4c 	bl	800782c <HAL_RCC_GetPCLK1Freq>
 8009394:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009396:	e1f6      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009398:	4b29      	ldr	r3, [pc, #164]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093a4:	d107      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a6:	f107 0318 	add.w	r3, r7, #24
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fa0a 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093b4:	e1e7      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093ba:	e1e4      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093bc:	4b20      	ldr	r3, [pc, #128]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c8:	d107      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ca:	f107 030c 	add.w	r3, r7, #12
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 fb4c 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093d8:	e1d5      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093de:	e1d2      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093e0:	4b17      	ldr	r3, [pc, #92]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d109      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093ec:	4b14      	ldr	r3, [pc, #80]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	08db      	lsrs	r3, r3, #3
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	4a13      	ldr	r2, [pc, #76]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80093f8:	fa22 f303 	lsr.w	r3, r2, r3
 80093fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093fe:	e1c2      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009404:	e1bf      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009406:	4b0e      	ldr	r3, [pc, #56]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009412:	d102      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009414:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009418:	e1b5      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800941e:	e1b2      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009420:	4b07      	ldr	r3, [pc, #28]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800942c:	d102      	bne.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800942e:	4b07      	ldr	r3, [pc, #28]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009432:	e1a8      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009438:	e1a5      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800943e:	e1a2      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009440:	58024400 	.word	0x58024400
 8009444:	03d09000 	.word	0x03d09000
 8009448:	003d0900 	.word	0x003d0900
 800944c:	017d7840 	.word	0x017d7840
 8009450:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009458:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800945c:	430b      	orrs	r3, r1
 800945e:	d173      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009460:	4b9c      	ldr	r3, [pc, #624]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009468:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009470:	d02f      	beq.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009478:	d863      	bhi.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	d004      	beq.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009486:	d012      	beq.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009488:	e05b      	b.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800948a:	4b92      	ldr	r3, [pc, #584]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009496:	d107      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009498:	f107 0318 	add.w	r3, r7, #24
 800949c:	4618      	mov	r0, r3
 800949e:	f000 f991 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a6:	e16e      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094ac:	e16b      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094ae:	4b89      	ldr	r3, [pc, #548]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ba:	d107      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094bc:	f107 030c 	add.w	r3, r7, #12
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fad3 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ca:	e15c      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094d0:	e159      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094d2:	4b80      	ldr	r3, [pc, #512]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094dc:	4b7d      	ldr	r3, [pc, #500]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0304 	and.w	r3, r3, #4
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	d10c      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80094e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d109      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094ee:	4b79      	ldr	r3, [pc, #484]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	08db      	lsrs	r3, r3, #3
 80094f4:	f003 0303 	and.w	r3, r3, #3
 80094f8:	4a77      	ldr	r2, [pc, #476]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80094fa:	fa22 f303 	lsr.w	r3, r2, r3
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009500:	e01e      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009502:	4b74      	ldr	r3, [pc, #464]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950e:	d106      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009516:	d102      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009518:	4b70      	ldr	r3, [pc, #448]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800951c:	e010      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800951e:	4b6d      	ldr	r3, [pc, #436]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800952a:	d106      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800952c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009532:	d102      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009534:	4b6a      	ldr	r3, [pc, #424]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009538:	e002      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800953e:	e122      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009540:	e121      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009546:	e11e      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800954c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009550:	430b      	orrs	r3, r1
 8009552:	d133      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009554:	4b5f      	ldr	r3, [pc, #380]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800955c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800956a:	d012      	beq.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800956c:	e023      	b.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800956e:	4b59      	ldr	r3, [pc, #356]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800957a:	d107      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800957c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fbc7 	bl	8009d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800958a:	e0fc      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009590:	e0f9      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009592:	4b50      	ldr	r3, [pc, #320]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800959a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800959e:	d107      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a0:	f107 0318 	add.w	r3, r7, #24
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 f90d 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ae:	e0ea      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095b4:	e0e7      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ba:	e0e4      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095c0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80095c4:	430b      	orrs	r3, r1
 80095c6:	f040 808d 	bne.w	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80095ca:	4b42      	ldr	r3, [pc, #264]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80095d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095da:	d06b      	beq.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095e2:	d874      	bhi.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80095e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ea:	d056      	beq.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f2:	d86c      	bhi.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095fa:	d03b      	beq.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009602:	d864      	bhi.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800960a:	d021      	beq.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009612:	d85c      	bhi.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800961a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009620:	d004      	beq.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009622:	e054      	b.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009624:	f000 f8b8 	bl	8009798 <HAL_RCCEx_GetD3PCLK1Freq>
 8009628:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800962a:	e0ac      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800962c:	4b29      	ldr	r3, [pc, #164]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009638:	d107      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800963a:	f107 0318 	add.w	r3, r7, #24
 800963e:	4618      	mov	r0, r3
 8009640:	f000 f8c0 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009648:	e09d      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800964e:	e09a      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009650:	4b20      	ldr	r3, [pc, #128]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800965c:	d107      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800965e:	f107 030c 	add.w	r3, r7, #12
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fa02 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800966c:	e08b      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009672:	e088      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009674:	4b17      	ldr	r3, [pc, #92]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	2b04      	cmp	r3, #4
 800967e:	d109      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009680:	4b14      	ldr	r3, [pc, #80]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	08db      	lsrs	r3, r3, #3
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	4a13      	ldr	r2, [pc, #76]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800968c:	fa22 f303 	lsr.w	r3, r2, r3
 8009690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009692:	e078      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009698:	e075      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800969a:	4b0e      	ldr	r3, [pc, #56]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a6:	d102      	bne.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80096a8:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80096aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ac:	e06b      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096b2:	e068      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096b4:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096c0:	d102      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80096c2:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80096c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096c6:	e05e      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096cc:	e05b      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096d2:	e058      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096d4:	58024400 	.word	0x58024400
 80096d8:	03d09000 	.word	0x03d09000
 80096dc:	003d0900 	.word	0x003d0900
 80096e0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80096e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80096ec:	430b      	orrs	r3, r1
 80096ee:	d148      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80096f0:	4b27      	ldr	r3, [pc, #156]	; (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80096f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009700:	d02a      	beq.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009708:	d838      	bhi.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009716:	d00d      	beq.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009718:	e030      	b.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800971a:	4b1d      	ldr	r3, [pc, #116]	; (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009726:	d102      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009728:	4b1a      	ldr	r3, [pc, #104]	; (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800972c:	e02b      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009732:	e028      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009734:	4b16      	ldr	r3, [pc, #88]	; (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009740:	d107      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009746:	4618      	mov	r0, r3
 8009748:	f000 fae4 	bl	8009d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009750:	e019      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009756:	e016      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009758:	4b0d      	ldr	r3, [pc, #52]	; (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009764:	d107      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009766:	f107 0318 	add.w	r3, r7, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f000 f82a 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009774:	e007      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800977a:	e004      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009780:	e001      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009788:	4618      	mov	r0, r3
 800978a:	3740      	adds	r7, #64	; 0x40
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	58024400 	.word	0x58024400
 8009794:	017d7840 	.word	0x017d7840

08009798 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800979c:	f7fe f816 	bl	80077cc <HAL_RCC_GetHCLKFreq>
 80097a0:	4602      	mov	r2, r0
 80097a2:	4b06      	ldr	r3, [pc, #24]	; (80097bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	091b      	lsrs	r3, r3, #4
 80097a8:	f003 0307 	and.w	r3, r3, #7
 80097ac:	4904      	ldr	r1, [pc, #16]	; (80097c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097ae:	5ccb      	ldrb	r3, [r1, r3]
 80097b0:	f003 031f 	and.w	r3, r3, #31
 80097b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	58024400 	.word	0x58024400
 80097c0:	0800d238 	.word	0x0800d238

080097c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b089      	sub	sp, #36	; 0x24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097cc:	4ba1      	ldr	r3, [pc, #644]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d0:	f003 0303 	and.w	r3, r3, #3
 80097d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80097d6:	4b9f      	ldr	r3, [pc, #636]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097da:	0b1b      	lsrs	r3, r3, #12
 80097dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097e2:	4b9c      	ldr	r3, [pc, #624]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	091b      	lsrs	r3, r3, #4
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80097ee:	4b99      	ldr	r3, [pc, #612]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f2:	08db      	lsrs	r3, r3, #3
 80097f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	fb02 f303 	mul.w	r3, r2, r3
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009806:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8111 	beq.w	8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	2b02      	cmp	r3, #2
 8009816:	f000 8083 	beq.w	8009920 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	2b02      	cmp	r3, #2
 800981e:	f200 80a1 	bhi.w	8009964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d056      	beq.n	80098dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800982e:	e099      	b.n	8009964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009830:	4b88      	ldr	r3, [pc, #544]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0320 	and.w	r3, r3, #32
 8009838:	2b00      	cmp	r3, #0
 800983a:	d02d      	beq.n	8009898 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800983c:	4b85      	ldr	r3, [pc, #532]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	08db      	lsrs	r3, r3, #3
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	4a84      	ldr	r2, [pc, #528]	; (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009848:	fa22 f303 	lsr.w	r3, r2, r3
 800984c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	ee07 3a90 	vmov	s15, r3
 8009854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009866:	4b7b      	ldr	r3, [pc, #492]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986e:	ee07 3a90 	vmov	s15, r3
 8009872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009876:	ed97 6a03 	vldr	s12, [r7, #12]
 800987a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800987e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800988a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009892:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009896:	e087      	b.n	80099a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098aa:	4b6a      	ldr	r3, [pc, #424]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b2:	ee07 3a90 	vmov	s15, r3
 80098b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80098be:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098da:	e065      	b.n	80099a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ee:	4b59      	ldr	r3, [pc, #356]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009902:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800990a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800991a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800991e:	e043      	b.n	80099a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800992e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009932:	4b48      	ldr	r3, [pc, #288]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009942:	ed97 6a03 	vldr	s12, [r7, #12]
 8009946:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800994a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009962:	e021      	b.n	80099a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009976:	4b37      	ldr	r3, [pc, #220]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997e:	ee07 3a90 	vmov	s15, r3
 8009982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009986:	ed97 6a03 	vldr	s12, [r7, #12]
 800998a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800998e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80099a8:	4b2a      	ldr	r3, [pc, #168]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ac:	0a5b      	lsrs	r3, r3, #9
 80099ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ce:	ee17 2a90 	vmov	r2, s15
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80099d6:	4b1f      	ldr	r3, [pc, #124]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e0:	ee07 3a90 	vmov	s15, r3
 80099e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fc:	ee17 2a90 	vmov	r2, s15
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a04:	4b13      	ldr	r3, [pc, #76]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a08:	0e1b      	lsrs	r3, r3, #24
 8009a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2a:	ee17 2a90 	vmov	r2, s15
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a32:	e008      	b.n	8009a46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	609a      	str	r2, [r3, #8]
}
 8009a46:	bf00      	nop
 8009a48:	3724      	adds	r7, #36	; 0x24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	58024400 	.word	0x58024400
 8009a58:	03d09000 	.word	0x03d09000
 8009a5c:	46000000 	.word	0x46000000
 8009a60:	4c742400 	.word	0x4c742400
 8009a64:	4a742400 	.word	0x4a742400
 8009a68:	4bbebc20 	.word	0x4bbebc20

08009a6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b089      	sub	sp, #36	; 0x24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a74:	4ba1      	ldr	r3, [pc, #644]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009a7e:	4b9f      	ldr	r3, [pc, #636]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a82:	0d1b      	lsrs	r3, r3, #20
 8009a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a8a:	4b9c      	ldr	r3, [pc, #624]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8e:	0a1b      	lsrs	r3, r3, #8
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009a96:	4b99      	ldr	r3, [pc, #612]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9a:	08db      	lsrs	r3, r3, #3
 8009a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	fb02 f303 	mul.w	r3, r2, r3
 8009aa6:	ee07 3a90 	vmov	s15, r3
 8009aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 8111 	beq.w	8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	f000 8083 	beq.w	8009bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	f200 80a1 	bhi.w	8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d056      	beq.n	8009b84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ad6:	e099      	b.n	8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad8:	4b88      	ldr	r3, [pc, #544]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0320 	and.w	r3, r3, #32
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d02d      	beq.n	8009b40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae4:	4b85      	ldr	r3, [pc, #532]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	08db      	lsrs	r3, r3, #3
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	4a84      	ldr	r2, [pc, #528]	; (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009af0:	fa22 f303 	lsr.w	r3, r2, r3
 8009af4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0e:	4b7b      	ldr	r3, [pc, #492]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b3e:	e087      	b.n	8009c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b52:	4b6a      	ldr	r3, [pc, #424]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b82:	e065      	b.n	8009c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b96:	4b59      	ldr	r3, [pc, #356]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009baa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bc6:	e043      	b.n	8009c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bda:	4b48      	ldr	r3, [pc, #288]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c0a:	e021      	b.n	8009c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1e:	4b37      	ldr	r3, [pc, #220]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009c50:	4b2a      	ldr	r3, [pc, #168]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c54:	0a5b      	lsrs	r3, r3, #9
 8009c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c76:	ee17 2a90 	vmov	r2, s15
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009c7e:	4b1f      	ldr	r3, [pc, #124]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	0c1b      	lsrs	r3, r3, #16
 8009c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c88:	ee07 3a90 	vmov	s15, r3
 8009c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca4:	ee17 2a90 	vmov	r2, s15
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009cac:	4b13      	ldr	r3, [pc, #76]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb0:	0e1b      	lsrs	r3, r3, #24
 8009cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd2:	ee17 2a90 	vmov	r2, s15
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009cda:	e008      	b.n	8009cee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	609a      	str	r2, [r3, #8]
}
 8009cee:	bf00      	nop
 8009cf0:	3724      	adds	r7, #36	; 0x24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	58024400 	.word	0x58024400
 8009d00:	03d09000 	.word	0x03d09000
 8009d04:	46000000 	.word	0x46000000
 8009d08:	4c742400 	.word	0x4c742400
 8009d0c:	4a742400 	.word	0x4a742400
 8009d10:	4bbebc20 	.word	0x4bbebc20

08009d14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b089      	sub	sp, #36	; 0x24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d1c:	4ba0      	ldr	r3, [pc, #640]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d20:	f003 0303 	and.w	r3, r3, #3
 8009d24:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009d26:	4b9e      	ldr	r3, [pc, #632]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2a:	091b      	lsrs	r3, r3, #4
 8009d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d30:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d32:	4b9b      	ldr	r3, [pc, #620]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d3c:	4b98      	ldr	r3, [pc, #608]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d40:	08db      	lsrs	r3, r3, #3
 8009d42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	fb02 f303 	mul.w	r3, r2, r3
 8009d4c:	ee07 3a90 	vmov	s15, r3
 8009d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d54:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 8111 	beq.w	8009f82 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	f000 8083 	beq.w	8009e6e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	f200 80a1 	bhi.w	8009eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d056      	beq.n	8009e2a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d7c:	e099      	b.n	8009eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d7e:	4b88      	ldr	r3, [pc, #544]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d02d      	beq.n	8009de6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d8a:	4b85      	ldr	r3, [pc, #532]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	08db      	lsrs	r3, r3, #3
 8009d90:	f003 0303 	and.w	r3, r3, #3
 8009d94:	4a83      	ldr	r2, [pc, #524]	; (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009d96:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	ee07 3a90 	vmov	s15, r3
 8009dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db4:	4b7a      	ldr	r3, [pc, #488]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbc:	ee07 3a90 	vmov	s15, r3
 8009dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dc8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009de4:	e087      	b.n	8009ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	ee07 3a90 	vmov	s15, r3
 8009dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009fac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009df8:	4b69      	ldr	r3, [pc, #420]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e00:	ee07 3a90 	vmov	s15, r3
 8009e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e08:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e0c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e28:	e065      	b.n	8009ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	ee07 3a90 	vmov	s15, r3
 8009e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e34:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e3c:	4b58      	ldr	r3, [pc, #352]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e44:	ee07 3a90 	vmov	s15, r3
 8009e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e50:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e6c:	e043      	b.n	8009ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e78:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e80:	4b47      	ldr	r3, [pc, #284]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e88:	ee07 3a90 	vmov	s15, r3
 8009e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e94:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eb0:	e021      	b.n	8009ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	ee07 3a90 	vmov	s15, r3
 8009eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ebc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009fac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec4:	4b36      	ldr	r3, [pc, #216]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ecc:	ee07 3a90 	vmov	s15, r3
 8009ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ed8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ef4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009ef6:	4b2a      	ldr	r3, [pc, #168]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efa:	0a5b      	lsrs	r3, r3, #9
 8009efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f00:	ee07 3a90 	vmov	s15, r3
 8009f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f1c:	ee17 2a90 	vmov	r2, s15
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009f24:	4b1e      	ldr	r3, [pc, #120]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f28:	0c1b      	lsrs	r3, r3, #16
 8009f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f2e:	ee07 3a90 	vmov	s15, r3
 8009f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f4a:	ee17 2a90 	vmov	r2, s15
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009f52:	4b13      	ldr	r3, [pc, #76]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	0e1b      	lsrs	r3, r3, #24
 8009f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f78:	ee17 2a90 	vmov	r2, s15
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f80:	e008      	b.n	8009f94 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	609a      	str	r2, [r3, #8]
}
 8009f94:	bf00      	nop
 8009f96:	3724      	adds	r7, #36	; 0x24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	58024400 	.word	0x58024400
 8009fa4:	03d09000 	.word	0x03d09000
 8009fa8:	46000000 	.word	0x46000000
 8009fac:	4c742400 	.word	0x4c742400
 8009fb0:	4a742400 	.word	0x4a742400
 8009fb4:	4bbebc20 	.word	0x4bbebc20

08009fb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fc6:	4b53      	ldr	r3, [pc, #332]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d101      	bne.n	8009fd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e099      	b.n	800a10a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009fd6:	4b4f      	ldr	r3, [pc, #316]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a4e      	ldr	r2, [pc, #312]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 8009fdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fe2:	f7f8 fe6b 	bl	8002cbc <HAL_GetTick>
 8009fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fe8:	e008      	b.n	8009ffc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fea:	f7f8 fe67 	bl	8002cbc <HAL_GetTick>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d901      	bls.n	8009ffc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e086      	b.n	800a10a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ffc:	4b45      	ldr	r3, [pc, #276]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1f0      	bne.n	8009fea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a008:	4b42      	ldr	r3, [pc, #264]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	031b      	lsls	r3, r3, #12
 800a016:	493f      	ldr	r1, [pc, #252]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	628b      	str	r3, [r1, #40]	; 0x28
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	3b01      	subs	r3, #1
 800a022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	025b      	lsls	r3, r3, #9
 800a02e:	b29b      	uxth	r3, r3
 800a030:	431a      	orrs	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	3b01      	subs	r3, #1
 800a038:	041b      	lsls	r3, r3, #16
 800a03a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a03e:	431a      	orrs	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	3b01      	subs	r3, #1
 800a046:	061b      	lsls	r3, r3, #24
 800a048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a04c:	4931      	ldr	r1, [pc, #196]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a052:	4b30      	ldr	r3, [pc, #192]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	492d      	ldr	r1, [pc, #180]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a060:	4313      	orrs	r3, r2
 800a062:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a064:	4b2b      	ldr	r3, [pc, #172]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	f023 0220 	bic.w	r2, r3, #32
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	4928      	ldr	r1, [pc, #160]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a072:	4313      	orrs	r3, r2
 800a074:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a076:	4b27      	ldr	r3, [pc, #156]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	4a26      	ldr	r2, [pc, #152]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a07c:	f023 0310 	bic.w	r3, r3, #16
 800a080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a082:	4b24      	ldr	r3, [pc, #144]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a086:	4b24      	ldr	r3, [pc, #144]	; (800a118 <RCCEx_PLL2_Config+0x160>)
 800a088:	4013      	ands	r3, r2
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	69d2      	ldr	r2, [r2, #28]
 800a08e:	00d2      	lsls	r2, r2, #3
 800a090:	4920      	ldr	r1, [pc, #128]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a092:	4313      	orrs	r3, r2
 800a094:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a096:	4b1f      	ldr	r3, [pc, #124]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	4a1e      	ldr	r2, [pc, #120]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a09c:	f043 0310 	orr.w	r3, r3, #16
 800a0a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0a8:	4b1a      	ldr	r3, [pc, #104]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ac:	4a19      	ldr	r2, [pc, #100]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a0ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0b4:	e00f      	b.n	800a0d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d106      	bne.n	800a0ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0bc:	4b15      	ldr	r3, [pc, #84]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	4a14      	ldr	r2, [pc, #80]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a0c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0c8:	e005      	b.n	800a0d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0ca:	4b12      	ldr	r3, [pc, #72]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	4a11      	ldr	r2, [pc, #68]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a0d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a0e      	ldr	r2, [pc, #56]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a0dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0e2:	f7f8 fdeb 	bl	8002cbc <HAL_GetTick>
 800a0e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0e8:	e008      	b.n	800a0fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0ea:	f7f8 fde7 	bl	8002cbc <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d901      	bls.n	800a0fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e006      	b.n	800a10a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0fc:	4b05      	ldr	r3, [pc, #20]	; (800a114 <RCCEx_PLL2_Config+0x15c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d0f0      	beq.n	800a0ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a108:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	58024400 	.word	0x58024400
 800a118:	ffff0007 	.word	0xffff0007

0800a11c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a12a:	4b53      	ldr	r3, [pc, #332]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	2b03      	cmp	r3, #3
 800a134:	d101      	bne.n	800a13a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e099      	b.n	800a26e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a13a:	4b4f      	ldr	r3, [pc, #316]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a4e      	ldr	r2, [pc, #312]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a146:	f7f8 fdb9 	bl	8002cbc <HAL_GetTick>
 800a14a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a14c:	e008      	b.n	800a160 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a14e:	f7f8 fdb5 	bl	8002cbc <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d901      	bls.n	800a160 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e086      	b.n	800a26e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a160:	4b45      	ldr	r3, [pc, #276]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1f0      	bne.n	800a14e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a16c:	4b42      	ldr	r3, [pc, #264]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a170:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	051b      	lsls	r3, r3, #20
 800a17a:	493f      	ldr	r1, [pc, #252]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a17c:	4313      	orrs	r3, r2
 800a17e:	628b      	str	r3, [r1, #40]	; 0x28
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	3b01      	subs	r3, #1
 800a186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	3b01      	subs	r3, #1
 800a190:	025b      	lsls	r3, r3, #9
 800a192:	b29b      	uxth	r3, r3
 800a194:	431a      	orrs	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	041b      	lsls	r3, r3, #16
 800a19e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	061b      	lsls	r3, r3, #24
 800a1ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1b0:	4931      	ldr	r1, [pc, #196]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1b6:	4b30      	ldr	r3, [pc, #192]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	492d      	ldr	r1, [pc, #180]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1c8:	4b2b      	ldr	r3, [pc, #172]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	4928      	ldr	r1, [pc, #160]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1da:	4b27      	ldr	r3, [pc, #156]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	4a26      	ldr	r2, [pc, #152]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1e6:	4b24      	ldr	r3, [pc, #144]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ea:	4b24      	ldr	r3, [pc, #144]	; (800a27c <RCCEx_PLL3_Config+0x160>)
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	69d2      	ldr	r2, [r2, #28]
 800a1f2:	00d2      	lsls	r2, r2, #3
 800a1f4:	4920      	ldr	r1, [pc, #128]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a1fa:	4b1f      	ldr	r3, [pc, #124]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fe:	4a1e      	ldr	r2, [pc, #120]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d106      	bne.n	800a21a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a20c:	4b1a      	ldr	r3, [pc, #104]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a210:	4a19      	ldr	r2, [pc, #100]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a212:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a216:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a218:	e00f      	b.n	800a23a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d106      	bne.n	800a22e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a220:	4b15      	ldr	r3, [pc, #84]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	4a14      	ldr	r2, [pc, #80]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a22a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a22c:	e005      	b.n	800a23a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a22e:	4b12      	ldr	r3, [pc, #72]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	4a11      	ldr	r2, [pc, #68]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a238:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a23a:	4b0f      	ldr	r3, [pc, #60]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a0e      	ldr	r2, [pc, #56]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a246:	f7f8 fd39 	bl	8002cbc <HAL_GetTick>
 800a24a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a24c:	e008      	b.n	800a260 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a24e:	f7f8 fd35 	bl	8002cbc <HAL_GetTick>
 800a252:	4602      	mov	r2, r0
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d901      	bls.n	800a260 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e006      	b.n	800a26e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a260:	4b05      	ldr	r3, [pc, #20]	; (800a278 <RCCEx_PLL3_Config+0x15c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d0f0      	beq.n	800a24e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	58024400 	.word	0x58024400
 800a27c:	ffff0007 	.word	0xffff0007

0800a280 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d071      	beq.n	800a376 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d106      	bne.n	800a2ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7f8 f824 	bl	80022f4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f003 0310 	and.w	r3, r3, #16
 800a2be:	2b10      	cmp	r3, #16
 800a2c0:	d050      	beq.n	800a364 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	22ca      	movs	r2, #202	; 0xca
 800a2c8:	625a      	str	r2, [r3, #36]	; 0x24
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2253      	movs	r2, #83	; 0x53
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f87a 	bl	800a3cc <RTC_EnterInitMode>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d124      	bne.n	800a32c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6899      	ldr	r1, [r3, #8]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	4b24      	ldr	r3, [pc, #144]	; (800a380 <HAL_RTC_Init+0x100>)
 800a2ee:	400b      	ands	r3, r1
 800a2f0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6899      	ldr	r1, [r3, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	430a      	orrs	r2, r1
 800a30e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	0419      	lsls	r1, r3, #16
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f886 	bl	800a434 <RTC_ExitInitMode>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d113      	bne.n	800a35a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 0203 	bic.w	r2, r2, #3
 800a340:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	69da      	ldr	r2, [r3, #28]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	22ff      	movs	r2, #255	; 0xff
 800a360:	625a      	str	r2, [r3, #36]	; 0x24
 800a362:	e001      	b.n	800a368 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d103      	bne.n	800a376 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a376:	7bfb      	ldrb	r3, [r7, #15]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	ff8fffbf 	.word	0xff8fffbf

0800a384 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a0d      	ldr	r2, [pc, #52]	; (800a3c8 <HAL_RTC_WaitForSynchro+0x44>)
 800a392:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a394:	f7f8 fc92 	bl	8002cbc <HAL_GetTick>
 800a398:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a39a:	e009      	b.n	800a3b0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a39c:	f7f8 fc8e 	bl	8002cbc <HAL_GetTick>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3aa:	d901      	bls.n	800a3b0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e007      	b.n	800a3c0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	f003 0320 	and.w	r3, r3, #32
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0ee      	beq.n	800a39c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	0003ff5f 	.word	0x0003ff5f

0800a3cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d120      	bne.n	800a428 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a3f0:	f7f8 fc64 	bl	8002cbc <HAL_GetTick>
 800a3f4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a3f6:	e00d      	b.n	800a414 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a3f8:	f7f8 fc60 	bl	8002cbc <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a406:	d905      	bls.n	800a414 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2203      	movs	r2, #3
 800a410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d102      	bne.n	800a428 <RTC_EnterInitMode+0x5c>
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	2b03      	cmp	r3, #3
 800a426:	d1e7      	bne.n	800a3f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a440:	4b1a      	ldr	r3, [pc, #104]	; (800a4ac <RTC_ExitInitMode+0x78>)
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	4a19      	ldr	r2, [pc, #100]	; (800a4ac <RTC_ExitInitMode+0x78>)
 800a446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a44a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a44c:	4b17      	ldr	r3, [pc, #92]	; (800a4ac <RTC_ExitInitMode+0x78>)
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f003 0320 	and.w	r3, r3, #32
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10c      	bne.n	800a472 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff ff93 	bl	800a384 <HAL_RTC_WaitForSynchro>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d01e      	beq.n	800a4a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2203      	movs	r2, #3
 800a468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	73fb      	strb	r3, [r7, #15]
 800a470:	e017      	b.n	800a4a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a472:	4b0e      	ldr	r3, [pc, #56]	; (800a4ac <RTC_ExitInitMode+0x78>)
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	4a0d      	ldr	r2, [pc, #52]	; (800a4ac <RTC_ExitInitMode+0x78>)
 800a478:	f023 0320 	bic.w	r3, r3, #32
 800a47c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7ff ff80 	bl	800a384 <HAL_RTC_WaitForSynchro>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d005      	beq.n	800a496 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2203      	movs	r2, #3
 800a48e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a492:	2303      	movs	r3, #3
 800a494:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a496:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <RTC_ExitInitMode+0x78>)
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	4a04      	ldr	r2, [pc, #16]	; (800a4ac <RTC_ExitInitMode+0x78>)
 800a49c:	f043 0320 	orr.w	r3, r3, #32
 800a4a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	58004000 	.word	0x58004000

0800a4b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08a      	sub	sp, #40	; 0x28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e28e      	b.n	800a9e0 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a4c2:	f7f8 fc2b 	bl	8002d1c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d113      	bne.n	800a4f8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a96      	ldr	r2, [pc, #600]	; (800a730 <HAL_SAI_Init+0x280>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d004      	beq.n	800a4e4 <HAL_SAI_Init+0x34>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a95      	ldr	r2, [pc, #596]	; (800a734 <HAL_SAI_Init+0x284>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d107      	bne.n	800a4f4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d103      	bne.n	800a4f4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e273      	b.n	800a9e0 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a8c      	ldr	r2, [pc, #560]	; (800a730 <HAL_SAI_Init+0x280>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d004      	beq.n	800a50c <HAL_SAI_Init+0x5c>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a8c      	ldr	r2, [pc, #560]	; (800a738 <HAL_SAI_Init+0x288>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d102      	bne.n	800a512 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a50c:	4b8b      	ldr	r3, [pc, #556]	; (800a73c <HAL_SAI_Init+0x28c>)
 800a50e:	61bb      	str	r3, [r7, #24]
 800a510:	e028      	b.n	800a564 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a8a      	ldr	r2, [pc, #552]	; (800a740 <HAL_SAI_Init+0x290>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d004      	beq.n	800a526 <HAL_SAI_Init+0x76>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a88      	ldr	r2, [pc, #544]	; (800a744 <HAL_SAI_Init+0x294>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d102      	bne.n	800a52c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a526:	4b88      	ldr	r3, [pc, #544]	; (800a748 <HAL_SAI_Init+0x298>)
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	e01b      	b.n	800a564 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a86      	ldr	r2, [pc, #536]	; (800a74c <HAL_SAI_Init+0x29c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d004      	beq.n	800a540 <HAL_SAI_Init+0x90>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a85      	ldr	r2, [pc, #532]	; (800a750 <HAL_SAI_Init+0x2a0>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d102      	bne.n	800a546 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a540:	4b84      	ldr	r3, [pc, #528]	; (800a754 <HAL_SAI_Init+0x2a4>)
 800a542:	61bb      	str	r3, [r7, #24]
 800a544:	e00e      	b.n	800a564 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a7a      	ldr	r2, [pc, #488]	; (800a734 <HAL_SAI_Init+0x284>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d004      	beq.n	800a55a <HAL_SAI_Init+0xaa>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a80      	ldr	r2, [pc, #512]	; (800a758 <HAL_SAI_Init+0x2a8>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d102      	bne.n	800a560 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a55a:	4b80      	ldr	r3, [pc, #512]	; (800a75c <HAL_SAI_Init+0x2ac>)
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	e001      	b.n	800a564 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e23d      	b.n	800a9e0 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d106      	bne.n	800a57e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7f8 f963 	bl	8002844 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fa40 	bl	800aa04 <SAI_Disable>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e228      	b.n	800a9e0 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2202      	movs	r2, #2
 800a592:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d00c      	beq.n	800a5b8 <HAL_SAI_Init+0x108>
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d80d      	bhi.n	800a5be <HAL_SAI_Init+0x10e>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <HAL_SAI_Init+0xfc>
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d003      	beq.n	800a5b2 <HAL_SAI_Init+0x102>
 800a5aa:	e008      	b.n	800a5be <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a5b0:	e008      	b.n	800a5c4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a5b2:	2310      	movs	r3, #16
 800a5b4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a5b6:	e005      	b.n	800a5c4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a5b8:	2320      	movs	r3, #32
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a5bc:	e002      	b.n	800a5c4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a5c2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	2b05      	cmp	r3, #5
 800a5ca:	d832      	bhi.n	800a632 <HAL_SAI_Init+0x182>
 800a5cc:	a201      	add	r2, pc, #4	; (adr r2, 800a5d4 <HAL_SAI_Init+0x124>)
 800a5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d2:	bf00      	nop
 800a5d4:	0800a5ed 	.word	0x0800a5ed
 800a5d8:	0800a5f3 	.word	0x0800a5f3
 800a5dc:	0800a5fb 	.word	0x0800a5fb
 800a5e0:	0800a603 	.word	0x0800a603
 800a5e4:	0800a613 	.word	0x0800a613
 800a5e8:	0800a623 	.word	0x0800a623
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	61fb      	str	r3, [r7, #28]
      break;
 800a5f0:	e022      	b.n	800a638 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a5f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5f6:	61fb      	str	r3, [r7, #28]
      break;
 800a5f8:	e01e      	b.n	800a638 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a5fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5fe:	61fb      	str	r3, [r7, #28]
      break;
 800a600:	e01a      	b.n	800a638 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a606:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	f043 0301 	orr.w	r3, r3, #1
 800a60e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a610:	e012      	b.n	800a638 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a612:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a616:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	f043 0302 	orr.w	r3, r3, #2
 800a61e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a620:	e00a      	b.n	800a638 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a622:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a626:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	f043 0303 	orr.w	r3, r3, #3
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a630:	e002      	b.n	800a638 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	61fb      	str	r3, [r7, #28]
      break;
 800a636:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a63c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 80c5 	beq.w	800a7d2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a648:	2300      	movs	r3, #0
 800a64a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a37      	ldr	r2, [pc, #220]	; (800a730 <HAL_SAI_Init+0x280>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d004      	beq.n	800a660 <HAL_SAI_Init+0x1b0>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a37      	ldr	r2, [pc, #220]	; (800a738 <HAL_SAI_Init+0x288>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d106      	bne.n	800a66e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a660:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a664:	f04f 0100 	mov.w	r1, #0
 800a668:	f7fe fb16 	bl	8008c98 <HAL_RCCEx_GetPeriphCLKFreq>
 800a66c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a33      	ldr	r2, [pc, #204]	; (800a740 <HAL_SAI_Init+0x290>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d004      	beq.n	800a682 <HAL_SAI_Init+0x1d2>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a31      	ldr	r2, [pc, #196]	; (800a744 <HAL_SAI_Init+0x294>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d106      	bne.n	800a690 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a682:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a686:	f04f 0100 	mov.w	r1, #0
 800a68a:	f7fe fb05 	bl	8008c98 <HAL_RCCEx_GetPeriphCLKFreq>
 800a68e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a2d      	ldr	r2, [pc, #180]	; (800a74c <HAL_SAI_Init+0x29c>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d004      	beq.n	800a6a4 <HAL_SAI_Init+0x1f4>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a2c      	ldr	r2, [pc, #176]	; (800a750 <HAL_SAI_Init+0x2a0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d106      	bne.n	800a6b2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a6a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a6a8:	f04f 0100 	mov.w	r1, #0
 800a6ac:	f7fe faf4 	bl	8008c98 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6b0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a1f      	ldr	r2, [pc, #124]	; (800a734 <HAL_SAI_Init+0x284>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d106      	bne.n	800a6ca <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a6bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a6c0:	f04f 0100 	mov.w	r1, #0
 800a6c4:	f7fe fae8 	bl	8008c98 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6c8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a22      	ldr	r2, [pc, #136]	; (800a758 <HAL_SAI_Init+0x2a8>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d106      	bne.n	800a6e2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a6d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a6d8:	f04f 0100 	mov.w	r1, #0
 800a6dc:	f7fe fadc 	bl	8008c98 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6e0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6ea:	d139      	bne.n	800a760 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d102      	bne.n	800a6fa <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a6f4:	2340      	movs	r3, #64	; 0x40
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	e00a      	b.n	800a710 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fe:	2b08      	cmp	r3, #8
 800a700:	d103      	bne.n	800a70a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a702:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	e002      	b.n	800a710 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	4619      	mov	r1, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	fb02 f303 	mul.w	r3, r2, r3
 800a726:	fbb1 f3f3 	udiv	r3, r1, r3
 800a72a:	613b      	str	r3, [r7, #16]
 800a72c:	e030      	b.n	800a790 <HAL_SAI_Init+0x2e0>
 800a72e:	bf00      	nop
 800a730:	40015804 	.word	0x40015804
 800a734:	58005404 	.word	0x58005404
 800a738:	40015824 	.word	0x40015824
 800a73c:	40015800 	.word	0x40015800
 800a740:	40015c04 	.word	0x40015c04
 800a744:	40015c24 	.word	0x40015c24
 800a748:	40015c00 	.word	0x40015c00
 800a74c:	40016004 	.word	0x40016004
 800a750:	40016024 	.word	0x40016024
 800a754:	40016000 	.word	0x40016000
 800a758:	58005424 	.word	0x58005424
 800a75c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a768:	d101      	bne.n	800a76e <HAL_SAI_Init+0x2be>
 800a76a:	2302      	movs	r3, #2
 800a76c:	e000      	b.n	800a770 <HAL_SAI_Init+0x2c0>
 800a76e:	2301      	movs	r3, #1
 800a770:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	4613      	mov	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	4619      	mov	r1, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	fb02 f303 	mul.w	r3, r2, r3
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a78e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	4a95      	ldr	r2, [pc, #596]	; (800a9e8 <HAL_SAI_Init+0x538>)
 800a794:	fba2 2303 	umull	r2, r3, r2, r3
 800a798:	08da      	lsrs	r2, r3, #3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a79e:	6939      	ldr	r1, [r7, #16]
 800a7a0:	4b91      	ldr	r3, [pc, #580]	; (800a9e8 <HAL_SAI_Init+0x538>)
 800a7a2:	fba3 2301 	umull	r2, r3, r3, r1
 800a7a6:	08da      	lsrs	r2, r3, #3
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	1aca      	subs	r2, r1, r3
 800a7b2:	2a08      	cmp	r2, #8
 800a7b4:	d904      	bls.n	800a7c0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c4:	2b04      	cmp	r3, #4
 800a7c6:	d104      	bne.n	800a7d2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	085a      	lsrs	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <HAL_SAI_Init+0x332>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d109      	bne.n	800a7f6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d101      	bne.n	800a7ee <HAL_SAI_Init+0x33e>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e001      	b.n	800a7f2 <HAL_SAI_Init+0x342>
 800a7ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7f2:	623b      	str	r3, [r7, #32]
 800a7f4:	e008      	b.n	800a808 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d102      	bne.n	800a804 <HAL_SAI_Init+0x354>
 800a7fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a802:	e000      	b.n	800a806 <HAL_SAI_Init+0x356>
 800a804:	2300      	movs	r3, #0
 800a806:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a808:	f7f8 fa88 	bl	8002d1c <HAL_GetREVID>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a812:	d331      	bcc.n	800a878 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6819      	ldr	r1, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	4b73      	ldr	r3, [pc, #460]	; (800a9ec <HAL_SAI_Init+0x53c>)
 800a820:	400b      	ands	r3, r1
 800a822:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6819      	ldr	r1, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a832:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a838:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a83e:	431a      	orrs	r2, r3
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a84c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a858:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	051b      	lsls	r3, r3, #20
 800a860:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a866:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	e02d      	b.n	800a8d4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6819      	ldr	r1, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	4b5b      	ldr	r3, [pc, #364]	; (800a9f0 <HAL_SAI_Init+0x540>)
 800a884:	400b      	ands	r3, r1
 800a886:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6819      	ldr	r1, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a896:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a89c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a8b0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a8bc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	051b      	lsls	r3, r3, #20
 800a8c4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a8ca:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6859      	ldr	r1, [r3, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	4b45      	ldr	r3, [pc, #276]	; (800a9f4 <HAL_SAI_Init+0x544>)
 800a8e0:	400b      	ands	r3, r1
 800a8e2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6859      	ldr	r1, [r3, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	69da      	ldr	r2, [r3, #28]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	430a      	orrs	r2, r1
 800a900:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6899      	ldr	r1, [r3, #8]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	4b3a      	ldr	r3, [pc, #232]	; (800a9f8 <HAL_SAI_Init+0x548>)
 800a90e:	400b      	ands	r3, r1
 800a910:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6899      	ldr	r1, [r3, #8]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a922:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a928:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a92e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a934:	3b01      	subs	r3, #1
 800a936:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a938:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68d9      	ldr	r1, [r3, #12]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a950:	400b      	ands	r3, r1
 800a952:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68d9      	ldr	r1, [r3, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a962:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a968:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a96a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a970:	3b01      	subs	r3, #1
 800a972:	021b      	lsls	r3, r3, #8
 800a974:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	430a      	orrs	r2, r1
 800a97c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a1e      	ldr	r2, [pc, #120]	; (800a9fc <HAL_SAI_Init+0x54c>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d004      	beq.n	800a992 <HAL_SAI_Init+0x4e2>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a1c      	ldr	r2, [pc, #112]	; (800aa00 <HAL_SAI_Init+0x550>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d119      	bne.n	800a9c6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a996:	f023 0201 	bic.w	r2, r3, #1
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d10e      	bne.n	800a9c6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9be:	f043 0201 	orr.w	r2, r3, #1
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3728      	adds	r7, #40	; 0x28
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	cccccccd 	.word	0xcccccccd
 800a9ec:	f005c010 	.word	0xf005c010
 800a9f0:	f805c010 	.word	0xf805c010
 800a9f4:	ffff1ff0 	.word	0xffff1ff0
 800a9f8:	fff88000 	.word	0xfff88000
 800a9fc:	40015804 	.word	0x40015804
 800aa00:	58005404 	.word	0x58005404

0800aa04 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800aa0c:	4b18      	ldr	r3, [pc, #96]	; (800aa70 <SAI_Disable+0x6c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a18      	ldr	r2, [pc, #96]	; (800aa74 <SAI_Disable+0x70>)
 800aa12:	fba2 2303 	umull	r2, r3, r2, r3
 800aa16:	0b1b      	lsrs	r3, r3, #12
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aa2e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10a      	bne.n	800aa4c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	72fb      	strb	r3, [r7, #11]
      break;
 800aa4a:	e009      	b.n	800aa60 <SAI_Disable+0x5c>
    }
    count--;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1e7      	bne.n	800aa30 <SAI_Disable+0x2c>

  return status;
 800aa60:	7afb      	ldrb	r3, [r7, #11]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	24000000 	.word	0x24000000
 800aa74:	95cbec1b 	.word	0x95cbec1b

0800aa78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d101      	bne.n	800aa8c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e02b      	b.n	800aae4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d106      	bne.n	800aaa6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7f7 fec5 	bl	8002830 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	3304      	adds	r3, #4
 800aab6:	4619      	mov	r1, r3
 800aab8:	4610      	mov	r0, r2
 800aaba:	f001 fabd 	bl	800c038 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	461a      	mov	r2, r3
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	f001 fb11 	bl	800c0f0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800aace:	4b07      	ldr	r3, [pc, #28]	; (800aaec <HAL_SDRAM_Init+0x74>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a06      	ldr	r2, [pc, #24]	; (800aaec <HAL_SDRAM_Init+0x74>)
 800aad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aad8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	52004000 	.word	0x52004000

0800aaf0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e10f      	b.n	800ad22 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a87      	ldr	r2, [pc, #540]	; (800ad2c <HAL_SPI_Init+0x23c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d00f      	beq.n	800ab32 <HAL_SPI_Init+0x42>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a86      	ldr	r2, [pc, #536]	; (800ad30 <HAL_SPI_Init+0x240>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d00a      	beq.n	800ab32 <HAL_SPI_Init+0x42>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a84      	ldr	r2, [pc, #528]	; (800ad34 <HAL_SPI_Init+0x244>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d005      	beq.n	800ab32 <HAL_SPI_Init+0x42>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	2b0f      	cmp	r3, #15
 800ab2c:	d901      	bls.n	800ab32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e0f7      	b.n	800ad22 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f900 	bl	800ad38 <SPI_GetPacketSize>
 800ab38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a7b      	ldr	r2, [pc, #492]	; (800ad2c <HAL_SPI_Init+0x23c>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d00c      	beq.n	800ab5e <HAL_SPI_Init+0x6e>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a79      	ldr	r2, [pc, #484]	; (800ad30 <HAL_SPI_Init+0x240>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d007      	beq.n	800ab5e <HAL_SPI_Init+0x6e>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a78      	ldr	r2, [pc, #480]	; (800ad34 <HAL_SPI_Init+0x244>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d002      	beq.n	800ab5e <HAL_SPI_Init+0x6e>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b08      	cmp	r3, #8
 800ab5c:	d811      	bhi.n	800ab82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ab62:	4a72      	ldr	r2, [pc, #456]	; (800ad2c <HAL_SPI_Init+0x23c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d009      	beq.n	800ab7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a70      	ldr	r2, [pc, #448]	; (800ad30 <HAL_SPI_Init+0x240>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d004      	beq.n	800ab7c <HAL_SPI_Init+0x8c>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a6f      	ldr	r2, [pc, #444]	; (800ad34 <HAL_SPI_Init+0x244>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d104      	bne.n	800ab86 <HAL_SPI_Init+0x96>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b10      	cmp	r3, #16
 800ab80:	d901      	bls.n	800ab86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e0cd      	b.n	800ad22 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d106      	bne.n	800aba0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7f7 fbdc 	bl	8002358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2202      	movs	r2, #2
 800aba4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f022 0201 	bic.w	r2, r2, #1
 800abb6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800abc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abcc:	d119      	bne.n	800ac02 <HAL_SPI_Init+0x112>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abd6:	d103      	bne.n	800abe0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d008      	beq.n	800abf2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10c      	bne.n	800ac02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800abec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abf0:	d107      	bne.n	800ac02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00f      	beq.n	800ac2e <HAL_SPI_Init+0x13e>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	2b06      	cmp	r3, #6
 800ac14:	d90b      	bls.n	800ac2e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	601a      	str	r2, [r3, #0]
 800ac2c:	e007      	b.n	800ac3e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	69da      	ldr	r2, [r3, #28]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac46:	431a      	orrs	r2, r3
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac50:	ea42 0103 	orr.w	r1, r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68da      	ldr	r2, [r3, #12]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	431a      	orrs	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	431a      	orrs	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	431a      	orrs	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	695b      	ldr	r3, [r3, #20]
 800ac80:	431a      	orrs	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	431a      	orrs	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac92:	431a      	orrs	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac9e:	ea42 0103 	orr.w	r1, r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	430a      	orrs	r2, r1
 800acac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d113      	bne.n	800acde <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acc8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800acdc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f022 0201 	bic.w	r2, r2, #1
 800acec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00a      	beq.n	800ad10 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	40013000 	.word	0x40013000
 800ad30:	40003800 	.word	0x40003800
 800ad34:	40003c00 	.word	0x40003c00

0800ad38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad44:	095b      	lsrs	r3, r3, #5
 800ad46:	3301      	adds	r3, #1
 800ad48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	3307      	adds	r3, #7
 800ad56:	08db      	lsrs	r3, r3, #3
 800ad58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e042      	b.n	800ae06 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7f7 fbaa 	bl	80024ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2224      	movs	r2, #36	; 0x24
 800ad9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f022 0201 	bic.w	r2, r2, #1
 800adae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f8bb 	bl	800af2c <UART_SetConfig>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d101      	bne.n	800adc0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e022      	b.n	800ae06 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fe17 	bl	800b9fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800addc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689a      	ldr	r2, [r3, #8]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f042 0201 	orr.w	r2, r2, #1
 800adfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fe9e 	bl	800bb40 <UART_CheckIdleState>
 800ae04:	4603      	mov	r3, r0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b08a      	sub	sp, #40	; 0x28
 800ae12:	af02      	add	r7, sp, #8
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	603b      	str	r3, [r7, #0]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae24:	2b20      	cmp	r3, #32
 800ae26:	d17b      	bne.n	800af20 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <HAL_UART_Transmit+0x26>
 800ae2e:	88fb      	ldrh	r3, [r7, #6]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e074      	b.n	800af22 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2221      	movs	r2, #33	; 0x21
 800ae44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae48:	f7f7 ff38 	bl	8002cbc <HAL_GetTick>
 800ae4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	88fa      	ldrh	r2, [r7, #6]
 800ae52:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	88fa      	ldrh	r2, [r7, #6]
 800ae5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae66:	d108      	bne.n	800ae7a <HAL_UART_Transmit+0x6c>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d104      	bne.n	800ae7a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ae70:	2300      	movs	r3, #0
 800ae72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	61bb      	str	r3, [r7, #24]
 800ae78:	e003      	b.n	800ae82 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae82:	e030      	b.n	800aee6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2180      	movs	r1, #128	; 0x80
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 ff00 	bl	800bc94 <UART_WaitOnFlagUntilTimeout>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d005      	beq.n	800aea6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e03d      	b.n	800af22 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10b      	bne.n	800aec4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aeba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	3302      	adds	r3, #2
 800aec0:	61bb      	str	r3, [r7, #24]
 800aec2:	e007      	b.n	800aed4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	781a      	ldrb	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	3301      	adds	r3, #1
 800aed2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	3b01      	subs	r3, #1
 800aede:	b29a      	uxth	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1c8      	bne.n	800ae84 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2200      	movs	r2, #0
 800aefa:	2140      	movs	r1, #64	; 0x40
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 fec9 	bl	800bc94 <UART_WaitOnFlagUntilTimeout>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2220      	movs	r2, #32
 800af0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e006      	b.n	800af22 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2220      	movs	r2, #32
 800af18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	e000      	b.n	800af22 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800af20:	2302      	movs	r3, #2
  }
}
 800af22:	4618      	mov	r0, r3
 800af24:	3720      	adds	r7, #32
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af30:	b092      	sub	sp, #72	; 0x48
 800af32:	af00      	add	r7, sp, #0
 800af34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	689a      	ldr	r2, [r3, #8]
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	431a      	orrs	r2, r3
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	431a      	orrs	r2, r3
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	69db      	ldr	r3, [r3, #28]
 800af50:	4313      	orrs	r3, r2
 800af52:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	4bbe      	ldr	r3, [pc, #760]	; (800b254 <UART_SetConfig+0x328>)
 800af5c:	4013      	ands	r3, r2
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	6812      	ldr	r2, [r2, #0]
 800af62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af64:	430b      	orrs	r3, r1
 800af66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4ab3      	ldr	r2, [pc, #716]	; (800b258 <UART_SetConfig+0x32c>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d004      	beq.n	800af98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af94:	4313      	orrs	r3, r2
 800af96:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	689a      	ldr	r2, [r3, #8]
 800af9e:	4baf      	ldr	r3, [pc, #700]	; (800b25c <UART_SetConfig+0x330>)
 800afa0:	4013      	ands	r3, r2
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	6812      	ldr	r2, [r2, #0]
 800afa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800afa8:	430b      	orrs	r3, r1
 800afaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb2:	f023 010f 	bic.w	r1, r3, #15
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4aa6      	ldr	r2, [pc, #664]	; (800b260 <UART_SetConfig+0x334>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d177      	bne.n	800b0bc <UART_SetConfig+0x190>
 800afcc:	4ba5      	ldr	r3, [pc, #660]	; (800b264 <UART_SetConfig+0x338>)
 800afce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afd4:	2b28      	cmp	r3, #40	; 0x28
 800afd6:	d86d      	bhi.n	800b0b4 <UART_SetConfig+0x188>
 800afd8:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <UART_SetConfig+0xb4>)
 800afda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afde:	bf00      	nop
 800afe0:	0800b085 	.word	0x0800b085
 800afe4:	0800b0b5 	.word	0x0800b0b5
 800afe8:	0800b0b5 	.word	0x0800b0b5
 800afec:	0800b0b5 	.word	0x0800b0b5
 800aff0:	0800b0b5 	.word	0x0800b0b5
 800aff4:	0800b0b5 	.word	0x0800b0b5
 800aff8:	0800b0b5 	.word	0x0800b0b5
 800affc:	0800b0b5 	.word	0x0800b0b5
 800b000:	0800b08d 	.word	0x0800b08d
 800b004:	0800b0b5 	.word	0x0800b0b5
 800b008:	0800b0b5 	.word	0x0800b0b5
 800b00c:	0800b0b5 	.word	0x0800b0b5
 800b010:	0800b0b5 	.word	0x0800b0b5
 800b014:	0800b0b5 	.word	0x0800b0b5
 800b018:	0800b0b5 	.word	0x0800b0b5
 800b01c:	0800b0b5 	.word	0x0800b0b5
 800b020:	0800b095 	.word	0x0800b095
 800b024:	0800b0b5 	.word	0x0800b0b5
 800b028:	0800b0b5 	.word	0x0800b0b5
 800b02c:	0800b0b5 	.word	0x0800b0b5
 800b030:	0800b0b5 	.word	0x0800b0b5
 800b034:	0800b0b5 	.word	0x0800b0b5
 800b038:	0800b0b5 	.word	0x0800b0b5
 800b03c:	0800b0b5 	.word	0x0800b0b5
 800b040:	0800b09d 	.word	0x0800b09d
 800b044:	0800b0b5 	.word	0x0800b0b5
 800b048:	0800b0b5 	.word	0x0800b0b5
 800b04c:	0800b0b5 	.word	0x0800b0b5
 800b050:	0800b0b5 	.word	0x0800b0b5
 800b054:	0800b0b5 	.word	0x0800b0b5
 800b058:	0800b0b5 	.word	0x0800b0b5
 800b05c:	0800b0b5 	.word	0x0800b0b5
 800b060:	0800b0a5 	.word	0x0800b0a5
 800b064:	0800b0b5 	.word	0x0800b0b5
 800b068:	0800b0b5 	.word	0x0800b0b5
 800b06c:	0800b0b5 	.word	0x0800b0b5
 800b070:	0800b0b5 	.word	0x0800b0b5
 800b074:	0800b0b5 	.word	0x0800b0b5
 800b078:	0800b0b5 	.word	0x0800b0b5
 800b07c:	0800b0b5 	.word	0x0800b0b5
 800b080:	0800b0ad 	.word	0x0800b0ad
 800b084:	2301      	movs	r3, #1
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b08a:	e222      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b08c:	2304      	movs	r3, #4
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b092:	e21e      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b094:	2308      	movs	r3, #8
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b09a:	e21a      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b09c:	2310      	movs	r3, #16
 800b09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0a2:	e216      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b0a4:	2320      	movs	r3, #32
 800b0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0aa:	e212      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b0ac:	2340      	movs	r3, #64	; 0x40
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0b2:	e20e      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b0b4:	2380      	movs	r3, #128	; 0x80
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ba:	e20a      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a69      	ldr	r2, [pc, #420]	; (800b268 <UART_SetConfig+0x33c>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d130      	bne.n	800b128 <UART_SetConfig+0x1fc>
 800b0c6:	4b67      	ldr	r3, [pc, #412]	; (800b264 <UART_SetConfig+0x338>)
 800b0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ca:	f003 0307 	and.w	r3, r3, #7
 800b0ce:	2b05      	cmp	r3, #5
 800b0d0:	d826      	bhi.n	800b120 <UART_SetConfig+0x1f4>
 800b0d2:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <UART_SetConfig+0x1ac>)
 800b0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d8:	0800b0f1 	.word	0x0800b0f1
 800b0dc:	0800b0f9 	.word	0x0800b0f9
 800b0e0:	0800b101 	.word	0x0800b101
 800b0e4:	0800b109 	.word	0x0800b109
 800b0e8:	0800b111 	.word	0x0800b111
 800b0ec:	0800b119 	.word	0x0800b119
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0f6:	e1ec      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b0f8:	2304      	movs	r3, #4
 800b0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0fe:	e1e8      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b100:	2308      	movs	r3, #8
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b106:	e1e4      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b108:	2310      	movs	r3, #16
 800b10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b10e:	e1e0      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b110:	2320      	movs	r3, #32
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b116:	e1dc      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b118:	2340      	movs	r3, #64	; 0x40
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b11e:	e1d8      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b120:	2380      	movs	r3, #128	; 0x80
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b126:	e1d4      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a4f      	ldr	r2, [pc, #316]	; (800b26c <UART_SetConfig+0x340>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d130      	bne.n	800b194 <UART_SetConfig+0x268>
 800b132:	4b4c      	ldr	r3, [pc, #304]	; (800b264 <UART_SetConfig+0x338>)
 800b134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b136:	f003 0307 	and.w	r3, r3, #7
 800b13a:	2b05      	cmp	r3, #5
 800b13c:	d826      	bhi.n	800b18c <UART_SetConfig+0x260>
 800b13e:	a201      	add	r2, pc, #4	; (adr r2, 800b144 <UART_SetConfig+0x218>)
 800b140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b144:	0800b15d 	.word	0x0800b15d
 800b148:	0800b165 	.word	0x0800b165
 800b14c:	0800b16d 	.word	0x0800b16d
 800b150:	0800b175 	.word	0x0800b175
 800b154:	0800b17d 	.word	0x0800b17d
 800b158:	0800b185 	.word	0x0800b185
 800b15c:	2300      	movs	r3, #0
 800b15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b162:	e1b6      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b164:	2304      	movs	r3, #4
 800b166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b16a:	e1b2      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b16c:	2308      	movs	r3, #8
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b172:	e1ae      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b174:	2310      	movs	r3, #16
 800b176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b17a:	e1aa      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b17c:	2320      	movs	r3, #32
 800b17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b182:	e1a6      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b184:	2340      	movs	r3, #64	; 0x40
 800b186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18a:	e1a2      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b18c:	2380      	movs	r3, #128	; 0x80
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b192:	e19e      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a35      	ldr	r2, [pc, #212]	; (800b270 <UART_SetConfig+0x344>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d130      	bne.n	800b200 <UART_SetConfig+0x2d4>
 800b19e:	4b31      	ldr	r3, [pc, #196]	; (800b264 <UART_SetConfig+0x338>)
 800b1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a2:	f003 0307 	and.w	r3, r3, #7
 800b1a6:	2b05      	cmp	r3, #5
 800b1a8:	d826      	bhi.n	800b1f8 <UART_SetConfig+0x2cc>
 800b1aa:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <UART_SetConfig+0x284>)
 800b1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b0:	0800b1c9 	.word	0x0800b1c9
 800b1b4:	0800b1d1 	.word	0x0800b1d1
 800b1b8:	0800b1d9 	.word	0x0800b1d9
 800b1bc:	0800b1e1 	.word	0x0800b1e1
 800b1c0:	0800b1e9 	.word	0x0800b1e9
 800b1c4:	0800b1f1 	.word	0x0800b1f1
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ce:	e180      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b1d0:	2304      	movs	r3, #4
 800b1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1d6:	e17c      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b1d8:	2308      	movs	r3, #8
 800b1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1de:	e178      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b1e0:	2310      	movs	r3, #16
 800b1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1e6:	e174      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b1e8:	2320      	movs	r3, #32
 800b1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ee:	e170      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b1f0:	2340      	movs	r3, #64	; 0x40
 800b1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1f6:	e16c      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b1f8:	2380      	movs	r3, #128	; 0x80
 800b1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fe:	e168      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a1b      	ldr	r2, [pc, #108]	; (800b274 <UART_SetConfig+0x348>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d142      	bne.n	800b290 <UART_SetConfig+0x364>
 800b20a:	4b16      	ldr	r3, [pc, #88]	; (800b264 <UART_SetConfig+0x338>)
 800b20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b20e:	f003 0307 	and.w	r3, r3, #7
 800b212:	2b05      	cmp	r3, #5
 800b214:	d838      	bhi.n	800b288 <UART_SetConfig+0x35c>
 800b216:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <UART_SetConfig+0x2f0>)
 800b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21c:	0800b235 	.word	0x0800b235
 800b220:	0800b23d 	.word	0x0800b23d
 800b224:	0800b245 	.word	0x0800b245
 800b228:	0800b24d 	.word	0x0800b24d
 800b22c:	0800b279 	.word	0x0800b279
 800b230:	0800b281 	.word	0x0800b281
 800b234:	2300      	movs	r3, #0
 800b236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b23a:	e14a      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b23c:	2304      	movs	r3, #4
 800b23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b242:	e146      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b244:	2308      	movs	r3, #8
 800b246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b24a:	e142      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b24c:	2310      	movs	r3, #16
 800b24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b252:	e13e      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b254:	cfff69f3 	.word	0xcfff69f3
 800b258:	58000c00 	.word	0x58000c00
 800b25c:	11fff4ff 	.word	0x11fff4ff
 800b260:	40011000 	.word	0x40011000
 800b264:	58024400 	.word	0x58024400
 800b268:	40004400 	.word	0x40004400
 800b26c:	40004800 	.word	0x40004800
 800b270:	40004c00 	.word	0x40004c00
 800b274:	40005000 	.word	0x40005000
 800b278:	2320      	movs	r3, #32
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27e:	e128      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b280:	2340      	movs	r3, #64	; 0x40
 800b282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b286:	e124      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b288:	2380      	movs	r3, #128	; 0x80
 800b28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b28e:	e120      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4acb      	ldr	r2, [pc, #812]	; (800b5c4 <UART_SetConfig+0x698>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d176      	bne.n	800b388 <UART_SetConfig+0x45c>
 800b29a:	4bcb      	ldr	r3, [pc, #812]	; (800b5c8 <UART_SetConfig+0x69c>)
 800b29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2a2:	2b28      	cmp	r3, #40	; 0x28
 800b2a4:	d86c      	bhi.n	800b380 <UART_SetConfig+0x454>
 800b2a6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <UART_SetConfig+0x380>)
 800b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ac:	0800b351 	.word	0x0800b351
 800b2b0:	0800b381 	.word	0x0800b381
 800b2b4:	0800b381 	.word	0x0800b381
 800b2b8:	0800b381 	.word	0x0800b381
 800b2bc:	0800b381 	.word	0x0800b381
 800b2c0:	0800b381 	.word	0x0800b381
 800b2c4:	0800b381 	.word	0x0800b381
 800b2c8:	0800b381 	.word	0x0800b381
 800b2cc:	0800b359 	.word	0x0800b359
 800b2d0:	0800b381 	.word	0x0800b381
 800b2d4:	0800b381 	.word	0x0800b381
 800b2d8:	0800b381 	.word	0x0800b381
 800b2dc:	0800b381 	.word	0x0800b381
 800b2e0:	0800b381 	.word	0x0800b381
 800b2e4:	0800b381 	.word	0x0800b381
 800b2e8:	0800b381 	.word	0x0800b381
 800b2ec:	0800b361 	.word	0x0800b361
 800b2f0:	0800b381 	.word	0x0800b381
 800b2f4:	0800b381 	.word	0x0800b381
 800b2f8:	0800b381 	.word	0x0800b381
 800b2fc:	0800b381 	.word	0x0800b381
 800b300:	0800b381 	.word	0x0800b381
 800b304:	0800b381 	.word	0x0800b381
 800b308:	0800b381 	.word	0x0800b381
 800b30c:	0800b369 	.word	0x0800b369
 800b310:	0800b381 	.word	0x0800b381
 800b314:	0800b381 	.word	0x0800b381
 800b318:	0800b381 	.word	0x0800b381
 800b31c:	0800b381 	.word	0x0800b381
 800b320:	0800b381 	.word	0x0800b381
 800b324:	0800b381 	.word	0x0800b381
 800b328:	0800b381 	.word	0x0800b381
 800b32c:	0800b371 	.word	0x0800b371
 800b330:	0800b381 	.word	0x0800b381
 800b334:	0800b381 	.word	0x0800b381
 800b338:	0800b381 	.word	0x0800b381
 800b33c:	0800b381 	.word	0x0800b381
 800b340:	0800b381 	.word	0x0800b381
 800b344:	0800b381 	.word	0x0800b381
 800b348:	0800b381 	.word	0x0800b381
 800b34c:	0800b379 	.word	0x0800b379
 800b350:	2301      	movs	r3, #1
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b356:	e0bc      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b358:	2304      	movs	r3, #4
 800b35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35e:	e0b8      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b360:	2308      	movs	r3, #8
 800b362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b366:	e0b4      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b368:	2310      	movs	r3, #16
 800b36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36e:	e0b0      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b370:	2320      	movs	r3, #32
 800b372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b376:	e0ac      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b378:	2340      	movs	r3, #64	; 0x40
 800b37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b37e:	e0a8      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b380:	2380      	movs	r3, #128	; 0x80
 800b382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b386:	e0a4      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a8f      	ldr	r2, [pc, #572]	; (800b5cc <UART_SetConfig+0x6a0>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d130      	bne.n	800b3f4 <UART_SetConfig+0x4c8>
 800b392:	4b8d      	ldr	r3, [pc, #564]	; (800b5c8 <UART_SetConfig+0x69c>)
 800b394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	2b05      	cmp	r3, #5
 800b39c:	d826      	bhi.n	800b3ec <UART_SetConfig+0x4c0>
 800b39e:	a201      	add	r2, pc, #4	; (adr r2, 800b3a4 <UART_SetConfig+0x478>)
 800b3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a4:	0800b3bd 	.word	0x0800b3bd
 800b3a8:	0800b3c5 	.word	0x0800b3c5
 800b3ac:	0800b3cd 	.word	0x0800b3cd
 800b3b0:	0800b3d5 	.word	0x0800b3d5
 800b3b4:	0800b3dd 	.word	0x0800b3dd
 800b3b8:	0800b3e5 	.word	0x0800b3e5
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c2:	e086      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b3c4:	2304      	movs	r3, #4
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ca:	e082      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b3cc:	2308      	movs	r3, #8
 800b3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d2:	e07e      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3da:	e07a      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b3dc:	2320      	movs	r3, #32
 800b3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3e2:	e076      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b3e4:	2340      	movs	r3, #64	; 0x40
 800b3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ea:	e072      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b3ec:	2380      	movs	r3, #128	; 0x80
 800b3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f2:	e06e      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a75      	ldr	r2, [pc, #468]	; (800b5d0 <UART_SetConfig+0x6a4>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d130      	bne.n	800b460 <UART_SetConfig+0x534>
 800b3fe:	4b72      	ldr	r3, [pc, #456]	; (800b5c8 <UART_SetConfig+0x69c>)
 800b400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	2b05      	cmp	r3, #5
 800b408:	d826      	bhi.n	800b458 <UART_SetConfig+0x52c>
 800b40a:	a201      	add	r2, pc, #4	; (adr r2, 800b410 <UART_SetConfig+0x4e4>)
 800b40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b410:	0800b429 	.word	0x0800b429
 800b414:	0800b431 	.word	0x0800b431
 800b418:	0800b439 	.word	0x0800b439
 800b41c:	0800b441 	.word	0x0800b441
 800b420:	0800b449 	.word	0x0800b449
 800b424:	0800b451 	.word	0x0800b451
 800b428:	2300      	movs	r3, #0
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42e:	e050      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b430:	2304      	movs	r3, #4
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b436:	e04c      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b438:	2308      	movs	r3, #8
 800b43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43e:	e048      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b440:	2310      	movs	r3, #16
 800b442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b446:	e044      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b448:	2320      	movs	r3, #32
 800b44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44e:	e040      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b450:	2340      	movs	r3, #64	; 0x40
 800b452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b456:	e03c      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b458:	2380      	movs	r3, #128	; 0x80
 800b45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45e:	e038      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a5b      	ldr	r2, [pc, #364]	; (800b5d4 <UART_SetConfig+0x6a8>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d130      	bne.n	800b4cc <UART_SetConfig+0x5a0>
 800b46a:	4b57      	ldr	r3, [pc, #348]	; (800b5c8 <UART_SetConfig+0x69c>)
 800b46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b46e:	f003 0307 	and.w	r3, r3, #7
 800b472:	2b05      	cmp	r3, #5
 800b474:	d826      	bhi.n	800b4c4 <UART_SetConfig+0x598>
 800b476:	a201      	add	r2, pc, #4	; (adr r2, 800b47c <UART_SetConfig+0x550>)
 800b478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47c:	0800b495 	.word	0x0800b495
 800b480:	0800b49d 	.word	0x0800b49d
 800b484:	0800b4a5 	.word	0x0800b4a5
 800b488:	0800b4ad 	.word	0x0800b4ad
 800b48c:	0800b4b5 	.word	0x0800b4b5
 800b490:	0800b4bd 	.word	0x0800b4bd
 800b494:	2302      	movs	r3, #2
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b49a:	e01a      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b49c:	2304      	movs	r3, #4
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a2:	e016      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b4a4:	2308      	movs	r3, #8
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4aa:	e012      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b4ac:	2310      	movs	r3, #16
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b2:	e00e      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b4b4:	2320      	movs	r3, #32
 800b4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ba:	e00a      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b4bc:	2340      	movs	r3, #64	; 0x40
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c2:	e006      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b4c4:	2380      	movs	r3, #128	; 0x80
 800b4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ca:	e002      	b.n	800b4d2 <UART_SetConfig+0x5a6>
 800b4cc:	2380      	movs	r3, #128	; 0x80
 800b4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a3f      	ldr	r2, [pc, #252]	; (800b5d4 <UART_SetConfig+0x6a8>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	f040 80f8 	bne.w	800b6ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b4e2:	2b20      	cmp	r3, #32
 800b4e4:	dc46      	bgt.n	800b574 <UART_SetConfig+0x648>
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	f2c0 8082 	blt.w	800b5f0 <UART_SetConfig+0x6c4>
 800b4ec:	3b02      	subs	r3, #2
 800b4ee:	2b1e      	cmp	r3, #30
 800b4f0:	d87e      	bhi.n	800b5f0 <UART_SetConfig+0x6c4>
 800b4f2:	a201      	add	r2, pc, #4	; (adr r2, 800b4f8 <UART_SetConfig+0x5cc>)
 800b4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f8:	0800b57b 	.word	0x0800b57b
 800b4fc:	0800b5f1 	.word	0x0800b5f1
 800b500:	0800b583 	.word	0x0800b583
 800b504:	0800b5f1 	.word	0x0800b5f1
 800b508:	0800b5f1 	.word	0x0800b5f1
 800b50c:	0800b5f1 	.word	0x0800b5f1
 800b510:	0800b593 	.word	0x0800b593
 800b514:	0800b5f1 	.word	0x0800b5f1
 800b518:	0800b5f1 	.word	0x0800b5f1
 800b51c:	0800b5f1 	.word	0x0800b5f1
 800b520:	0800b5f1 	.word	0x0800b5f1
 800b524:	0800b5f1 	.word	0x0800b5f1
 800b528:	0800b5f1 	.word	0x0800b5f1
 800b52c:	0800b5f1 	.word	0x0800b5f1
 800b530:	0800b5a3 	.word	0x0800b5a3
 800b534:	0800b5f1 	.word	0x0800b5f1
 800b538:	0800b5f1 	.word	0x0800b5f1
 800b53c:	0800b5f1 	.word	0x0800b5f1
 800b540:	0800b5f1 	.word	0x0800b5f1
 800b544:	0800b5f1 	.word	0x0800b5f1
 800b548:	0800b5f1 	.word	0x0800b5f1
 800b54c:	0800b5f1 	.word	0x0800b5f1
 800b550:	0800b5f1 	.word	0x0800b5f1
 800b554:	0800b5f1 	.word	0x0800b5f1
 800b558:	0800b5f1 	.word	0x0800b5f1
 800b55c:	0800b5f1 	.word	0x0800b5f1
 800b560:	0800b5f1 	.word	0x0800b5f1
 800b564:	0800b5f1 	.word	0x0800b5f1
 800b568:	0800b5f1 	.word	0x0800b5f1
 800b56c:	0800b5f1 	.word	0x0800b5f1
 800b570:	0800b5e3 	.word	0x0800b5e3
 800b574:	2b40      	cmp	r3, #64	; 0x40
 800b576:	d037      	beq.n	800b5e8 <UART_SetConfig+0x6bc>
 800b578:	e03a      	b.n	800b5f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b57a:	f7fe f90d 	bl	8009798 <HAL_RCCEx_GetD3PCLK1Freq>
 800b57e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b580:	e03c      	b.n	800b5fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b586:	4618      	mov	r0, r3
 800b588:	f7fe f91c 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b590:	e034      	b.n	800b5fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b592:	f107 0318 	add.w	r3, r7, #24
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe fa68 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a0:	e02c      	b.n	800b5fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5a2:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <UART_SetConfig+0x69c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 0320 	and.w	r3, r3, #32
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d016      	beq.n	800b5dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5ae:	4b06      	ldr	r3, [pc, #24]	; (800b5c8 <UART_SetConfig+0x69c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	08db      	lsrs	r3, r3, #3
 800b5b4:	f003 0303 	and.w	r3, r3, #3
 800b5b8:	4a07      	ldr	r2, [pc, #28]	; (800b5d8 <UART_SetConfig+0x6ac>)
 800b5ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5c0:	e01c      	b.n	800b5fc <UART_SetConfig+0x6d0>
 800b5c2:	bf00      	nop
 800b5c4:	40011400 	.word	0x40011400
 800b5c8:	58024400 	.word	0x58024400
 800b5cc:	40007800 	.word	0x40007800
 800b5d0:	40007c00 	.word	0x40007c00
 800b5d4:	58000c00 	.word	0x58000c00
 800b5d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b5dc:	4b9d      	ldr	r3, [pc, #628]	; (800b854 <UART_SetConfig+0x928>)
 800b5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5e0:	e00c      	b.n	800b5fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5e2:	4b9d      	ldr	r3, [pc, #628]	; (800b858 <UART_SetConfig+0x92c>)
 800b5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5e6:	e009      	b.n	800b5fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ee:	e005      	b.n	800b5fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b5fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 81de 	beq.w	800b9c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	4a94      	ldr	r2, [pc, #592]	; (800b85c <UART_SetConfig+0x930>)
 800b60a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b60e:	461a      	mov	r2, r3
 800b610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b612:	fbb3 f3f2 	udiv	r3, r3, r2
 800b616:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	4613      	mov	r3, r2
 800b61e:	005b      	lsls	r3, r3, #1
 800b620:	4413      	add	r3, r2
 800b622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b624:	429a      	cmp	r2, r3
 800b626:	d305      	bcc.n	800b634 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b630:	429a      	cmp	r2, r3
 800b632:	d903      	bls.n	800b63c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b63a:	e1c1      	b.n	800b9c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63e:	2200      	movs	r2, #0
 800b640:	60bb      	str	r3, [r7, #8]
 800b642:	60fa      	str	r2, [r7, #12]
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b648:	4a84      	ldr	r2, [pc, #528]	; (800b85c <UART_SetConfig+0x930>)
 800b64a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b64e:	b29b      	uxth	r3, r3
 800b650:	2200      	movs	r2, #0
 800b652:	603b      	str	r3, [r7, #0]
 800b654:	607a      	str	r2, [r7, #4]
 800b656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b65a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b65e:	f7f4 fe97 	bl	8000390 <__aeabi_uldivmod>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	4610      	mov	r0, r2
 800b668:	4619      	mov	r1, r3
 800b66a:	f04f 0200 	mov.w	r2, #0
 800b66e:	f04f 0300 	mov.w	r3, #0
 800b672:	020b      	lsls	r3, r1, #8
 800b674:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b678:	0202      	lsls	r2, r0, #8
 800b67a:	6979      	ldr	r1, [r7, #20]
 800b67c:	6849      	ldr	r1, [r1, #4]
 800b67e:	0849      	lsrs	r1, r1, #1
 800b680:	2000      	movs	r0, #0
 800b682:	460c      	mov	r4, r1
 800b684:	4605      	mov	r5, r0
 800b686:	eb12 0804 	adds.w	r8, r2, r4
 800b68a:	eb43 0905 	adc.w	r9, r3, r5
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	469a      	mov	sl, r3
 800b696:	4693      	mov	fp, r2
 800b698:	4652      	mov	r2, sl
 800b69a:	465b      	mov	r3, fp
 800b69c:	4640      	mov	r0, r8
 800b69e:	4649      	mov	r1, r9
 800b6a0:	f7f4 fe76 	bl	8000390 <__aeabi_uldivmod>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6b2:	d308      	bcc.n	800b6c6 <UART_SetConfig+0x79a>
 800b6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6ba:	d204      	bcs.n	800b6c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6c2:	60da      	str	r2, [r3, #12]
 800b6c4:	e17c      	b.n	800b9c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b6cc:	e178      	b.n	800b9c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	69db      	ldr	r3, [r3, #28]
 800b6d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6d6:	f040 80c5 	bne.w	800b864 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b6da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	dc48      	bgt.n	800b774 <UART_SetConfig+0x848>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	db7b      	blt.n	800b7de <UART_SetConfig+0x8b2>
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d879      	bhi.n	800b7de <UART_SetConfig+0x8b2>
 800b6ea:	a201      	add	r2, pc, #4	; (adr r2, 800b6f0 <UART_SetConfig+0x7c4>)
 800b6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f0:	0800b77b 	.word	0x0800b77b
 800b6f4:	0800b783 	.word	0x0800b783
 800b6f8:	0800b7df 	.word	0x0800b7df
 800b6fc:	0800b7df 	.word	0x0800b7df
 800b700:	0800b78b 	.word	0x0800b78b
 800b704:	0800b7df 	.word	0x0800b7df
 800b708:	0800b7df 	.word	0x0800b7df
 800b70c:	0800b7df 	.word	0x0800b7df
 800b710:	0800b79b 	.word	0x0800b79b
 800b714:	0800b7df 	.word	0x0800b7df
 800b718:	0800b7df 	.word	0x0800b7df
 800b71c:	0800b7df 	.word	0x0800b7df
 800b720:	0800b7df 	.word	0x0800b7df
 800b724:	0800b7df 	.word	0x0800b7df
 800b728:	0800b7df 	.word	0x0800b7df
 800b72c:	0800b7df 	.word	0x0800b7df
 800b730:	0800b7ab 	.word	0x0800b7ab
 800b734:	0800b7df 	.word	0x0800b7df
 800b738:	0800b7df 	.word	0x0800b7df
 800b73c:	0800b7df 	.word	0x0800b7df
 800b740:	0800b7df 	.word	0x0800b7df
 800b744:	0800b7df 	.word	0x0800b7df
 800b748:	0800b7df 	.word	0x0800b7df
 800b74c:	0800b7df 	.word	0x0800b7df
 800b750:	0800b7df 	.word	0x0800b7df
 800b754:	0800b7df 	.word	0x0800b7df
 800b758:	0800b7df 	.word	0x0800b7df
 800b75c:	0800b7df 	.word	0x0800b7df
 800b760:	0800b7df 	.word	0x0800b7df
 800b764:	0800b7df 	.word	0x0800b7df
 800b768:	0800b7df 	.word	0x0800b7df
 800b76c:	0800b7df 	.word	0x0800b7df
 800b770:	0800b7d1 	.word	0x0800b7d1
 800b774:	2b40      	cmp	r3, #64	; 0x40
 800b776:	d02e      	beq.n	800b7d6 <UART_SetConfig+0x8aa>
 800b778:	e031      	b.n	800b7de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b77a:	f7fc f857 	bl	800782c <HAL_RCC_GetPCLK1Freq>
 800b77e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b780:	e033      	b.n	800b7ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b782:	f7fc f869 	bl	8007858 <HAL_RCC_GetPCLK2Freq>
 800b786:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b788:	e02f      	b.n	800b7ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b78a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe f818 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b798:	e027      	b.n	800b7ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b79a:	f107 0318 	add.w	r3, r7, #24
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe f964 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7a8:	e01f      	b.n	800b7ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7aa:	4b2d      	ldr	r3, [pc, #180]	; (800b860 <UART_SetConfig+0x934>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0320 	and.w	r3, r3, #32
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d009      	beq.n	800b7ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7b6:	4b2a      	ldr	r3, [pc, #168]	; (800b860 <UART_SetConfig+0x934>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	08db      	lsrs	r3, r3, #3
 800b7bc:	f003 0303 	and.w	r3, r3, #3
 800b7c0:	4a24      	ldr	r2, [pc, #144]	; (800b854 <UART_SetConfig+0x928>)
 800b7c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7c8:	e00f      	b.n	800b7ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b7ca:	4b22      	ldr	r3, [pc, #136]	; (800b854 <UART_SetConfig+0x928>)
 800b7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ce:	e00c      	b.n	800b7ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7d0:	4b21      	ldr	r3, [pc, #132]	; (800b858 <UART_SetConfig+0x92c>)
 800b7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7d4:	e009      	b.n	800b7ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7dc:	e005      	b.n	800b7ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b7e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 80e7 	beq.w	800b9c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	4a19      	ldr	r2, [pc, #100]	; (800b85c <UART_SetConfig+0x930>)
 800b7f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b800:	fbb3 f3f2 	udiv	r3, r3, r2
 800b804:	005a      	lsls	r2, r3, #1
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	085b      	lsrs	r3, r3, #1
 800b80c:	441a      	add	r2, r3
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	fbb2 f3f3 	udiv	r3, r2, r3
 800b816:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81a:	2b0f      	cmp	r3, #15
 800b81c:	d916      	bls.n	800b84c <UART_SetConfig+0x920>
 800b81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b824:	d212      	bcs.n	800b84c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b828:	b29b      	uxth	r3, r3
 800b82a:	f023 030f 	bic.w	r3, r3, #15
 800b82e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b832:	085b      	lsrs	r3, r3, #1
 800b834:	b29b      	uxth	r3, r3
 800b836:	f003 0307 	and.w	r3, r3, #7
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b83e:	4313      	orrs	r3, r2
 800b840:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b848:	60da      	str	r2, [r3, #12]
 800b84a:	e0b9      	b.n	800b9c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b852:	e0b5      	b.n	800b9c0 <UART_SetConfig+0xa94>
 800b854:	03d09000 	.word	0x03d09000
 800b858:	003d0900 	.word	0x003d0900
 800b85c:	0800d248 	.word	0x0800d248
 800b860:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b864:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b868:	2b20      	cmp	r3, #32
 800b86a:	dc49      	bgt.n	800b900 <UART_SetConfig+0x9d4>
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	db7c      	blt.n	800b96a <UART_SetConfig+0xa3e>
 800b870:	2b20      	cmp	r3, #32
 800b872:	d87a      	bhi.n	800b96a <UART_SetConfig+0xa3e>
 800b874:	a201      	add	r2, pc, #4	; (adr r2, 800b87c <UART_SetConfig+0x950>)
 800b876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87a:	bf00      	nop
 800b87c:	0800b907 	.word	0x0800b907
 800b880:	0800b90f 	.word	0x0800b90f
 800b884:	0800b96b 	.word	0x0800b96b
 800b888:	0800b96b 	.word	0x0800b96b
 800b88c:	0800b917 	.word	0x0800b917
 800b890:	0800b96b 	.word	0x0800b96b
 800b894:	0800b96b 	.word	0x0800b96b
 800b898:	0800b96b 	.word	0x0800b96b
 800b89c:	0800b927 	.word	0x0800b927
 800b8a0:	0800b96b 	.word	0x0800b96b
 800b8a4:	0800b96b 	.word	0x0800b96b
 800b8a8:	0800b96b 	.word	0x0800b96b
 800b8ac:	0800b96b 	.word	0x0800b96b
 800b8b0:	0800b96b 	.word	0x0800b96b
 800b8b4:	0800b96b 	.word	0x0800b96b
 800b8b8:	0800b96b 	.word	0x0800b96b
 800b8bc:	0800b937 	.word	0x0800b937
 800b8c0:	0800b96b 	.word	0x0800b96b
 800b8c4:	0800b96b 	.word	0x0800b96b
 800b8c8:	0800b96b 	.word	0x0800b96b
 800b8cc:	0800b96b 	.word	0x0800b96b
 800b8d0:	0800b96b 	.word	0x0800b96b
 800b8d4:	0800b96b 	.word	0x0800b96b
 800b8d8:	0800b96b 	.word	0x0800b96b
 800b8dc:	0800b96b 	.word	0x0800b96b
 800b8e0:	0800b96b 	.word	0x0800b96b
 800b8e4:	0800b96b 	.word	0x0800b96b
 800b8e8:	0800b96b 	.word	0x0800b96b
 800b8ec:	0800b96b 	.word	0x0800b96b
 800b8f0:	0800b96b 	.word	0x0800b96b
 800b8f4:	0800b96b 	.word	0x0800b96b
 800b8f8:	0800b96b 	.word	0x0800b96b
 800b8fc:	0800b95d 	.word	0x0800b95d
 800b900:	2b40      	cmp	r3, #64	; 0x40
 800b902:	d02e      	beq.n	800b962 <UART_SetConfig+0xa36>
 800b904:	e031      	b.n	800b96a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b906:	f7fb ff91 	bl	800782c <HAL_RCC_GetPCLK1Freq>
 800b90a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b90c:	e033      	b.n	800b976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b90e:	f7fb ffa3 	bl	8007858 <HAL_RCC_GetPCLK2Freq>
 800b912:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b914:	e02f      	b.n	800b976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fd ff52 	bl	80097c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b924:	e027      	b.n	800b976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b926:	f107 0318 	add.w	r3, r7, #24
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fe f89e 	bl	8009a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b934:	e01f      	b.n	800b976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b936:	4b2d      	ldr	r3, [pc, #180]	; (800b9ec <UART_SetConfig+0xac0>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 0320 	and.w	r3, r3, #32
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d009      	beq.n	800b956 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b942:	4b2a      	ldr	r3, [pc, #168]	; (800b9ec <UART_SetConfig+0xac0>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	08db      	lsrs	r3, r3, #3
 800b948:	f003 0303 	and.w	r3, r3, #3
 800b94c:	4a28      	ldr	r2, [pc, #160]	; (800b9f0 <UART_SetConfig+0xac4>)
 800b94e:	fa22 f303 	lsr.w	r3, r2, r3
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b954:	e00f      	b.n	800b976 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b956:	4b26      	ldr	r3, [pc, #152]	; (800b9f0 <UART_SetConfig+0xac4>)
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b95a:	e00c      	b.n	800b976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b95c:	4b25      	ldr	r3, [pc, #148]	; (800b9f4 <UART_SetConfig+0xac8>)
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b960:	e009      	b.n	800b976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b968:	e005      	b.n	800b976 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b974:	bf00      	nop
    }

    if (pclk != 0U)
 800b976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d021      	beq.n	800b9c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	4a1d      	ldr	r2, [pc, #116]	; (800b9f8 <UART_SetConfig+0xacc>)
 800b982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b986:	461a      	mov	r2, r3
 800b988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b98a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	085b      	lsrs	r3, r3, #1
 800b994:	441a      	add	r2, r3
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	2b0f      	cmp	r3, #15
 800b9a4:	d909      	bls.n	800b9ba <UART_SetConfig+0xa8e>
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ac:	d205      	bcs.n	800b9ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	60da      	str	r2, [r3, #12]
 800b9b8:	e002      	b.n	800b9c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b9dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3748      	adds	r7, #72	; 0x48
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9ea:	bf00      	nop
 800b9ec:	58024400 	.word	0x58024400
 800b9f0:	03d09000 	.word	0x03d09000
 800b9f4:	003d0900 	.word	0x003d0900
 800b9f8:	0800d248 	.word	0x0800d248

0800b9fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00a      	beq.n	800ba26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	430a      	orrs	r2, r1
 800ba24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2a:	f003 0302 	and.w	r3, r3, #2
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00a      	beq.n	800ba48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	430a      	orrs	r2, r1
 800ba46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4c:	f003 0304 	and.w	r3, r3, #4
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00a      	beq.n	800ba6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	430a      	orrs	r2, r1
 800ba68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6e:	f003 0308 	and.w	r3, r3, #8
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00a      	beq.n	800ba8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	430a      	orrs	r2, r1
 800ba8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba90:	f003 0310 	and.w	r3, r3, #16
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00a      	beq.n	800baae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab2:	f003 0320 	and.w	r3, r3, #32
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00a      	beq.n	800bad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	430a      	orrs	r2, r1
 800bace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d01a      	beq.n	800bb12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bafa:	d10a      	bne.n	800bb12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00a      	beq.n	800bb34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	430a      	orrs	r2, r1
 800bb32:	605a      	str	r2, [r3, #4]
  }
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b098      	sub	sp, #96	; 0x60
 800bb44:	af02      	add	r7, sp, #8
 800bb46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb50:	f7f7 f8b4 	bl	8002cbc <HAL_GetTick>
 800bb54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 0308 	and.w	r3, r3, #8
 800bb60:	2b08      	cmp	r3, #8
 800bb62:	d12f      	bne.n	800bbc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb68:	9300      	str	r3, [sp, #0]
 800bb6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f88e 	bl	800bc94 <UART_WaitOnFlagUntilTimeout>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d022      	beq.n	800bbc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb86:	e853 3f00 	ldrex	r3, [r3]
 800bb8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb92:	653b      	str	r3, [r7, #80]	; 0x50
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb9c:	647b      	str	r3, [r7, #68]	; 0x44
 800bb9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bba4:	e841 2300 	strex	r3, r2, [r1]
 800bba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1e6      	bne.n	800bb7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e063      	b.n	800bc8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d149      	bne.n	800bc66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f857 	bl	800bc94 <UART_WaitOnFlagUntilTimeout>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d03c      	beq.n	800bc66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc0a:	633b      	str	r3, [r7, #48]	; 0x30
 800bc0c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc12:	e841 2300 	strex	r3, r2, [r1]
 800bc16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1e6      	bne.n	800bbec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3308      	adds	r3, #8
 800bc24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	e853 3f00 	ldrex	r3, [r3]
 800bc2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f023 0301 	bic.w	r3, r3, #1
 800bc34:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc3e:	61fa      	str	r2, [r7, #28]
 800bc40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc42:	69b9      	ldr	r1, [r7, #24]
 800bc44:	69fa      	ldr	r2, [r7, #28]
 800bc46:	e841 2300 	strex	r3, r2, [r1]
 800bc4a:	617b      	str	r3, [r7, #20]
   return(result);
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1e5      	bne.n	800bc1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2220      	movs	r2, #32
 800bc56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e012      	b.n	800bc8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3758      	adds	r7, #88	; 0x58
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	603b      	str	r3, [r7, #0]
 800bca0:	4613      	mov	r3, r2
 800bca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bca4:	e049      	b.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcac:	d045      	beq.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcae:	f7f7 f805 	bl	8002cbc <HAL_GetTick>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	69ba      	ldr	r2, [r7, #24]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d302      	bcc.n	800bcc4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	e048      	b.n	800bd5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 0304 	and.w	r3, r3, #4
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d031      	beq.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	69db      	ldr	r3, [r3, #28]
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b08      	cmp	r3, #8
 800bce2:	d110      	bne.n	800bd06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2208      	movs	r2, #8
 800bcea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f000 f839 	bl	800bd64 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2208      	movs	r2, #8
 800bcf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	e029      	b.n	800bd5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd14:	d111      	bne.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 f81f 	bl	800bd64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e00f      	b.n	800bd5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	69da      	ldr	r2, [r3, #28]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	4013      	ands	r3, r2
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	bf0c      	ite	eq
 800bd4a:	2301      	moveq	r3, #1
 800bd4c:	2300      	movne	r3, #0
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	461a      	mov	r2, r3
 800bd52:	79fb      	ldrb	r3, [r7, #7]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d0a6      	beq.n	800bca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
	...

0800bd64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b095      	sub	sp, #84	; 0x54
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd74:	e853 3f00 	ldrex	r3, [r3]
 800bd78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd8a:	643b      	str	r3, [r7, #64]	; 0x40
 800bd8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd92:	e841 2300 	strex	r3, r2, [r1]
 800bd96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1e6      	bne.n	800bd6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3308      	adds	r3, #8
 800bda4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda6:	6a3b      	ldr	r3, [r7, #32]
 800bda8:	e853 3f00 	ldrex	r3, [r3]
 800bdac:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdae:	69fa      	ldr	r2, [r7, #28]
 800bdb0:	4b1e      	ldr	r3, [pc, #120]	; (800be2c <UART_EndRxTransfer+0xc8>)
 800bdb2:	4013      	ands	r3, r2
 800bdb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	3308      	adds	r3, #8
 800bdbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc6:	e841 2300 	strex	r3, r2, [r1]
 800bdca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e5      	bne.n	800bd9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d118      	bne.n	800be0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	e853 3f00 	ldrex	r3, [r3]
 800bde6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	f023 0310 	bic.w	r3, r3, #16
 800bdee:	647b      	str	r3, [r7, #68]	; 0x44
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdf8:	61bb      	str	r3, [r7, #24]
 800bdfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfc:	6979      	ldr	r1, [r7, #20]
 800bdfe:	69ba      	ldr	r2, [r7, #24]
 800be00:	e841 2300 	strex	r3, r2, [r1]
 800be04:	613b      	str	r3, [r7, #16]
   return(result);
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1e6      	bne.n	800bdda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2220      	movs	r2, #32
 800be10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800be20:	bf00      	nop
 800be22:	3754      	adds	r7, #84	; 0x54
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	effffffe 	.word	0xeffffffe

0800be30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d101      	bne.n	800be46 <HAL_UARTEx_DisableFifoMode+0x16>
 800be42:	2302      	movs	r3, #2
 800be44:	e027      	b.n	800be96 <HAL_UARTEx_DisableFifoMode+0x66>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2201      	movs	r2, #1
 800be4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2224      	movs	r2, #36	; 0x24
 800be52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f022 0201 	bic.w	r2, r2, #1
 800be6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2220      	movs	r2, #32
 800be88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b084      	sub	sp, #16
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d101      	bne.n	800beba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800beb6:	2302      	movs	r3, #2
 800beb8:	e02d      	b.n	800bf16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2224      	movs	r2, #36	; 0x24
 800bec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f022 0201 	bic.w	r2, r2, #1
 800bee0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f850 	bl	800bf9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2220      	movs	r2, #32
 800bf08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d101      	bne.n	800bf36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf32:	2302      	movs	r3, #2
 800bf34:	e02d      	b.n	800bf92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2224      	movs	r2, #36	; 0x24
 800bf42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f022 0201 	bic.w	r2, r2, #1
 800bf5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	430a      	orrs	r2, r1
 800bf70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f812 	bl	800bf9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2220      	movs	r2, #32
 800bf84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
	...

0800bf9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d108      	bne.n	800bfbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfbc:	e031      	b.n	800c022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfbe:	2310      	movs	r3, #16
 800bfc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfc2:	2310      	movs	r3, #16
 800bfc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	0e5b      	lsrs	r3, r3, #25
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	f003 0307 	and.w	r3, r3, #7
 800bfd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	0f5b      	lsrs	r3, r3, #29
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	f003 0307 	and.w	r3, r3, #7
 800bfe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfe6:	7bbb      	ldrb	r3, [r7, #14]
 800bfe8:	7b3a      	ldrb	r2, [r7, #12]
 800bfea:	4911      	ldr	r1, [pc, #68]	; (800c030 <UARTEx_SetNbDataToProcess+0x94>)
 800bfec:	5c8a      	ldrb	r2, [r1, r2]
 800bfee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bff2:	7b3a      	ldrb	r2, [r7, #12]
 800bff4:	490f      	ldr	r1, [pc, #60]	; (800c034 <UARTEx_SetNbDataToProcess+0x98>)
 800bff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bff8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c004:	7bfb      	ldrb	r3, [r7, #15]
 800c006:	7b7a      	ldrb	r2, [r7, #13]
 800c008:	4909      	ldr	r1, [pc, #36]	; (800c030 <UARTEx_SetNbDataToProcess+0x94>)
 800c00a:	5c8a      	ldrb	r2, [r1, r2]
 800c00c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c010:	7b7a      	ldrb	r2, [r7, #13]
 800c012:	4908      	ldr	r1, [pc, #32]	; (800c034 <UARTEx_SetNbDataToProcess+0x98>)
 800c014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c016:	fb93 f3f2 	sdiv	r3, r3, r2
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c022:	bf00      	nop
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	0800d260 	.word	0x0800d260
 800c034:	0800d268 	.word	0x0800d268

0800c038 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d121      	bne.n	800c08e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	4b27      	ldr	r3, [pc, #156]	; (800c0ec <FMC_SDRAM_Init+0xb4>)
 800c050:	4013      	ands	r3, r2
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	6851      	ldr	r1, [r2, #4]
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	6892      	ldr	r2, [r2, #8]
 800c05a:	4311      	orrs	r1, r2
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	68d2      	ldr	r2, [r2, #12]
 800c060:	4311      	orrs	r1, r2
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	6912      	ldr	r2, [r2, #16]
 800c066:	4311      	orrs	r1, r2
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	6952      	ldr	r2, [r2, #20]
 800c06c:	4311      	orrs	r1, r2
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	6992      	ldr	r2, [r2, #24]
 800c072:	4311      	orrs	r1, r2
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	69d2      	ldr	r2, [r2, #28]
 800c078:	4311      	orrs	r1, r2
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	6a12      	ldr	r2, [r2, #32]
 800c07e:	4311      	orrs	r1, r2
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c084:	430a      	orrs	r2, r1
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	e026      	b.n	800c0dc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	69d9      	ldr	r1, [r3, #28]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	4319      	orrs	r1, r3
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a4:	430b      	orrs	r3, r1
 800c0a6:	431a      	orrs	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685a      	ldr	r2, [r3, #4]
 800c0b0:	4b0e      	ldr	r3, [pc, #56]	; (800c0ec <FMC_SDRAM_Init+0xb4>)
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	683a      	ldr	r2, [r7, #0]
 800c0b6:	6851      	ldr	r1, [r2, #4]
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	6892      	ldr	r2, [r2, #8]
 800c0bc:	4311      	orrs	r1, r2
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	68d2      	ldr	r2, [r2, #12]
 800c0c2:	4311      	orrs	r1, r2
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	6912      	ldr	r2, [r2, #16]
 800c0c8:	4311      	orrs	r1, r2
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	6952      	ldr	r2, [r2, #20]
 800c0ce:	4311      	orrs	r1, r2
 800c0d0:	683a      	ldr	r2, [r7, #0]
 800c0d2:	6992      	ldr	r2, [r2, #24]
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	431a      	orrs	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	ffff8000 	.word	0xffff8000

0800c0f0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d128      	bne.n	800c154 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	1e59      	subs	r1, r3, #1
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	3b01      	subs	r3, #1
 800c116:	011b      	lsls	r3, r3, #4
 800c118:	4319      	orrs	r1, r3
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	3b01      	subs	r3, #1
 800c120:	021b      	lsls	r3, r3, #8
 800c122:	4319      	orrs	r1, r3
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	3b01      	subs	r3, #1
 800c12a:	031b      	lsls	r3, r3, #12
 800c12c:	4319      	orrs	r1, r3
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	3b01      	subs	r3, #1
 800c134:	041b      	lsls	r3, r3, #16
 800c136:	4319      	orrs	r1, r3
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	051b      	lsls	r3, r3, #20
 800c140:	4319      	orrs	r1, r3
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	3b01      	subs	r3, #1
 800c148:	061b      	lsls	r3, r3, #24
 800c14a:	430b      	orrs	r3, r1
 800c14c:	431a      	orrs	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	609a      	str	r2, [r3, #8]
 800c152:	e02d      	b.n	800c1b0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	689a      	ldr	r2, [r3, #8]
 800c158:	4b19      	ldr	r3, [pc, #100]	; (800c1c0 <FMC_SDRAM_Timing_Init+0xd0>)
 800c15a:	4013      	ands	r3, r2
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	68d2      	ldr	r2, [r2, #12]
 800c160:	3a01      	subs	r2, #1
 800c162:	0311      	lsls	r1, r2, #12
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	6952      	ldr	r2, [r2, #20]
 800c168:	3a01      	subs	r2, #1
 800c16a:	0512      	lsls	r2, r2, #20
 800c16c:	430a      	orrs	r2, r1
 800c16e:	431a      	orrs	r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	1e59      	subs	r1, r3, #1
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	3b01      	subs	r3, #1
 800c188:	011b      	lsls	r3, r3, #4
 800c18a:	4319      	orrs	r1, r3
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	3b01      	subs	r3, #1
 800c192:	021b      	lsls	r3, r3, #8
 800c194:	4319      	orrs	r1, r3
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	041b      	lsls	r3, r3, #16
 800c19e:	4319      	orrs	r1, r3
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	061b      	lsls	r3, r3, #24
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	ff0f0fff 	.word	0xff0f0fff

0800c1c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	f107 001c 	add.w	r0, r7, #28
 800c1d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d120      	bne.n	800c21e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68da      	ldr	r2, [r3, #12]
 800c1ec:	4b2a      	ldr	r3, [pc, #168]	; (800c298 <USB_CoreInit+0xd4>)
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c202:	2b01      	cmp	r3, #1
 800c204:	d105      	bne.n	800c212 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 faac 	bl	800c770 <USB_CoreReset>
 800c218:	4603      	mov	r3, r0
 800c21a:	73fb      	strb	r3, [r7, #15]
 800c21c:	e01a      	b.n	800c254 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 faa0 	bl	800c770 <USB_CoreReset>
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	639a      	str	r2, [r3, #56]	; 0x38
 800c246:	e005      	b.n	800c254 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	2b01      	cmp	r3, #1
 800c258:	d116      	bne.n	800c288 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c25e:	b29a      	uxth	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c268:	4b0c      	ldr	r3, [pc, #48]	; (800c29c <USB_CoreInit+0xd8>)
 800c26a:	4313      	orrs	r3, r2
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	f043 0206 	orr.w	r2, r3, #6
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f043 0220 	orr.w	r2, r3, #32
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c288:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c294:	b004      	add	sp, #16
 800c296:	4770      	bx	lr
 800c298:	ffbdffbf 	.word	0xffbdffbf
 800c29c:	03ee0000 	.word	0x03ee0000

0800c2a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	f023 0201 	bic.w	r2, r3, #1
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c2de:	78fb      	ldrb	r3, [r7, #3]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d115      	bne.n	800c310 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c2f0:	2001      	movs	r0, #1
 800c2f2:	f7f6 fcef 	bl	8002cd4 <HAL_Delay>
      ms++;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fa29 	bl	800c754 <USB_GetMode>
 800c302:	4603      	mov	r3, r0
 800c304:	2b01      	cmp	r3, #1
 800c306:	d01e      	beq.n	800c346 <USB_SetCurrentMode+0x84>
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2b31      	cmp	r3, #49	; 0x31
 800c30c:	d9f0      	bls.n	800c2f0 <USB_SetCurrentMode+0x2e>
 800c30e:	e01a      	b.n	800c346 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d115      	bne.n	800c342 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c322:	2001      	movs	r0, #1
 800c324:	f7f6 fcd6 	bl	8002cd4 <HAL_Delay>
      ms++;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3301      	adds	r3, #1
 800c32c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fa10 	bl	800c754 <USB_GetMode>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d005      	beq.n	800c346 <USB_SetCurrentMode+0x84>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b31      	cmp	r3, #49	; 0x31
 800c33e:	d9f0      	bls.n	800c322 <USB_SetCurrentMode+0x60>
 800c340:	e001      	b.n	800c346 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	e005      	b.n	800c352 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2b32      	cmp	r3, #50	; 0x32
 800c34a:	d101      	bne.n	800c350 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	e000      	b.n	800c352 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
	...

0800c35c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c35c:	b084      	sub	sp, #16
 800c35e:	b580      	push	{r7, lr}
 800c360:	b086      	sub	sp, #24
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c36a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c376:	2300      	movs	r3, #0
 800c378:	613b      	str	r3, [r7, #16]
 800c37a:	e009      	b.n	800c390 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	3340      	adds	r3, #64	; 0x40
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4413      	add	r3, r2
 800c386:	2200      	movs	r2, #0
 800c388:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	3301      	adds	r3, #1
 800c38e:	613b      	str	r3, [r7, #16]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	2b0e      	cmp	r3, #14
 800c394:	d9f2      	bls.n	800c37c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d11c      	bne.n	800c3d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3aa:	f043 0302 	orr.w	r3, r3, #2
 800c3ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	e005      	b.n	800c3e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	680b      	ldr	r3, [r1, #0]
 800c400:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c404:	2b01      	cmp	r3, #1
 800c406:	d10c      	bne.n	800c422 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d104      	bne.n	800c418 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c40e:	2100      	movs	r1, #0
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f965 	bl	800c6e0 <USB_SetDevSpeed>
 800c416:	e008      	b.n	800c42a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c418:	2101      	movs	r1, #1
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f960 	bl	800c6e0 <USB_SetDevSpeed>
 800c420:	e003      	b.n	800c42a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c422:	2103      	movs	r1, #3
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f95b 	bl	800c6e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c42a:	2110      	movs	r1, #16
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f8f3 	bl	800c618 <USB_FlushTxFifo>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f91f 	bl	800c680 <USB_FlushRxFifo>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d001      	beq.n	800c44c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c452:	461a      	mov	r2, r3
 800c454:	2300      	movs	r3, #0
 800c456:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c45e:	461a      	mov	r2, r3
 800c460:	2300      	movs	r3, #0
 800c462:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c46a:	461a      	mov	r2, r3
 800c46c:	2300      	movs	r3, #0
 800c46e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c470:	2300      	movs	r3, #0
 800c472:	613b      	str	r3, [r7, #16]
 800c474:	e043      	b.n	800c4fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	015a      	lsls	r2, r3, #5
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	4413      	add	r3, r2
 800c47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c48c:	d118      	bne.n	800c4c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10a      	bne.n	800c4aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	015a      	lsls	r2, r3, #5
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	4413      	add	r3, r2
 800c49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c4a6:	6013      	str	r3, [r2, #0]
 800c4a8:	e013      	b.n	800c4d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	015a      	lsls	r2, r3, #5
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c4bc:	6013      	str	r3, [r2, #0]
 800c4be:	e008      	b.n	800c4d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	015a      	lsls	r2, r3, #5
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	4413      	add	r3, r2
 800c4da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4de:	461a      	mov	r2, r3
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	015a      	lsls	r2, r3, #5
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c4f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	613b      	str	r3, [r7, #16]
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	429a      	cmp	r2, r3
 800c504:	d3b7      	bcc.n	800c476 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c506:	2300      	movs	r3, #0
 800c508:	613b      	str	r3, [r7, #16]
 800c50a:	e043      	b.n	800c594 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	015a      	lsls	r2, r3, #5
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	4413      	add	r3, r2
 800c514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c51e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c522:	d118      	bne.n	800c556 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10a      	bne.n	800c540 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	015a      	lsls	r2, r3, #5
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	4413      	add	r3, r2
 800c532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c536:	461a      	mov	r2, r3
 800c538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	e013      	b.n	800c568 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	4413      	add	r3, r2
 800c548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c54c:	461a      	mov	r2, r3
 800c54e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	e008      	b.n	800c568 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	015a      	lsls	r2, r3, #5
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	4413      	add	r3, r2
 800c55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c562:	461a      	mov	r2, r3
 800c564:	2300      	movs	r3, #0
 800c566:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	015a      	lsls	r2, r3, #5
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c574:	461a      	mov	r2, r3
 800c576:	2300      	movs	r3, #0
 800c578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	015a      	lsls	r2, r3, #5
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	4413      	add	r3, r2
 800c582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c586:	461a      	mov	r2, r3
 800c588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c58c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	3301      	adds	r3, #1
 800c592:	613b      	str	r3, [r7, #16]
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d3b7      	bcc.n	800c50c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c5bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d105      	bne.n	800c5d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	699b      	ldr	r3, [r3, #24]
 800c5c8:	f043 0210 	orr.w	r2, r3, #16
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	699a      	ldr	r2, [r3, #24]
 800c5d4:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <USB_DevInit+0x2b4>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d005      	beq.n	800c5ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	f043 0208 	orr.w	r2, r3, #8
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c5ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d105      	bne.n	800c600 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	699a      	ldr	r2, [r3, #24]
 800c5f8:	4b06      	ldr	r3, [pc, #24]	; (800c614 <USB_DevInit+0x2b8>)
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c600:	7dfb      	ldrb	r3, [r7, #23]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3718      	adds	r7, #24
 800c606:	46bd      	mov	sp, r7
 800c608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c60c:	b004      	add	sp, #16
 800c60e:	4770      	bx	lr
 800c610:	803c3800 	.word	0x803c3800
 800c614:	40000004 	.word	0x40000004

0800c618 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c622:	2300      	movs	r3, #0
 800c624:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3301      	adds	r3, #1
 800c62a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4a13      	ldr	r2, [pc, #76]	; (800c67c <USB_FlushTxFifo+0x64>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d901      	bls.n	800c638 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c634:	2303      	movs	r3, #3
 800c636:	e01b      	b.n	800c670 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	daf2      	bge.n	800c626 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c640:	2300      	movs	r3, #0
 800c642:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	019b      	lsls	r3, r3, #6
 800c648:	f043 0220 	orr.w	r2, r3, #32
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3301      	adds	r3, #1
 800c654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	4a08      	ldr	r2, [pc, #32]	; (800c67c <USB_FlushTxFifo+0x64>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d901      	bls.n	800c662 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c65e:	2303      	movs	r3, #3
 800c660:	e006      	b.n	800c670 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	f003 0320 	and.w	r3, r3, #32
 800c66a:	2b20      	cmp	r3, #32
 800c66c:	d0f0      	beq.n	800c650 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	00030d40 	.word	0x00030d40

0800c680 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c688:	2300      	movs	r3, #0
 800c68a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	3301      	adds	r3, #1
 800c690:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	4a11      	ldr	r2, [pc, #68]	; (800c6dc <USB_FlushRxFifo+0x5c>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d901      	bls.n	800c69e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e018      	b.n	800c6d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	daf2      	bge.n	800c68c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2210      	movs	r2, #16
 800c6ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	4a08      	ldr	r2, [pc, #32]	; (800c6dc <USB_FlushRxFifo+0x5c>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d901      	bls.n	800c6c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	e006      	b.n	800c6d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	f003 0310 	and.w	r3, r3, #16
 800c6ca:	2b10      	cmp	r3, #16
 800c6cc:	d0f0      	beq.n	800c6b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	00030d40 	.word	0x00030d40

0800c6e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	78fb      	ldrb	r3, [r7, #3]
 800c6fa:	68f9      	ldr	r1, [r7, #12]
 800c6fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c700:	4313      	orrs	r3, r2
 800c702:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c712:	b480      	push	{r7}
 800c714:	b085      	sub	sp, #20
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c72c:	f023 0303 	bic.w	r3, r3, #3
 800c730:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c740:	f043 0302 	orr.w	r3, r3, #2
 800c744:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3714      	adds	r7, #20
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	f003 0301 	and.w	r3, r3, #1
}
 800c764:	4618      	mov	r0, r3
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c778:	2300      	movs	r3, #0
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	3301      	adds	r3, #1
 800c780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	4a13      	ldr	r2, [pc, #76]	; (800c7d4 <USB_CoreReset+0x64>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d901      	bls.n	800c78e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c78a:	2303      	movs	r3, #3
 800c78c:	e01b      	b.n	800c7c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	2b00      	cmp	r3, #0
 800c794:	daf2      	bge.n	800c77c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	f043 0201 	orr.w	r2, r3, #1
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4a09      	ldr	r2, [pc, #36]	; (800c7d4 <USB_CoreReset+0x64>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d901      	bls.n	800c7b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e006      	b.n	800c7c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d0f0      	beq.n	800c7a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	00030d40 	.word	0x00030d40

0800c7d8 <sniprintf>:
 800c7d8:	b40c      	push	{r2, r3}
 800c7da:	b530      	push	{r4, r5, lr}
 800c7dc:	4b17      	ldr	r3, [pc, #92]	; (800c83c <sniprintf+0x64>)
 800c7de:	1e0c      	subs	r4, r1, #0
 800c7e0:	681d      	ldr	r5, [r3, #0]
 800c7e2:	b09d      	sub	sp, #116	; 0x74
 800c7e4:	da08      	bge.n	800c7f8 <sniprintf+0x20>
 800c7e6:	238b      	movs	r3, #139	; 0x8b
 800c7e8:	602b      	str	r3, [r5, #0]
 800c7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ee:	b01d      	add	sp, #116	; 0x74
 800c7f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7f4:	b002      	add	sp, #8
 800c7f6:	4770      	bx	lr
 800c7f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c7fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c800:	bf14      	ite	ne
 800c802:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c806:	4623      	moveq	r3, r4
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	9307      	str	r3, [sp, #28]
 800c80c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c810:	9002      	str	r0, [sp, #8]
 800c812:	9006      	str	r0, [sp, #24]
 800c814:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c818:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c81a:	ab21      	add	r3, sp, #132	; 0x84
 800c81c:	a902      	add	r1, sp, #8
 800c81e:	4628      	mov	r0, r5
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	f000 f9a1 	bl	800cb68 <_svfiprintf_r>
 800c826:	1c43      	adds	r3, r0, #1
 800c828:	bfbc      	itt	lt
 800c82a:	238b      	movlt	r3, #139	; 0x8b
 800c82c:	602b      	strlt	r3, [r5, #0]
 800c82e:	2c00      	cmp	r4, #0
 800c830:	d0dd      	beq.n	800c7ee <sniprintf+0x16>
 800c832:	9b02      	ldr	r3, [sp, #8]
 800c834:	2200      	movs	r2, #0
 800c836:	701a      	strb	r2, [r3, #0]
 800c838:	e7d9      	b.n	800c7ee <sniprintf+0x16>
 800c83a:	bf00      	nop
 800c83c:	2400005c 	.word	0x2400005c

0800c840 <memset>:
 800c840:	4402      	add	r2, r0
 800c842:	4603      	mov	r3, r0
 800c844:	4293      	cmp	r3, r2
 800c846:	d100      	bne.n	800c84a <memset+0xa>
 800c848:	4770      	bx	lr
 800c84a:	f803 1b01 	strb.w	r1, [r3], #1
 800c84e:	e7f9      	b.n	800c844 <memset+0x4>

0800c850 <__errno>:
 800c850:	4b01      	ldr	r3, [pc, #4]	; (800c858 <__errno+0x8>)
 800c852:	6818      	ldr	r0, [r3, #0]
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	2400005c 	.word	0x2400005c

0800c85c <__libc_init_array>:
 800c85c:	b570      	push	{r4, r5, r6, lr}
 800c85e:	4d0d      	ldr	r5, [pc, #52]	; (800c894 <__libc_init_array+0x38>)
 800c860:	4c0d      	ldr	r4, [pc, #52]	; (800c898 <__libc_init_array+0x3c>)
 800c862:	1b64      	subs	r4, r4, r5
 800c864:	10a4      	asrs	r4, r4, #2
 800c866:	2600      	movs	r6, #0
 800c868:	42a6      	cmp	r6, r4
 800c86a:	d109      	bne.n	800c880 <__libc_init_array+0x24>
 800c86c:	4d0b      	ldr	r5, [pc, #44]	; (800c89c <__libc_init_array+0x40>)
 800c86e:	4c0c      	ldr	r4, [pc, #48]	; (800c8a0 <__libc_init_array+0x44>)
 800c870:	f000 fc6a 	bl	800d148 <_init>
 800c874:	1b64      	subs	r4, r4, r5
 800c876:	10a4      	asrs	r4, r4, #2
 800c878:	2600      	movs	r6, #0
 800c87a:	42a6      	cmp	r6, r4
 800c87c:	d105      	bne.n	800c88a <__libc_init_array+0x2e>
 800c87e:	bd70      	pop	{r4, r5, r6, pc}
 800c880:	f855 3b04 	ldr.w	r3, [r5], #4
 800c884:	4798      	blx	r3
 800c886:	3601      	adds	r6, #1
 800c888:	e7ee      	b.n	800c868 <__libc_init_array+0xc>
 800c88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c88e:	4798      	blx	r3
 800c890:	3601      	adds	r6, #1
 800c892:	e7f2      	b.n	800c87a <__libc_init_array+0x1e>
 800c894:	0800d2ac 	.word	0x0800d2ac
 800c898:	0800d2ac 	.word	0x0800d2ac
 800c89c:	0800d2ac 	.word	0x0800d2ac
 800c8a0:	0800d2b0 	.word	0x0800d2b0

0800c8a4 <__retarget_lock_acquire_recursive>:
 800c8a4:	4770      	bx	lr

0800c8a6 <__retarget_lock_release_recursive>:
 800c8a6:	4770      	bx	lr

0800c8a8 <memcpy>:
 800c8a8:	440a      	add	r2, r1
 800c8aa:	4291      	cmp	r1, r2
 800c8ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8b0:	d100      	bne.n	800c8b4 <memcpy+0xc>
 800c8b2:	4770      	bx	lr
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8be:	4291      	cmp	r1, r2
 800c8c0:	d1f9      	bne.n	800c8b6 <memcpy+0xe>
 800c8c2:	bd10      	pop	{r4, pc}

0800c8c4 <_free_r>:
 800c8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8c6:	2900      	cmp	r1, #0
 800c8c8:	d044      	beq.n	800c954 <_free_r+0x90>
 800c8ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8ce:	9001      	str	r0, [sp, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f1a1 0404 	sub.w	r4, r1, #4
 800c8d6:	bfb8      	it	lt
 800c8d8:	18e4      	addlt	r4, r4, r3
 800c8da:	f000 f8df 	bl	800ca9c <__malloc_lock>
 800c8de:	4a1e      	ldr	r2, [pc, #120]	; (800c958 <_free_r+0x94>)
 800c8e0:	9801      	ldr	r0, [sp, #4]
 800c8e2:	6813      	ldr	r3, [r2, #0]
 800c8e4:	b933      	cbnz	r3, 800c8f4 <_free_r+0x30>
 800c8e6:	6063      	str	r3, [r4, #4]
 800c8e8:	6014      	str	r4, [r2, #0]
 800c8ea:	b003      	add	sp, #12
 800c8ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8f0:	f000 b8da 	b.w	800caa8 <__malloc_unlock>
 800c8f4:	42a3      	cmp	r3, r4
 800c8f6:	d908      	bls.n	800c90a <_free_r+0x46>
 800c8f8:	6825      	ldr	r5, [r4, #0]
 800c8fa:	1961      	adds	r1, r4, r5
 800c8fc:	428b      	cmp	r3, r1
 800c8fe:	bf01      	itttt	eq
 800c900:	6819      	ldreq	r1, [r3, #0]
 800c902:	685b      	ldreq	r3, [r3, #4]
 800c904:	1949      	addeq	r1, r1, r5
 800c906:	6021      	streq	r1, [r4, #0]
 800c908:	e7ed      	b.n	800c8e6 <_free_r+0x22>
 800c90a:	461a      	mov	r2, r3
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	b10b      	cbz	r3, 800c914 <_free_r+0x50>
 800c910:	42a3      	cmp	r3, r4
 800c912:	d9fa      	bls.n	800c90a <_free_r+0x46>
 800c914:	6811      	ldr	r1, [r2, #0]
 800c916:	1855      	adds	r5, r2, r1
 800c918:	42a5      	cmp	r5, r4
 800c91a:	d10b      	bne.n	800c934 <_free_r+0x70>
 800c91c:	6824      	ldr	r4, [r4, #0]
 800c91e:	4421      	add	r1, r4
 800c920:	1854      	adds	r4, r2, r1
 800c922:	42a3      	cmp	r3, r4
 800c924:	6011      	str	r1, [r2, #0]
 800c926:	d1e0      	bne.n	800c8ea <_free_r+0x26>
 800c928:	681c      	ldr	r4, [r3, #0]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	6053      	str	r3, [r2, #4]
 800c92e:	440c      	add	r4, r1
 800c930:	6014      	str	r4, [r2, #0]
 800c932:	e7da      	b.n	800c8ea <_free_r+0x26>
 800c934:	d902      	bls.n	800c93c <_free_r+0x78>
 800c936:	230c      	movs	r3, #12
 800c938:	6003      	str	r3, [r0, #0]
 800c93a:	e7d6      	b.n	800c8ea <_free_r+0x26>
 800c93c:	6825      	ldr	r5, [r4, #0]
 800c93e:	1961      	adds	r1, r4, r5
 800c940:	428b      	cmp	r3, r1
 800c942:	bf04      	itt	eq
 800c944:	6819      	ldreq	r1, [r3, #0]
 800c946:	685b      	ldreq	r3, [r3, #4]
 800c948:	6063      	str	r3, [r4, #4]
 800c94a:	bf04      	itt	eq
 800c94c:	1949      	addeq	r1, r1, r5
 800c94e:	6021      	streq	r1, [r4, #0]
 800c950:	6054      	str	r4, [r2, #4]
 800c952:	e7ca      	b.n	800c8ea <_free_r+0x26>
 800c954:	b003      	add	sp, #12
 800c956:	bd30      	pop	{r4, r5, pc}
 800c958:	24000ffc 	.word	0x24000ffc

0800c95c <sbrk_aligned>:
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	4e0e      	ldr	r6, [pc, #56]	; (800c998 <sbrk_aligned+0x3c>)
 800c960:	460c      	mov	r4, r1
 800c962:	6831      	ldr	r1, [r6, #0]
 800c964:	4605      	mov	r5, r0
 800c966:	b911      	cbnz	r1, 800c96e <sbrk_aligned+0x12>
 800c968:	f000 fba6 	bl	800d0b8 <_sbrk_r>
 800c96c:	6030      	str	r0, [r6, #0]
 800c96e:	4621      	mov	r1, r4
 800c970:	4628      	mov	r0, r5
 800c972:	f000 fba1 	bl	800d0b8 <_sbrk_r>
 800c976:	1c43      	adds	r3, r0, #1
 800c978:	d00a      	beq.n	800c990 <sbrk_aligned+0x34>
 800c97a:	1cc4      	adds	r4, r0, #3
 800c97c:	f024 0403 	bic.w	r4, r4, #3
 800c980:	42a0      	cmp	r0, r4
 800c982:	d007      	beq.n	800c994 <sbrk_aligned+0x38>
 800c984:	1a21      	subs	r1, r4, r0
 800c986:	4628      	mov	r0, r5
 800c988:	f000 fb96 	bl	800d0b8 <_sbrk_r>
 800c98c:	3001      	adds	r0, #1
 800c98e:	d101      	bne.n	800c994 <sbrk_aligned+0x38>
 800c990:	f04f 34ff 	mov.w	r4, #4294967295
 800c994:	4620      	mov	r0, r4
 800c996:	bd70      	pop	{r4, r5, r6, pc}
 800c998:	24001000 	.word	0x24001000

0800c99c <_malloc_r>:
 800c99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a0:	1ccd      	adds	r5, r1, #3
 800c9a2:	f025 0503 	bic.w	r5, r5, #3
 800c9a6:	3508      	adds	r5, #8
 800c9a8:	2d0c      	cmp	r5, #12
 800c9aa:	bf38      	it	cc
 800c9ac:	250c      	movcc	r5, #12
 800c9ae:	2d00      	cmp	r5, #0
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	db01      	blt.n	800c9b8 <_malloc_r+0x1c>
 800c9b4:	42a9      	cmp	r1, r5
 800c9b6:	d905      	bls.n	800c9c4 <_malloc_r+0x28>
 800c9b8:	230c      	movs	r3, #12
 800c9ba:	603b      	str	r3, [r7, #0]
 800c9bc:	2600      	movs	r6, #0
 800c9be:	4630      	mov	r0, r6
 800c9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ca98 <_malloc_r+0xfc>
 800c9c8:	f000 f868 	bl	800ca9c <__malloc_lock>
 800c9cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c9d0:	461c      	mov	r4, r3
 800c9d2:	bb5c      	cbnz	r4, 800ca2c <_malloc_r+0x90>
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	f7ff ffc0 	bl	800c95c <sbrk_aligned>
 800c9dc:	1c43      	adds	r3, r0, #1
 800c9de:	4604      	mov	r4, r0
 800c9e0:	d155      	bne.n	800ca8e <_malloc_r+0xf2>
 800c9e2:	f8d8 4000 	ldr.w	r4, [r8]
 800c9e6:	4626      	mov	r6, r4
 800c9e8:	2e00      	cmp	r6, #0
 800c9ea:	d145      	bne.n	800ca78 <_malloc_r+0xdc>
 800c9ec:	2c00      	cmp	r4, #0
 800c9ee:	d048      	beq.n	800ca82 <_malloc_r+0xe6>
 800c9f0:	6823      	ldr	r3, [r4, #0]
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	eb04 0903 	add.w	r9, r4, r3
 800c9fa:	f000 fb5d 	bl	800d0b8 <_sbrk_r>
 800c9fe:	4581      	cmp	r9, r0
 800ca00:	d13f      	bne.n	800ca82 <_malloc_r+0xe6>
 800ca02:	6821      	ldr	r1, [r4, #0]
 800ca04:	1a6d      	subs	r5, r5, r1
 800ca06:	4629      	mov	r1, r5
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f7ff ffa7 	bl	800c95c <sbrk_aligned>
 800ca0e:	3001      	adds	r0, #1
 800ca10:	d037      	beq.n	800ca82 <_malloc_r+0xe6>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	442b      	add	r3, r5
 800ca16:	6023      	str	r3, [r4, #0]
 800ca18:	f8d8 3000 	ldr.w	r3, [r8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d038      	beq.n	800ca92 <_malloc_r+0xf6>
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	42a2      	cmp	r2, r4
 800ca24:	d12b      	bne.n	800ca7e <_malloc_r+0xe2>
 800ca26:	2200      	movs	r2, #0
 800ca28:	605a      	str	r2, [r3, #4]
 800ca2a:	e00f      	b.n	800ca4c <_malloc_r+0xb0>
 800ca2c:	6822      	ldr	r2, [r4, #0]
 800ca2e:	1b52      	subs	r2, r2, r5
 800ca30:	d41f      	bmi.n	800ca72 <_malloc_r+0xd6>
 800ca32:	2a0b      	cmp	r2, #11
 800ca34:	d917      	bls.n	800ca66 <_malloc_r+0xca>
 800ca36:	1961      	adds	r1, r4, r5
 800ca38:	42a3      	cmp	r3, r4
 800ca3a:	6025      	str	r5, [r4, #0]
 800ca3c:	bf18      	it	ne
 800ca3e:	6059      	strne	r1, [r3, #4]
 800ca40:	6863      	ldr	r3, [r4, #4]
 800ca42:	bf08      	it	eq
 800ca44:	f8c8 1000 	streq.w	r1, [r8]
 800ca48:	5162      	str	r2, [r4, r5]
 800ca4a:	604b      	str	r3, [r1, #4]
 800ca4c:	4638      	mov	r0, r7
 800ca4e:	f104 060b 	add.w	r6, r4, #11
 800ca52:	f000 f829 	bl	800caa8 <__malloc_unlock>
 800ca56:	f026 0607 	bic.w	r6, r6, #7
 800ca5a:	1d23      	adds	r3, r4, #4
 800ca5c:	1af2      	subs	r2, r6, r3
 800ca5e:	d0ae      	beq.n	800c9be <_malloc_r+0x22>
 800ca60:	1b9b      	subs	r3, r3, r6
 800ca62:	50a3      	str	r3, [r4, r2]
 800ca64:	e7ab      	b.n	800c9be <_malloc_r+0x22>
 800ca66:	42a3      	cmp	r3, r4
 800ca68:	6862      	ldr	r2, [r4, #4]
 800ca6a:	d1dd      	bne.n	800ca28 <_malloc_r+0x8c>
 800ca6c:	f8c8 2000 	str.w	r2, [r8]
 800ca70:	e7ec      	b.n	800ca4c <_malloc_r+0xb0>
 800ca72:	4623      	mov	r3, r4
 800ca74:	6864      	ldr	r4, [r4, #4]
 800ca76:	e7ac      	b.n	800c9d2 <_malloc_r+0x36>
 800ca78:	4634      	mov	r4, r6
 800ca7a:	6876      	ldr	r6, [r6, #4]
 800ca7c:	e7b4      	b.n	800c9e8 <_malloc_r+0x4c>
 800ca7e:	4613      	mov	r3, r2
 800ca80:	e7cc      	b.n	800ca1c <_malloc_r+0x80>
 800ca82:	230c      	movs	r3, #12
 800ca84:	603b      	str	r3, [r7, #0]
 800ca86:	4638      	mov	r0, r7
 800ca88:	f000 f80e 	bl	800caa8 <__malloc_unlock>
 800ca8c:	e797      	b.n	800c9be <_malloc_r+0x22>
 800ca8e:	6025      	str	r5, [r4, #0]
 800ca90:	e7dc      	b.n	800ca4c <_malloc_r+0xb0>
 800ca92:	605b      	str	r3, [r3, #4]
 800ca94:	deff      	udf	#255	; 0xff
 800ca96:	bf00      	nop
 800ca98:	24000ffc 	.word	0x24000ffc

0800ca9c <__malloc_lock>:
 800ca9c:	4801      	ldr	r0, [pc, #4]	; (800caa4 <__malloc_lock+0x8>)
 800ca9e:	f7ff bf01 	b.w	800c8a4 <__retarget_lock_acquire_recursive>
 800caa2:	bf00      	nop
 800caa4:	24000ff8 	.word	0x24000ff8

0800caa8 <__malloc_unlock>:
 800caa8:	4801      	ldr	r0, [pc, #4]	; (800cab0 <__malloc_unlock+0x8>)
 800caaa:	f7ff befc 	b.w	800c8a6 <__retarget_lock_release_recursive>
 800caae:	bf00      	nop
 800cab0:	24000ff8 	.word	0x24000ff8

0800cab4 <__ssputs_r>:
 800cab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab8:	688e      	ldr	r6, [r1, #8]
 800caba:	461f      	mov	r7, r3
 800cabc:	42be      	cmp	r6, r7
 800cabe:	680b      	ldr	r3, [r1, #0]
 800cac0:	4682      	mov	sl, r0
 800cac2:	460c      	mov	r4, r1
 800cac4:	4690      	mov	r8, r2
 800cac6:	d82c      	bhi.n	800cb22 <__ssputs_r+0x6e>
 800cac8:	898a      	ldrh	r2, [r1, #12]
 800caca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cace:	d026      	beq.n	800cb1e <__ssputs_r+0x6a>
 800cad0:	6965      	ldr	r5, [r4, #20]
 800cad2:	6909      	ldr	r1, [r1, #16]
 800cad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cad8:	eba3 0901 	sub.w	r9, r3, r1
 800cadc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cae0:	1c7b      	adds	r3, r7, #1
 800cae2:	444b      	add	r3, r9
 800cae4:	106d      	asrs	r5, r5, #1
 800cae6:	429d      	cmp	r5, r3
 800cae8:	bf38      	it	cc
 800caea:	461d      	movcc	r5, r3
 800caec:	0553      	lsls	r3, r2, #21
 800caee:	d527      	bpl.n	800cb40 <__ssputs_r+0x8c>
 800caf0:	4629      	mov	r1, r5
 800caf2:	f7ff ff53 	bl	800c99c <_malloc_r>
 800caf6:	4606      	mov	r6, r0
 800caf8:	b360      	cbz	r0, 800cb54 <__ssputs_r+0xa0>
 800cafa:	6921      	ldr	r1, [r4, #16]
 800cafc:	464a      	mov	r2, r9
 800cafe:	f7ff fed3 	bl	800c8a8 <memcpy>
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb0c:	81a3      	strh	r3, [r4, #12]
 800cb0e:	6126      	str	r6, [r4, #16]
 800cb10:	6165      	str	r5, [r4, #20]
 800cb12:	444e      	add	r6, r9
 800cb14:	eba5 0509 	sub.w	r5, r5, r9
 800cb18:	6026      	str	r6, [r4, #0]
 800cb1a:	60a5      	str	r5, [r4, #8]
 800cb1c:	463e      	mov	r6, r7
 800cb1e:	42be      	cmp	r6, r7
 800cb20:	d900      	bls.n	800cb24 <__ssputs_r+0x70>
 800cb22:	463e      	mov	r6, r7
 800cb24:	6820      	ldr	r0, [r4, #0]
 800cb26:	4632      	mov	r2, r6
 800cb28:	4641      	mov	r1, r8
 800cb2a:	f000 faab 	bl	800d084 <memmove>
 800cb2e:	68a3      	ldr	r3, [r4, #8]
 800cb30:	1b9b      	subs	r3, r3, r6
 800cb32:	60a3      	str	r3, [r4, #8]
 800cb34:	6823      	ldr	r3, [r4, #0]
 800cb36:	4433      	add	r3, r6
 800cb38:	6023      	str	r3, [r4, #0]
 800cb3a:	2000      	movs	r0, #0
 800cb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb40:	462a      	mov	r2, r5
 800cb42:	f000 fac9 	bl	800d0d8 <_realloc_r>
 800cb46:	4606      	mov	r6, r0
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d1e0      	bne.n	800cb0e <__ssputs_r+0x5a>
 800cb4c:	6921      	ldr	r1, [r4, #16]
 800cb4e:	4650      	mov	r0, sl
 800cb50:	f7ff feb8 	bl	800c8c4 <_free_r>
 800cb54:	230c      	movs	r3, #12
 800cb56:	f8ca 3000 	str.w	r3, [sl]
 800cb5a:	89a3      	ldrh	r3, [r4, #12]
 800cb5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb60:	81a3      	strh	r3, [r4, #12]
 800cb62:	f04f 30ff 	mov.w	r0, #4294967295
 800cb66:	e7e9      	b.n	800cb3c <__ssputs_r+0x88>

0800cb68 <_svfiprintf_r>:
 800cb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	4698      	mov	r8, r3
 800cb6e:	898b      	ldrh	r3, [r1, #12]
 800cb70:	061b      	lsls	r3, r3, #24
 800cb72:	b09d      	sub	sp, #116	; 0x74
 800cb74:	4607      	mov	r7, r0
 800cb76:	460d      	mov	r5, r1
 800cb78:	4614      	mov	r4, r2
 800cb7a:	d50e      	bpl.n	800cb9a <_svfiprintf_r+0x32>
 800cb7c:	690b      	ldr	r3, [r1, #16]
 800cb7e:	b963      	cbnz	r3, 800cb9a <_svfiprintf_r+0x32>
 800cb80:	2140      	movs	r1, #64	; 0x40
 800cb82:	f7ff ff0b 	bl	800c99c <_malloc_r>
 800cb86:	6028      	str	r0, [r5, #0]
 800cb88:	6128      	str	r0, [r5, #16]
 800cb8a:	b920      	cbnz	r0, 800cb96 <_svfiprintf_r+0x2e>
 800cb8c:	230c      	movs	r3, #12
 800cb8e:	603b      	str	r3, [r7, #0]
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295
 800cb94:	e0d0      	b.n	800cd38 <_svfiprintf_r+0x1d0>
 800cb96:	2340      	movs	r3, #64	; 0x40
 800cb98:	616b      	str	r3, [r5, #20]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb9e:	2320      	movs	r3, #32
 800cba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cba4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cba8:	2330      	movs	r3, #48	; 0x30
 800cbaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd50 <_svfiprintf_r+0x1e8>
 800cbae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbb2:	f04f 0901 	mov.w	r9, #1
 800cbb6:	4623      	mov	r3, r4
 800cbb8:	469a      	mov	sl, r3
 800cbba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbbe:	b10a      	cbz	r2, 800cbc4 <_svfiprintf_r+0x5c>
 800cbc0:	2a25      	cmp	r2, #37	; 0x25
 800cbc2:	d1f9      	bne.n	800cbb8 <_svfiprintf_r+0x50>
 800cbc4:	ebba 0b04 	subs.w	fp, sl, r4
 800cbc8:	d00b      	beq.n	800cbe2 <_svfiprintf_r+0x7a>
 800cbca:	465b      	mov	r3, fp
 800cbcc:	4622      	mov	r2, r4
 800cbce:	4629      	mov	r1, r5
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	f7ff ff6f 	bl	800cab4 <__ssputs_r>
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	f000 80a9 	beq.w	800cd2e <_svfiprintf_r+0x1c6>
 800cbdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbde:	445a      	add	r2, fp
 800cbe0:	9209      	str	r2, [sp, #36]	; 0x24
 800cbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f000 80a1 	beq.w	800cd2e <_svfiprintf_r+0x1c6>
 800cbec:	2300      	movs	r3, #0
 800cbee:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbf6:	f10a 0a01 	add.w	sl, sl, #1
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	9307      	str	r3, [sp, #28]
 800cbfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc02:	931a      	str	r3, [sp, #104]	; 0x68
 800cc04:	4654      	mov	r4, sl
 800cc06:	2205      	movs	r2, #5
 800cc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc0c:	4850      	ldr	r0, [pc, #320]	; (800cd50 <_svfiprintf_r+0x1e8>)
 800cc0e:	f7f3 fb6f 	bl	80002f0 <memchr>
 800cc12:	9a04      	ldr	r2, [sp, #16]
 800cc14:	b9d8      	cbnz	r0, 800cc4e <_svfiprintf_r+0xe6>
 800cc16:	06d0      	lsls	r0, r2, #27
 800cc18:	bf44      	itt	mi
 800cc1a:	2320      	movmi	r3, #32
 800cc1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc20:	0711      	lsls	r1, r2, #28
 800cc22:	bf44      	itt	mi
 800cc24:	232b      	movmi	r3, #43	; 0x2b
 800cc26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc2e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc30:	d015      	beq.n	800cc5e <_svfiprintf_r+0xf6>
 800cc32:	9a07      	ldr	r2, [sp, #28]
 800cc34:	4654      	mov	r4, sl
 800cc36:	2000      	movs	r0, #0
 800cc38:	f04f 0c0a 	mov.w	ip, #10
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc42:	3b30      	subs	r3, #48	; 0x30
 800cc44:	2b09      	cmp	r3, #9
 800cc46:	d94d      	bls.n	800cce4 <_svfiprintf_r+0x17c>
 800cc48:	b1b0      	cbz	r0, 800cc78 <_svfiprintf_r+0x110>
 800cc4a:	9207      	str	r2, [sp, #28]
 800cc4c:	e014      	b.n	800cc78 <_svfiprintf_r+0x110>
 800cc4e:	eba0 0308 	sub.w	r3, r0, r8
 800cc52:	fa09 f303 	lsl.w	r3, r9, r3
 800cc56:	4313      	orrs	r3, r2
 800cc58:	9304      	str	r3, [sp, #16]
 800cc5a:	46a2      	mov	sl, r4
 800cc5c:	e7d2      	b.n	800cc04 <_svfiprintf_r+0x9c>
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	1d19      	adds	r1, r3, #4
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	9103      	str	r1, [sp, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	bfbb      	ittet	lt
 800cc6a:	425b      	neglt	r3, r3
 800cc6c:	f042 0202 	orrlt.w	r2, r2, #2
 800cc70:	9307      	strge	r3, [sp, #28]
 800cc72:	9307      	strlt	r3, [sp, #28]
 800cc74:	bfb8      	it	lt
 800cc76:	9204      	strlt	r2, [sp, #16]
 800cc78:	7823      	ldrb	r3, [r4, #0]
 800cc7a:	2b2e      	cmp	r3, #46	; 0x2e
 800cc7c:	d10c      	bne.n	800cc98 <_svfiprintf_r+0x130>
 800cc7e:	7863      	ldrb	r3, [r4, #1]
 800cc80:	2b2a      	cmp	r3, #42	; 0x2a
 800cc82:	d134      	bne.n	800ccee <_svfiprintf_r+0x186>
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	1d1a      	adds	r2, r3, #4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	9203      	str	r2, [sp, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	bfb8      	it	lt
 800cc90:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc94:	3402      	adds	r4, #2
 800cc96:	9305      	str	r3, [sp, #20]
 800cc98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cd60 <_svfiprintf_r+0x1f8>
 800cc9c:	7821      	ldrb	r1, [r4, #0]
 800cc9e:	2203      	movs	r2, #3
 800cca0:	4650      	mov	r0, sl
 800cca2:	f7f3 fb25 	bl	80002f0 <memchr>
 800cca6:	b138      	cbz	r0, 800ccb8 <_svfiprintf_r+0x150>
 800cca8:	9b04      	ldr	r3, [sp, #16]
 800ccaa:	eba0 000a 	sub.w	r0, r0, sl
 800ccae:	2240      	movs	r2, #64	; 0x40
 800ccb0:	4082      	lsls	r2, r0
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	3401      	adds	r4, #1
 800ccb6:	9304      	str	r3, [sp, #16]
 800ccb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccbc:	4825      	ldr	r0, [pc, #148]	; (800cd54 <_svfiprintf_r+0x1ec>)
 800ccbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccc2:	2206      	movs	r2, #6
 800ccc4:	f7f3 fb14 	bl	80002f0 <memchr>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d038      	beq.n	800cd3e <_svfiprintf_r+0x1d6>
 800cccc:	4b22      	ldr	r3, [pc, #136]	; (800cd58 <_svfiprintf_r+0x1f0>)
 800ccce:	bb1b      	cbnz	r3, 800cd18 <_svfiprintf_r+0x1b0>
 800ccd0:	9b03      	ldr	r3, [sp, #12]
 800ccd2:	3307      	adds	r3, #7
 800ccd4:	f023 0307 	bic.w	r3, r3, #7
 800ccd8:	3308      	adds	r3, #8
 800ccda:	9303      	str	r3, [sp, #12]
 800ccdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccde:	4433      	add	r3, r6
 800cce0:	9309      	str	r3, [sp, #36]	; 0x24
 800cce2:	e768      	b.n	800cbb6 <_svfiprintf_r+0x4e>
 800cce4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cce8:	460c      	mov	r4, r1
 800ccea:	2001      	movs	r0, #1
 800ccec:	e7a6      	b.n	800cc3c <_svfiprintf_r+0xd4>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	3401      	adds	r4, #1
 800ccf2:	9305      	str	r3, [sp, #20]
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	f04f 0c0a 	mov.w	ip, #10
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd00:	3a30      	subs	r2, #48	; 0x30
 800cd02:	2a09      	cmp	r2, #9
 800cd04:	d903      	bls.n	800cd0e <_svfiprintf_r+0x1a6>
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d0c6      	beq.n	800cc98 <_svfiprintf_r+0x130>
 800cd0a:	9105      	str	r1, [sp, #20]
 800cd0c:	e7c4      	b.n	800cc98 <_svfiprintf_r+0x130>
 800cd0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd12:	4604      	mov	r4, r0
 800cd14:	2301      	movs	r3, #1
 800cd16:	e7f0      	b.n	800ccfa <_svfiprintf_r+0x192>
 800cd18:	ab03      	add	r3, sp, #12
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	462a      	mov	r2, r5
 800cd1e:	4b0f      	ldr	r3, [pc, #60]	; (800cd5c <_svfiprintf_r+0x1f4>)
 800cd20:	a904      	add	r1, sp, #16
 800cd22:	4638      	mov	r0, r7
 800cd24:	f3af 8000 	nop.w
 800cd28:	1c42      	adds	r2, r0, #1
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	d1d6      	bne.n	800ccdc <_svfiprintf_r+0x174>
 800cd2e:	89ab      	ldrh	r3, [r5, #12]
 800cd30:	065b      	lsls	r3, r3, #25
 800cd32:	f53f af2d 	bmi.w	800cb90 <_svfiprintf_r+0x28>
 800cd36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd38:	b01d      	add	sp, #116	; 0x74
 800cd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd3e:	ab03      	add	r3, sp, #12
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	462a      	mov	r2, r5
 800cd44:	4b05      	ldr	r3, [pc, #20]	; (800cd5c <_svfiprintf_r+0x1f4>)
 800cd46:	a904      	add	r1, sp, #16
 800cd48:	4638      	mov	r0, r7
 800cd4a:	f000 f879 	bl	800ce40 <_printf_i>
 800cd4e:	e7eb      	b.n	800cd28 <_svfiprintf_r+0x1c0>
 800cd50:	0800d270 	.word	0x0800d270
 800cd54:	0800d27a 	.word	0x0800d27a
 800cd58:	00000000 	.word	0x00000000
 800cd5c:	0800cab5 	.word	0x0800cab5
 800cd60:	0800d276 	.word	0x0800d276

0800cd64 <_printf_common>:
 800cd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd68:	4616      	mov	r6, r2
 800cd6a:	4699      	mov	r9, r3
 800cd6c:	688a      	ldr	r2, [r1, #8]
 800cd6e:	690b      	ldr	r3, [r1, #16]
 800cd70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	bfb8      	it	lt
 800cd78:	4613      	movlt	r3, r2
 800cd7a:	6033      	str	r3, [r6, #0]
 800cd7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd80:	4607      	mov	r7, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	b10a      	cbz	r2, 800cd8a <_printf_common+0x26>
 800cd86:	3301      	adds	r3, #1
 800cd88:	6033      	str	r3, [r6, #0]
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	0699      	lsls	r1, r3, #26
 800cd8e:	bf42      	ittt	mi
 800cd90:	6833      	ldrmi	r3, [r6, #0]
 800cd92:	3302      	addmi	r3, #2
 800cd94:	6033      	strmi	r3, [r6, #0]
 800cd96:	6825      	ldr	r5, [r4, #0]
 800cd98:	f015 0506 	ands.w	r5, r5, #6
 800cd9c:	d106      	bne.n	800cdac <_printf_common+0x48>
 800cd9e:	f104 0a19 	add.w	sl, r4, #25
 800cda2:	68e3      	ldr	r3, [r4, #12]
 800cda4:	6832      	ldr	r2, [r6, #0]
 800cda6:	1a9b      	subs	r3, r3, r2
 800cda8:	42ab      	cmp	r3, r5
 800cdaa:	dc26      	bgt.n	800cdfa <_printf_common+0x96>
 800cdac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdb0:	1e13      	subs	r3, r2, #0
 800cdb2:	6822      	ldr	r2, [r4, #0]
 800cdb4:	bf18      	it	ne
 800cdb6:	2301      	movne	r3, #1
 800cdb8:	0692      	lsls	r2, r2, #26
 800cdba:	d42b      	bmi.n	800ce14 <_printf_common+0xb0>
 800cdbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	47c0      	blx	r8
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d01e      	beq.n	800ce08 <_printf_common+0xa4>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	6922      	ldr	r2, [r4, #16]
 800cdce:	f003 0306 	and.w	r3, r3, #6
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	bf02      	ittt	eq
 800cdd6:	68e5      	ldreq	r5, [r4, #12]
 800cdd8:	6833      	ldreq	r3, [r6, #0]
 800cdda:	1aed      	subeq	r5, r5, r3
 800cddc:	68a3      	ldr	r3, [r4, #8]
 800cdde:	bf0c      	ite	eq
 800cde0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cde4:	2500      	movne	r5, #0
 800cde6:	4293      	cmp	r3, r2
 800cde8:	bfc4      	itt	gt
 800cdea:	1a9b      	subgt	r3, r3, r2
 800cdec:	18ed      	addgt	r5, r5, r3
 800cdee:	2600      	movs	r6, #0
 800cdf0:	341a      	adds	r4, #26
 800cdf2:	42b5      	cmp	r5, r6
 800cdf4:	d11a      	bne.n	800ce2c <_printf_common+0xc8>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	e008      	b.n	800ce0c <_printf_common+0xa8>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	4652      	mov	r2, sl
 800cdfe:	4649      	mov	r1, r9
 800ce00:	4638      	mov	r0, r7
 800ce02:	47c0      	blx	r8
 800ce04:	3001      	adds	r0, #1
 800ce06:	d103      	bne.n	800ce10 <_printf_common+0xac>
 800ce08:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce10:	3501      	adds	r5, #1
 800ce12:	e7c6      	b.n	800cda2 <_printf_common+0x3e>
 800ce14:	18e1      	adds	r1, r4, r3
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	2030      	movs	r0, #48	; 0x30
 800ce1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce1e:	4422      	add	r2, r4
 800ce20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce28:	3302      	adds	r3, #2
 800ce2a:	e7c7      	b.n	800cdbc <_printf_common+0x58>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	4622      	mov	r2, r4
 800ce30:	4649      	mov	r1, r9
 800ce32:	4638      	mov	r0, r7
 800ce34:	47c0      	blx	r8
 800ce36:	3001      	adds	r0, #1
 800ce38:	d0e6      	beq.n	800ce08 <_printf_common+0xa4>
 800ce3a:	3601      	adds	r6, #1
 800ce3c:	e7d9      	b.n	800cdf2 <_printf_common+0x8e>
	...

0800ce40 <_printf_i>:
 800ce40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce44:	7e0f      	ldrb	r7, [r1, #24]
 800ce46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce48:	2f78      	cmp	r7, #120	; 0x78
 800ce4a:	4691      	mov	r9, r2
 800ce4c:	4680      	mov	r8, r0
 800ce4e:	460c      	mov	r4, r1
 800ce50:	469a      	mov	sl, r3
 800ce52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce56:	d807      	bhi.n	800ce68 <_printf_i+0x28>
 800ce58:	2f62      	cmp	r7, #98	; 0x62
 800ce5a:	d80a      	bhi.n	800ce72 <_printf_i+0x32>
 800ce5c:	2f00      	cmp	r7, #0
 800ce5e:	f000 80d4 	beq.w	800d00a <_printf_i+0x1ca>
 800ce62:	2f58      	cmp	r7, #88	; 0x58
 800ce64:	f000 80c0 	beq.w	800cfe8 <_printf_i+0x1a8>
 800ce68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce70:	e03a      	b.n	800cee8 <_printf_i+0xa8>
 800ce72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce76:	2b15      	cmp	r3, #21
 800ce78:	d8f6      	bhi.n	800ce68 <_printf_i+0x28>
 800ce7a:	a101      	add	r1, pc, #4	; (adr r1, 800ce80 <_printf_i+0x40>)
 800ce7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce80:	0800ced9 	.word	0x0800ced9
 800ce84:	0800ceed 	.word	0x0800ceed
 800ce88:	0800ce69 	.word	0x0800ce69
 800ce8c:	0800ce69 	.word	0x0800ce69
 800ce90:	0800ce69 	.word	0x0800ce69
 800ce94:	0800ce69 	.word	0x0800ce69
 800ce98:	0800ceed 	.word	0x0800ceed
 800ce9c:	0800ce69 	.word	0x0800ce69
 800cea0:	0800ce69 	.word	0x0800ce69
 800cea4:	0800ce69 	.word	0x0800ce69
 800cea8:	0800ce69 	.word	0x0800ce69
 800ceac:	0800cff1 	.word	0x0800cff1
 800ceb0:	0800cf19 	.word	0x0800cf19
 800ceb4:	0800cfab 	.word	0x0800cfab
 800ceb8:	0800ce69 	.word	0x0800ce69
 800cebc:	0800ce69 	.word	0x0800ce69
 800cec0:	0800d013 	.word	0x0800d013
 800cec4:	0800ce69 	.word	0x0800ce69
 800cec8:	0800cf19 	.word	0x0800cf19
 800cecc:	0800ce69 	.word	0x0800ce69
 800ced0:	0800ce69 	.word	0x0800ce69
 800ced4:	0800cfb3 	.word	0x0800cfb3
 800ced8:	682b      	ldr	r3, [r5, #0]
 800ceda:	1d1a      	adds	r2, r3, #4
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	602a      	str	r2, [r5, #0]
 800cee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cee8:	2301      	movs	r3, #1
 800ceea:	e09f      	b.n	800d02c <_printf_i+0x1ec>
 800ceec:	6820      	ldr	r0, [r4, #0]
 800ceee:	682b      	ldr	r3, [r5, #0]
 800cef0:	0607      	lsls	r7, r0, #24
 800cef2:	f103 0104 	add.w	r1, r3, #4
 800cef6:	6029      	str	r1, [r5, #0]
 800cef8:	d501      	bpl.n	800cefe <_printf_i+0xbe>
 800cefa:	681e      	ldr	r6, [r3, #0]
 800cefc:	e003      	b.n	800cf06 <_printf_i+0xc6>
 800cefe:	0646      	lsls	r6, r0, #25
 800cf00:	d5fb      	bpl.n	800cefa <_printf_i+0xba>
 800cf02:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cf06:	2e00      	cmp	r6, #0
 800cf08:	da03      	bge.n	800cf12 <_printf_i+0xd2>
 800cf0a:	232d      	movs	r3, #45	; 0x2d
 800cf0c:	4276      	negs	r6, r6
 800cf0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf12:	485a      	ldr	r0, [pc, #360]	; (800d07c <_printf_i+0x23c>)
 800cf14:	230a      	movs	r3, #10
 800cf16:	e012      	b.n	800cf3e <_printf_i+0xfe>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	6820      	ldr	r0, [r4, #0]
 800cf1c:	1d19      	adds	r1, r3, #4
 800cf1e:	6029      	str	r1, [r5, #0]
 800cf20:	0605      	lsls	r5, r0, #24
 800cf22:	d501      	bpl.n	800cf28 <_printf_i+0xe8>
 800cf24:	681e      	ldr	r6, [r3, #0]
 800cf26:	e002      	b.n	800cf2e <_printf_i+0xee>
 800cf28:	0641      	lsls	r1, r0, #25
 800cf2a:	d5fb      	bpl.n	800cf24 <_printf_i+0xe4>
 800cf2c:	881e      	ldrh	r6, [r3, #0]
 800cf2e:	4853      	ldr	r0, [pc, #332]	; (800d07c <_printf_i+0x23c>)
 800cf30:	2f6f      	cmp	r7, #111	; 0x6f
 800cf32:	bf0c      	ite	eq
 800cf34:	2308      	moveq	r3, #8
 800cf36:	230a      	movne	r3, #10
 800cf38:	2100      	movs	r1, #0
 800cf3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf3e:	6865      	ldr	r5, [r4, #4]
 800cf40:	60a5      	str	r5, [r4, #8]
 800cf42:	2d00      	cmp	r5, #0
 800cf44:	bfa2      	ittt	ge
 800cf46:	6821      	ldrge	r1, [r4, #0]
 800cf48:	f021 0104 	bicge.w	r1, r1, #4
 800cf4c:	6021      	strge	r1, [r4, #0]
 800cf4e:	b90e      	cbnz	r6, 800cf54 <_printf_i+0x114>
 800cf50:	2d00      	cmp	r5, #0
 800cf52:	d04b      	beq.n	800cfec <_printf_i+0x1ac>
 800cf54:	4615      	mov	r5, r2
 800cf56:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf5a:	fb03 6711 	mls	r7, r3, r1, r6
 800cf5e:	5dc7      	ldrb	r7, [r0, r7]
 800cf60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf64:	4637      	mov	r7, r6
 800cf66:	42bb      	cmp	r3, r7
 800cf68:	460e      	mov	r6, r1
 800cf6a:	d9f4      	bls.n	800cf56 <_printf_i+0x116>
 800cf6c:	2b08      	cmp	r3, #8
 800cf6e:	d10b      	bne.n	800cf88 <_printf_i+0x148>
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	07de      	lsls	r6, r3, #31
 800cf74:	d508      	bpl.n	800cf88 <_printf_i+0x148>
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	6861      	ldr	r1, [r4, #4]
 800cf7a:	4299      	cmp	r1, r3
 800cf7c:	bfde      	ittt	le
 800cf7e:	2330      	movle	r3, #48	; 0x30
 800cf80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf88:	1b52      	subs	r2, r2, r5
 800cf8a:	6122      	str	r2, [r4, #16]
 800cf8c:	f8cd a000 	str.w	sl, [sp]
 800cf90:	464b      	mov	r3, r9
 800cf92:	aa03      	add	r2, sp, #12
 800cf94:	4621      	mov	r1, r4
 800cf96:	4640      	mov	r0, r8
 800cf98:	f7ff fee4 	bl	800cd64 <_printf_common>
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	d14a      	bne.n	800d036 <_printf_i+0x1f6>
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	b004      	add	sp, #16
 800cfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	f043 0320 	orr.w	r3, r3, #32
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	4833      	ldr	r0, [pc, #204]	; (800d080 <_printf_i+0x240>)
 800cfb4:	2778      	movs	r7, #120	; 0x78
 800cfb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cfba:	6823      	ldr	r3, [r4, #0]
 800cfbc:	6829      	ldr	r1, [r5, #0]
 800cfbe:	061f      	lsls	r7, r3, #24
 800cfc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cfc4:	d402      	bmi.n	800cfcc <_printf_i+0x18c>
 800cfc6:	065f      	lsls	r7, r3, #25
 800cfc8:	bf48      	it	mi
 800cfca:	b2b6      	uxthmi	r6, r6
 800cfcc:	07df      	lsls	r7, r3, #31
 800cfce:	bf48      	it	mi
 800cfd0:	f043 0320 	orrmi.w	r3, r3, #32
 800cfd4:	6029      	str	r1, [r5, #0]
 800cfd6:	bf48      	it	mi
 800cfd8:	6023      	strmi	r3, [r4, #0]
 800cfda:	b91e      	cbnz	r6, 800cfe4 <_printf_i+0x1a4>
 800cfdc:	6823      	ldr	r3, [r4, #0]
 800cfde:	f023 0320 	bic.w	r3, r3, #32
 800cfe2:	6023      	str	r3, [r4, #0]
 800cfe4:	2310      	movs	r3, #16
 800cfe6:	e7a7      	b.n	800cf38 <_printf_i+0xf8>
 800cfe8:	4824      	ldr	r0, [pc, #144]	; (800d07c <_printf_i+0x23c>)
 800cfea:	e7e4      	b.n	800cfb6 <_printf_i+0x176>
 800cfec:	4615      	mov	r5, r2
 800cfee:	e7bd      	b.n	800cf6c <_printf_i+0x12c>
 800cff0:	682b      	ldr	r3, [r5, #0]
 800cff2:	6826      	ldr	r6, [r4, #0]
 800cff4:	6961      	ldr	r1, [r4, #20]
 800cff6:	1d18      	adds	r0, r3, #4
 800cff8:	6028      	str	r0, [r5, #0]
 800cffa:	0635      	lsls	r5, r6, #24
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	d501      	bpl.n	800d004 <_printf_i+0x1c4>
 800d000:	6019      	str	r1, [r3, #0]
 800d002:	e002      	b.n	800d00a <_printf_i+0x1ca>
 800d004:	0670      	lsls	r0, r6, #25
 800d006:	d5fb      	bpl.n	800d000 <_printf_i+0x1c0>
 800d008:	8019      	strh	r1, [r3, #0]
 800d00a:	2300      	movs	r3, #0
 800d00c:	6123      	str	r3, [r4, #16]
 800d00e:	4615      	mov	r5, r2
 800d010:	e7bc      	b.n	800cf8c <_printf_i+0x14c>
 800d012:	682b      	ldr	r3, [r5, #0]
 800d014:	1d1a      	adds	r2, r3, #4
 800d016:	602a      	str	r2, [r5, #0]
 800d018:	681d      	ldr	r5, [r3, #0]
 800d01a:	6862      	ldr	r2, [r4, #4]
 800d01c:	2100      	movs	r1, #0
 800d01e:	4628      	mov	r0, r5
 800d020:	f7f3 f966 	bl	80002f0 <memchr>
 800d024:	b108      	cbz	r0, 800d02a <_printf_i+0x1ea>
 800d026:	1b40      	subs	r0, r0, r5
 800d028:	6060      	str	r0, [r4, #4]
 800d02a:	6863      	ldr	r3, [r4, #4]
 800d02c:	6123      	str	r3, [r4, #16]
 800d02e:	2300      	movs	r3, #0
 800d030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d034:	e7aa      	b.n	800cf8c <_printf_i+0x14c>
 800d036:	6923      	ldr	r3, [r4, #16]
 800d038:	462a      	mov	r2, r5
 800d03a:	4649      	mov	r1, r9
 800d03c:	4640      	mov	r0, r8
 800d03e:	47d0      	blx	sl
 800d040:	3001      	adds	r0, #1
 800d042:	d0ad      	beq.n	800cfa0 <_printf_i+0x160>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	079b      	lsls	r3, r3, #30
 800d048:	d413      	bmi.n	800d072 <_printf_i+0x232>
 800d04a:	68e0      	ldr	r0, [r4, #12]
 800d04c:	9b03      	ldr	r3, [sp, #12]
 800d04e:	4298      	cmp	r0, r3
 800d050:	bfb8      	it	lt
 800d052:	4618      	movlt	r0, r3
 800d054:	e7a6      	b.n	800cfa4 <_printf_i+0x164>
 800d056:	2301      	movs	r3, #1
 800d058:	4632      	mov	r2, r6
 800d05a:	4649      	mov	r1, r9
 800d05c:	4640      	mov	r0, r8
 800d05e:	47d0      	blx	sl
 800d060:	3001      	adds	r0, #1
 800d062:	d09d      	beq.n	800cfa0 <_printf_i+0x160>
 800d064:	3501      	adds	r5, #1
 800d066:	68e3      	ldr	r3, [r4, #12]
 800d068:	9903      	ldr	r1, [sp, #12]
 800d06a:	1a5b      	subs	r3, r3, r1
 800d06c:	42ab      	cmp	r3, r5
 800d06e:	dcf2      	bgt.n	800d056 <_printf_i+0x216>
 800d070:	e7eb      	b.n	800d04a <_printf_i+0x20a>
 800d072:	2500      	movs	r5, #0
 800d074:	f104 0619 	add.w	r6, r4, #25
 800d078:	e7f5      	b.n	800d066 <_printf_i+0x226>
 800d07a:	bf00      	nop
 800d07c:	0800d281 	.word	0x0800d281
 800d080:	0800d292 	.word	0x0800d292

0800d084 <memmove>:
 800d084:	4288      	cmp	r0, r1
 800d086:	b510      	push	{r4, lr}
 800d088:	eb01 0402 	add.w	r4, r1, r2
 800d08c:	d902      	bls.n	800d094 <memmove+0x10>
 800d08e:	4284      	cmp	r4, r0
 800d090:	4623      	mov	r3, r4
 800d092:	d807      	bhi.n	800d0a4 <memmove+0x20>
 800d094:	1e43      	subs	r3, r0, #1
 800d096:	42a1      	cmp	r1, r4
 800d098:	d008      	beq.n	800d0ac <memmove+0x28>
 800d09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0a2:	e7f8      	b.n	800d096 <memmove+0x12>
 800d0a4:	4402      	add	r2, r0
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	428a      	cmp	r2, r1
 800d0aa:	d100      	bne.n	800d0ae <memmove+0x2a>
 800d0ac:	bd10      	pop	{r4, pc}
 800d0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0b6:	e7f7      	b.n	800d0a8 <memmove+0x24>

0800d0b8 <_sbrk_r>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	4d06      	ldr	r5, [pc, #24]	; (800d0d4 <_sbrk_r+0x1c>)
 800d0bc:	2300      	movs	r3, #0
 800d0be:	4604      	mov	r4, r0
 800d0c0:	4608      	mov	r0, r1
 800d0c2:	602b      	str	r3, [r5, #0]
 800d0c4:	f7f5 fc8c 	bl	80029e0 <_sbrk>
 800d0c8:	1c43      	adds	r3, r0, #1
 800d0ca:	d102      	bne.n	800d0d2 <_sbrk_r+0x1a>
 800d0cc:	682b      	ldr	r3, [r5, #0]
 800d0ce:	b103      	cbz	r3, 800d0d2 <_sbrk_r+0x1a>
 800d0d0:	6023      	str	r3, [r4, #0]
 800d0d2:	bd38      	pop	{r3, r4, r5, pc}
 800d0d4:	24000ff4 	.word	0x24000ff4

0800d0d8 <_realloc_r>:
 800d0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0dc:	4680      	mov	r8, r0
 800d0de:	4614      	mov	r4, r2
 800d0e0:	460e      	mov	r6, r1
 800d0e2:	b921      	cbnz	r1, 800d0ee <_realloc_r+0x16>
 800d0e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	f7ff bc57 	b.w	800c99c <_malloc_r>
 800d0ee:	b92a      	cbnz	r2, 800d0fc <_realloc_r+0x24>
 800d0f0:	f7ff fbe8 	bl	800c8c4 <_free_r>
 800d0f4:	4625      	mov	r5, r4
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0fc:	f000 f81b 	bl	800d136 <_malloc_usable_size_r>
 800d100:	4284      	cmp	r4, r0
 800d102:	4607      	mov	r7, r0
 800d104:	d802      	bhi.n	800d10c <_realloc_r+0x34>
 800d106:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d10a:	d812      	bhi.n	800d132 <_realloc_r+0x5a>
 800d10c:	4621      	mov	r1, r4
 800d10e:	4640      	mov	r0, r8
 800d110:	f7ff fc44 	bl	800c99c <_malloc_r>
 800d114:	4605      	mov	r5, r0
 800d116:	2800      	cmp	r0, #0
 800d118:	d0ed      	beq.n	800d0f6 <_realloc_r+0x1e>
 800d11a:	42bc      	cmp	r4, r7
 800d11c:	4622      	mov	r2, r4
 800d11e:	4631      	mov	r1, r6
 800d120:	bf28      	it	cs
 800d122:	463a      	movcs	r2, r7
 800d124:	f7ff fbc0 	bl	800c8a8 <memcpy>
 800d128:	4631      	mov	r1, r6
 800d12a:	4640      	mov	r0, r8
 800d12c:	f7ff fbca 	bl	800c8c4 <_free_r>
 800d130:	e7e1      	b.n	800d0f6 <_realloc_r+0x1e>
 800d132:	4635      	mov	r5, r6
 800d134:	e7df      	b.n	800d0f6 <_realloc_r+0x1e>

0800d136 <_malloc_usable_size_r>:
 800d136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d13a:	1f18      	subs	r0, r3, #4
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	bfbc      	itt	lt
 800d140:	580b      	ldrlt	r3, [r1, r0]
 800d142:	18c0      	addlt	r0, r0, r3
 800d144:	4770      	bx	lr
	...

0800d148 <_init>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	bf00      	nop
 800d14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d14e:	bc08      	pop	{r3}
 800d150:	469e      	mov	lr, r3
 800d152:	4770      	bx	lr

0800d154 <_fini>:
 800d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d156:	bf00      	nop
 800d158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d15a:	bc08      	pop	{r3}
 800d15c:	469e      	mov	lr, r3
 800d15e:	4770      	bx	lr

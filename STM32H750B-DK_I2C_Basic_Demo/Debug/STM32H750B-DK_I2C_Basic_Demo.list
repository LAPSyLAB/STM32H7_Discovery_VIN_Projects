
STM32H750B-DK_I2C_Basic_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce98  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800d138  0800d138  0001d138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d274  0800d274  0001d274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d27c  0800d27c  0001d27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d280  0800d280  0001d280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800d284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800d2f8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800d358  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dac  24000134  0800d3b8  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ee0  0800d3b8  00020ee0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030d84  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000439f  00000000  00000000  00050ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  00055288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002140  00000000  00000000  00057558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c77  00000000  00000000  00059698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c512  00000000  00000000  0009a30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b7f4  00000000  00000000  000c6821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00262015  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e98  00000000  00000000  00262068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d120 	.word	0x0800d120

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800d120 	.word	0x0800d120

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b087      	sub	sp, #28
 8000698:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
int i=0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
uint8_t Space[] = " - ";
 800069e:	4b6b      	ldr	r3, [pc, #428]	; (800084c <main+0x1b8>)
 80006a0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f002 fa75 	bl	8002b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f8f3 	bl	8000890 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006aa:	f000 f97d 	bl	80009a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 ff21 	bl	80014f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006b2:	f000 f9a9 	bl	8000a08 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006b6:	f000 fa1f 	bl	8000af8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006ba:	f000 fa81 	bl	8000bc0 <MX_ADC3_Init>
  MX_ETH_Init();
 80006be:	f000 fae1 	bl	8000c84 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006c2:	f000 fb2b 	bl	8000d1c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006c6:	f000 fb8d 	bl	8000de4 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006ca:	f000 fec5 	bl	8001458 <MX_FMC_Init>
  MX_LTDC_Init();
 80006ce:	f000 fc2d 	bl	8000f2c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006d2:	f000 fcdd 	bl	8001090 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006d6:	f000 fd07 	bl	80010e8 <MX_RTC_Init>
  MX_SAI2_Init();
 80006da:	f000 fd2d 	bl	8001138 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006de:	f000 fde9 	bl	80012b4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006e2:	f000 fe3b 	bl	800135c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e6:	f000 fe85 	bl	80013f4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80006ea:	f000 fbdf 	bl	8000eac <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);    // Set LCD_RST to high
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f4:	4856      	ldr	r0, [pc, #344]	; (8000850 <main+0x1bc>)
 80006f6:	f004 fdf9 	bl	80052ec <HAL_GPIO_WritePin>


  /*-[ I2C Bus Scanning ]-*/
		snprintf(SendBuffer,BUFSIZE,"I2C Scanning started !\n\r");
 80006fa:	4a56      	ldr	r2, [pc, #344]	; (8000854 <main+0x1c0>)
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	4855      	ldr	r0, [pc, #340]	; (8000858 <main+0x1c4>)
 8000702:	f00c f899 	bl	800c838 <sniprintf>
		HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000706:	4854      	ldr	r0, [pc, #336]	; (8000858 <main+0x1c4>)
 8000708:	f7ff fdea 	bl	80002e0 <strlen>
 800070c:	4603      	mov	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	4951      	ldr	r1, [pc, #324]	; (8000858 <main+0x1c4>)
 8000714:	4851      	ldr	r0, [pc, #324]	; (800085c <main+0x1c8>)
 8000716:	f00a fb6a 	bl	800adee <HAL_UART_Transmit>

		 for(i=1; i<128; i++)
 800071a:	2301      	movs	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e02f      	b.n	8000780 <main+0xec>
		 {
			 retval = HAL_I2C_IsDeviceReady(&hi2c4, (uint16_t)(i<<1), 3, 5);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	b29b      	uxth	r3, r3
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b299      	uxth	r1, r3
 8000728:	2305      	movs	r3, #5
 800072a:	2203      	movs	r2, #3
 800072c:	484c      	ldr	r0, [pc, #304]	; (8000860 <main+0x1cc>)
 800072e:	f004 ffbb 	bl	80056a8 <HAL_I2C_IsDeviceReady>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <main+0x1d0>)
 8000738:	701a      	strb	r2, [r3, #0]
			 if (retval != HAL_OK) /* No ACK Received At That Address */
 800073a:	4b4a      	ldr	r3, [pc, #296]	; (8000864 <main+0x1d0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <main+0xbc>
			 {
				 HAL_UART_Transmit(&huart3, Space, sizeof(Space), 100);
 8000742:	4639      	mov	r1, r7
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	2204      	movs	r2, #4
 8000748:	4844      	ldr	r0, [pc, #272]	; (800085c <main+0x1c8>)
 800074a:	f00a fb50 	bl	800adee <HAL_UART_Transmit>
 800074e:	e014      	b.n	800077a <main+0xe6>
			 }
			 else if(retval == HAL_OK)
 8000750:	4b44      	ldr	r3, [pc, #272]	; (8000864 <main+0x1d0>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d110      	bne.n	800077a <main+0xe6>
			 {
				 snprintf(SendBuffer,BUFSIZE,"0x%X", i);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a43      	ldr	r2, [pc, #268]	; (8000868 <main+0x1d4>)
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	483d      	ldr	r0, [pc, #244]	; (8000858 <main+0x1c4>)
 8000762:	f00c f869 	bl	800c838 <sniprintf>
				HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),1);
 8000766:	483c      	ldr	r0, [pc, #240]	; (8000858 <main+0x1c4>)
 8000768:	f7ff fdba 	bl	80002e0 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	2301      	movs	r3, #1
 8000772:	4939      	ldr	r1, [pc, #228]	; (8000858 <main+0x1c4>)
 8000774:	4839      	ldr	r0, [pc, #228]	; (800085c <main+0x1c8>)
 8000776:	f00a fb3a 	bl	800adee <HAL_UART_Transmit>
		 for(i=1; i<128; i++)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b7f      	cmp	r3, #127	; 0x7f
 8000784:	ddcc      	ble.n	8000720 <main+0x8c>
			 }
		 }
			snprintf(SendBuffer,BUFSIZE,"I2C Scanning stopped !\n\r");
 8000786:	4a39      	ldr	r2, [pc, #228]	; (800086c <main+0x1d8>)
 8000788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078c:	4832      	ldr	r0, [pc, #200]	; (8000858 <main+0x1c4>)
 800078e:	f00c f853 	bl	800c838 <sniprintf>
			HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000792:	4831      	ldr	r0, [pc, #196]	; (8000858 <main+0x1c4>)
 8000794:	f7ff fda4 	bl	80002e0 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	492e      	ldr	r1, [pc, #184]	; (8000858 <main+0x1c4>)
 80007a0:	482e      	ldr	r0, [pc, #184]	; (800085c <main+0x1c8>)
 80007a2:	f00a fb24 	bl	800adee <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80007a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007aa:	4831      	ldr	r0, [pc, #196]	; (8000870 <main+0x1dc>)
 80007ac:	f004 fdb7 	bl	800531e <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	482f      	ldr	r0, [pc, #188]	; (8000874 <main+0x1e0>)
 80007b6:	f004 fd81 	bl	80052bc <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <main+0x1e4>)
 80007c0:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, KeyState);
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <main+0x1e4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	2104      	movs	r1, #4
 80007cc:	482b      	ldr	r0, [pc, #172]	; (800087c <main+0x1e8>)
 80007ce:	f004 fd8d 	bl	80052ec <HAL_GPIO_WritePin>

		// Reading from address 0x38 register Vendor's Chip ID (addr. 0xA8) default value should be 0x51=81  - Both variations work !
	    //dataBuffer[5] = 0xA8;
	    //retval = HAL_I2C_Master_Transmit(&hi2c4, (0x38 << 1), &dataBuffer[5], 1, HAL_MAX_DELAY);
	    //retval = HAL_I2C_Master_Receive(&hi2c4, (0x38 << 1), &dataBuffer[5], 1, HAL_MAX_DELAY);
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA8, I2C_MEMADD_SIZE_8BIT,&dataBuffer[5], 1, HAL_MAX_DELAY);
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	2301      	movs	r3, #1
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <main+0x1ec>)
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2301      	movs	r3, #1
 80007e2:	22a8      	movs	r2, #168	; 0xa8
 80007e4:	2170      	movs	r1, #112	; 0x70
 80007e6:	481e      	ldr	r0, [pc, #120]	; (8000860 <main+0x1cc>)
 80007e8:	f004 fe44 	bl	8005474 <HAL_I2C_Mem_Read>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <main+0x1d0>)
 80007f2:	701a      	strb	r2, [r3, #0]


	    snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Audio Chip ID: 0x%4x Touch ID: 0x%2x=%d\n\r",Counter++,KeyState, dataBuffer[0]*256+dataBuffer[1],dataBuffer[5],dataBuffer[5]);
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <main+0x1f0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	4922      	ldr	r1, [pc, #136]	; (8000884 <main+0x1f0>)
 80007fc:	600a      	str	r2, [r1, #0]
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <main+0x1e4>)
 8000800:	6812      	ldr	r2, [r2, #0]
 8000802:	4921      	ldr	r1, [pc, #132]	; (8000888 <main+0x1f4>)
 8000804:	7809      	ldrb	r1, [r1, #0]
 8000806:	0209      	lsls	r1, r1, #8
 8000808:	481f      	ldr	r0, [pc, #124]	; (8000888 <main+0x1f4>)
 800080a:	7840      	ldrb	r0, [r0, #1]
 800080c:	4401      	add	r1, r0
 800080e:	481e      	ldr	r0, [pc, #120]	; (8000888 <main+0x1f4>)
 8000810:	7940      	ldrb	r0, [r0, #5]
 8000812:	4604      	mov	r4, r0
 8000814:	481c      	ldr	r0, [pc, #112]	; (8000888 <main+0x1f4>)
 8000816:	7940      	ldrb	r0, [r0, #5]
 8000818:	9003      	str	r0, [sp, #12]
 800081a:	9402      	str	r4, [sp, #8]
 800081c:	9101      	str	r1, [sp, #4]
 800081e:	9200      	str	r2, [sp, #0]
 8000820:	4a1a      	ldr	r2, [pc, #104]	; (800088c <main+0x1f8>)
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <main+0x1c4>)
 8000828:	f00c f806 	bl	800c838 <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <main+0x1c4>)
 800082e:	f7ff fd57 	bl	80002e0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	4907      	ldr	r1, [pc, #28]	; (8000858 <main+0x1c4>)
 800083a:	4808      	ldr	r0, [pc, #32]	; (800085c <main+0x1c8>)
 800083c:	f00a fad7 	bl	800adee <HAL_UART_Transmit>

	    HAL_Delay(1000);
 8000840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000844:	f002 fa36 	bl	8002cb4 <HAL_Delay>
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8000848:	e7ad      	b.n	80007a6 <main+0x112>
 800084a:	bf00      	nop
 800084c:	00202d20 	.word	0x00202d20
 8000850:	58020400 	.word	0x58020400
 8000854:	0800d138 	.word	0x0800d138
 8000858:	24000d9c 	.word	0x24000d9c
 800085c:	240007c8 	.word	0x240007c8
 8000860:	240004a4 	.word	0x240004a4
 8000864:	24000eae 	.word	0x24000eae
 8000868:	0800d154 	.word	0x0800d154
 800086c:	0800d15c 	.word	0x0800d15c
 8000870:	58022000 	.word	0x58022000
 8000874:	58020800 	.word	0x58020800
 8000878:	24000ea0 	.word	0x24000ea0
 800087c:	58022400 	.word	0x58022400
 8000880:	24000ea9 	.word	0x24000ea9
 8000884:	24000e9c 	.word	0x24000e9c
 8000888:	24000ea4 	.word	0x24000ea4
 800088c:	0800d178 	.word	0x0800d178

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09c      	sub	sp, #112	; 0x70
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	224c      	movs	r2, #76	; 0x4c
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f00b ffc2 	bl	800c828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2220      	movs	r2, #32
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00b ffbc 	bl	800c828 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f005 feed 	bl	8006690 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b38      	ldr	r3, [pc, #224]	; (800099c <SystemClock_Config+0x10c>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	4a37      	ldr	r2, [pc, #220]	; (800099c <SystemClock_Config+0x10c>)
 80008c0:	f023 0301 	bic.w	r3, r3, #1
 80008c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008c6:	4b35      	ldr	r3, [pc, #212]	; (800099c <SystemClock_Config+0x10c>)
 80008c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <SystemClock_Config+0x110>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d8:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <SystemClock_Config+0x110>)
 80008da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <SystemClock_Config+0x110>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ec:	bf00      	nop
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <SystemClock_Config+0x110>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008fa:	d1f8      	bne.n	80008ee <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <SystemClock_Config+0x114>)
 80008fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000900:	f023 0303 	bic.w	r3, r3, #3
 8000904:	4a27      	ldr	r2, [pc, #156]	; (80009a4 <SystemClock_Config+0x114>)
 8000906:	f043 0302 	orr.w	r3, r3, #2
 800090a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800090c:	230b      	movs	r3, #11
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000910:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000916:	2301      	movs	r3, #1
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800091e:	2301      	movs	r3, #1
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	2302      	movs	r3, #2
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800092a:	2316      	movs	r3, #22
 800092c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 800092e:	23a9      	movs	r3, #169	; 0xa9
 8000930:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000936:	2304      	movs	r3, #4
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800093e:	2300      	movs	r3, #0
 8000940:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000942:	2300      	movs	r3, #0
 8000944:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4618      	mov	r0, r3
 8000950:	f005 ffa2 	bl	8006898 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800095a:	f000 ff75 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	233f      	movs	r3, #63	; 0x3f
 8000960:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f006 fbe2 	bl	800714c <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x102>
  {
    Error_Handler();
 800098e:	f000 ff5b 	bl	8001848 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3770      	adds	r7, #112	; 0x70
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58000400 	.word	0x58000400
 80009a0:	58024800 	.word	0x58024800
 80009a4:	58024400 	.word	0x58024400

080009a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0b0      	sub	sp, #192	; 0xc0
 80009ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	22c0      	movs	r2, #192	; 0xc0
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f00b ff37 	bl	800c828 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009ca:	230c      	movs	r3, #12
 80009cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80009ce:	2305      	movs	r3, #5
 80009d0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009da:	23c0      	movs	r3, #192	; 0xc0
 80009dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009de:	2320      	movs	r3, #32
 80009e0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009e6:	2300      	movs	r3, #0
 80009e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 ff38 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80009fa:	f000 ff25 	bl	8001848 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	37c0      	adds	r7, #192	; 0xc0
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a2c:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a2e:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <MX_ADC1_Init+0xec>)
 8000a30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a32:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a34:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a40:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a52:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a58:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a8a:	4819      	ldr	r0, [pc, #100]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a8c:	f002 faf8 	bl	8003080 <HAL_ADC_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a96:	f000 fed7 	bl	8001848 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000aa6:	f003 f90f 	bl	8003cc8 <HAL_ADCEx_MultiModeConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ab0:	f000 feca 	bl	8001848 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ac0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ac4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000ad8:	f002 fc74 	bl	80033c4 <HAL_ADC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ae2:	f000 feb1 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	24000188 	.word	0x24000188
 8000af4:	40022000 	.word	0x40022000

08000af8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b12:	4a2a      	ldr	r2, [pc, #168]	; (8000bbc <MX_ADC2_Init+0xc4>)
 8000b14:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b16:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b1c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b6e:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b70:	f002 fa86 	bl	8003080 <HAL_ADC_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b7a:	f000 fe65 	bl	8001848 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b82:	2306      	movs	r3, #6
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b8e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b90:	2304      	movs	r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_ADC2_Init+0xc0>)
 8000ba2:	f002 fc0f 	bl	80033c4 <HAL_ADC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000bac:	f000 fe4c 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	240001ec 	.word	0x240001ec
 8000bbc:	40022100 	.word	0x40022100

08000bc0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000bda:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <MX_ADC3_Init+0xbc>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c2e:	4812      	ldr	r0, [pc, #72]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000c30:	f002 fa26 	bl	8003080 <HAL_ADC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c3a:	f000 fe05 	bl	8001848 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_ADC3_Init+0xc0>)
 8000c40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c42:	2306      	movs	r3, #6
 8000c44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c4a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c4e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c50:	2304      	movs	r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_ADC3_Init+0xb8>)
 8000c62:	f002 fbaf 	bl	80033c4 <HAL_ADC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000c6c:	f000 fdec 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	24000250 	.word	0x24000250
 8000c7c:	58026000 	.word	0x58026000
 8000c80:	1d500080 	.word	0x1d500080

08000c84 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_ETH_Init+0x80>)
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <MX_ETH_Init+0x84>)
 8000c8c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_ETH_Init+0x88>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_ETH_Init+0x88>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_ETH_Init+0x88>)
 8000c9c:	22e1      	movs	r2, #225	; 0xe1
 8000c9e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_ETH_Init+0x88>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_ETH_Init+0x88>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_ETH_Init+0x88>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_ETH_Init+0x80>)
 8000cb4:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <MX_ETH_Init+0x88>)
 8000cb6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_ETH_Init+0x80>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_ETH_Init+0x80>)
 8000cc0:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <MX_ETH_Init+0x8c>)
 8000cc2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_ETH_Init+0x80>)
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <MX_ETH_Init+0x90>)
 8000cc8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_ETH_Init+0x80>)
 8000ccc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cd0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cd2:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_ETH_Init+0x80>)
 8000cd4:	f003 f9ba 	bl	800404c <HAL_ETH_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000cde:	f000 fdb3 	bl	8001848 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ce2:	2238      	movs	r2, #56	; 0x38
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_ETH_Init+0x94>)
 8000ce8:	f00b fd9e 	bl	800c828 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_ETH_Init+0x94>)
 8000cee:	2221      	movs	r2, #33	; 0x21
 8000cf0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_ETH_Init+0x94>)
 8000cf4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cf8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_ETH_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	240002b4 	.word	0x240002b4
 8000d08:	40028000 	.word	0x40028000
 8000d0c:	24000eb0 	.word	0x24000eb0
 8000d10:	240000d4 	.word	0x240000d4
 8000d14:	24000074 	.word	0x24000074
 8000d18:	24000150 	.word	0x24000150

08000d1c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d22:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <MX_FDCAN1_Init+0xc4>)
 8000d24:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d46:	2210      	movs	r2, #16
 8000d48:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d52:	2202      	movs	r2, #2
 8000d54:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_FDCAN1_Init+0xc0>)
 8000dca:	f003 fd63 	bl	8004894 <HAL_FDCAN_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dd4:	f000 fd38 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	24000364 	.word	0x24000364
 8000de0:	4000a000 	.word	0x4000a000

08000de4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000de8:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000dea:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <MX_FDCAN2_Init+0xc4>)
 8000dec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dee:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000df4:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e0e:	2210      	movs	r2, #16
 8000e10:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e56:	2204      	movs	r2, #4
 8000e58:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e62:	2204      	movs	r2, #4
 8000e64:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e6e:	2204      	movs	r2, #4
 8000e70:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_FDCAN2_Init+0xc0>)
 8000e92:	f003 fcff 	bl	8004894 <HAL_FDCAN_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000e9c:	f000 fcd4 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	24000404 	.word	0x24000404
 8000ea8:	4000a400 	.word	0x4000a400

08000eac <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <MX_I2C4_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <MX_I2C4_Init+0x7c>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000ee8:	f004 fa34 	bl	8005354 <HAL_I2C_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000ef2:	f000 fca9 	bl	8001848 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000efa:	f004 ff41 	bl	8005d80 <HAL_I2CEx_ConfigAnalogFilter>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f04:	f000 fca0 	bl	8001848 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_I2C4_Init+0x74>)
 8000f0c:	f004 ff83 	bl	8005e16 <HAL_I2CEx_ConfigDigitalFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f000 fc97 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	240004a4 	.word	0x240004a4
 8000f24:	58001c00 	.word	0x58001c00
 8000f28:	10707dbc 	.word	0x10707dbc

08000f2c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b09a      	sub	sp, #104	; 0x68
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f36:	2234      	movs	r2, #52	; 0x34
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f00b fc74 	bl	800c828 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2234      	movs	r2, #52	; 0x34
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00b fc6e 	bl	800c828 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f4c:	4b4e      	ldr	r3, [pc, #312]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f4e:	4a4f      	ldr	r2, [pc, #316]	; (800108c <MX_LTDC_Init+0x160>)
 8000f50:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f52:	4b4d      	ldr	r3, [pc, #308]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f58:	4b4b      	ldr	r3, [pc, #300]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f5e:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f64:	4b48      	ldr	r3, [pc, #288]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f72:	2203      	movs	r2, #3
 8000f74:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f76:	4b44      	ldr	r3, [pc, #272]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f78:	220e      	movs	r2, #14
 8000f7a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f7c:	4b42      	ldr	r3, [pc, #264]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f7e:	2205      	movs	r2, #5
 8000f80:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000f82:	4b41      	ldr	r3, [pc, #260]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f84:	f240 228e 	movw	r2, #654	; 0x28e
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f8a:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f8c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f94:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000f9c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fba:	4833      	ldr	r0, [pc, #204]	; (8001088 <MX_LTDC_Init+0x15c>)
 8000fbc:	f004 ff78 	bl	8005eb0 <HAL_LTDC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fc6:	f000 fc3f 	bl	8001848 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fec:	2305      	movs	r3, #5
 8000fee:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800100e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	481c      	ldr	r0, [pc, #112]	; (8001088 <MX_LTDC_Init+0x15c>)
 8001018:	f005 f81a 	bl	8006050 <HAL_LTDC_ConfigLayer>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001022:	f000 fc11 	bl	8001848 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001048:	2305      	movs	r3, #5
 800104a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_LTDC_Init+0x15c>)
 8001072:	f004 ffed 	bl	8006050 <HAL_LTDC_ConfigLayer>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800107c:	f000 fbe4 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3768      	adds	r7, #104	; 0x68
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	240004f8 	.word	0x240004f8
 800108c:	50001000 	.word	0x50001000

08001090 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <MX_QUADSPI_Init+0x54>)
 8001098:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 800109c:	22ff      	movs	r2, #255	; 0xff
 800109e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_QUADSPI_Init+0x50>)
 80010cc:	f005 fb2a 	bl	8006724 <HAL_QSPI_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010d6:	f000 fbb7 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	240005a0 	.word	0x240005a0
 80010e4:	52005000 	.word	0x52005000

080010e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_RTC_Init+0x48>)
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <MX_RTC_Init+0x4c>)
 80010f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_RTC_Init+0x48>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_RTC_Init+0x48>)
 80010fa:	227f      	movs	r2, #127	; 0x7f
 80010fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_RTC_Init+0x48>)
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_RTC_Init+0x48>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_RTC_Init+0x48>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_RTC_Init+0x48>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_RTC_Init+0x48>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_RTC_Init+0x48>)
 800111e:	f009 f89f 	bl	800a260 <HAL_RTC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001128:	f000 fb8e 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	240005ec 	.word	0x240005ec
 8001134:	58004000 	.word	0x58004000

08001138 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800113c:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <MX_SAI2_Init+0x168>)
 800113e:	4a59      	ldr	r2, [pc, #356]	; (80012a4 <MX_SAI2_Init+0x16c>)
 8001140:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001142:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001144:	2200      	movs	r2, #0
 8001146:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001148:	4b55      	ldr	r3, [pc, #340]	; (80012a0 <MX_SAI2_Init+0x168>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001150:	2240      	movs	r2, #64	; 0x40
 8001152:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001154:	4b52      	ldr	r3, [pc, #328]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001156:	2200      	movs	r2, #0
 8001158:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800115a:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <MX_SAI2_Init+0x168>)
 800115c:	2200      	movs	r2, #0
 800115e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001160:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001166:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <MX_SAI2_Init+0x168>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <MX_SAI2_Init+0x168>)
 800117a:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <MX_SAI2_Init+0x170>)
 800117c:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800118a:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <MX_SAI2_Init+0x168>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001192:	2200      	movs	r2, #0
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <MX_SAI2_Init+0x168>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 800119e:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011a4:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011aa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80011ac:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011ae:	2208      	movs	r2, #8
 80011b0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011b8:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011d8:	2201      	movs	r2, #1
 80011da:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011de:	2200      	movs	r2, #0
 80011e0:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80011e2:	482f      	ldr	r0, [pc, #188]	; (80012a0 <MX_SAI2_Init+0x168>)
 80011e4:	f009 f954 	bl	800a490 <HAL_SAI_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 80011ee:	f000 fb2b 	bl	8001848 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <MX_SAI2_Init+0x174>)
 80011f4:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <MX_SAI2_Init+0x178>)
 80011f6:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_SAI2_Init+0x174>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <MX_SAI2_Init+0x174>)
 8001200:	2203      	movs	r2, #3
 8001202:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <MX_SAI2_Init+0x174>)
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <MX_SAI2_Init+0x174>)
 800120c:	2200      	movs	r2, #0
 800120e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_SAI2_Init+0x174>)
 8001212:	2200      	movs	r2, #0
 8001214:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MX_SAI2_Init+0x174>)
 8001218:	2201      	movs	r2, #1
 800121a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <MX_SAI2_Init+0x174>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_SAI2_Init+0x174>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_SAI2_Init+0x174>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_SAI2_Init+0x174>)
 8001230:	2200      	movs	r2, #0
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_SAI2_Init+0x174>)
 8001236:	2200      	movs	r2, #0
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_SAI2_Init+0x174>)
 800123c:	2200      	movs	r2, #0
 800123e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_SAI2_Init+0x174>)
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_SAI2_Init+0x174>)
 800124a:	2201      	movs	r2, #1
 800124c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_SAI2_Init+0x174>)
 8001250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_SAI2_Init+0x174>)
 8001258:	2208      	movs	r2, #8
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_SAI2_Init+0x174>)
 800125e:	2201      	movs	r2, #1
 8001260:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_SAI2_Init+0x174>)
 8001264:	2200      	movs	r2, #0
 8001266:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_SAI2_Init+0x174>)
 800126a:	2200      	movs	r2, #0
 800126c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_SAI2_Init+0x174>)
 8001270:	2200      	movs	r2, #0
 8001272:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <MX_SAI2_Init+0x174>)
 8001276:	2200      	movs	r2, #0
 8001278:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_SAI2_Init+0x174>)
 800127c:	2200      	movs	r2, #0
 800127e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_SAI2_Init+0x174>)
 8001282:	2201      	movs	r2, #1
 8001284:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_SAI2_Init+0x174>)
 8001288:	2200      	movs	r2, #0
 800128a:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_SAI2_Init+0x174>)
 800128e:	f009 f8ff 	bl	800a490 <HAL_SAI_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001298:	f000 fad6 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	24000610 	.word	0x24000610
 80012a4:	40015c04 	.word	0x40015c04
 80012a8:	0002ee00 	.word	0x0002ee00
 80012ac:	240006a8 	.word	0x240006a8
 80012b0:	40015c24 	.word	0x40015c24

080012b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012ba:	4a27      	ldr	r2, [pc, #156]	; (8001358 <MX_SPI2_Init+0xa4>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012ce:	2203      	movs	r2, #3
 80012d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_SPI2_Init+0xa0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_SPI2_Init+0xa0>)
 8001304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_SPI2_Init+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_SPI2_Init+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_SPI2_Init+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_SPI2_Init+0xa0>)
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_SPI2_Init+0xa0>)
 8001324:	2200      	movs	r2, #0
 8001326:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MX_SPI2_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_SPI2_Init+0xa0>)
 8001330:	2200      	movs	r2, #0
 8001332:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <MX_SPI2_Init+0xa0>)
 8001336:	2200      	movs	r2, #0
 8001338:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_SPI2_Init+0xa0>)
 800133c:	2200      	movs	r2, #0
 800133e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_SPI2_Init+0xa0>)
 8001342:	f009 fbc5 	bl	800aad0 <HAL_SPI_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 800134c:	f000 fa7c 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	24000740 	.word	0x24000740
 8001358:	40003800 	.word	0x40003800

0800135c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MX_USART3_UART_Init+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_USART3_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_USART3_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_USART3_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013a6:	f009 fcd2 	bl	800ad4e <HAL_UART_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013b0:	f000 fa4a 	bl	8001848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013b8:	f00a fd63 	bl	800be82 <HAL_UARTEx_SetTxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013c2:	f000 fa41 	bl	8001848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013ca:	f00a fd98 	bl	800befe <HAL_UARTEx_SetRxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013d4:	f000 fa38 	bl	8001848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013da:	f00a fd19 	bl	800be10 <HAL_UARTEx_DisableFifoMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013e4:	f000 fa30 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	240007c8 	.word	0x240007c8
 80013f0:	40004800 	.word	0x40004800

080013f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013fa:	4a16      	ldr	r2, [pc, #88]	; (8001454 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80013fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001400:	2209      	movs	r2, #9
 8001402:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001406:	2202      	movs	r2, #2
 8001408:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001412:	2202      	movs	r2, #2
 8001414:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800142a:	2201      	movs	r2, #1
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001430:	2201      	movs	r2, #1
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001436:	2200      	movs	r2, #0
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800143c:	f004 ffe0 	bl	8006400 <HAL_PCD_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001446:	f000 f9ff 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2400085c 	.word	0x2400085c
 8001454:	40080000 	.word	0x40080000

08001458 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <MX_FMC_Init+0x94>)
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <MX_FMC_Init+0x98>)
 8001474:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <MX_FMC_Init+0x94>)
 8001478:	2201      	movs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_FMC_Init+0x94>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_FMC_Init+0x94>)
 8001484:	2204      	movs	r2, #4
 8001486:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_FMC_Init+0x94>)
 800148a:	2210      	movs	r2, #16
 800148c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_FMC_Init+0x94>)
 8001490:	2240      	movs	r2, #64	; 0x40
 8001492:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_FMC_Init+0x94>)
 8001496:	2280      	movs	r2, #128	; 0x80
 8001498:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_FMC_Init+0x94>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_FMC_Init+0x94>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_FMC_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_FMC_Init+0x94>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80014b2:	2310      	movs	r3, #16
 80014b4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80014b6:	2310      	movs	r3, #16
 80014b8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80014be:	2310      	movs	r3, #16
 80014c0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80014c2:	2310      	movs	r3, #16
 80014c4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80014c6:	2310      	movs	r3, #16
 80014c8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80014ca:	2310      	movs	r3, #16
 80014cc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_FMC_Init+0x94>)
 80014d4:	f009 fac0 	bl	800aa58 <HAL_SDRAM_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80014de:	f000 f9b3 	bl	8001848 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	24000d68 	.word	0x24000d68
 80014f0:	52004140 	.word	0x52004140

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b090      	sub	sp, #64	; 0x40
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800150a:	4bbf      	ldr	r3, [pc, #764]	; (8001808 <MX_GPIO_Init+0x314>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	4abd      	ldr	r2, [pc, #756]	; (8001808 <MX_GPIO_Init+0x314>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151a:	4bbb      	ldr	r3, [pc, #748]	; (8001808 <MX_GPIO_Init+0x314>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
 8001526:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4bb7      	ldr	r3, [pc, #732]	; (8001808 <MX_GPIO_Init+0x314>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	4ab6      	ldr	r2, [pc, #728]	; (8001808 <MX_GPIO_Init+0x314>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001538:	4bb3      	ldr	r3, [pc, #716]	; (8001808 <MX_GPIO_Init+0x314>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001546:	4bb0      	ldr	r3, [pc, #704]	; (8001808 <MX_GPIO_Init+0x314>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	4aae      	ldr	r2, [pc, #696]	; (8001808 <MX_GPIO_Init+0x314>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001556:	4bac      	ldr	r3, [pc, #688]	; (8001808 <MX_GPIO_Init+0x314>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001564:	4ba8      	ldr	r3, [pc, #672]	; (8001808 <MX_GPIO_Init+0x314>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	4aa7      	ldr	r2, [pc, #668]	; (8001808 <MX_GPIO_Init+0x314>)
 800156c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001574:	4ba4      	ldr	r3, [pc, #656]	; (8001808 <MX_GPIO_Init+0x314>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4ba1      	ldr	r3, [pc, #644]	; (8001808 <MX_GPIO_Init+0x314>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	4a9f      	ldr	r2, [pc, #636]	; (8001808 <MX_GPIO_Init+0x314>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001592:	4b9d      	ldr	r3, [pc, #628]	; (8001808 <MX_GPIO_Init+0x314>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b99      	ldr	r3, [pc, #612]	; (8001808 <MX_GPIO_Init+0x314>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	4a98      	ldr	r2, [pc, #608]	; (8001808 <MX_GPIO_Init+0x314>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b0:	4b95      	ldr	r3, [pc, #596]	; (8001808 <MX_GPIO_Init+0x314>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015be:	4b92      	ldr	r3, [pc, #584]	; (8001808 <MX_GPIO_Init+0x314>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c4:	4a90      	ldr	r2, [pc, #576]	; (8001808 <MX_GPIO_Init+0x314>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ce:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <MX_GPIO_Init+0x314>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015dc:	4b8a      	ldr	r3, [pc, #552]	; (8001808 <MX_GPIO_Init+0x314>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	4a89      	ldr	r2, [pc, #548]	; (8001808 <MX_GPIO_Init+0x314>)
 80015e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ec:	4b86      	ldr	r3, [pc, #536]	; (8001808 <MX_GPIO_Init+0x314>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	4b83      	ldr	r3, [pc, #524]	; (8001808 <MX_GPIO_Init+0x314>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	4a81      	ldr	r2, [pc, #516]	; (8001808 <MX_GPIO_Init+0x314>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160a:	4b7f      	ldr	r3, [pc, #508]	; (8001808 <MX_GPIO_Init+0x314>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001618:	4b7b      	ldr	r3, [pc, #492]	; (8001808 <MX_GPIO_Init+0x314>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	4a7a      	ldr	r2, [pc, #488]	; (8001808 <MX_GPIO_Init+0x314>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001628:	4b77      	ldr	r3, [pc, #476]	; (8001808 <MX_GPIO_Init+0x314>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001636:	4b74      	ldr	r3, [pc, #464]	; (8001808 <MX_GPIO_Init+0x314>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	4a72      	ldr	r2, [pc, #456]	; (8001808 <MX_GPIO_Init+0x314>)
 800163e:	f043 0320 	orr.w	r3, r3, #32
 8001642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001646:	4b70      	ldr	r3, [pc, #448]	; (8001808 <MX_GPIO_Init+0x314>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165a:	486c      	ldr	r0, [pc, #432]	; (800180c <MX_GPIO_Init+0x318>)
 800165c:	f003 fe46 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f241 0104 	movw	r1, #4100	; 0x1004
 8001666:	486a      	ldr	r0, [pc, #424]	; (8001810 <MX_GPIO_Init+0x31c>)
 8001668:	f003 fe40 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	2104      	movs	r1, #4
 8001670:	4868      	ldr	r0, [pc, #416]	; (8001814 <MX_GPIO_Init+0x320>)
 8001672:	f003 fe3b 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001688:	2303      	movs	r3, #3
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800168c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001690:	4619      	mov	r1, r3
 8001692:	4861      	ldr	r0, [pc, #388]	; (8001818 <MX_GPIO_Init+0x324>)
 8001694:	f003 fc62 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a8:	4619      	mov	r1, r3
 80016aa:	485c      	ldr	r0, [pc, #368]	; (800181c <MX_GPIO_Init+0x328>)
 80016ac:	f003 fc56 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80016b0:	2330      	movs	r3, #48	; 0x30
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80016c0:	230a      	movs	r3, #10
 80016c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c8:	4619      	mov	r1, r3
 80016ca:	4855      	ldr	r0, [pc, #340]	; (8001820 <MX_GPIO_Init+0x32c>)
 80016cc:	f003 fc46 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80016d0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e2:	4619      	mov	r1, r3
 80016e4:	484f      	ldr	r0, [pc, #316]	; (8001824 <MX_GPIO_Init+0x330>)
 80016e6:	f003 fc39 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fc:	4619      	mov	r1, r3
 80016fe:	484a      	ldr	r0, [pc, #296]	; (8001828 <MX_GPIO_Init+0x334>)
 8001700:	f003 fc2c 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001716:	2301      	movs	r3, #1
 8001718:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171e:	4619      	mov	r1, r3
 8001720:	4840      	ldr	r0, [pc, #256]	; (8001824 <MX_GPIO_Init+0x330>)
 8001722:	f003 fc1b 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001736:	2306      	movs	r3, #6
 8001738:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173e:	4619      	mov	r1, r3
 8001740:	483a      	ldr	r0, [pc, #232]	; (800182c <MX_GPIO_Init+0x338>)
 8001742:	f003 fc0b 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175c:	4619      	mov	r1, r3
 800175e:	482b      	ldr	r0, [pc, #172]	; (800180c <MX_GPIO_Init+0x318>)
 8001760:	f003 fbfc 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001764:	2304      	movs	r3, #4
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001768:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	482c      	ldr	r0, [pc, #176]	; (800182c <MX_GPIO_Init+0x338>)
 800177a:	f003 fbef 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800177e:	2301      	movs	r3, #1
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178e:	4619      	mov	r1, r3
 8001790:	4827      	ldr	r0, [pc, #156]	; (8001830 <MX_GPIO_Init+0x33c>)
 8001792:	f003 fbe3 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017aa:	4619      	mov	r1, r3
 80017ac:	481a      	ldr	r0, [pc, #104]	; (8001818 <MX_GPIO_Init+0x324>)
 80017ae:	f003 fbd5 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017b2:	2340      	movs	r3, #64	; 0x40
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80017c2:	2309      	movs	r3, #9
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ca:	4619      	mov	r1, r3
 80017cc:	4815      	ldr	r0, [pc, #84]	; (8001824 <MX_GPIO_Init+0x330>)
 80017ce:	f003 fbc5 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80017d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <MX_GPIO_Init+0x31c>)
 80017ec:	f003 fbb6 	bl	8004f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80017f0:	2304      	movs	r3, #4
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001804:	4619      	mov	r1, r3
 8001806:	e015      	b.n	8001834 <MX_GPIO_Init+0x340>
 8001808:	58024400 	.word	0x58024400
 800180c:	58022000 	.word	0x58022000
 8001810:	58020400 	.word	0x58020400
 8001814:	58022400 	.word	0x58022400
 8001818:	58021c00 	.word	0x58021c00
 800181c:	58020c00 	.word	0x58020c00
 8001820:	58021000 	.word	0x58021000
 8001824:	58020000 	.word	0x58020000
 8001828:	58020800 	.word	0x58020800
 800182c:	58021800 	.word	0x58021800
 8001830:	58022800 	.word	0x58022800
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <MX_GPIO_Init+0x350>)
 8001836:	f003 fb91 	bl	8004f5c <HAL_GPIO_Init>

}
 800183a:	bf00      	nop
 800183c:	3740      	adds	r7, #64	; 0x40
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	58022400 	.word	0x58022400

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_MspInit+0x30>)
 800185c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_MspInit+0x30>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_MspInit+0x30>)
 800186c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	58024400 	.word	0x58024400

08001888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b090      	sub	sp, #64	; 0x40
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_ADC_MspInit+0x1e8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d14e      	bne.n	8001948 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018aa:	4b72      	ldr	r3, [pc, #456]	; (8001a74 <HAL_ADC_MspInit+0x1ec>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a70      	ldr	r2, [pc, #448]	; (8001a74 <HAL_ADC_MspInit+0x1ec>)
 80018b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018b4:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_ADC_MspInit+0x1ec>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d10e      	bne.n	80018da <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018bc:	4b6e      	ldr	r3, [pc, #440]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80018be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018c2:	4a6d      	ldr	r2, [pc, #436]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018cc:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80018ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	4a65      	ldr	r2, [pc, #404]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b5f      	ldr	r3, [pc, #380]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	4a5e      	ldr	r2, [pc, #376]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001908:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	623b      	str	r3, [r7, #32]
 8001914:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001916:	2301      	movs	r3, #1
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191a:	2303      	movs	r3, #3
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001926:	4619      	mov	r1, r3
 8001928:	4854      	ldr	r0, [pc, #336]	; (8001a7c <HAL_ADC_MspInit+0x1f4>)
 800192a:	f003 fb17 	bl	8004f5c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800192e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001932:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001936:	f001 fa01 	bl	8002d3c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800193a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800193e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001942:	f001 f9fb 	bl	8002d3c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001946:	e08f      	b.n	8001a68 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_ADC_MspInit+0x1f8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d133      	bne.n	80019ba <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001952:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <HAL_ADC_MspInit+0x1ec>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	4a46      	ldr	r2, [pc, #280]	; (8001a74 <HAL_ADC_MspInit+0x1ec>)
 800195a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800195c:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <HAL_ADC_MspInit+0x1ec>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d10e      	bne.n	8001982 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001964:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 8001966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800196a:	4a43      	ldr	r2, [pc, #268]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 800196c:	f043 0320 	orr.w	r3, r3, #32
 8001970:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001974:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 8001976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a3b      	ldr	r2, [pc, #236]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80019a0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019a4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80019a8:	f001 f9c8 	bl	8002d3c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80019ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019b0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80019b4:	f001 f9c2 	bl	8002d3c <HAL_SYSCFG_AnalogSwitchConfig>
}
 80019b8:	e056      	b.n	8001a68 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a31      	ldr	r2, [pc, #196]	; (8001a84 <HAL_ADC_MspInit+0x1fc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d151      	bne.n	8001a68 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	4a2b      	ldr	r2, [pc, #172]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80019cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_ADC_MspInit+0x1f0>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a24:	2303      	movs	r3, #3
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	4815      	ldr	r0, [pc, #84]	; (8001a88 <HAL_ADC_MspInit+0x200>)
 8001a34:	f003 fa92 	bl	8004f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480c      	ldr	r0, [pc, #48]	; (8001a7c <HAL_ADC_MspInit+0x1f4>)
 8001a4c:	f003 fa86 	bl	8004f5c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001a50:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001a54:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001a58:	f001 f970 	bl	8002d3c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a5c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001a60:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001a64:	f001 f96a 	bl	8002d3c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001a68:	bf00      	nop
 8001a6a:	3740      	adds	r7, #64	; 0x40
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40022000 	.word	0x40022000
 8001a74:	24000eb8 	.word	0x24000eb8
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	58020800 	.word	0x58020800
 8001a80:	40022100 	.word	0x40022100
 8001a84:	58026000 	.word	0x58026000
 8001a88:	58021400 	.word	0x58021400

08001a8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b092      	sub	sp, #72	; 0x48
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a87      	ldr	r2, [pc, #540]	; (8001cc8 <HAL_ETH_MspInit+0x23c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	f040 8108 	bne.w	8001cc0 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001ab0:	4b86      	ldr	r3, [pc, #536]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ab6:	4a85      	ldr	r2, [pc, #532]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001abc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ac0:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001ace:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad4:	4a7d      	ldr	r2, [pc, #500]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ade:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001aec:	4b77      	ldr	r3, [pc, #476]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af2:	4a76      	ldr	r2, [pc, #472]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001afc:	4b73      	ldr	r3, [pc, #460]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001afe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b0a:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b10:	4a6e      	ldr	r2, [pc, #440]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1a:	4b6c      	ldr	r3, [pc, #432]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2e:	4a67      	ldr	r2, [pc, #412]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b38:	4b64      	ldr	r3, [pc, #400]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b46:	4b61      	ldr	r3, [pc, #388]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	4a5f      	ldr	r2, [pc, #380]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b64:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6a:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b74:	4b55      	ldr	r3, [pc, #340]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	4b52      	ldr	r3, [pc, #328]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b92:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b4a      	ldr	r3, [pc, #296]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb0:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	4a41      	ldr	r2, [pc, #260]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bce:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <HAL_ETH_MspInit+0x240>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001bdc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bee:	230b      	movs	r3, #11
 8001bf0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4835      	ldr	r0, [pc, #212]	; (8001cd0 <HAL_ETH_MspInit+0x244>)
 8001bfa:	f003 f9af 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c0e:	230b      	movs	r3, #11
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c16:	4619      	mov	r1, r3
 8001c18:	482e      	ldr	r0, [pc, #184]	; (8001cd4 <HAL_ETH_MspInit+0x248>)
 8001c1a:	f003 f99f 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c30:	230b      	movs	r3, #11
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4827      	ldr	r0, [pc, #156]	; (8001cd8 <HAL_ETH_MspInit+0x24c>)
 8001c3c:	f003 f98e 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001c40:	233e      	movs	r3, #62	; 0x3e
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c50:	230b      	movs	r3, #11
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4820      	ldr	r0, [pc, #128]	; (8001cdc <HAL_ETH_MspInit+0x250>)
 8001c5c:	f003 f97e 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001c60:	230c      	movs	r3, #12
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c70:	230b      	movs	r3, #11
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4819      	ldr	r0, [pc, #100]	; (8001ce0 <HAL_ETH_MspInit+0x254>)
 8001c7c:	f003 f96e 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001c80:	2386      	movs	r3, #134	; 0x86
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c90:	230b      	movs	r3, #11
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4812      	ldr	r0, [pc, #72]	; (8001ce4 <HAL_ETH_MspInit+0x258>)
 8001c9c:	f003 f95e 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cb0:	230b      	movs	r3, #11
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <HAL_ETH_MspInit+0x25c>)
 8001cbc:	f003 f94e 	bl	8004f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	3748      	adds	r7, #72	; 0x48
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40028000 	.word	0x40028000
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	58021800 	.word	0x58021800
 8001cd4:	58021000 	.word	0x58021000
 8001cd8:	58022000 	.word	0x58022000
 8001cdc:	58020800 	.word	0x58020800
 8001ce0:	58021c00 	.word	0x58021c00
 8001ce4:	58020000 	.word	0x58020000
 8001ce8:	58020400 	.word	0x58020400

08001cec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0bc      	sub	sp, #240	; 0xf0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	22c0      	movs	r2, #192	; 0xc0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00a fd8b 	bl	800c828 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a57      	ldr	r2, [pc, #348]	; (8001e74 <HAL_FDCAN_MspInit+0x188>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d151      	bne.n	8001dc0 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d30:	f107 0318 	add.w	r3, r7, #24
 8001d34:	4618      	mov	r0, r3
 8001d36:	f005 fd95 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001d40:	f7ff fd82 	bl	8001848 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d44:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <HAL_FDCAN_MspInit+0x18c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	4a4b      	ldr	r2, [pc, #300]	; (8001e78 <HAL_FDCAN_MspInit+0x18c>)
 8001d4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_FDCAN_MspInit+0x18c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d10e      	bne.n	8001d74 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d56:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001d58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d5c:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001d66:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001d68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d74:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	4a40      	ldr	r2, [pc, #256]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001d92:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001dac:	2309      	movs	r3, #9
 8001dae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001db2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001db6:	4619      	mov	r1, r3
 8001db8:	4831      	ldr	r0, [pc, #196]	; (8001e80 <HAL_FDCAN_MspInit+0x194>)
 8001dba:	f003 f8cf 	bl	8004f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001dbe:	e055      	b.n	8001e6c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_FDCAN_MspInit+0x198>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d150      	bne.n	8001e6c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001dca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001dd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dde:	f107 0318 	add.w	r3, r7, #24
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 fd3e 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001dee:	f7ff fd2b 	bl	8001848 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_FDCAN_MspInit+0x18c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_FDCAN_MspInit+0x18c>)
 8001dfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_FDCAN_MspInit+0x18c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d10e      	bne.n	8001e22 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001e06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001e16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_FDCAN_MspInit+0x190>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001e40:	f242 0320 	movw	r3, #8224	; 0x2020
 8001e44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e5a:	2309      	movs	r3, #9
 8001e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e64:	4619      	mov	r1, r3
 8001e66:	4808      	ldr	r0, [pc, #32]	; (8001e88 <HAL_FDCAN_MspInit+0x19c>)
 8001e68:	f003 f878 	bl	8004f5c <HAL_GPIO_Init>
}
 8001e6c:	bf00      	nop
 8001e6e:	37f0      	adds	r7, #240	; 0xf0
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	4000a000 	.word	0x4000a000
 8001e78:	24000ebc 	.word	0x24000ebc
 8001e7c:	58024400 	.word	0x58024400
 8001e80:	58021c00 	.word	0x58021c00
 8001e84:	4000a400 	.word	0x4000a400
 8001e88:	58020400 	.word	0x58020400

08001e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b0ba      	sub	sp, #232	; 0xe8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	22c0      	movs	r2, #192	; 0xc0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00a fcbb 	bl	800c828 <memset>
  if(hi2c->Instance==I2C4)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <HAL_I2C_MspInit+0xc8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d146      	bne.n	8001f4a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001ebc:	f04f 0210 	mov.w	r2, #16
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f005 fcc6 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001ede:	f7ff fcb3 	bl	8001848 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_I2C_MspInit+0xcc>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <HAL_I2C_MspInit+0xcc>)
 8001eea:	f043 0308 	orr.w	r3, r3, #8
 8001eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_I2C_MspInit+0xcc>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f08:	2312      	movs	r3, #18
 8001f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f24:	4619      	mov	r1, r3
 8001f26:	480d      	ldr	r0, [pc, #52]	; (8001f5c <HAL_I2C_MspInit+0xd0>)
 8001f28:	f003 f818 	bl	8004f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_I2C_MspInit+0xcc>)
 8001f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_I2C_MspInit+0xcc>)
 8001f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_I2C_MspInit+0xcc>)
 8001f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	37e8      	adds	r7, #232	; 0xe8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	58001c00 	.word	0x58001c00
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	58020c00 	.word	0x58020c00

08001f60 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b0be      	sub	sp, #248	; 0xf8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	22c0      	movs	r2, #192	; 0xc0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00a fc51 	bl	800c828 <memset>
  if(hltdc->Instance==LTDC)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a66      	ldr	r2, [pc, #408]	; (8002124 <HAL_LTDC_MspInit+0x1c4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	f040 80c4 	bne.w	800211a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f92:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001fb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fbc:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f005 fc4c 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001fd2:	f7ff fc39 	bl	8001848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fd6:	4b54      	ldr	r3, [pc, #336]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8001fd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001fe6:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8001fe8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ff4:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	4a4b      	ldr	r2, [pc, #300]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8001ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002004:	4b48      	ldr	r3, [pc, #288]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002012:	4b45      	ldr	r3, [pc, #276]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002018:	4a43      	ldr	r2, [pc, #268]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002030:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	4a3c      	ldr	r2, [pc, #240]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8002038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002040:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8002056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205e:	4b32      	ldr	r3, [pc, #200]	; (8002128 <HAL_LTDC_MspInit+0x1c8>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800206c:	23fc      	movs	r3, #252	; 0xfc
 800206e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002084:	230e      	movs	r3, #14
 8002086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800208a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800208e:	4619      	mov	r1, r3
 8002090:	4826      	ldr	r0, [pc, #152]	; (800212c <HAL_LTDC_MspInit+0x1cc>)
 8002092:	f002 ff63 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8002096:	f24d 2303 	movw	r3, #53763	; 0xd203
 800209a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020b0:	230e      	movs	r3, #14
 80020b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020ba:	4619      	mov	r1, r3
 80020bc:	481c      	ldr	r0, [pc, #112]	; (8002130 <HAL_LTDC_MspInit+0x1d0>)
 80020be:	f002 ff4d 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80020c2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80020c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020dc:	230e      	movs	r3, #14
 80020de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020e6:	4619      	mov	r1, r3
 80020e8:	4812      	ldr	r0, [pc, #72]	; (8002134 <HAL_LTDC_MspInit+0x1d4>)
 80020ea:	f002 ff37 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002108:	230e      	movs	r3, #14
 800210a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800210e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002112:	4619      	mov	r1, r3
 8002114:	4808      	ldr	r0, [pc, #32]	; (8002138 <HAL_LTDC_MspInit+0x1d8>)
 8002116:	f002 ff21 	bl	8004f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	37f8      	adds	r7, #248	; 0xf8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	50001000 	.word	0x50001000
 8002128:	58024400 	.word	0x58024400
 800212c:	58022800 	.word	0x58022800
 8002130:	58022000 	.word	0x58022000
 8002134:	58022400 	.word	0x58022400
 8002138:	58021c00 	.word	0x58021c00

0800213c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0bc      	sub	sp, #240	; 0xf0
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	22c0      	movs	r2, #192	; 0xc0
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f00a fb63 	bl	800c828 <memset>
  if(hqspi->Instance==QUADSPI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <HAL_QSPI_MspInit+0x184>)
 8002168:	4293      	cmp	r3, r2
 800216a:	f040 80a5 	bne.w	80022b8 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800216e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800217a:	2300      	movs	r3, #0
 800217c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217e:	f107 0318 	add.w	r3, r7, #24
 8002182:	4618      	mov	r0, r3
 8002184:	f005 fb6e 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800218e:	f7ff fb5b 	bl	8001848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002192:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 8002194:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002198:	4a4a      	ldr	r2, [pc, #296]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 800219a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80021a2:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b6:	4a43      	ldr	r2, [pc, #268]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c0:	4b40      	ldr	r3, [pc, #256]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ce:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d4:	4a3b      	ldr	r2, [pc, #236]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021d6:	f043 0320 	orr.w	r3, r3, #32
 80021da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f2:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <HAL_QSPI_MspInit+0x188>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800220a:	2340      	movs	r3, #64	; 0x40
 800220c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002222:	230a      	movs	r3, #10
 8002224:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800222c:	4619      	mov	r1, r3
 800222e:	4826      	ldr	r0, [pc, #152]	; (80022c8 <HAL_QSPI_MspInit+0x18c>)
 8002230:	f002 fe94 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002234:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800224e:	2309      	movs	r3, #9
 8002250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002254:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002258:	4619      	mov	r1, r3
 800225a:	481c      	ldr	r0, [pc, #112]	; (80022cc <HAL_QSPI_MspInit+0x190>)
 800225c:	f002 fe7e 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800227a:	230a      	movs	r3, #10
 800227c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002280:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002284:	4619      	mov	r1, r3
 8002286:	4811      	ldr	r0, [pc, #68]	; (80022cc <HAL_QSPI_MspInit+0x190>)
 8002288:	f002 fe68 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800228c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022a6:	2309      	movs	r3, #9
 80022a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022b0:	4619      	mov	r1, r3
 80022b2:	4807      	ldr	r0, [pc, #28]	; (80022d0 <HAL_QSPI_MspInit+0x194>)
 80022b4:	f002 fe52 	bl	8004f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80022b8:	bf00      	nop
 80022ba:	37f0      	adds	r7, #240	; 0xf0
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	52005000 	.word	0x52005000
 80022c4:	58024400 	.word	0x58024400
 80022c8:	58020400 	.word	0x58020400
 80022cc:	58021400 	.word	0x58021400
 80022d0:	58020c00 	.word	0x58020c00

080022d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0b2      	sub	sp, #200	; 0xc8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	22c0      	movs	r2, #192	; 0xc0
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f00a fa9f 	bl	800c828 <memset>
  if(hrtc->Instance==RTC)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_RTC_MspInit+0x5c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d119      	bne.n	8002328 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002304:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	4618      	mov	r0, r3
 800230e:	f005 faa9 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002318:	f7ff fa96 	bl	8001848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RTC_MspInit+0x60>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_RTC_MspInit+0x60>)
 8002322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002326:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002328:	bf00      	nop
 800232a:	37c8      	adds	r7, #200	; 0xc8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	58004000 	.word	0x58004000
 8002334:	58024400 	.word	0x58024400

08002338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b0bc      	sub	sp, #240	; 0xf0
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002350:	f107 0318 	add.w	r3, r7, #24
 8002354:	22c0      	movs	r2, #192	; 0xc0
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f00a fa65 	bl	800c828 <memset>
  if(hspi->Instance==SPI2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a55      	ldr	r2, [pc, #340]	; (80024b8 <HAL_SPI_MspInit+0x180>)
 8002364:	4293      	cmp	r3, r2
 8002366:	f040 80a3 	bne.w	80024b0 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800236a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002376:	2300      	movs	r3, #0
 8002378:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800237a:	f107 0318 	add.w	r3, r7, #24
 800237e:	4618      	mov	r0, r3
 8002380:	f005 fa70 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800238a:	f7ff fa5d 	bl	8001848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800238e:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_SPI_MspInit+0x184>)
 8002390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002394:	4a49      	ldr	r2, [pc, #292]	; (80024bc <HAL_SPI_MspInit+0x184>)
 8002396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b2:	4a42      	ldr	r2, [pc, #264]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023bc:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ca:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d0:	4a3a      	ldr	r2, [pc, #232]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023d2:	f043 0308 	orr.w	r3, r3, #8
 80023d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ee:	4a33      	ldr	r2, [pc, #204]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f8:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_SPI_MspInit+0x184>)
 80023fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002406:	2310      	movs	r3, #16
 8002408:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800241e:	2307      	movs	r3, #7
 8002420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002424:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002428:	4619      	mov	r1, r3
 800242a:	4825      	ldr	r0, [pc, #148]	; (80024c0 <HAL_SPI_MspInit+0x188>)
 800242c:	f002 fd96 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002430:	2308      	movs	r3, #8
 8002432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002448:	2305      	movs	r3, #5
 800244a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002452:	4619      	mov	r1, r3
 8002454:	481b      	ldr	r0, [pc, #108]	; (80024c4 <HAL_SPI_MspInit+0x18c>)
 8002456:	f002 fd81 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800245a:	2304      	movs	r3, #4
 800245c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002472:	2305      	movs	r3, #5
 8002474:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002478:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800247c:	4619      	mov	r1, r3
 800247e:	4812      	ldr	r0, [pc, #72]	; (80024c8 <HAL_SPI_MspInit+0x190>)
 8002480:	f002 fd6c 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002488:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800249e:	2305      	movs	r3, #5
 80024a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024a8:	4619      	mov	r1, r3
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <HAL_SPI_MspInit+0x188>)
 80024ac:	f002 fd56 	bl	8004f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024b0:	bf00      	nop
 80024b2:	37f0      	adds	r7, #240	; 0xf0
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40003800 	.word	0x40003800
 80024bc:	58024400 	.word	0x58024400
 80024c0:	58020400 	.word	0x58020400
 80024c4:	58020c00 	.word	0x58020c00
 80024c8:	58022000 	.word	0x58022000

080024cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0ba      	sub	sp, #232	; 0xe8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	22c0      	movs	r2, #192	; 0xc0
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f00a f99b 	bl	800c828 <memset>
  if(huart->Instance==USART3)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a27      	ldr	r2, [pc, #156]	; (8002594 <HAL_UART_MspInit+0xc8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d146      	bne.n	800258a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024fc:	f04f 0202 	mov.w	r2, #2
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4618      	mov	r0, r3
 8002514:	f005 f9a6 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800251e:	f7ff f993 	bl	8001848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_UART_MspInit+0xcc>)
 8002524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002528:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_UART_MspInit+0xcc>)
 800252a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_UART_MspInit+0xcc>)
 8002534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_UART_MspInit+0xcc>)
 8002542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <HAL_UART_MspInit+0xcc>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_UART_MspInit+0xcc>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800255e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002578:	2307      	movs	r3, #7
 800257a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002582:	4619      	mov	r1, r3
 8002584:	4805      	ldr	r0, [pc, #20]	; (800259c <HAL_UART_MspInit+0xd0>)
 8002586:	f002 fce9 	bl	8004f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	37e8      	adds	r7, #232	; 0xe8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40004800 	.word	0x40004800
 8002598:	58024400 	.word	0x58024400
 800259c:	58020400 	.word	0x58020400

080025a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b0ba      	sub	sp, #232	; 0xe8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	22c0      	movs	r2, #192	; 0xc0
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f00a f931 	bl	800c828 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a30      	ldr	r2, [pc, #192]	; (800268c <HAL_PCD_MspInit+0xec>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d159      	bne.n	8002684 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80025d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80025dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	4618      	mov	r0, r3
 80025ea:	f005 f93b 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80025f4:	f7ff f928 	bl	8001848 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80025f8:	f004 f884 	bl	8006704 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_PCD_MspInit+0xf0>)
 80025fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002602:	4a23      	ldr	r2, [pc, #140]	; (8002690 <HAL_PCD_MspInit+0xf0>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_PCD_MspInit+0xf0>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800261a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800262e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002632:	4619      	mov	r1, r3
 8002634:	4817      	ldr	r0, [pc, #92]	; (8002694 <HAL_PCD_MspInit+0xf4>)
 8002636:	f002 fc91 	bl	8004f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800263a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800263e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002654:	230a      	movs	r3, #10
 8002656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800265e:	4619      	mov	r1, r3
 8002660:	480c      	ldr	r0, [pc, #48]	; (8002694 <HAL_PCD_MspInit+0xf4>)
 8002662:	f002 fc7b 	bl	8004f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_PCD_MspInit+0xf0>)
 8002668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800266c:	4a08      	ldr	r2, [pc, #32]	; (8002690 <HAL_PCD_MspInit+0xf0>)
 800266e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002672:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_PCD_MspInit+0xf0>)
 8002678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800267c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002684:	bf00      	nop
 8002686:	37e8      	adds	r7, #232	; 0xe8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40080000 	.word	0x40080000
 8002690:	58024400 	.word	0x58024400
 8002694:	58020000 	.word	0x58020000

08002698 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002698:	b580      	push	{r7, lr}
 800269a:	b0b8      	sub	sp, #224	; 0xe0
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800269e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026ae:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <HAL_FMC_MspInit+0x15c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 8099 	bne.w	80027ea <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80026b8:	4b4e      	ldr	r3, [pc, #312]	; (80027f4 <HAL_FMC_MspInit+0x15c>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	22c0      	movs	r2, #192	; 0xc0
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f00a f8ae 	bl	800c828 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80026cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80026d8:	2300      	movs	r3, #0
 80026da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026dc:	f107 0308 	add.w	r3, r7, #8
 80026e0:	4618      	mov	r0, r3
 80026e2:	f005 f8bf 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80026ec:	f7ff f8ac 	bl	8001848 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026f0:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_FMC_MspInit+0x160>)
 80026f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80026f6:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <HAL_FMC_MspInit+0x160>)
 80026f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_FMC_MspInit+0x160>)
 8002702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800270e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002712:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002722:	2303      	movs	r3, #3
 8002724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002728:	230c      	movs	r3, #12
 800272a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800272e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002732:	4619      	mov	r1, r3
 8002734:	4831      	ldr	r0, [pc, #196]	; (80027fc <HAL_FMC_MspInit+0x164>)
 8002736:	f002 fc11 	bl	8004f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800273a:	f248 1333 	movw	r3, #33075	; 0x8133
 800273e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002754:	230c      	movs	r3, #12
 8002756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800275a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800275e:	4619      	mov	r1, r3
 8002760:	4827      	ldr	r0, [pc, #156]	; (8002800 <HAL_FMC_MspInit+0x168>)
 8002762:	f002 fbfb 	bl	8004f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002766:	f24c 7303 	movw	r3, #50947	; 0xc703
 800276a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002780:	230c      	movs	r3, #12
 8002782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002786:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800278a:	4619      	mov	r1, r3
 800278c:	481d      	ldr	r0, [pc, #116]	; (8002804 <HAL_FMC_MspInit+0x16c>)
 800278e:	f002 fbe5 	bl	8004f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002792:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ac:	230c      	movs	r3, #12
 80027ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027b6:	4619      	mov	r1, r3
 80027b8:	4813      	ldr	r0, [pc, #76]	; (8002808 <HAL_FMC_MspInit+0x170>)
 80027ba:	f002 fbcf 	bl	8004f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027be:	23e0      	movs	r3, #224	; 0xe0
 80027c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d0:	2303      	movs	r3, #3
 80027d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027d6:	230c      	movs	r3, #12
 80027d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027e0:	4619      	mov	r1, r3
 80027e2:	480a      	ldr	r0, [pc, #40]	; (800280c <HAL_FMC_MspInit+0x174>)
 80027e4:	f002 fbba 	bl	8004f5c <HAL_GPIO_Init>
 80027e8:	e000      	b.n	80027ec <HAL_FMC_MspInit+0x154>
    return;
 80027ea:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80027ec:	37e0      	adds	r7, #224	; 0xe0
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	24000ec0 	.word	0x24000ec0
 80027f8:	58024400 	.word	0x58024400
 80027fc:	58021000 	.word	0x58021000
 8002800:	58021800 	.word	0x58021800
 8002804:	58020c00 	.word	0x58020c00
 8002808:	58021400 	.word	0x58021400
 800280c:	58021c00 	.word	0x58021c00

08002810 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002818:	f7ff ff3e 	bl	8002698 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b0ba      	sub	sp, #232	; 0xe8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	22c0      	movs	r2, #192	; 0xc0
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f009 fff7 	bl	800c828 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a45      	ldr	r2, [pc, #276]	; (8002954 <HAL_SAI_MspInit+0x130>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d13e      	bne.n	80028c2 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002850:	2300      	movs	r3, #0
 8002852:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	4618      	mov	r0, r3
 800285a:	f005 f803 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002864:	f7fe fff0 	bl	8001848 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_SAI_MspInit+0x134>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10e      	bne.n	800288e <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002870:	4b3a      	ldr	r3, [pc, #232]	; (800295c <HAL_SAI_MspInit+0x138>)
 8002872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002876:	4a39      	ldr	r2, [pc, #228]	; (800295c <HAL_SAI_MspInit+0x138>)
 8002878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800287c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_SAI_MspInit+0x138>)
 8002882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800288e:	4b32      	ldr	r3, [pc, #200]	; (8002958 <HAL_SAI_MspInit+0x134>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3301      	adds	r3, #1
 8002894:	4a30      	ldr	r2, [pc, #192]	; (8002958 <HAL_SAI_MspInit+0x134>)
 8002896:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002898:	23f0      	movs	r3, #240	; 0xf0
 800289a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028b0:	230a      	movs	r3, #10
 80028b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028ba:	4619      	mov	r1, r3
 80028bc:	4828      	ldr	r0, [pc, #160]	; (8002960 <HAL_SAI_MspInit+0x13c>)
 80028be:	f002 fb4d 	bl	8004f5c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a27      	ldr	r2, [pc, #156]	; (8002964 <HAL_SAI_MspInit+0x140>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d13f      	bne.n	800294c <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80028cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80028d8:	2300      	movs	r3, #0
 80028da:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 ffbf 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80028ec:	f7fe ffac 	bl	8001848 <Error_Handler>
    }

      if (SAI2_client == 0)
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_SAI_MspInit+0x134>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10e      	bne.n	8002916 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_SAI_MspInit+0x138>)
 80028fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_SAI_MspInit+0x138>)
 8002900:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002904:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_SAI_MspInit+0x138>)
 800290a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800290e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_SAI_MspInit+0x134>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <HAL_SAI_MspInit+0x134>)
 800291e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800293a:	230a      	movs	r3, #10
 800293c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002940:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002944:	4619      	mov	r1, r3
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <HAL_SAI_MspInit+0x144>)
 8002948:	f002 fb08 	bl	8004f5c <HAL_GPIO_Init>

    }
}
 800294c:	bf00      	nop
 800294e:	37e8      	adds	r7, #232	; 0xe8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40015c04 	.word	0x40015c04
 8002958:	24000ec4 	.word	0x24000ec4
 800295c:	58024400 	.word	0x58024400
 8002960:	58022000 	.word	0x58022000
 8002964:	40015c24 	.word	0x40015c24
 8002968:	58021800 	.word	0x58021800

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <NMI_Handler+0x4>

08002972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002976:	e7fe      	b.n	8002976 <HardFault_Handler+0x4>

08002978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800297c:	e7fe      	b.n	800297c <MemManage_Handler+0x4>

0800297e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <BusFault_Handler+0x4>

08002984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <UsageFault_Handler+0x4>

0800298a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b8:	f000 f95c 	bl	8002c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <_sbrk+0x5c>)
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <_sbrk+0x60>)
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <_sbrk+0x64>)
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <_sbrk+0x68>)
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d207      	bcs.n	8002a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f0:	f009 fee2 	bl	800c7b8 <__errno>
 80029f4:	4603      	mov	r3, r0
 80029f6:	220c      	movs	r2, #12
 80029f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
 80029fe:	e009      	b.n	8002a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <_sbrk+0x64>)
 8002a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	24080000 	.word	0x24080000
 8002a20:	00000400 	.word	0x00000400
 8002a24:	24000ec8 	.word	0x24000ec8
 8002a28:	24000ee0 	.word	0x24000ee0

08002a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a30:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <SystemInit+0xe4>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	4a36      	ldr	r2, [pc, #216]	; (8002b10 <SystemInit+0xe4>)
 8002a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a40:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <SystemInit+0xe8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	2b06      	cmp	r3, #6
 8002a4a:	d807      	bhi.n	8002a5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a4c:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <SystemInit+0xe8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 030f 	bic.w	r3, r3, #15
 8002a54:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <SystemInit+0xe8>)
 8002a56:	f043 0307 	orr.w	r3, r3, #7
 8002a5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <SystemInit+0xec>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2d      	ldr	r2, [pc, #180]	; (8002b18 <SystemInit+0xec>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <SystemInit+0xec>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <SystemInit+0xec>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4929      	ldr	r1, [pc, #164]	; (8002b18 <SystemInit+0xec>)
 8002a74:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <SystemInit+0xf0>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <SystemInit+0xe8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <SystemInit+0xe8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 030f 	bic.w	r3, r3, #15
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <SystemInit+0xe8>)
 8002a90:	f043 0307 	orr.w	r3, r3, #7
 8002a94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <SystemInit+0xec>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <SystemInit+0xec>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <SystemInit+0xec>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <SystemInit+0xec>)
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <SystemInit+0xf4>)
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <SystemInit+0xec>)
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <SystemInit+0xf8>)
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <SystemInit+0xec>)
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <SystemInit+0xfc>)
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <SystemInit+0xec>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <SystemInit+0xec>)
 8002ac2:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <SystemInit+0xfc>)
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <SystemInit+0xec>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <SystemInit+0xec>)
 8002ace:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <SystemInit+0xfc>)
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <SystemInit+0xec>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <SystemInit+0xec>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <SystemInit+0xec>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <SystemInit+0xec>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <SystemInit+0x100>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <SystemInit+0x104>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af6:	d202      	bcs.n	8002afe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <SystemInit+0x108>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <SystemInit+0x10c>)
 8002b00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b04:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00
 8002b14:	52002000 	.word	0x52002000
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b20:	02020200 	.word	0x02020200
 8002b24:	01ff0000 	.word	0x01ff0000
 8002b28:	01010280 	.word	0x01010280
 8002b2c:	5c001000 	.word	0x5c001000
 8002b30:	ffff0000 	.word	0xffff0000
 8002b34:	51008108 	.word	0x51008108
 8002b38:	52004000 	.word	0x52004000

08002b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b40:	f7ff ff74 	bl	8002a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b44:	480c      	ldr	r0, [pc, #48]	; (8002b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b46:	490d      	ldr	r1, [pc, #52]	; (8002b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b48:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b4c:	e002      	b.n	8002b54 <LoopCopyDataInit>

08002b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b52:	3304      	adds	r3, #4

08002b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b58:	d3f9      	bcc.n	8002b4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b5c:	4c0a      	ldr	r4, [pc, #40]	; (8002b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b60:	e001      	b.n	8002b66 <LoopFillZerobss>

08002b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b64:	3204      	adds	r2, #4

08002b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b6a:	f009 fe2b 	bl	800c7c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b6e:	f7fd fd91 	bl	8000694 <main>
  bx  lr
 8002b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b7c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002b80:	0800d284 	.word	0x0800d284
  ldr r2, =_sbss
 8002b84:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8002b88:	24000ee0 	.word	0x24000ee0

08002b8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <ADC3_IRQHandler>
	...

08002b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b96:	2003      	movs	r0, #3
 8002b98:	f001 fa26 	bl	8003fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b9c:	f004 fc8c 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_Init+0x68>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	4913      	ldr	r1, [pc, #76]	; (8002bfc <HAL_Init+0x6c>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_Init+0x68>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_Init+0x6c>)
 8002bc4:	5cd3      	ldrb	r3, [r2, r3]
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_Init+0x70>)
 8002bd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bd4:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <HAL_Init+0x74>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f000 f814 	bl	8002c08 <HAL_InitTick>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e002      	b.n	8002bf0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bea:	f7fe fe33 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	0800d208 	.word	0x0800d208
 8002c00:	24000004 	.word	0x24000004
 8002c04:	24000000 	.word	0x24000000

08002c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_InitTick+0x60>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e021      	b.n	8002c60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c1c:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <HAL_InitTick+0x64>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_InitTick+0x60>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4619      	mov	r1, r3
 8002c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f9fd 	bl	8004032 <HAL_SYSTICK_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00e      	b.n	8002c60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b0f      	cmp	r3, #15
 8002c46:	d80a      	bhi.n	8002c5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c50:	f001 f9d5 	bl	8003ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c54:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <HAL_InitTick+0x68>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	2400000c 	.word	0x2400000c
 8002c6c:	24000000 	.word	0x24000000
 8002c70:	24000008 	.word	0x24000008

08002c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_IncTick+0x20>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_IncTick+0x24>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <HAL_IncTick+0x24>)
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	2400000c 	.word	0x2400000c
 8002c98:	24000ecc 	.word	0x24000ecc

08002c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_GetTick+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	24000ecc 	.word	0x24000ecc

08002cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff ffee 	bl	8002c9c <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d005      	beq.n	8002cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_Delay+0x44>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cda:	bf00      	nop
 8002cdc:	f7ff ffde 	bl	8002c9c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d8f7      	bhi.n	8002cdc <HAL_Delay+0x28>
  {
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2400000c 	.word	0x2400000c

08002cfc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_GetREVID+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0c1b      	lsrs	r3, r3, #16
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	5c001000 	.word	0x5c001000

08002d14 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d24:	4904      	ldr	r1, [pc, #16]	; (8002d38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	58000400 	.word	0x58000400

08002d3c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	4904      	ldr	r1, [pc, #16]	; (8002d64 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	58000400 	.word	0x58000400

08002d68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	609a      	str	r2, [r3, #8]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3360      	adds	r3, #96	; 0x60
 8002de2:	461a      	mov	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	611a      	str	r2, [r3, #16]
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	601a      	str	r2, [r3, #0]
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3330      	adds	r3, #48	; 0x30
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	4413      	add	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	211f      	movs	r1, #31
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	f003 011f 	and.w	r1, r3, #31
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	0e5b      	lsrs	r3, r3, #25
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	4413      	add	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	0d1b      	lsrs	r3, r3, #20
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2107      	movs	r1, #7
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	401a      	ands	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	0d1b      	lsrs	r3, r3, #20
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f003 0318 	and.w	r3, r3, #24
 8002f4a:	4908      	ldr	r1, [pc, #32]	; (8002f6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f4c:	40d9      	lsrs	r1, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	400b      	ands	r3, r1
 8002f52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	000fffff 	.word	0x000fffff

08002f70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6093      	str	r3, [r2, #8]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	5fffffc0 	.word	0x5fffffc0

08002f94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa8:	d101      	bne.n	8002fae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	6fffffc0 	.word	0x6fffffc0

08002fe4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff8:	d101      	bne.n	8002ffe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <LL_ADC_IsEnabled+0x18>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <LL_ADC_IsEnabled+0x1a>
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d101      	bne.n	800304a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b08      	cmp	r3, #8
 800306a:	d101      	bne.n	8003070 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e18f      	b.n	80033ba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fe fbed 	bl	8001888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff67 	bl	8002f94 <LL_ADC_IsDeepPowerDownEnabled>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff4d 	bl	8002f70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff82 	bl	8002fe4 <LL_ADC_IsInternalRegulatorEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d114      	bne.n	8003110 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff66 	bl	8002fbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f0:	4b87      	ldr	r3, [pc, #540]	; (8003310 <HAL_ADC_Init+0x290>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	4a87      	ldr	r2, [pc, #540]	; (8003314 <HAL_ADC_Init+0x294>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003102:	e002      	b.n	800310a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3b01      	subs	r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f9      	bne.n	8003104 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff65 	bl	8002fe4 <LL_ADC_IsInternalRegulatorEnabled>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f043 0210 	orr.w	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff76 	bl	8003032 <LL_ADC_REG_IsConversionOngoing>
 8003146:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 8129 	bne.w	80033a8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f040 8125 	bne.w	80033a8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff4a 	bl	800300c <LL_ADC_IsEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d136      	bne.n	80031ec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a65      	ldr	r2, [pc, #404]	; (8003318 <HAL_ADC_Init+0x298>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_ADC_Init+0x112>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a63      	ldr	r2, [pc, #396]	; (800331c <HAL_ADC_Init+0x29c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10e      	bne.n	80031b0 <HAL_ADC_Init+0x130>
 8003192:	4861      	ldr	r0, [pc, #388]	; (8003318 <HAL_ADC_Init+0x298>)
 8003194:	f7ff ff3a 	bl	800300c <LL_ADC_IsEnabled>
 8003198:	4604      	mov	r4, r0
 800319a:	4860      	ldr	r0, [pc, #384]	; (800331c <HAL_ADC_Init+0x29c>)
 800319c:	f7ff ff36 	bl	800300c <LL_ADC_IsEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4323      	orrs	r3, r4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e008      	b.n	80031c2 <HAL_ADC_Init+0x142>
 80031b0:	485b      	ldr	r0, [pc, #364]	; (8003320 <HAL_ADC_Init+0x2a0>)
 80031b2:	f7ff ff2b 	bl	800300c <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a53      	ldr	r2, [pc, #332]	; (8003318 <HAL_ADC_Init+0x298>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_ADC_Init+0x15a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a51      	ldr	r2, [pc, #324]	; (800331c <HAL_ADC_Init+0x29c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_ADC_Init+0x15e>
 80031da:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_ADC_Init+0x2a4>)
 80031dc:	e000      	b.n	80031e0 <HAL_ADC_Init+0x160>
 80031de:	4a52      	ldr	r2, [pc, #328]	; (8003328 <HAL_ADC_Init+0x2a8>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f7ff fdbe 	bl	8002d68 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031ec:	f7ff fd86 	bl	8002cfc <HAL_GetREVID>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d914      	bls.n	8003224 <HAL_ADC_Init+0x1a4>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d110      	bne.n	8003224 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7d5b      	ldrb	r3, [r3, #21]
 8003206:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800320c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003212:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7f1b      	ldrb	r3, [r3, #28]
 8003218:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800321a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800321c:	f043 030c 	orr.w	r3, r3, #12
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	e00d      	b.n	8003240 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7d5b      	ldrb	r3, [r3, #21]
 8003228:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800322e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003234:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7f1b      	ldrb	r3, [r3, #28]
 800323a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7f1b      	ldrb	r3, [r3, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d106      	bne.n	8003256 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	3b01      	subs	r3, #1
 800324e:	045b      	lsls	r3, r3, #17
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_ADC_Init+0x2ac>)
 800327a:	4013      	ands	r3, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	430b      	orrs	r3, r1
 8003284:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fed1 	bl	8003032 <LL_ADC_REG_IsConversionOngoing>
 8003290:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fede 	bl	8003058 <LL_ADC_INJ_IsConversionOngoing>
 800329c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d15f      	bne.n	8003364 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d15c      	bne.n	8003364 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7d1b      	ldrb	r3, [r3, #20]
 80032ae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <HAL_ADC_Init+0x2b0>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	69b9      	ldr	r1, [r7, #24]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d130      	bne.n	8003338 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_ADC_Init+0x2b4>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0411      	lsls	r1, r2, #16
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032f2:	4311      	orrs	r1, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032fe:	430a      	orrs	r2, r1
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	611a      	str	r2, [r3, #16]
 800330c:	e01c      	b.n	8003348 <HAL_ADC_Init+0x2c8>
 800330e:	bf00      	nop
 8003310:	24000000 	.word	0x24000000
 8003314:	053e2d63 	.word	0x053e2d63
 8003318:	40022000 	.word	0x40022000
 800331c:	40022100 	.word	0x40022100
 8003320:	58026000 	.word	0x58026000
 8003324:	40022300 	.word	0x40022300
 8003328:	58026300 	.word	0x58026300
 800332c:	fff0c003 	.word	0xfff0c003
 8003330:	ffffbffc 	.word	0xffffbffc
 8003334:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fb80 	bl	8003a64 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10c      	bne.n	8003386 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f023 010f 	bic.w	r1, r3, #15
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	1e5a      	subs	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
 8003384:	e007      	b.n	8003396 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 020f 	bic.w	r2, r2, #15
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
 80033a6:	e007      	b.n	80033b8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f043 0210 	orr.w	r2, r3, #16
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3724      	adds	r7, #36	; 0x24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd90      	pop	{r4, r7, pc}
 80033c2:	bf00      	nop

080033c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b0a1      	sub	sp, #132	; 0x84
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4a9d      	ldr	r2, [pc, #628]	; (8003654 <HAL_ADC_ConfigChannel+0x290>)
 80033de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x2a>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e321      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x66e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fe19 	bl	8003032 <LL_ADC_REG_IsConversionOngoing>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 8306 	bne.w	8003a14 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003410:	2b00      	cmp	r3, #0
 8003412:	d108      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x62>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2201      	movs	r2, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	e016      	b.n	8003454 <HAL_ADC_ConfigChannel+0x90>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003436:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800343e:	2320      	movs	r3, #32
 8003440:	e003      	b.n	800344a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2201      	movs	r2, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	69d1      	ldr	r1, [r2, #28]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	430b      	orrs	r3, r1
 8003460:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	f7ff fd02 	bl	8002e78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fdda 	bl	8003032 <LL_ADC_REG_IsConversionOngoing>
 800347e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fde7 	bl	8003058 <LL_ADC_INJ_IsConversionOngoing>
 800348a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800348c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348e:	2b00      	cmp	r3, #0
 8003490:	f040 80b3 	bne.w	80035fa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 80af 	bne.w	80035fa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	6819      	ldr	r1, [r3, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	461a      	mov	r2, r3
 80034aa:	f7ff fd11 	bl	8002ed0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034ae:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <HAL_ADC_ConfigChannel+0x294>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80034b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ba:	d10b      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x110>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	e01d      	b.n	8003510 <HAL_ADC_ConfigChannel+0x14c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x136>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	e00a      	b.n	8003510 <HAL_ADC_ConfigChannel+0x14c>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b04      	cmp	r3, #4
 8003518:	d027      	beq.n	800356a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6919      	ldr	r1, [r3, #16]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003528:	f7ff fc52 	bl	8002dd0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6919      	ldr	r1, [r3, #16]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	7e5b      	ldrb	r3, [r3, #25]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d102      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x17e>
 800353c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003540:	e000      	b.n	8003544 <HAL_ADC_ConfigChannel+0x180>
 8003542:	2300      	movs	r3, #0
 8003544:	461a      	mov	r2, r3
 8003546:	f7ff fc7c 	bl	8002e42 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6919      	ldr	r1, [r3, #16]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	7e1b      	ldrb	r3, [r3, #24]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d102      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x19c>
 800355a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800355e:	e000      	b.n	8003562 <HAL_ADC_ConfigChannel+0x19e>
 8003560:	2300      	movs	r3, #0
 8003562:	461a      	mov	r2, r3
 8003564:	f7ff fc54 	bl	8002e10 <LL_ADC_SetDataRightShift>
 8003568:	e047      	b.n	80035fa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	069b      	lsls	r3, r3, #26
 800357a:	429a      	cmp	r2, r3
 800357c:	d107      	bne.n	800358e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800358c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003594:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	069b      	lsls	r3, r3, #26
 800359e:	429a      	cmp	r2, r3
 80035a0:	d107      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035b0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	069b      	lsls	r3, r3, #26
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d107      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035d4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	069b      	lsls	r3, r3, #26
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d107      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035f8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fd04 	bl	800300c <LL_ADC_IsEnabled>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 820d 	bne.w	8003a26 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	461a      	mov	r2, r3
 800361a:	f7ff fc85 	bl	8002f28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <HAL_ADC_ConfigChannel+0x290>)
 8003624:	4293      	cmp	r3, r2
 8003626:	f040 8133 	bne.w	8003890 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003636:	2b00      	cmp	r3, #0
 8003638:	d110      	bne.n	800365c <HAL_ADC_ConfigChannel+0x298>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	0e9b      	lsrs	r3, r3, #26
 8003640:	3301      	adds	r3, #1
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	2b09      	cmp	r3, #9
 8003648:	bf94      	ite	ls
 800364a:	2301      	movls	r3, #1
 800364c:	2300      	movhi	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	e01e      	b.n	8003690 <HAL_ADC_ConfigChannel+0x2cc>
 8003652:	bf00      	nop
 8003654:	47ff0000 	.word	0x47ff0000
 8003658:	5c001000 	.word	0x5c001000
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800366e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003674:	2320      	movs	r3, #32
 8003676:	e003      	b.n	8003680 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	3301      	adds	r3, #1
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2b09      	cmp	r3, #9
 8003688:	bf94      	ite	ls
 800368a:	2301      	movls	r3, #1
 800368c:	2300      	movhi	r3, #0
 800368e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003690:	2b00      	cmp	r3, #0
 8003692:	d079      	beq.n	8003788 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800369c:	2b00      	cmp	r3, #0
 800369e:	d107      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x2ec>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0e9b      	lsrs	r3, r3, #26
 80036a6:	3301      	adds	r3, #1
 80036a8:	069b      	lsls	r3, r3, #26
 80036aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ae:	e015      	b.n	80036dc <HAL_ADC_ConfigChannel+0x318>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80036c8:	2320      	movs	r3, #32
 80036ca:	e003      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80036cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	069b      	lsls	r3, r3, #26
 80036d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x338>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	3301      	adds	r3, #1
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	2101      	movs	r1, #1
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	e017      	b.n	800372c <HAL_ADC_ConfigChannel+0x368>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800370a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800370e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003714:	2320      	movs	r3, #32
 8003716:	e003      	b.n	8003720 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	ea42 0103 	orr.w	r1, r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x38e>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	0e9b      	lsrs	r3, r3, #26
 8003742:	3301      	adds	r3, #1
 8003744:	f003 021f 	and.w	r2, r3, #31
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	051b      	lsls	r3, r3, #20
 8003750:	e018      	b.n	8003784 <HAL_ADC_ConfigChannel+0x3c0>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800376a:	2320      	movs	r3, #32
 800376c:	e003      	b.n	8003776 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	3301      	adds	r3, #1
 8003778:	f003 021f 	and.w	r2, r3, #31
 800377c:	4613      	mov	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4413      	add	r3, r2
 8003782:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003784:	430b      	orrs	r3, r1
 8003786:	e07e      	b.n	8003886 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x3e0>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	3301      	adds	r3, #1
 800379c:	069b      	lsls	r3, r3, #26
 800379e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037a2:	e015      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x40c>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e003      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	069b      	lsls	r3, r3, #26
 80037cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x42c>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	3301      	adds	r3, #1
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2101      	movs	r1, #1
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	e017      	b.n	8003820 <HAL_ADC_ConfigChannel+0x45c>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	61bb      	str	r3, [r7, #24]
  return result;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e003      	b.n	8003814 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	ea42 0103 	orr.w	r1, r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <HAL_ADC_ConfigChannel+0x488>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	3301      	adds	r3, #1
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	3b1e      	subs	r3, #30
 8003844:	051b      	lsls	r3, r3, #20
 8003846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800384a:	e01b      	b.n	8003884 <HAL_ADC_ConfigChannel+0x4c0>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	60fb      	str	r3, [r7, #12]
  return result;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003864:	2320      	movs	r3, #32
 8003866:	e003      	b.n	8003870 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f003 021f 	and.w	r2, r3, #31
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	3b1e      	subs	r3, #30
 800387e:	051b      	lsls	r3, r3, #20
 8003880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003884:	430b      	orrs	r3, r1
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	4619      	mov	r1, r3
 800388c:	f7ff fb20 	bl	8002ed0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f280 80c6 	bge.w	8003a26 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a67      	ldr	r2, [pc, #412]	; (8003a3c <HAL_ADC_ConfigChannel+0x678>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_ADC_ConfigChannel+0x4ea>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	; (8003a40 <HAL_ADC_ConfigChannel+0x67c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x4ee>
 80038ae:	4b65      	ldr	r3, [pc, #404]	; (8003a44 <HAL_ADC_ConfigChannel+0x680>)
 80038b0:	e000      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x4f0>
 80038b2:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <HAL_ADC_ConfigChannel+0x684>)
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fa7d 	bl	8002db4 <LL_ADC_GetCommonPathInternalCh>
 80038ba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a5e      	ldr	r2, [pc, #376]	; (8003a3c <HAL_ADC_ConfigChannel+0x678>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_ADC_ConfigChannel+0x50c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5d      	ldr	r2, [pc, #372]	; (8003a40 <HAL_ADC_ConfigChannel+0x67c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10e      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x52a>
 80038d0:	485a      	ldr	r0, [pc, #360]	; (8003a3c <HAL_ADC_ConfigChannel+0x678>)
 80038d2:	f7ff fb9b 	bl	800300c <LL_ADC_IsEnabled>
 80038d6:	4604      	mov	r4, r0
 80038d8:	4859      	ldr	r0, [pc, #356]	; (8003a40 <HAL_ADC_ConfigChannel+0x67c>)
 80038da:	f7ff fb97 	bl	800300c <LL_ADC_IsEnabled>
 80038de:	4603      	mov	r3, r0
 80038e0:	4323      	orrs	r3, r4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	e008      	b.n	8003900 <HAL_ADC_ConfigChannel+0x53c>
 80038ee:	4857      	ldr	r0, [pc, #348]	; (8003a4c <HAL_ADC_ConfigChannel+0x688>)
 80038f0:	f7ff fb8c 	bl	800300c <LL_ADC_IsEnabled>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d07d      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a51      	ldr	r2, [pc, #324]	; (8003a50 <HAL_ADC_ConfigChannel+0x68c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d130      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x5ac>
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d12b      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a4b      	ldr	r2, [pc, #300]	; (8003a4c <HAL_ADC_ConfigChannel+0x688>)
 800391e:	4293      	cmp	r3, r2
 8003920:	f040 8081 	bne.w	8003a26 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a44      	ldr	r2, [pc, #272]	; (8003a3c <HAL_ADC_ConfigChannel+0x678>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_ADC_ConfigChannel+0x574>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a43      	ldr	r2, [pc, #268]	; (8003a40 <HAL_ADC_ConfigChannel+0x67c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_ADC_ConfigChannel+0x578>
 8003938:	4a42      	ldr	r2, [pc, #264]	; (8003a44 <HAL_ADC_ConfigChannel+0x680>)
 800393a:	e000      	b.n	800393e <HAL_ADC_ConfigChannel+0x57a>
 800393c:	4a42      	ldr	r2, [pc, #264]	; (8003a48 <HAL_ADC_ConfigChannel+0x684>)
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f7ff fa21 	bl	8002d8e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800394c:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HAL_ADC_ConfigChannel+0x690>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	4a41      	ldr	r2, [pc, #260]	; (8003a58 <HAL_ADC_ConfigChannel+0x694>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	099b      	lsrs	r3, r3, #6
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003960:	e002      	b.n	8003968 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	3b01      	subs	r3, #1
 8003966:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f9      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800396e:	e05a      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a39      	ldr	r2, [pc, #228]	; (8003a5c <HAL_ADC_ConfigChannel+0x698>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d11e      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x5f4>
 800397a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d119      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a30      	ldr	r2, [pc, #192]	; (8003a4c <HAL_ADC_ConfigChannel+0x688>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d14b      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <HAL_ADC_ConfigChannel+0x678>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_ADC_ConfigChannel+0x5de>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <HAL_ADC_ConfigChannel+0x67c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x5e2>
 80039a2:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <HAL_ADC_ConfigChannel+0x680>)
 80039a4:	e000      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x5e4>
 80039a6:	4a28      	ldr	r2, [pc, #160]	; (8003a48 <HAL_ADC_ConfigChannel+0x684>)
 80039a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f7ff f9ec 	bl	8002d8e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b6:	e036      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <HAL_ADC_ConfigChannel+0x69c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d131      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x662>
 80039c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d12c      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <HAL_ADC_ConfigChannel+0x688>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d127      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_ADC_ConfigChannel+0x678>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x626>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_ADC_ConfigChannel+0x67c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x62a>
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_ADC_ConfigChannel+0x680>)
 80039ec:	e000      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x62c>
 80039ee:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <HAL_ADC_ConfigChannel+0x684>)
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f7ff f9c8 	bl	8002d8e <LL_ADC_SetCommonPathInternalCh>
 80039fe:	e012      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a12:	e008      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	f043 0220 	orr.w	r2, r3, #32
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3784      	adds	r7, #132	; 0x84
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd90      	pop	{r4, r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40022000 	.word	0x40022000
 8003a40:	40022100 	.word	0x40022100
 8003a44:	40022300 	.word	0x40022300
 8003a48:	58026300 	.word	0x58026300
 8003a4c:	58026000 	.word	0x58026000
 8003a50:	cb840000 	.word	0xcb840000
 8003a54:	24000000 	.word	0x24000000
 8003a58:	053e2d63 	.word	0x053e2d63
 8003a5c:	c7520000 	.word	0xc7520000
 8003a60:	cfb80000 	.word	0xcfb80000

08003a64 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a7a      	ldr	r2, [pc, #488]	; (8003c5c <ADC_ConfigureBoostMode+0x1f8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <ADC_ConfigureBoostMode+0x1c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a79      	ldr	r2, [pc, #484]	; (8003c60 <ADC_ConfigureBoostMode+0x1fc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d109      	bne.n	8003a94 <ADC_ConfigureBoostMode+0x30>
 8003a80:	4b78      	ldr	r3, [pc, #480]	; (8003c64 <ADC_ConfigureBoostMode+0x200>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e008      	b.n	8003aa6 <ADC_ConfigureBoostMode+0x42>
 8003a94:	4b74      	ldr	r3, [pc, #464]	; (8003c68 <ADC_ConfigureBoostMode+0x204>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01c      	beq.n	8003ae4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003aaa:	f003 fe7f 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 8003aae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ab8:	d010      	beq.n	8003adc <ADC_ConfigureBoostMode+0x78>
 8003aba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003abe:	d873      	bhi.n	8003ba8 <ADC_ConfigureBoostMode+0x144>
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d002      	beq.n	8003acc <ADC_ConfigureBoostMode+0x68>
 8003ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aca:	d16d      	bne.n	8003ba8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	60fb      	str	r3, [r7, #12]
        break;
 8003ada:	e068      	b.n	8003bae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	60fb      	str	r3, [r7, #12]
        break;
 8003ae2:	e064      	b.n	8003bae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ae4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	f005 f8c4 	bl	8008c78 <HAL_RCCEx_GetPeriphCLKFreq>
 8003af0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003afa:	d051      	beq.n	8003ba0 <ADC_ConfigureBoostMode+0x13c>
 8003afc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b00:	d854      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x148>
 8003b02:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b06:	d047      	beq.n	8003b98 <ADC_ConfigureBoostMode+0x134>
 8003b08:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b0c:	d84e      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x148>
 8003b0e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b12:	d03d      	beq.n	8003b90 <ADC_ConfigureBoostMode+0x12c>
 8003b14:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b18:	d848      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x148>
 8003b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b1e:	d033      	beq.n	8003b88 <ADC_ConfigureBoostMode+0x124>
 8003b20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b24:	d842      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x148>
 8003b26:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b2a:	d029      	beq.n	8003b80 <ADC_ConfigureBoostMode+0x11c>
 8003b2c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b30:	d83c      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x148>
 8003b32:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b36:	d01a      	beq.n	8003b6e <ADC_ConfigureBoostMode+0x10a>
 8003b38:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b3c:	d836      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x148>
 8003b3e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b42:	d014      	beq.n	8003b6e <ADC_ConfigureBoostMode+0x10a>
 8003b44:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b48:	d830      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x148>
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4e:	d00e      	beq.n	8003b6e <ADC_ConfigureBoostMode+0x10a>
 8003b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b54:	d82a      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x148>
 8003b56:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b5a:	d008      	beq.n	8003b6e <ADC_ConfigureBoostMode+0x10a>
 8003b5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b60:	d824      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x148>
 8003b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b66:	d002      	beq.n	8003b6e <ADC_ConfigureBoostMode+0x10a>
 8003b68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b6c:	d11e      	bne.n	8003bac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	0c9b      	lsrs	r3, r3, #18
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	60fb      	str	r3, [r7, #12]
        break;
 8003b7e:	e016      	b.n	8003bae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	60fb      	str	r3, [r7, #12]
        break;
 8003b86:	e012      	b.n	8003bae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	60fb      	str	r3, [r7, #12]
        break;
 8003b8e:	e00e      	b.n	8003bae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	60fb      	str	r3, [r7, #12]
        break;
 8003b96:	e00a      	b.n	8003bae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	09db      	lsrs	r3, r3, #7
 8003b9c:	60fb      	str	r3, [r7, #12]
        break;
 8003b9e:	e006      	b.n	8003bae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	60fb      	str	r3, [r7, #12]
        break;
 8003ba6:	e002      	b.n	8003bae <ADC_ConfigureBoostMode+0x14a>
        break;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003bac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003bae:	f7ff f8a5 	bl	8002cfc <HAL_GetREVID>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d815      	bhi.n	8003be8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4a2b      	ldr	r2, [pc, #172]	; (8003c6c <ADC_ConfigureBoostMode+0x208>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d908      	bls.n	8003bd6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bd4:	e03e      	b.n	8003c54 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be4:	609a      	str	r2, [r3, #8]
}
 8003be6:	e035      	b.n	8003c54 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <ADC_ConfigureBoostMode+0x20c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d808      	bhi.n	8003c08 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c04:	609a      	str	r2, [r3, #8]
}
 8003c06:	e025      	b.n	8003c54 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <ADC_ConfigureBoostMode+0x210>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d80a      	bhi.n	8003c26 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c22:	609a      	str	r2, [r3, #8]
}
 8003c24:	e016      	b.n	8003c54 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <ADC_ConfigureBoostMode+0x214>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d80a      	bhi.n	8003c44 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c40:	609a      	str	r2, [r3, #8]
}
 8003c42:	e007      	b.n	8003c54 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c52:	609a      	str	r2, [r3, #8]
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	40022100 	.word	0x40022100
 8003c64:	40022300 	.word	0x40022300
 8003c68:	58026300 	.word	0x58026300
 8003c6c:	01312d00 	.word	0x01312d00
 8003c70:	005f5e10 	.word	0x005f5e10
 8003c74:	00bebc20 	.word	0x00bebc20
 8003c78:	017d7840 	.word	0x017d7840

08003c7c <LL_ADC_IsEnabled>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <LL_ADC_IsEnabled+0x18>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <LL_ADC_IsEnabled+0x1a>
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d101      	bne.n	8003cba <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cc8:	b590      	push	{r4, r7, lr}
 8003cca:	b09f      	sub	sp, #124	; 0x7c
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0be      	b.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a5c      	ldr	r2, [pc, #368]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d102      	bne.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d00:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	e001      	b.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e09d      	b.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ffb9 	bl	8003ca2 <LL_ADC_REG_IsConversionOngoing>
 8003d30:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ffb3 	bl	8003ca2 <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d17f      	bne.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d17c      	bne.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a47      	ldr	r2, [pc, #284]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a46      	ldr	r2, [pc, #280]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d5c:	4b45      	ldr	r3, [pc, #276]	; (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d5e:	e000      	b.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d60:	4b45      	ldr	r3, [pc, #276]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d62:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d039      	beq.n	8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a3a      	ldr	r2, [pc, #232]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a38      	ldr	r2, [pc, #224]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10e      	bne.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d92:	4836      	ldr	r0, [pc, #216]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d94:	f7ff ff72 	bl	8003c7c <LL_ADC_IsEnabled>
 8003d98:	4604      	mov	r4, r0
 8003d9a:	4835      	ldr	r0, [pc, #212]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d9c:	f7ff ff6e 	bl	8003c7c <LL_ADC_IsEnabled>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4323      	orrs	r3, r4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e008      	b.n	8003dc2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003db0:	4832      	ldr	r0, [pc, #200]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003db2:	f7ff ff63 	bl	8003c7c <LL_ADC_IsEnabled>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d047      	beq.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	6811      	ldr	r1, [r2, #0]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	6892      	ldr	r2, [r2, #8]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ddc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dde:	e03a      	b.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10e      	bne.n	8003e1e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e00:	481a      	ldr	r0, [pc, #104]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e02:	f7ff ff3b 	bl	8003c7c <LL_ADC_IsEnabled>
 8003e06:	4604      	mov	r4, r0
 8003e08:	4819      	ldr	r0, [pc, #100]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e0a:	f7ff ff37 	bl	8003c7c <LL_ADC_IsEnabled>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4323      	orrs	r3, r4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf0c      	ite	eq
 8003e16:	2301      	moveq	r3, #1
 8003e18:	2300      	movne	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	e008      	b.n	8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e1e:	4817      	ldr	r0, [pc, #92]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e20:	f7ff ff2c 	bl	8003c7c <LL_ADC_IsEnabled>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e3e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e40:	e009      	b.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e54:	e000      	b.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e56:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	377c      	adds	r7, #124	; 0x7c
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}
 8003e6c:	40022000 	.word	0x40022000
 8003e70:	40022100 	.word	0x40022100
 8003e74:	40022300 	.word	0x40022300
 8003e78:	58026300 	.word	0x58026300
 8003e7c:	58026000 	.word	0x58026000
 8003e80:	fffff0e0 	.word	0xfffff0e0

08003e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00
 8003ec8:	05fa0000 	.word	0x05fa0000

08003ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 0307 	and.w	r3, r3, #7
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db0a      	blt.n	8003f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	490c      	ldr	r1, [pc, #48]	; (8003f34 <__NVIC_SetPriority+0x4c>)
 8003f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f10:	e00a      	b.n	8003f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4908      	ldr	r1, [pc, #32]	; (8003f38 <__NVIC_SetPriority+0x50>)
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	440b      	add	r3, r1
 8003f26:	761a      	strb	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000e100 	.word	0xe000e100
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	; 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f1c3 0307 	rsb	r3, r3, #7
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf28      	it	cs
 8003f5a:	2304      	movcs	r3, #4
 8003f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3304      	adds	r3, #4
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d902      	bls.n	8003f6c <NVIC_EncodePriority+0x30>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3b03      	subs	r3, #3
 8003f6a:	e000      	b.n	8003f6e <NVIC_EncodePriority+0x32>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	401a      	ands	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f84:	f04f 31ff 	mov.w	r1, #4294967295
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	43d9      	mvns	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f94:	4313      	orrs	r3, r2
         );
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3724      	adds	r7, #36	; 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb4:	d301      	bcc.n	8003fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00f      	b.n	8003fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <SysTick_Config+0x40>)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fc2:	210f      	movs	r1, #15
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f7ff ff8e 	bl	8003ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <SysTick_Config+0x40>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <SysTick_Config+0x40>)
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	e000e010 	.word	0xe000e010

08003fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff47 	bl	8003e84 <__NVIC_SetPriorityGrouping>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	4603      	mov	r3, r0
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800400c:	f7ff ff5e 	bl	8003ecc <__NVIC_GetPriorityGrouping>
 8004010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	6978      	ldr	r0, [r7, #20]
 8004018:	f7ff ff90 	bl	8003f3c <NVIC_EncodePriority>
 800401c:	4602      	mov	r2, r0
 800401e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ff5f 	bl	8003ee8 <__NVIC_SetPriority>
}
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff ffb2 	bl	8003fa4 <SysTick_Config>
 8004040:	4603      	mov	r3, r0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0cf      	b.n	80041fe <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2223      	movs	r2, #35	; 0x23
 800406c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fd fd0b 	bl	8001a8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004076:	4b64      	ldr	r3, [pc, #400]	; (8004208 <HAL_ETH_Init+0x1bc>)
 8004078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800407c:	4a62      	ldr	r2, [pc, #392]	; (8004208 <HAL_ETH_Init+0x1bc>)
 800407e:	f043 0302 	orr.w	r3, r3, #2
 8004082:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004086:	4b60      	ldr	r3, [pc, #384]	; (8004208 <HAL_ETH_Init+0x1bc>)
 8004088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7a1b      	ldrb	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d103      	bne.n	80040a4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800409c:	2000      	movs	r0, #0
 800409e:	f7fe fe39 	bl	8002d14 <HAL_SYSCFG_ETHInterfaceSelect>
 80040a2:	e003      	b.n	80040ac <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80040a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80040a8:	f7fe fe34 	bl	8002d14 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80040ac:	4b57      	ldr	r3, [pc, #348]	; (800420c <HAL_ETH_Init+0x1c0>)
 80040ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040c8:	f7fe fde8 	bl	8002c9c <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040ce:	e011      	b.n	80040f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80040d0:	f7fe fde4 	bl	8002c9c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040de:	d909      	bls.n	80040f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2204      	movs	r2, #4
 80040e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	22e0      	movs	r2, #224	; 0xe0
 80040ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e084      	b.n	80041fe <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e4      	bne.n	80040d0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f886 	bl	8004218 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800410c:	f003 fb4e 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 8004110:	4603      	mov	r3, r0
 8004112:	4a3f      	ldr	r2, [pc, #252]	; (8004210 <HAL_ETH_Init+0x1c4>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	0c9a      	lsrs	r2, r3, #18
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3a01      	subs	r2, #1
 8004120:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fa71 	bl	800460c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004132:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004136:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004142:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004146:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	22e0      	movs	r2, #224	; 0xe0
 8004162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e049      	b.n	80041fe <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004172:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004176:	4b27      	ldr	r3, [pc, #156]	; (8004214 <HAL_ETH_Init+0x1c8>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6952      	ldr	r2, [r2, #20]
 800417e:	0051      	lsls	r1, r2, #1
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	430b      	orrs	r3, r1
 8004186:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800418a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fad9 	bl	8004746 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fb1f 	bl	80047d8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	3305      	adds	r3, #5
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	021a      	lsls	r2, r3, #8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	3304      	adds	r3, #4
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	4619      	mov	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	3303      	adds	r3, #3
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	061a      	lsls	r2, r3, #24
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	3302      	adds	r3, #2
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	3301      	adds	r3, #1
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041e6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2210      	movs	r2, #16
 80041f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	58024400 	.word	0x58024400
 800420c:	58000400 	.word	0x58000400
 8004210:	431bde83 	.word	0x431bde83
 8004214:	ffff8001 	.word	0xffff8001

08004218 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004228:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004230:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004232:	f003 fabb 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 8004236:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d908      	bls.n	8004252 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d804      	bhi.n	8004252 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e027      	b.n	80042a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d908      	bls.n	800426c <HAL_ETH_SetMDIOClockRange+0x54>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4a17      	ldr	r2, [pc, #92]	; (80042bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d204      	bcs.n	800426c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e01a      	b.n	80042a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a13      	ldr	r2, [pc, #76]	; (80042bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d303      	bcc.n	800427c <HAL_ETH_SetMDIOClockRange+0x64>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d911      	bls.n	80042a0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d908      	bls.n	8004296 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d804      	bhi.n	8004296 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e005      	b.n	80042a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e000      	b.n	80042a2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80042a0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	01312cff 	.word	0x01312cff
 80042b8:	02160ebf 	.word	0x02160ebf
 80042bc:	03938700 	.word	0x03938700
 80042c0:	05f5e0ff 	.word	0x05f5e0ff
 80042c4:	08f0d17f 	.word	0x08f0d17f

080042c8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80042da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	791b      	ldrb	r3, [r3, #4]
 80042e0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80042e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	7b1b      	ldrb	r3, [r3, #12]
 80042e8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	7b5b      	ldrb	r3, [r3, #13]
 80042f0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	7b9b      	ldrb	r3, [r3, #14]
 80042f8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	7bdb      	ldrb	r3, [r3, #15]
 8004300:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004302:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	7c12      	ldrb	r2, [r2, #16]
 8004308:	2a00      	cmp	r2, #0
 800430a:	d102      	bne.n	8004312 <ETH_SetMACConfig+0x4a>
 800430c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004310:	e000      	b.n	8004314 <ETH_SetMACConfig+0x4c>
 8004312:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004314:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	7c52      	ldrb	r2, [r2, #17]
 800431a:	2a00      	cmp	r2, #0
 800431c:	d102      	bne.n	8004324 <ETH_SetMACConfig+0x5c>
 800431e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004322:	e000      	b.n	8004326 <ETH_SetMACConfig+0x5e>
 8004324:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004326:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	7c9b      	ldrb	r3, [r3, #18]
 800432c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800432e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004334:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800433a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	7f1b      	ldrb	r3, [r3, #28]
 8004340:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004342:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	7f5b      	ldrb	r3, [r3, #29]
 8004348:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800434a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	7f92      	ldrb	r2, [r2, #30]
 8004350:	2a00      	cmp	r2, #0
 8004352:	d102      	bne.n	800435a <ETH_SetMACConfig+0x92>
 8004354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004358:	e000      	b.n	800435c <ETH_SetMACConfig+0x94>
 800435a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800435c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	7fdb      	ldrb	r3, [r3, #31]
 8004362:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004364:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	f892 2020 	ldrb.w	r2, [r2, #32]
 800436c:	2a00      	cmp	r2, #0
 800436e:	d102      	bne.n	8004376 <ETH_SetMACConfig+0xae>
 8004370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004374:	e000      	b.n	8004378 <ETH_SetMACConfig+0xb0>
 8004376:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004378:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800437e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004386:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004388:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b56      	ldr	r3, [pc, #344]	; (80044f4 <ETH_SetMACConfig+0x22c>)
 800439a:	4013      	ands	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043c6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80043d0:	2a00      	cmp	r2, #0
 80043d2:	d102      	bne.n	80043da <ETH_SetMACConfig+0x112>
 80043d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043d8:	e000      	b.n	80043dc <ETH_SetMACConfig+0x114>
 80043da:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043dc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <ETH_SetMACConfig+0x230>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	68f9      	ldr	r1, [r7, #12]
 80043f6:	430b      	orrs	r3, r1
 80043f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004400:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <ETH_SetMACConfig+0x234>)
 8004412:	4013      	ands	r3, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	68f9      	ldr	r1, [r7, #12]
 800441a:	430b      	orrs	r3, r1
 800441c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004424:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800442a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004432:	2a00      	cmp	r2, #0
 8004434:	d101      	bne.n	800443a <ETH_SetMACConfig+0x172>
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	e000      	b.n	800443c <ETH_SetMACConfig+0x174>
 800443a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800443c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800444e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004452:	4013      	ands	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	68f9      	ldr	r1, [r7, #12]
 800445a:	430b      	orrs	r3, r1
 800445c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004464:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800446c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f023 0103 	bic.w	r1, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	430a      	orrs	r2, r1
 8004486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004492:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80044ae:	2a00      	cmp	r2, #0
 80044b0:	d101      	bne.n	80044b6 <ETH_SetMACConfig+0x1ee>
 80044b2:	2240      	movs	r2, #64	; 0x40
 80044b4:	e000      	b.n	80044b8 <ETH_SetMACConfig+0x1f0>
 80044b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80044b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80044c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80044ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80044d8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	00048083 	.word	0x00048083
 80044f8:	c0f88000 	.word	0xc0f88000
 80044fc:	fffffef0 	.word	0xfffffef0

08004500 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b38      	ldr	r3, [pc, #224]	; (80045f8 <ETH_SetDMAConfig+0xf8>)
 8004516:	4013      	ands	r3, r2
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	6811      	ldr	r1, [r2, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	430b      	orrs	r3, r1
 8004522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004526:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	791b      	ldrb	r3, [r3, #4]
 800452c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004532:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	7b1b      	ldrb	r3, [r3, #12]
 8004538:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <ETH_SetDMAConfig+0xfc>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	68f9      	ldr	r1, [r7, #12]
 8004552:	430b      	orrs	r3, r1
 8004554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004558:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	7b5b      	ldrb	r3, [r3, #13]
 800455e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004570:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004574:	4b22      	ldr	r3, [pc, #136]	; (8004600 <ETH_SetDMAConfig+0x100>)
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	430b      	orrs	r3, r1
 8004580:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004584:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	7d1b      	ldrb	r3, [r3, #20]
 8004590:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004592:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	7f5b      	ldrb	r3, [r3, #29]
 8004598:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <ETH_SetDMAConfig+0x104>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	430b      	orrs	r3, r1
 80045b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ba:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	7f1b      	ldrb	r3, [r3, #28]
 80045c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <ETH_SetDMAConfig+0x108>)
 80045da:	4013      	ands	r3, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	68f9      	ldr	r1, [r7, #12]
 80045e2:	430b      	orrs	r3, r1
 80045e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	ffff87fd 	.word	0xffff87fd
 80045fc:	ffff2ffe 	.word	0xffff2ffe
 8004600:	fffec000 	.word	0xfffec000
 8004604:	ffc0efef 	.word	0xffc0efef
 8004608:	7fc0ffff 	.word	0x7fc0ffff

0800460c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b0a4      	sub	sp, #144	; 0x90
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800461a:	2300      	movs	r3, #0
 800461c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800461e:	2300      	movs	r3, #0
 8004620:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004624:	2300      	movs	r3, #0
 8004626:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004654:	2300      	movs	r3, #0
 8004656:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004664:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004668:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800466a:	2300      	movs	r3, #0
 800466c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004670:	2300      	movs	r3, #0
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800467a:	2300      	movs	r3, #0
 800467c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004686:	2300      	movs	r3, #0
 8004688:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800468a:	2300      	movs	r3, #0
 800468c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800468e:	2300      	movs	r3, #0
 8004690:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004692:	2300      	movs	r3, #0
 8004694:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004698:	2300      	movs	r3, #0
 800469a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80046a4:	2320      	movs	r3, #32
 80046a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80046b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80046bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046c0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80046c8:	2302      	movs	r3, #2
 80046ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80046da:	2300      	movs	r3, #0
 80046dc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80046e6:	2300      	movs	r3, #0
 80046e8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80046f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff fde6 	bl	80042c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80046fc:	2301      	movs	r3, #1
 80046fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004700:	2301      	movs	r3, #1
 8004702:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004704:	2300      	movs	r3, #0
 8004706:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800470e:	2300      	movs	r3, #0
 8004710:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004712:	2300      	movs	r3, #0
 8004714:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004716:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800471a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800471c:	2300      	movs	r3, #0
 800471e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004720:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004724:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800472c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004732:	f107 0308 	add.w	r3, r7, #8
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff fee1 	bl	8004500 <ETH_SetDMAConfig>
}
 800473e:	bf00      	nop
 8004740:	3790      	adds	r7, #144	; 0x90
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	e01d      	b.n	8004790 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68d9      	ldr	r1, [r3, #12]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4613      	mov	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	440b      	add	r3, r1
 8004764:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2200      	movs	r2, #0
 8004776:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2200      	movs	r2, #0
 800477c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	3206      	adds	r2, #6
 8004786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d9de      	bls.n	8004754 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a4:	461a      	mov	r2, r3
 80047a6:	2303      	movs	r3, #3
 80047a8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e023      	b.n	800482e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6919      	ldr	r1, [r3, #16]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4613      	mov	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	4413      	add	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	440b      	add	r3, r1
 80047f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2200      	movs	r2, #0
 800480e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2200      	movs	r2, #0
 8004814:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2200      	movs	r2, #0
 800481a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	3212      	adds	r2, #18
 8004824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d9d8      	bls.n	80047e6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485a:	461a      	mov	r2, r3
 800485c:	2303      	movs	r3, #3
 800485e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004882:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b098      	sub	sp, #96	; 0x60
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800489c:	4a84      	ldr	r2, [pc, #528]	; (8004ab0 <HAL_FDCAN_Init+0x21c>)
 800489e:	f107 030c 	add.w	r3, r7, #12
 80048a2:	4611      	mov	r1, r2
 80048a4:	224c      	movs	r2, #76	; 0x4c
 80048a6:	4618      	mov	r0, r3
 80048a8:	f007 ffb0 	bl	800c80c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e1c6      	b.n	8004c44 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a7e      	ldr	r2, [pc, #504]	; (8004ab4 <HAL_FDCAN_Init+0x220>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d106      	bne.n	80048ce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048c8:	461a      	mov	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fd fa02 	bl	8001cec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0210 	bic.w	r2, r2, #16
 80048f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f8:	f7fe f9d0 	bl	8002c9c <HAL_GetTick>
 80048fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048fe:	e014      	b.n	800492a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004900:	f7fe f9cc 	bl	8002c9c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b0a      	cmp	r3, #10
 800490c:	d90d      	bls.n	800492a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004914:	f043 0201 	orr.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2203      	movs	r2, #3
 8004922:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e18c      	b.n	8004c44 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b08      	cmp	r3, #8
 8004936:	d0e3      	beq.n	8004900 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004948:	f7fe f9a8 	bl	8002c9c <HAL_GetTick>
 800494c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800494e:	e014      	b.n	800497a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004950:	f7fe f9a4 	bl	8002c9c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b0a      	cmp	r3, #10
 800495c:	d90d      	bls.n	800497a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004964:	f043 0201 	orr.w	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2203      	movs	r2, #3
 8004972:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e164      	b.n	8004c44 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0e3      	beq.n	8004950 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0202 	orr.w	r2, r2, #2
 8004996:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7c1b      	ldrb	r3, [r3, #16]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d108      	bne.n	80049b2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ae:	619a      	str	r2, [r3, #24]
 80049b0:	e007      	b.n	80049c2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	7c5b      	ldrb	r3, [r3, #17]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d108      	bne.n	80049dc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049d8:	619a      	str	r2, [r3, #24]
 80049da:	e007      	b.n	80049ec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	7c9b      	ldrb	r3, [r3, #18]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d108      	bne.n	8004a06 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a02:	619a      	str	r2, [r3, #24]
 8004a04:	e007      	b.n	8004a16 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a14:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004a3a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0210 	bic.w	r2, r2, #16
 8004a4a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d108      	bne.n	8004a66 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0204 	orr.w	r2, r2, #4
 8004a62:	619a      	str	r2, [r3, #24]
 8004a64:	e030      	b.n	8004ac8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d02c      	beq.n	8004ac8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d020      	beq.n	8004ab8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a84:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0210 	orr.w	r2, r2, #16
 8004a94:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d114      	bne.n	8004ac8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 0220 	orr.w	r2, r2, #32
 8004aac:	619a      	str	r2, [r3, #24]
 8004aae:	e00b      	b.n	8004ac8 <HAL_FDCAN_Init+0x234>
 8004ab0:	0800d1bc 	.word	0x0800d1bc
 8004ab4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0220 	orr.w	r2, r2, #32
 8004ac6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ad8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ae0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004af0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004af2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004afc:	d115      	bne.n	8004b2a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b0c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	3b01      	subs	r3, #1
 8004b14:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b16:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b26:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b28:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b50:	4413      	add	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d011      	beq.n	8004b7a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b5e:	f023 0107 	bic.w	r1, r3, #7
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	3360      	adds	r3, #96	; 0x60
 8004b6a:	443b      	add	r3, r7
 8004b6c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d011      	beq.n	8004ba6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b8a:	f023 0107 	bic.w	r1, r3, #7
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	3360      	adds	r3, #96	; 0x60
 8004b96:	443b      	add	r3, r7
 8004b98:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d012      	beq.n	8004bd4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004bb6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	3360      	adds	r3, #96	; 0x60
 8004bc2:	443b      	add	r3, r7
 8004bc4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bc8:	011a      	lsls	r2, r3, #4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d012      	beq.n	8004c02 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004be4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	3360      	adds	r3, #96	; 0x60
 8004bf0:	443b      	add	r3, r7
 8004bf2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bf6:	021a      	lsls	r2, r3, #8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a11      	ldr	r2, [pc, #68]	; (8004c4c <HAL_FDCAN_Init+0x3b8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d107      	bne.n	8004c1c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f022 0203 	bic.w	r2, r2, #3
 8004c1a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f80b 	bl	8004c50 <FDCAN_CalcultateRamBlockAddresses>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004c40:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3760      	adds	r7, #96	; 0x60
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	4000a000 	.word	0x4000a000

08004c50 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c66:	4ba7      	ldr	r3, [pc, #668]	; (8004f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	0091      	lsls	r1, r2, #2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	430b      	orrs	r3, r1
 8004c74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c80:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	041a      	lsls	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ca6:	4b97      	ldr	r3, [pc, #604]	; (8004f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	0091      	lsls	r1, r2, #2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	041a      	lsls	r2, r3, #16
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004ce8:	4b86      	ldr	r3, [pc, #536]	; (8004f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	0091      	lsls	r1, r2, #2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d02:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	041a      	lsls	r2, r3, #16
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	4413      	add	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d30:	4b74      	ldr	r3, [pc, #464]	; (8004f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	0091      	lsls	r1, r2, #2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d4a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d52:	041a      	lsls	r2, r3, #16
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004d78:	4b62      	ldr	r3, [pc, #392]	; (8004f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	0091      	lsls	r1, r2, #2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	430b      	orrs	r3, r1
 8004d86:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4413      	add	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004da4:	4b57      	ldr	r3, [pc, #348]	; (8004f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	0091      	lsls	r1, r2, #2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	430b      	orrs	r3, r1
 8004db2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dbe:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc6:	041a      	lsls	r2, r3, #16
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	4413      	add	r3, r2
 8004ddc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004de6:	4b47      	ldr	r3, [pc, #284]	; (8004f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	0091      	lsls	r1, r2, #2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	430b      	orrs	r3, r1
 8004df4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e00:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	041a      	lsls	r2, r3, #16
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e1c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	061a      	lsls	r2, r3, #24
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e34:	4b34      	ldr	r3, [pc, #208]	; (8004f08 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004e36:	4413      	add	r3, r2
 8004e38:	009a      	lsls	r2, r3, #2
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	441a      	add	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	441a      	add	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004eca:	fb01 f303 	mul.w	r3, r1, r3
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	4a04      	ldr	r2, [pc, #16]	; (8004f0c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d915      	bls.n	8004f2c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004f00:	e006      	b.n	8004f10 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004f02:	bf00      	nop
 8004f04:	ffff0003 	.word	0xffff0003
 8004f08:	10002b00 	.word	0x10002b00
 8004f0c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2203      	movs	r2, #3
 8004f24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e010      	b.n	8004f4e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e005      	b.n	8004f40 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3f3      	bcc.n	8004f34 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop

08004f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b089      	sub	sp, #36	; 0x24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f6a:	4b89      	ldr	r3, [pc, #548]	; (8005190 <HAL_GPIO_Init+0x234>)
 8004f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f6e:	e194      	b.n	800529a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	2101      	movs	r1, #1
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8186 	beq.w	8005294 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d005      	beq.n	8004fa0 <HAL_GPIO_Init+0x44>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d130      	bne.n	8005002 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	2203      	movs	r2, #3
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	f003 0201 	and.w	r2, r3, #1
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b03      	cmp	r3, #3
 800500c:	d017      	beq.n	800503e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d123      	bne.n	8005092 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	08da      	lsrs	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3208      	adds	r2, #8
 8005052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	220f      	movs	r2, #15
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4313      	orrs	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	08da      	lsrs	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3208      	adds	r2, #8
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	2203      	movs	r2, #3
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43db      	mvns	r3, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4013      	ands	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 0203 	and.w	r2, r3, #3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80e0 	beq.w	8005294 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d4:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <HAL_GPIO_Init+0x238>)
 80050d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050da:	4a2e      	ldr	r2, [pc, #184]	; (8005194 <HAL_GPIO_Init+0x238>)
 80050dc:	f043 0302 	orr.w	r3, r3, #2
 80050e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050e4:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <HAL_GPIO_Init+0x238>)
 80050e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050f2:	4a29      	ldr	r2, [pc, #164]	; (8005198 <HAL_GPIO_Init+0x23c>)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	3302      	adds	r3, #2
 80050fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	220f      	movs	r2, #15
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a20      	ldr	r2, [pc, #128]	; (800519c <HAL_GPIO_Init+0x240>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d052      	beq.n	80051c4 <HAL_GPIO_Init+0x268>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <HAL_GPIO_Init+0x244>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d031      	beq.n	800518a <HAL_GPIO_Init+0x22e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <HAL_GPIO_Init+0x248>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d02b      	beq.n	8005186 <HAL_GPIO_Init+0x22a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_GPIO_Init+0x24c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d025      	beq.n	8005182 <HAL_GPIO_Init+0x226>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <HAL_GPIO_Init+0x250>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01f      	beq.n	800517e <HAL_GPIO_Init+0x222>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <HAL_GPIO_Init+0x254>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d019      	beq.n	800517a <HAL_GPIO_Init+0x21e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <HAL_GPIO_Init+0x258>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_GPIO_Init+0x21a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <HAL_GPIO_Init+0x25c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00d      	beq.n	8005172 <HAL_GPIO_Init+0x216>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_GPIO_Init+0x260>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <HAL_GPIO_Init+0x212>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <HAL_GPIO_Init+0x264>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d101      	bne.n	800516a <HAL_GPIO_Init+0x20e>
 8005166:	2309      	movs	r3, #9
 8005168:	e02d      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800516a:	230a      	movs	r3, #10
 800516c:	e02b      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800516e:	2308      	movs	r3, #8
 8005170:	e029      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 8005172:	2307      	movs	r3, #7
 8005174:	e027      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 8005176:	2306      	movs	r3, #6
 8005178:	e025      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800517a:	2305      	movs	r3, #5
 800517c:	e023      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800517e:	2304      	movs	r3, #4
 8005180:	e021      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 8005182:	2303      	movs	r3, #3
 8005184:	e01f      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 8005186:	2302      	movs	r3, #2
 8005188:	e01d      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800518a:	2301      	movs	r3, #1
 800518c:	e01b      	b.n	80051c6 <HAL_GPIO_Init+0x26a>
 800518e:	bf00      	nop
 8005190:	58000080 	.word	0x58000080
 8005194:	58024400 	.word	0x58024400
 8005198:	58000400 	.word	0x58000400
 800519c:	58020000 	.word	0x58020000
 80051a0:	58020400 	.word	0x58020400
 80051a4:	58020800 	.word	0x58020800
 80051a8:	58020c00 	.word	0x58020c00
 80051ac:	58021000 	.word	0x58021000
 80051b0:	58021400 	.word	0x58021400
 80051b4:	58021800 	.word	0x58021800
 80051b8:	58021c00 	.word	0x58021c00
 80051bc:	58022000 	.word	0x58022000
 80051c0:	58022400 	.word	0x58022400
 80051c4:	2300      	movs	r3, #0
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	f002 0203 	and.w	r2, r2, #3
 80051cc:	0092      	lsls	r2, r2, #2
 80051ce:	4093      	lsls	r3, r2
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051d6:	4938      	ldr	r1, [pc, #224]	; (80052b8 <HAL_GPIO_Init+0x35c>)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	3302      	adds	r3, #2
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800520a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	43db      	mvns	r3, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4013      	ands	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	3301      	adds	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f ae63 	bne.w	8004f70 <HAL_GPIO_Init+0x14>
  }
}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	3724      	adds	r7, #36	; 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	58000400 	.word	0x58000400

080052bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	e001      	b.n	80052de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	807b      	strh	r3, [r7, #2]
 80052f8:	4613      	mov	r3, r2
 80052fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052fc:	787b      	ldrb	r3, [r7, #1]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005302:	887a      	ldrh	r2, [r7, #2]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005308:	e003      	b.n	8005312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	041a      	lsls	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	619a      	str	r2, [r3, #24]
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005330:	887a      	ldrh	r2, [r7, #2]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4013      	ands	r3, r2
 8005336:	041a      	lsls	r2, r3, #16
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	43d9      	mvns	r1, r3
 800533c:	887b      	ldrh	r3, [r7, #2]
 800533e:	400b      	ands	r3, r1
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	619a      	str	r2, [r3, #24]
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e07f      	b.n	8005466 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fc fd86 	bl	8001e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	; 0x24
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d107      	bne.n	80053ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ca:	609a      	str	r2, [r3, #8]
 80053cc:	e006      	b.n	80053dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d104      	bne.n	80053ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6859      	ldr	r1, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <HAL_I2C_Init+0x11c>)
 80053fa:	430b      	orrs	r3, r1
 80053fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800540c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69d9      	ldr	r1, [r3, #28]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1a      	ldr	r2, [r3, #32]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	02008000 	.word	0x02008000

08005474 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	4608      	mov	r0, r1
 800547e:	4611      	mov	r1, r2
 8005480:	461a      	mov	r2, r3
 8005482:	4603      	mov	r3, r0
 8005484:	817b      	strh	r3, [r7, #10]
 8005486:	460b      	mov	r3, r1
 8005488:	813b      	strh	r3, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b20      	cmp	r3, #32
 8005498:	f040 80fd 	bne.w	8005696 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_I2C_Mem_Read+0x34>
 80054a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0f1      	b.n	8005698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_I2C_Mem_Read+0x4e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e0ea      	b.n	8005698 <HAL_I2C_Mem_Read+0x224>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054ca:	f7fd fbe7 	bl	8002c9c <HAL_GetTick>
 80054ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2319      	movs	r3, #25
 80054d6:	2201      	movs	r2, #1
 80054d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fa63 	bl	80059a8 <I2C_WaitOnFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0d5      	b.n	8005698 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2222      	movs	r2, #34	; 0x22
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2240      	movs	r2, #64	; 0x40
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800550c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005514:	88f8      	ldrh	r0, [r7, #6]
 8005516:	893a      	ldrh	r2, [r7, #8]
 8005518:	8979      	ldrh	r1, [r7, #10]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	4603      	mov	r3, r0
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f9c7 	bl	80058b8 <I2C_RequestMemoryRead>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0ad      	b.n	8005698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	2bff      	cmp	r3, #255	; 0xff
 8005544:	d90e      	bls.n	8005564 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005550:	b2da      	uxtb	r2, r3
 8005552:	8979      	ldrh	r1, [r7, #10]
 8005554:	4b52      	ldr	r3, [pc, #328]	; (80056a0 <HAL_I2C_Mem_Read+0x22c>)
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fbdd 	bl	8005d1c <I2C_TransferConfig>
 8005562:	e00f      	b.n	8005584 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	b2da      	uxtb	r2, r3
 8005574:	8979      	ldrh	r1, [r7, #10]
 8005576:	4b4a      	ldr	r3, [pc, #296]	; (80056a0 <HAL_I2C_Mem_Read+0x22c>)
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fbcc 	bl	8005d1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	2200      	movs	r2, #0
 800558c:	2104      	movs	r1, #4
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 fa0a 	bl	80059a8 <I2C_WaitOnFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e07c      	b.n	8005698 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d034      	beq.n	8005644 <HAL_I2C_Mem_Read+0x1d0>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d130      	bne.n	8005644 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	2200      	movs	r2, #0
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f9db 	bl	80059a8 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e04d      	b.n	8005698 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2bff      	cmp	r3, #255	; 0xff
 8005604:	d90e      	bls.n	8005624 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	22ff      	movs	r2, #255	; 0xff
 800560a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005610:	b2da      	uxtb	r2, r3
 8005612:	8979      	ldrh	r1, [r7, #10]
 8005614:	2300      	movs	r3, #0
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fb7d 	bl	8005d1c <I2C_TransferConfig>
 8005622:	e00f      	b.n	8005644 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	b2da      	uxtb	r2, r3
 8005634:	8979      	ldrh	r1, [r7, #10]
 8005636:	2300      	movs	r3, #0
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fb6c 	bl	8005d1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d19a      	bne.n	8005584 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fa3e 	bl	8005ad4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e01a      	b.n	8005698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2220      	movs	r2, #32
 8005668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6859      	ldr	r1, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_I2C_Mem_Read+0x230>)
 8005676:	400b      	ands	r3, r1
 8005678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e000      	b.n	8005698 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005696:	2302      	movs	r3, #2
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	80002400 	.word	0x80002400
 80056a4:	fe00e800 	.word	0xfe00e800

080056a8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	460b      	mov	r3, r1
 80056b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	f040 80ef 	bne.w	80058a8 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d8:	d101      	bne.n	80056de <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
 80056dc:	e0e5      	b.n	80058aa <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_I2C_IsDeviceReady+0x44>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e0de      	b.n	80058aa <HAL_I2C_IsDeviceReady+0x202>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2224      	movs	r2, #36	; 0x24
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d105      	bne.n	8005716 <HAL_I2C_IsDeviceReady+0x6e>
 800570a:	897b      	ldrh	r3, [r7, #10]
 800570c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005710:	4b68      	ldr	r3, [pc, #416]	; (80058b4 <HAL_I2C_IsDeviceReady+0x20c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	e004      	b.n	8005720 <HAL_I2C_IsDeviceReady+0x78>
 8005716:	897b      	ldrh	r3, [r7, #10]
 8005718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800571c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005726:	f7fd fab9 	bl	8002c9c <HAL_GetTick>
 800572a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b20      	cmp	r3, #32
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b10      	cmp	r3, #16
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005758:	e034      	b.n	80057c4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d01a      	beq.n	8005798 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005762:	f7fd fa9b 	bl	8002c9c <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d302      	bcc.n	8005778 <HAL_I2C_IsDeviceReady+0xd0>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10f      	bne.n	8005798 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e088      	b.n	80058aa <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80057c4:	7ffb      	ldrb	r3, [r7, #31]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <HAL_I2C_IsDeviceReady+0x128>
 80057ca:	7fbb      	ldrb	r3, [r7, #30]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0c4      	beq.n	800575a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d01a      	beq.n	8005814 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2120      	movs	r1, #32
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f8dd 	bl	80059a8 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e058      	b.n	80058aa <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2220      	movs	r2, #32
 80057fe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	e04a      	b.n	80058aa <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	2120      	movs	r1, #32
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f8c2 	bl	80059a8 <I2C_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e03d      	b.n	80058aa <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2210      	movs	r2, #16
 8005834:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2220      	movs	r2, #32
 800583c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d118      	bne.n	8005878 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005854:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2200      	movs	r2, #0
 800585e:	2120      	movs	r1, #32
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f8a1 	bl	80059a8 <I2C_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e01c      	b.n	80058aa <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2220      	movs	r2, #32
 8005876:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	3301      	adds	r3, #1
 800587c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	f63f af3d 	bhi.w	8005702 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005894:	f043 0220 	orr.w	r2, r3, #32
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	02002000 	.word	0x02002000

080058b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	460b      	mov	r3, r1
 80058cc:	813b      	strh	r3, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	8979      	ldrh	r1, [r7, #10]
 80058d8:	4b20      	ldr	r3, [pc, #128]	; (800595c <I2C_RequestMemoryRead+0xa4>)
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2300      	movs	r3, #0
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fa1c 	bl	8005d1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	69b9      	ldr	r1, [r7, #24]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f8ac 	bl	8005a46 <I2C_WaitOnTXISFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e02c      	b.n	8005952 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d105      	bne.n	800590a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058fe:	893b      	ldrh	r3, [r7, #8]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
 8005908:	e015      	b.n	8005936 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800590a:	893b      	ldrh	r3, [r7, #8]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	b29b      	uxth	r3, r3
 8005910:	b2da      	uxtb	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	69b9      	ldr	r1, [r7, #24]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f892 	bl	8005a46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e012      	b.n	8005952 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800592c:	893b      	ldrh	r3, [r7, #8]
 800592e:	b2da      	uxtb	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2200      	movs	r2, #0
 800593e:	2140      	movs	r1, #64	; 0x40
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f831 	bl	80059a8 <I2C_WaitOnFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	80002000 	.word	0x80002000

08005960 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b02      	cmp	r3, #2
 8005974:	d103      	bne.n	800597e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2200      	movs	r2, #0
 800597c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d007      	beq.n	800599c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	619a      	str	r2, [r3, #24]
  }
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	4613      	mov	r3, r2
 80059b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b8:	e031      	b.n	8005a1e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d02d      	beq.n	8005a1e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c2:	f7fd f96b 	bl	8002c9c <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d302      	bcc.n	80059d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d122      	bne.n	8005a1e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4013      	ands	r3, r2
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	bf0c      	ite	eq
 80059e8:	2301      	moveq	r3, #1
 80059ea:	2300      	movne	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d113      	bne.n	8005a1e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e00f      	b.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	2300      	movne	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d0be      	beq.n	80059ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a52:	e033      	b.n	8005abc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f87f 	bl	8005b5c <I2C_IsErrorOccurred>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e031      	b.n	8005acc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d025      	beq.n	8005abc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a70:	f7fd f914 	bl	8002c9c <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d11a      	bne.n	8005abc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d013      	beq.n	8005abc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	f043 0220 	orr.w	r2, r3, #32
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e007      	b.n	8005acc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d1c4      	bne.n	8005a54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ae0:	e02f      	b.n	8005b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f838 	bl	8005b5c <I2C_IsErrorOccurred>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e02d      	b.n	8005b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af6:	f7fd f8d1 	bl	8002c9c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d11a      	bne.n	8005b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d013      	beq.n	8005b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	f043 0220 	orr.w	r2, r3, #32
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e007      	b.n	8005b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d1c8      	bne.n	8005ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d068      	beq.n	8005c5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2210      	movs	r2, #16
 8005b8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b90:	e049      	b.n	8005c26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d045      	beq.n	8005c26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b9a:	f7fd f87f 	bl	8002c9c <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <I2C_IsErrorOccurred+0x54>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d13a      	bne.n	8005c26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd2:	d121      	bne.n	8005c18 <I2C_IsErrorOccurred+0xbc>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bda:	d01d      	beq.n	8005c18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005bdc:	7cfb      	ldrb	r3, [r7, #19]
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d01a      	beq.n	8005c18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005bf2:	f7fd f853 	bl	8002c9c <HAL_GetTick>
 8005bf6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bf8:	e00e      	b.n	8005c18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005bfa:	f7fd f84f 	bl	8002c9c <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b19      	cmp	r3, #25
 8005c06:	d907      	bls.n	8005c18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	f043 0320 	orr.w	r3, r3, #32
 8005c0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005c16:	e006      	b.n	8005c26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d1e9      	bne.n	8005bfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d003      	beq.n	8005c3c <I2C_IsErrorOccurred+0xe0>
 8005c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0aa      	beq.n	8005b92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00b      	beq.n	8005ca6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	f043 0308 	orr.w	r3, r3, #8
 8005c94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	f043 0302 	orr.w	r3, r3, #2
 8005cb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01c      	beq.n	8005d0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff fe45 	bl	8005960 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6859      	ldr	r1, [r3, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <I2C_IsErrorOccurred+0x1bc>)
 8005ce2:	400b      	ands	r3, r1
 8005ce4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	431a      	orrs	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3728      	adds	r7, #40	; 0x28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	fe00e800 	.word	0xfe00e800

08005d1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	607b      	str	r3, [r7, #4]
 8005d26:	460b      	mov	r3, r1
 8005d28:	817b      	strh	r3, [r7, #10]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d2e:	897b      	ldrh	r3, [r7, #10]
 8005d30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d34:	7a7b      	ldrb	r3, [r7, #9]
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	0d5b      	lsrs	r3, r3, #21
 8005d56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d5a:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <I2C_TransferConfig+0x60>)
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	ea02 0103 	and.w	r1, r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	03ff63ff 	.word	0x03ff63ff

08005d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d138      	bne.n	8005e08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e032      	b.n	8005e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2224      	movs	r2, #36	; 0x24
 8005db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6819      	ldr	r1, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
  }
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d139      	bne.n	8005ea0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e033      	b.n	8005ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2224      	movs	r2, #36	; 0x24
 8005e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e000      	b.n	8005ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ea0:	2302      	movs	r3, #2
  }
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e0bf      	b.n	8006042 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fc f842 	bl	8001f60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005ef2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6999      	ldr	r1, [r3, #24]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f08:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6899      	ldr	r1, [r3, #8]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b4a      	ldr	r3, [pc, #296]	; (800604c <HAL_LTDC_Init+0x19c>)
 8005f24:	400b      	ands	r3, r1
 8005f26:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6899      	ldr	r1, [r3, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68d9      	ldr	r1, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	4b3e      	ldr	r3, [pc, #248]	; (800604c <HAL_LTDC_Init+0x19c>)
 8005f52:	400b      	ands	r3, r1
 8005f54:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	041b      	lsls	r3, r3, #16
 8005f5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68d9      	ldr	r1, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6919      	ldr	r1, [r3, #16]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4b33      	ldr	r3, [pc, #204]	; (800604c <HAL_LTDC_Init+0x19c>)
 8005f80:	400b      	ands	r3, r1
 8005f82:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	041b      	lsls	r3, r3, #16
 8005f8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6919      	ldr	r1, [r3, #16]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6959      	ldr	r1, [r3, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b27      	ldr	r3, [pc, #156]	; (800604c <HAL_LTDC_Init+0x19c>)
 8005fae:	400b      	ands	r3, r1
 8005fb0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6959      	ldr	r1, [r3, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0206 	orr.w	r2, r2, #6
 800601e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	f000f800 	.word	0xf000f800

08006050 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006050:	b5b0      	push	{r4, r5, r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_LTDC_ConfigLayer+0x1a>
 8006066:	2302      	movs	r3, #2
 8006068:	e02c      	b.n	80060c4 <HAL_LTDC_ConfigLayer+0x74>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2134      	movs	r1, #52	; 0x34
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	4413      	add	r3, r2
 8006086:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4614      	mov	r4, r2
 800608e:	461d      	mov	r5, r3
 8006090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800609a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f811 	bl	80060cc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2201      	movs	r2, #1
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bdb0      	pop	{r4, r5, r7, pc}

080060cc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b089      	sub	sp, #36	; 0x24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	0c1b      	lsrs	r3, r3, #16
 80060e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e8:	4413      	add	r3, r2
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	01db      	lsls	r3, r3, #7
 80060f8:	4413      	add	r3, r2
 80060fa:	3384      	adds	r3, #132	; 0x84
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	4611      	mov	r1, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	01d2      	lsls	r2, r2, #7
 8006108:	440a      	add	r2, r1
 800610a:	3284      	adds	r2, #132	; 0x84
 800610c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006110:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	0c1b      	lsrs	r3, r3, #16
 800611e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006122:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006124:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	01db      	lsls	r3, r3, #7
 8006130:	440b      	add	r3, r1
 8006132:	3384      	adds	r3, #132	; 0x84
 8006134:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800613a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800614a:	4413      	add	r3, r2
 800614c:	041b      	lsls	r3, r3, #16
 800614e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	01db      	lsls	r3, r3, #7
 800615a:	4413      	add	r3, r2
 800615c:	3384      	adds	r3, #132	; 0x84
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	4611      	mov	r1, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	01d2      	lsls	r2, r2, #7
 800616a:	440a      	add	r2, r1
 800616c:	3284      	adds	r2, #132	; 0x84
 800616e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006172:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006182:	4413      	add	r3, r2
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4619      	mov	r1, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	01db      	lsls	r3, r3, #7
 8006190:	440b      	add	r3, r1
 8006192:	3384      	adds	r3, #132	; 0x84
 8006194:	4619      	mov	r1, r3
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4313      	orrs	r3, r2
 800619a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	01db      	lsls	r3, r3, #7
 80061a6:	4413      	add	r3, r2
 80061a8:	3384      	adds	r3, #132	; 0x84
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	4611      	mov	r1, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	01d2      	lsls	r2, r2, #7
 80061b6:	440a      	add	r2, r1
 80061b8:	3284      	adds	r2, #132	; 0x84
 80061ba:	f023 0307 	bic.w	r3, r3, #7
 80061be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	01db      	lsls	r3, r3, #7
 80061ca:	4413      	add	r3, r2
 80061cc:	3384      	adds	r3, #132	; 0x84
 80061ce:	461a      	mov	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061e6:	041b      	lsls	r3, r3, #16
 80061e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	061b      	lsls	r3, r3, #24
 80061f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	01db      	lsls	r3, r3, #7
 80061fc:	4413      	add	r3, r2
 80061fe:	3384      	adds	r3, #132	; 0x84
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	01db      	lsls	r3, r3, #7
 800620c:	4413      	add	r3, r2
 800620e:	3384      	adds	r3, #132	; 0x84
 8006210:	461a      	mov	r2, r3
 8006212:	2300      	movs	r3, #0
 8006214:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800621c:	461a      	mov	r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	431a      	orrs	r2, r3
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	431a      	orrs	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4619      	mov	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	01db      	lsls	r3, r3, #7
 8006230:	440b      	add	r3, r1
 8006232:	3384      	adds	r3, #132	; 0x84
 8006234:	4619      	mov	r1, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	01db      	lsls	r3, r3, #7
 8006246:	4413      	add	r3, r2
 8006248:	3384      	adds	r3, #132	; 0x84
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	4611      	mov	r1, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	01d2      	lsls	r2, r2, #7
 8006256:	440a      	add	r2, r1
 8006258:	3284      	adds	r2, #132	; 0x84
 800625a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800625e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	01db      	lsls	r3, r3, #7
 800626a:	4413      	add	r3, r2
 800626c:	3384      	adds	r3, #132	; 0x84
 800626e:	461a      	mov	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	01db      	lsls	r3, r3, #7
 8006280:	4413      	add	r3, r2
 8006282:	3384      	adds	r3, #132	; 0x84
 8006284:	69da      	ldr	r2, [r3, #28]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4619      	mov	r1, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	01db      	lsls	r3, r3, #7
 8006290:	440b      	add	r3, r1
 8006292:	3384      	adds	r3, #132	; 0x84
 8006294:	4619      	mov	r1, r3
 8006296:	4b58      	ldr	r3, [pc, #352]	; (80063f8 <LTDC_SetConfig+0x32c>)
 8006298:	4013      	ands	r3, r2
 800629a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	68f9      	ldr	r1, [r7, #12]
 80062a6:	6809      	ldr	r1, [r1, #0]
 80062a8:	4608      	mov	r0, r1
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	01c9      	lsls	r1, r1, #7
 80062ae:	4401      	add	r1, r0
 80062b0:	3184      	adds	r1, #132	; 0x84
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	01db      	lsls	r3, r3, #7
 80062c0:	4413      	add	r3, r2
 80062c2:	3384      	adds	r3, #132	; 0x84
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	01db      	lsls	r3, r3, #7
 80062d0:	4413      	add	r3, r2
 80062d2:	3384      	adds	r3, #132	; 0x84
 80062d4:	461a      	mov	r2, r3
 80062d6:	2300      	movs	r3, #0
 80062d8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	4413      	add	r3, r2
 80062e6:	3384      	adds	r3, #132	; 0x84
 80062e8:	461a      	mov	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80062f8:	2304      	movs	r3, #4
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e01b      	b.n	8006336 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d102      	bne.n	800630c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006306:	2303      	movs	r3, #3
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	e014      	b.n	8006336 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d00b      	beq.n	800632c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006318:	2b02      	cmp	r3, #2
 800631a:	d007      	beq.n	800632c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006320:	2b03      	cmp	r3, #3
 8006322:	d003      	beq.n	800632c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006328:	2b07      	cmp	r3, #7
 800632a:	d102      	bne.n	8006332 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800632c:	2302      	movs	r3, #2
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	e001      	b.n	8006336 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006332:	2301      	movs	r3, #1
 8006334:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	01db      	lsls	r3, r3, #7
 8006340:	4413      	add	r3, r2
 8006342:	3384      	adds	r3, #132	; 0x84
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	4611      	mov	r1, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	01d2      	lsls	r2, r2, #7
 8006350:	440a      	add	r2, r1
 8006352:	3284      	adds	r2, #132	; 0x84
 8006354:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006358:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	fb02 f303 	mul.w	r3, r2, r3
 8006364:	041a      	lsls	r2, r3, #16
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6859      	ldr	r1, [r3, #4]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	1acb      	subs	r3, r1, r3
 8006370:	69f9      	ldr	r1, [r7, #28]
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	3307      	adds	r3, #7
 8006378:	68f9      	ldr	r1, [r7, #12]
 800637a:	6809      	ldr	r1, [r1, #0]
 800637c:	4608      	mov	r0, r1
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	01c9      	lsls	r1, r1, #7
 8006382:	4401      	add	r1, r0
 8006384:	3184      	adds	r1, #132	; 0x84
 8006386:	4313      	orrs	r3, r2
 8006388:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	01db      	lsls	r3, r3, #7
 8006394:	4413      	add	r3, r2
 8006396:	3384      	adds	r3, #132	; 0x84
 8006398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	01db      	lsls	r3, r3, #7
 80063a4:	440b      	add	r3, r1
 80063a6:	3384      	adds	r3, #132	; 0x84
 80063a8:	4619      	mov	r1, r3
 80063aa:	4b14      	ldr	r3, [pc, #80]	; (80063fc <LTDC_SetConfig+0x330>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	01db      	lsls	r3, r3, #7
 80063ba:	4413      	add	r3, r2
 80063bc:	3384      	adds	r3, #132	; 0x84
 80063be:	461a      	mov	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	01db      	lsls	r3, r3, #7
 80063d0:	4413      	add	r3, r2
 80063d2:	3384      	adds	r3, #132	; 0x84
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	4611      	mov	r1, r2
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	01d2      	lsls	r2, r2, #7
 80063e0:	440a      	add	r2, r1
 80063e2:	3284      	adds	r2, #132	; 0x84
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	6013      	str	r3, [r2, #0]
}
 80063ea:	bf00      	nop
 80063ec:	3724      	adds	r7, #36	; 0x24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	fffff8f8 	.word	0xfffff8f8
 80063fc:	fffff800 	.word	0xfffff800

08006400 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006402:	b08f      	sub	sp, #60	; 0x3c
 8006404:	af0a      	add	r7, sp, #40	; 0x28
 8006406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e116      	b.n	8006640 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7fc f8b7 	bl	80025a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2203      	movs	r2, #3
 8006436:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4618      	mov	r0, r3
 8006452:	f005 ff15 	bl	800c280 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	687e      	ldr	r6, [r7, #4]
 800645e:	466d      	mov	r5, sp
 8006460:	f106 0410 	add.w	r4, r6, #16
 8006464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800646a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800646c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006470:	e885 0003 	stmia.w	r5, {r0, r1}
 8006474:	1d33      	adds	r3, r6, #4
 8006476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006478:	6838      	ldr	r0, [r7, #0]
 800647a:	f005 fe93 	bl	800c1a4 <USB_CoreInit>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0d7      	b.n	8006640 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f005 ff03 	bl	800c2a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800649c:	2300      	movs	r3, #0
 800649e:	73fb      	strb	r3, [r7, #15]
 80064a0:	e04a      	b.n	8006538 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064a2:	7bfa      	ldrb	r2, [r7, #15]
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	440b      	add	r3, r1
 80064b0:	333d      	adds	r3, #61	; 0x3d
 80064b2:	2201      	movs	r2, #1
 80064b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064b6:	7bfa      	ldrb	r2, [r7, #15]
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	4613      	mov	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	333c      	adds	r3, #60	; 0x3c
 80064c6:	7bfa      	ldrb	r2, [r7, #15]
 80064c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80064ca:	7bfa      	ldrb	r2, [r7, #15]
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	b298      	uxth	r0, r3
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3356      	adds	r3, #86	; 0x56
 80064de:	4602      	mov	r2, r0
 80064e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80064e2:	7bfa      	ldrb	r2, [r7, #15]
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	3340      	adds	r3, #64	; 0x40
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80064f6:	7bfa      	ldrb	r2, [r7, #15]
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	3344      	adds	r3, #68	; 0x44
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800650a:	7bfa      	ldrb	r2, [r7, #15]
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	3348      	adds	r3, #72	; 0x48
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800651e:	7bfa      	ldrb	r2, [r7, #15]
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	334c      	adds	r3, #76	; 0x4c
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	3301      	adds	r3, #1
 8006536:	73fb      	strb	r3, [r7, #15]
 8006538:	7bfa      	ldrb	r2, [r7, #15]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	d3af      	bcc.n	80064a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]
 8006546:	e044      	b.n	80065d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006548:	7bfa      	ldrb	r2, [r7, #15]
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800655e:	7bfa      	ldrb	r2, [r7, #15]
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006570:	7bfa      	ldrb	r2, [r7, #15]
 8006572:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006574:	7bfa      	ldrb	r2, [r7, #15]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006586:	2200      	movs	r2, #0
 8006588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800658a:	7bfa      	ldrb	r2, [r7, #15]
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065a0:	7bfa      	ldrb	r2, [r7, #15]
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065b6:	7bfa      	ldrb	r2, [r7, #15]
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	3301      	adds	r3, #1
 80065d0:	73fb      	strb	r3, [r7, #15]
 80065d2:	7bfa      	ldrb	r2, [r7, #15]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d3b5      	bcc.n	8006548 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	687e      	ldr	r6, [r7, #4]
 80065e4:	466d      	mov	r5, sp
 80065e6:	f106 0410 	add.w	r4, r6, #16
 80065ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80065f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80065fa:	1d33      	adds	r3, r6, #4
 80065fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065fe:	6838      	ldr	r0, [r7, #0]
 8006600:	f005 fe9c 	bl	800c33c <USB_DevInit>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2202      	movs	r2, #2
 800660e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e014      	b.n	8006640 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	2b01      	cmp	r3, #1
 800662c:	d102      	bne.n	8006634 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f80a 	bl	8006648 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f006 f85a 	bl	800c6f2 <USB_DevDisconnect>

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006648 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <HAL_PCDEx_ActivateLPM+0x44>)
 8006678:	4313      	orrs	r3, r2
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	10000003 	.word	0x10000003

08006690 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006698:	4b19      	ldr	r3, [pc, #100]	; (8006700 <HAL_PWREx_ConfigSupply+0x70>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d00a      	beq.n	80066ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066a4:	4b16      	ldr	r3, [pc, #88]	; (8006700 <HAL_PWREx_ConfigSupply+0x70>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d001      	beq.n	80066b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e01f      	b.n	80066f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e01d      	b.n	80066f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <HAL_PWREx_ConfigSupply+0x70>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f023 0207 	bic.w	r2, r3, #7
 80066c2:	490f      	ldr	r1, [pc, #60]	; (8006700 <HAL_PWREx_ConfigSupply+0x70>)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066ca:	f7fc fae7 	bl	8002c9c <HAL_GetTick>
 80066ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066d0:	e009      	b.n	80066e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066d2:	f7fc fae3 	bl	8002c9c <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066e0:	d901      	bls.n	80066e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e007      	b.n	80066f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <HAL_PWREx_ConfigSupply+0x70>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f2:	d1ee      	bne.n	80066d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	58024800 	.word	0x58024800

08006704 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	4a04      	ldr	r2, [pc, #16]	; (8006720 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800670e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006712:	60d3      	str	r3, [r2, #12]
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	58024800 	.word	0x58024800

08006724 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af02      	add	r7, sp, #8
 800672a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800672c:	f7fc fab6 	bl	8002c9c <HAL_GetTick>
 8006730:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e05f      	b.n	80067fc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d107      	bne.n	8006758 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fb fcf7 	bl	800213c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800674e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f85a 	bl	800680c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	3b01      	subs	r3, #1
 8006768:	021a      	lsls	r2, r3, #8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	2120      	movs	r1, #32
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f852 	bl	8006828 <QSPI_WaitFlagStateUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006788:	7afb      	ldrb	r3, [r7, #11]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d135      	bne.n	80067fa <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4b1b      	ldr	r3, [pc, #108]	; (8006804 <HAL_QSPI_Init+0xe0>)
 8006796:	4013      	ands	r3, r2
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6852      	ldr	r2, [r2, #4]
 800679c:	0611      	lsls	r1, r2, #24
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68d2      	ldr	r2, [r2, #12]
 80067a2:	4311      	orrs	r1, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	69d2      	ldr	r2, [r2, #28]
 80067a8:	4311      	orrs	r1, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6a12      	ldr	r2, [r2, #32]
 80067ae:	4311      	orrs	r1, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	430b      	orrs	r3, r1
 80067b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	4b12      	ldr	r3, [pc, #72]	; (8006808 <HAL_QSPI_Init+0xe4>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6912      	ldr	r2, [r2, #16]
 80067c6:	0411      	lsls	r1, r2, #16
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6952      	ldr	r2, [r2, #20]
 80067cc:	4311      	orrs	r1, r2
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6992      	ldr	r2, [r2, #24]
 80067d2:	4311      	orrs	r1, r2
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	430b      	orrs	r3, r1
 80067da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80067fa:	7afb      	ldrb	r3, [r7, #11]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	00ffff2f 	.word	0x00ffff2f
 8006808:	ffe0f8fe 	.word	0xffe0f8fe

0800680c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006838:	e01a      	b.n	8006870 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d016      	beq.n	8006870 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006842:	f7fc fa2b 	bl	8002c9c <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	429a      	cmp	r2, r3
 8006850:	d302      	bcc.n	8006858 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2204      	movs	r2, #4
 800685c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	f043 0201 	orr.w	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e00e      	b.n	800688e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	4013      	ands	r3, r2
 800687a:	2b00      	cmp	r3, #0
 800687c:	bf14      	ite	ne
 800687e:	2301      	movne	r3, #1
 8006880:	2300      	moveq	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	461a      	mov	r2, r3
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	429a      	cmp	r2, r3
 800688a:	d1d6      	bne.n	800683a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08c      	sub	sp, #48	; 0x30
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f000 bc48 	b.w	800713c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8088 	beq.w	80069ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ba:	4b99      	ldr	r3, [pc, #612]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068c4:	4b96      	ldr	r3, [pc, #600]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	2b10      	cmp	r3, #16
 80068ce:	d007      	beq.n	80068e0 <HAL_RCC_OscConfig+0x48>
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	2b18      	cmp	r3, #24
 80068d4:	d111      	bne.n	80068fa <HAL_RCC_OscConfig+0x62>
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d10c      	bne.n	80068fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e0:	4b8f      	ldr	r3, [pc, #572]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d06d      	beq.n	80069c8 <HAL_RCC_OscConfig+0x130>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d169      	bne.n	80069c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f000 bc21 	b.w	800713c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006902:	d106      	bne.n	8006912 <HAL_RCC_OscConfig+0x7a>
 8006904:	4b86      	ldr	r3, [pc, #536]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a85      	ldr	r2, [pc, #532]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 800690a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	e02e      	b.n	8006970 <HAL_RCC_OscConfig+0xd8>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10c      	bne.n	8006934 <HAL_RCC_OscConfig+0x9c>
 800691a:	4b81      	ldr	r3, [pc, #516]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a80      	ldr	r2, [pc, #512]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	4b7e      	ldr	r3, [pc, #504]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a7d      	ldr	r2, [pc, #500]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 800692c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e01d      	b.n	8006970 <HAL_RCC_OscConfig+0xd8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800693c:	d10c      	bne.n	8006958 <HAL_RCC_OscConfig+0xc0>
 800693e:	4b78      	ldr	r3, [pc, #480]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a77      	ldr	r2, [pc, #476]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	4b75      	ldr	r3, [pc, #468]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a74      	ldr	r2, [pc, #464]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e00b      	b.n	8006970 <HAL_RCC_OscConfig+0xd8>
 8006958:	4b71      	ldr	r3, [pc, #452]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a70      	ldr	r2, [pc, #448]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 800695e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4b6e      	ldr	r3, [pc, #440]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a6d      	ldr	r2, [pc, #436]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 800696a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800696e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d013      	beq.n	80069a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006978:	f7fc f990 	bl	8002c9c <HAL_GetTick>
 800697c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006980:	f7fc f98c 	bl	8002c9c <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b64      	cmp	r3, #100	; 0x64
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e3d4      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006992:	4b63      	ldr	r3, [pc, #396]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0xe8>
 800699e:	e014      	b.n	80069ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fc f97c 	bl	8002c9c <HAL_GetTick>
 80069a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a8:	f7fc f978 	bl	8002c9c <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b64      	cmp	r3, #100	; 0x64
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e3c0      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069ba:	4b59      	ldr	r3, [pc, #356]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0x110>
 80069c6:	e000      	b.n	80069ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80ca 	beq.w	8006b6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069d8:	4b51      	ldr	r3, [pc, #324]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069e2:	4b4f      	ldr	r3, [pc, #316]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 80069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <HAL_RCC_OscConfig+0x166>
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	2b18      	cmp	r3, #24
 80069f2:	d156      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x20a>
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d151      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069fe:	4b48      	ldr	r3, [pc, #288]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <HAL_RCC_OscConfig+0x17e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e392      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a16:	4b42      	ldr	r3, [pc, #264]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f023 0219 	bic.w	r2, r3, #25
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	493f      	ldr	r1, [pc, #252]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fc f938 	bl	8002c9c <HAL_GetTick>
 8006a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a30:	f7fc f934 	bl	8002c9c <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e37c      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a42:	4b37      	ldr	r3, [pc, #220]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4e:	f7fc f955 	bl	8002cfc <HAL_GetREVID>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d817      	bhi.n	8006a8c <HAL_RCC_OscConfig+0x1f4>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b40      	cmp	r3, #64	; 0x40
 8006a62:	d108      	bne.n	8006a76 <HAL_RCC_OscConfig+0x1de>
 8006a64:	4b2e      	ldr	r3, [pc, #184]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a6c:	4a2c      	ldr	r2, [pc, #176]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a74:	e07a      	b.n	8006b6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a76:	4b2a      	ldr	r3, [pc, #168]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	031b      	lsls	r3, r3, #12
 8006a84:	4926      	ldr	r1, [pc, #152]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a8a:	e06f      	b.n	8006b6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8c:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	061b      	lsls	r3, r3, #24
 8006a9a:	4921      	ldr	r1, [pc, #132]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aa0:	e064      	b.n	8006b6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d047      	beq.n	8006b3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aaa:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f023 0219 	bic.w	r2, r3, #25
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	491a      	ldr	r1, [pc, #104]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abc:	f7fc f8ee 	bl	8002c9c <HAL_GetTick>
 8006ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac4:	f7fc f8ea 	bl	8002c9c <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e332      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad6:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f0      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae2:	f7fc f90b 	bl	8002cfc <HAL_GetREVID>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d819      	bhi.n	8006b24 <HAL_RCC_OscConfig+0x28c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	d108      	bne.n	8006b0a <HAL_RCC_OscConfig+0x272>
 8006af8:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b00:	4a07      	ldr	r2, [pc, #28]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b06:	6053      	str	r3, [r2, #4]
 8006b08:	e030      	b.n	8006b6c <HAL_RCC_OscConfig+0x2d4>
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	031b      	lsls	r3, r3, #12
 8006b18:	4901      	ldr	r1, [pc, #4]	; (8006b20 <HAL_RCC_OscConfig+0x288>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	604b      	str	r3, [r1, #4]
 8006b1e:	e025      	b.n	8006b6c <HAL_RCC_OscConfig+0x2d4>
 8006b20:	58024400 	.word	0x58024400
 8006b24:	4b9a      	ldr	r3, [pc, #616]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	061b      	lsls	r3, r3, #24
 8006b32:	4997      	ldr	r1, [pc, #604]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	604b      	str	r3, [r1, #4]
 8006b38:	e018      	b.n	8006b6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b3a:	4b95      	ldr	r3, [pc, #596]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a94      	ldr	r2, [pc, #592]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b46:	f7fc f8a9 	bl	8002c9c <HAL_GetTick>
 8006b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b4c:	e008      	b.n	8006b60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b4e:	f7fc f8a5 	bl	8002c9c <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e2ed      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b60:	4b8b      	ldr	r3, [pc, #556]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1f0      	bne.n	8006b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80a9 	beq.w	8006ccc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b7a:	4b85      	ldr	r3, [pc, #532]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b84:	4b82      	ldr	r3, [pc, #520]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d007      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x308>
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	2b18      	cmp	r3, #24
 8006b94:	d13a      	bne.n	8006c0c <HAL_RCC_OscConfig+0x374>
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d135      	bne.n	8006c0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ba0:	4b7b      	ldr	r3, [pc, #492]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x320>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d001      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e2c1      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bb8:	f7fc f8a0 	bl	8002cfc <HAL_GetREVID>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d817      	bhi.n	8006bf6 <HAL_RCC_OscConfig+0x35e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d108      	bne.n	8006be0 <HAL_RCC_OscConfig+0x348>
 8006bce:	4b70      	ldr	r3, [pc, #448]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006bd6:	4a6e      	ldr	r2, [pc, #440]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bdc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bde:	e075      	b.n	8006ccc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006be0:	4b6b      	ldr	r3, [pc, #428]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	069b      	lsls	r3, r3, #26
 8006bee:	4968      	ldr	r1, [pc, #416]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bf4:	e06a      	b.n	8006ccc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bf6:	4b66      	ldr	r3, [pc, #408]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	061b      	lsls	r3, r3, #24
 8006c04:	4962      	ldr	r1, [pc, #392]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c0a:	e05f      	b.n	8006ccc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d042      	beq.n	8006c9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c14:	4b5e      	ldr	r3, [pc, #376]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a5d      	ldr	r2, [pc, #372]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c20:	f7fc f83c 	bl	8002c9c <HAL_GetTick>
 8006c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c28:	f7fc f838 	bl	8002c9c <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e280      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c3a:	4b55      	ldr	r3, [pc, #340]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f0      	beq.n	8006c28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c46:	f7fc f859 	bl	8002cfc <HAL_GetREVID>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d817      	bhi.n	8006c84 <HAL_RCC_OscConfig+0x3ec>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d108      	bne.n	8006c6e <HAL_RCC_OscConfig+0x3d6>
 8006c5c:	4b4c      	ldr	r3, [pc, #304]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c64:	4a4a      	ldr	r2, [pc, #296]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c6a:	6053      	str	r3, [r2, #4]
 8006c6c:	e02e      	b.n	8006ccc <HAL_RCC_OscConfig+0x434>
 8006c6e:	4b48      	ldr	r3, [pc, #288]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	069b      	lsls	r3, r3, #26
 8006c7c:	4944      	ldr	r1, [pc, #272]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	604b      	str	r3, [r1, #4]
 8006c82:	e023      	b.n	8006ccc <HAL_RCC_OscConfig+0x434>
 8006c84:	4b42      	ldr	r3, [pc, #264]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	061b      	lsls	r3, r3, #24
 8006c92:	493f      	ldr	r1, [pc, #252]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60cb      	str	r3, [r1, #12]
 8006c98:	e018      	b.n	8006ccc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c9a:	4b3d      	ldr	r3, [pc, #244]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a3c      	ldr	r2, [pc, #240]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca6:	f7fb fff9 	bl	8002c9c <HAL_GetTick>
 8006caa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006cae:	f7fb fff5 	bl	8002c9c <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e23d      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cc0:	4b33      	ldr	r3, [pc, #204]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f0      	bne.n	8006cae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d036      	beq.n	8006d46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d019      	beq.n	8006d14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ce0:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce4:	4a2a      	ldr	r2, [pc, #168]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006ce6:	f043 0301 	orr.w	r3, r3, #1
 8006cea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cec:	f7fb ffd6 	bl	8002c9c <HAL_GetTick>
 8006cf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cf4:	f7fb ffd2 	bl	8002c9c <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e21a      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d06:	4b22      	ldr	r3, [pc, #136]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0f0      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x45c>
 8006d12:	e018      	b.n	8006d46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d14:	4b1e      	ldr	r3, [pc, #120]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d18:	4a1d      	ldr	r2, [pc, #116]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006d1a:	f023 0301 	bic.w	r3, r3, #1
 8006d1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d20:	f7fb ffbc 	bl	8002c9c <HAL_GetTick>
 8006d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d28:	f7fb ffb8 	bl	8002c9c <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e200      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d3a:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d039      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01c      	beq.n	8006d94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d66:	f7fb ff99 	bl	8002c9c <HAL_GetTick>
 8006d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d6e:	f7fb ff95 	bl	8002c9c <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e1dd      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d80:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <HAL_RCC_OscConfig+0x4f8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0f0      	beq.n	8006d6e <HAL_RCC_OscConfig+0x4d6>
 8006d8c:	e01b      	b.n	8006dc6 <HAL_RCC_OscConfig+0x52e>
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d94:	4b9b      	ldr	r3, [pc, #620]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a9a      	ldr	r2, [pc, #616]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006da0:	f7fb ff7c 	bl	8002c9c <HAL_GetTick>
 8006da4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006da8:	f7fb ff78 	bl	8002c9c <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e1c0      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dba:	4b92      	ldr	r3, [pc, #584]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f0      	bne.n	8006da8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8081 	beq.w	8006ed6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006dd4:	4b8c      	ldr	r3, [pc, #560]	; (8007008 <HAL_RCC_OscConfig+0x770>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a8b      	ldr	r2, [pc, #556]	; (8007008 <HAL_RCC_OscConfig+0x770>)
 8006dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006de0:	f7fb ff5c 	bl	8002c9c <HAL_GetTick>
 8006de4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006de8:	f7fb ff58 	bl	8002c9c <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b64      	cmp	r3, #100	; 0x64
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e1a0      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dfa:	4b83      	ldr	r3, [pc, #524]	; (8007008 <HAL_RCC_OscConfig+0x770>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f0      	beq.n	8006de8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d106      	bne.n	8006e1c <HAL_RCC_OscConfig+0x584>
 8006e0e:	4b7d      	ldr	r3, [pc, #500]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	4a7c      	ldr	r2, [pc, #496]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e14:	f043 0301 	orr.w	r3, r3, #1
 8006e18:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1a:	e02d      	b.n	8006e78 <HAL_RCC_OscConfig+0x5e0>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10c      	bne.n	8006e3e <HAL_RCC_OscConfig+0x5a6>
 8006e24:	4b77      	ldr	r3, [pc, #476]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e28:	4a76      	ldr	r2, [pc, #472]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e30:	4b74      	ldr	r3, [pc, #464]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e34:	4a73      	ldr	r2, [pc, #460]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e36:	f023 0304 	bic.w	r3, r3, #4
 8006e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e3c:	e01c      	b.n	8006e78 <HAL_RCC_OscConfig+0x5e0>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d10c      	bne.n	8006e60 <HAL_RCC_OscConfig+0x5c8>
 8006e46:	4b6f      	ldr	r3, [pc, #444]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	4a6e      	ldr	r2, [pc, #440]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e4c:	f043 0304 	orr.w	r3, r3, #4
 8006e50:	6713      	str	r3, [r2, #112]	; 0x70
 8006e52:	4b6c      	ldr	r3, [pc, #432]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	4a6b      	ldr	r2, [pc, #428]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5e:	e00b      	b.n	8006e78 <HAL_RCC_OscConfig+0x5e0>
 8006e60:	4b68      	ldr	r3, [pc, #416]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e64:	4a67      	ldr	r2, [pc, #412]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6c:	4b65      	ldr	r3, [pc, #404]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	4a64      	ldr	r2, [pc, #400]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006e72:	f023 0304 	bic.w	r3, r3, #4
 8006e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d015      	beq.n	8006eac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e80:	f7fb ff0c 	bl	8002c9c <HAL_GetTick>
 8006e84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e86:	e00a      	b.n	8006e9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e88:	f7fb ff08 	bl	8002c9c <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e14e      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e9e:	4b59      	ldr	r3, [pc, #356]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0ee      	beq.n	8006e88 <HAL_RCC_OscConfig+0x5f0>
 8006eaa:	e014      	b.n	8006ed6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eac:	f7fb fef6 	bl	8002c9c <HAL_GetTick>
 8006eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eb2:	e00a      	b.n	8006eca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb4:	f7fb fef2 	bl	8002c9c <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e138      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eca:	4b4e      	ldr	r3, [pc, #312]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ee      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 812d 	beq.w	800713a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ee0:	4b48      	ldr	r3, [pc, #288]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee8:	2b18      	cmp	r3, #24
 8006eea:	f000 80bd 	beq.w	8007068 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	f040 809e 	bne.w	8007034 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef8:	4b42      	ldr	r3, [pc, #264]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a41      	ldr	r2, [pc, #260]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f04:	f7fb feca 	bl	8002c9c <HAL_GetTick>
 8006f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f0c:	f7fb fec6 	bl	8002c9c <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e10e      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f1e:	4b39      	ldr	r3, [pc, #228]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f0      	bne.n	8006f0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f2a:	4b36      	ldr	r3, [pc, #216]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f2e:	4b37      	ldr	r3, [pc, #220]	; (800700c <HAL_RCC_OscConfig+0x774>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f3a:	0112      	lsls	r2, r2, #4
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	4931      	ldr	r1, [pc, #196]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	628b      	str	r3, [r1, #40]	; 0x28
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f52:	3b01      	subs	r3, #1
 8006f54:	025b      	lsls	r3, r3, #9
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	061b      	lsls	r3, r3, #24
 8006f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f74:	4923      	ldr	r1, [pc, #140]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7e:	4a21      	ldr	r2, [pc, #132]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006f80:	f023 0301 	bic.w	r3, r3, #1
 8006f84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f86:	4b1f      	ldr	r3, [pc, #124]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f8a:	4b21      	ldr	r3, [pc, #132]	; (8007010 <HAL_RCC_OscConfig+0x778>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f92:	00d2      	lsls	r2, r2, #3
 8006f94:	491b      	ldr	r1, [pc, #108]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f9a:	4b1a      	ldr	r3, [pc, #104]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	f023 020c 	bic.w	r2, r3, #12
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4917      	ldr	r1, [pc, #92]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fac:	4b15      	ldr	r3, [pc, #84]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	f023 0202 	bic.w	r2, r3, #2
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb8:	4912      	ldr	r1, [pc, #72]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fbe:	4b11      	ldr	r3, [pc, #68]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	4a10      	ldr	r2, [pc, #64]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fca:	4b0e      	ldr	r3, [pc, #56]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	4a0d      	ldr	r2, [pc, #52]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fda:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006fe2:	4b08      	ldr	r3, [pc, #32]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	4a07      	ldr	r2, [pc, #28]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a04      	ldr	r2, [pc, #16]	; (8007004 <HAL_RCC_OscConfig+0x76c>)
 8006ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffa:	f7fb fe4f 	bl	8002c9c <HAL_GetTick>
 8006ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007000:	e011      	b.n	8007026 <HAL_RCC_OscConfig+0x78e>
 8007002:	bf00      	nop
 8007004:	58024400 	.word	0x58024400
 8007008:	58024800 	.word	0x58024800
 800700c:	fffffc0c 	.word	0xfffffc0c
 8007010:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007014:	f7fb fe42 	bl	8002c9c <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e08a      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007026:	4b47      	ldr	r3, [pc, #284]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0f0      	beq.n	8007014 <HAL_RCC_OscConfig+0x77c>
 8007032:	e082      	b.n	800713a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007034:	4b43      	ldr	r3, [pc, #268]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a42      	ldr	r2, [pc, #264]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 800703a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800703e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fb fe2c 	bl	8002c9c <HAL_GetTick>
 8007044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007048:	f7fb fe28 	bl	8002c9c <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e070      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800705a:	4b3a      	ldr	r3, [pc, #232]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1f0      	bne.n	8007048 <HAL_RCC_OscConfig+0x7b0>
 8007066:	e068      	b.n	800713a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007068:	4b36      	ldr	r3, [pc, #216]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800706e:	4b35      	ldr	r3, [pc, #212]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	2b01      	cmp	r3, #1
 800707a:	d031      	beq.n	80070e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f003 0203 	and.w	r2, r3, #3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007086:	429a      	cmp	r2, r3
 8007088:	d12a      	bne.n	80070e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	091b      	lsrs	r3, r3, #4
 800708e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007096:	429a      	cmp	r2, r3
 8007098:	d122      	bne.n	80070e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d11a      	bne.n	80070e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	0a5b      	lsrs	r3, r3, #9
 80070ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d111      	bne.n	80070e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	0c1b      	lsrs	r3, r3, #16
 80070c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d108      	bne.n	80070e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	0e1b      	lsrs	r3, r3, #24
 80070d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070dc:	429a      	cmp	r2, r3
 80070de:	d001      	beq.n	80070e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e02b      	b.n	800713c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80070e4:	4b17      	ldr	r3, [pc, #92]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	08db      	lsrs	r3, r3, #3
 80070ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d01f      	beq.n	800713a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80070fa:	4b12      	ldr	r3, [pc, #72]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	4a11      	ldr	r2, [pc, #68]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007106:	f7fb fdc9 	bl	8002c9c <HAL_GetTick>
 800710a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800710c:	bf00      	nop
 800710e:	f7fb fdc5 	bl	8002c9c <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	4293      	cmp	r3, r2
 8007118:	d0f9      	beq.n	800710e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 800711c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711e:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <HAL_RCC_OscConfig+0x8b0>)
 8007120:	4013      	ands	r3, r2
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007126:	00d2      	lsls	r2, r2, #3
 8007128:	4906      	ldr	r1, [pc, #24]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 800712a:	4313      	orrs	r3, r2
 800712c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800712e:	4b05      	ldr	r3, [pc, #20]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	4a04      	ldr	r2, [pc, #16]	; (8007144 <HAL_RCC_OscConfig+0x8ac>)
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3730      	adds	r7, #48	; 0x30
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	58024400 	.word	0x58024400
 8007148:	ffff0007 	.word	0xffff0007

0800714c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e19c      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007160:	4b8a      	ldr	r3, [pc, #552]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d910      	bls.n	8007190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716e:	4b87      	ldr	r3, [pc, #540]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f023 020f 	bic.w	r2, r3, #15
 8007176:	4985      	ldr	r1, [pc, #532]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	4313      	orrs	r3, r2
 800717c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b83      	ldr	r3, [pc, #524]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e184      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d010      	beq.n	80071be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	4b7b      	ldr	r3, [pc, #492]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d908      	bls.n	80071be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071ac:	4b78      	ldr	r3, [pc, #480]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	4975      	ldr	r1, [pc, #468]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d010      	beq.n	80071ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695a      	ldr	r2, [r3, #20]
 80071ce:	4b70      	ldr	r3, [pc, #448]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d908      	bls.n	80071ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071da:	4b6d      	ldr	r3, [pc, #436]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	496a      	ldr	r1, [pc, #424]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d010      	beq.n	800721a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	4b64      	ldr	r3, [pc, #400]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007204:	429a      	cmp	r2, r3
 8007206:	d908      	bls.n	800721a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007208:	4b61      	ldr	r3, [pc, #388]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	495e      	ldr	r1, [pc, #376]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007216:	4313      	orrs	r3, r2
 8007218:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d010      	beq.n	8007248 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69da      	ldr	r2, [r3, #28]
 800722a:	4b59      	ldr	r3, [pc, #356]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007232:	429a      	cmp	r2, r3
 8007234:	d908      	bls.n	8007248 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007236:	4b56      	ldr	r3, [pc, #344]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	4953      	ldr	r1, [pc, #332]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007244:	4313      	orrs	r3, r2
 8007246:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d010      	beq.n	8007276 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	4b4d      	ldr	r3, [pc, #308]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	429a      	cmp	r2, r3
 8007262:	d908      	bls.n	8007276 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007264:	4b4a      	ldr	r3, [pc, #296]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f023 020f 	bic.w	r2, r3, #15
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4947      	ldr	r1, [pc, #284]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007272:	4313      	orrs	r3, r2
 8007274:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d055      	beq.n	800732e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007282:	4b43      	ldr	r3, [pc, #268]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	4940      	ldr	r1, [pc, #256]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007290:	4313      	orrs	r3, r2
 8007292:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d107      	bne.n	80072ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800729c:	4b3c      	ldr	r3, [pc, #240]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d121      	bne.n	80072ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e0f6      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d107      	bne.n	80072c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072b4:	4b36      	ldr	r3, [pc, #216]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d115      	bne.n	80072ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e0ea      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d107      	bne.n	80072dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072cc:	4b30      	ldr	r3, [pc, #192]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0de      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072dc:	4b2c      	ldr	r3, [pc, #176]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0d6      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072ec:	4b28      	ldr	r3, [pc, #160]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f023 0207 	bic.w	r2, r3, #7
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4925      	ldr	r1, [pc, #148]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072fe:	f7fb fccd 	bl	8002c9c <HAL_GetTick>
 8007302:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007304:	e00a      	b.n	800731c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007306:	f7fb fcc9 	bl	8002c9c <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	f241 3288 	movw	r2, #5000	; 0x1388
 8007314:	4293      	cmp	r3, r2
 8007316:	d901      	bls.n	800731c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e0be      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800731c:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	429a      	cmp	r2, r3
 800732c:	d1eb      	bne.n	8007306 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d010      	beq.n	800735c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	4b14      	ldr	r3, [pc, #80]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	429a      	cmp	r2, r3
 8007348:	d208      	bcs.n	800735c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800734a:	4b11      	ldr	r3, [pc, #68]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	f023 020f 	bic.w	r2, r3, #15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	490e      	ldr	r1, [pc, #56]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007358:	4313      	orrs	r3, r2
 800735a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d214      	bcs.n	8007394 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736a:	4b08      	ldr	r3, [pc, #32]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f023 020f 	bic.w	r2, r3, #15
 8007372:	4906      	ldr	r1, [pc, #24]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	4313      	orrs	r3, r2
 8007378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800737a:	4b04      	ldr	r3, [pc, #16]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d005      	beq.n	8007394 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e086      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
 800738c:	52002000 	.word	0x52002000
 8007390:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	4b3f      	ldr	r3, [pc, #252]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d208      	bcs.n	80073c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073b0:	4b3c      	ldr	r3, [pc, #240]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	4939      	ldr	r1, [pc, #228]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d010      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695a      	ldr	r2, [r3, #20]
 80073d2:	4b34      	ldr	r3, [pc, #208]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073da:	429a      	cmp	r2, r3
 80073dc:	d208      	bcs.n	80073f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073de:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	492e      	ldr	r1, [pc, #184]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d010      	beq.n	800741e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699a      	ldr	r2, [r3, #24]
 8007400:	4b28      	ldr	r3, [pc, #160]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007408:	429a      	cmp	r2, r3
 800740a:	d208      	bcs.n	800741e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800740c:	4b25      	ldr	r3, [pc, #148]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	4922      	ldr	r1, [pc, #136]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 800741a:	4313      	orrs	r3, r2
 800741c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	d010      	beq.n	800744c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69da      	ldr	r2, [r3, #28]
 800742e:	4b1d      	ldr	r3, [pc, #116]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007436:	429a      	cmp	r2, r3
 8007438:	d208      	bcs.n	800744c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800743a:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	4917      	ldr	r1, [pc, #92]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 8007448:	4313      	orrs	r3, r2
 800744a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800744c:	f000 f834 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 8007450:	4602      	mov	r2, r0
 8007452:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	4912      	ldr	r1, [pc, #72]	; (80074a8 <HAL_RCC_ClockConfig+0x35c>)
 800745e:	5ccb      	ldrb	r3, [r1, r3]
 8007460:	f003 031f 	and.w	r3, r3, #31
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800746a:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	4a0d      	ldr	r2, [pc, #52]	; (80074a8 <HAL_RCC_ClockConfig+0x35c>)
 8007474:	5cd3      	ldrb	r3, [r2, r3]
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	4a0a      	ldr	r2, [pc, #40]	; (80074ac <HAL_RCC_ClockConfig+0x360>)
 8007482:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007484:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <HAL_RCC_ClockConfig+0x364>)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800748a:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <HAL_RCC_ClockConfig+0x368>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4618      	mov	r0, r3
 8007490:	f7fb fbba 	bl	8002c08 <HAL_InitTick>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	58024400 	.word	0x58024400
 80074a8:	0800d208 	.word	0x0800d208
 80074ac:	24000004 	.word	0x24000004
 80074b0:	24000000 	.word	0x24000000
 80074b4:	24000008 	.word	0x24000008

080074b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074be:	4bb3      	ldr	r3, [pc, #716]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074c6:	2b18      	cmp	r3, #24
 80074c8:	f200 8155 	bhi.w	8007776 <HAL_RCC_GetSysClockFreq+0x2be>
 80074cc:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d2:	bf00      	nop
 80074d4:	08007539 	.word	0x08007539
 80074d8:	08007777 	.word	0x08007777
 80074dc:	08007777 	.word	0x08007777
 80074e0:	08007777 	.word	0x08007777
 80074e4:	08007777 	.word	0x08007777
 80074e8:	08007777 	.word	0x08007777
 80074ec:	08007777 	.word	0x08007777
 80074f0:	08007777 	.word	0x08007777
 80074f4:	0800755f 	.word	0x0800755f
 80074f8:	08007777 	.word	0x08007777
 80074fc:	08007777 	.word	0x08007777
 8007500:	08007777 	.word	0x08007777
 8007504:	08007777 	.word	0x08007777
 8007508:	08007777 	.word	0x08007777
 800750c:	08007777 	.word	0x08007777
 8007510:	08007777 	.word	0x08007777
 8007514:	08007565 	.word	0x08007565
 8007518:	08007777 	.word	0x08007777
 800751c:	08007777 	.word	0x08007777
 8007520:	08007777 	.word	0x08007777
 8007524:	08007777 	.word	0x08007777
 8007528:	08007777 	.word	0x08007777
 800752c:	08007777 	.word	0x08007777
 8007530:	08007777 	.word	0x08007777
 8007534:	0800756b 	.word	0x0800756b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007538:	4b94      	ldr	r3, [pc, #592]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d009      	beq.n	8007558 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007544:	4b91      	ldr	r3, [pc, #580]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	08db      	lsrs	r3, r3, #3
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	4a90      	ldr	r2, [pc, #576]	; (8007790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
 8007554:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007556:	e111      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007558:	4b8d      	ldr	r3, [pc, #564]	; (8007790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800755a:	61bb      	str	r3, [r7, #24]
      break;
 800755c:	e10e      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800755e:	4b8d      	ldr	r3, [pc, #564]	; (8007794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007560:	61bb      	str	r3, [r7, #24]
      break;
 8007562:	e10b      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007564:	4b8c      	ldr	r3, [pc, #560]	; (8007798 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007566:	61bb      	str	r3, [r7, #24]
      break;
 8007568:	e108      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800756a:	4b88      	ldr	r3, [pc, #544]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007574:	4b85      	ldr	r3, [pc, #532]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	091b      	lsrs	r3, r3, #4
 800757a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800757e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007580:	4b82      	ldr	r3, [pc, #520]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800758a:	4b80      	ldr	r3, [pc, #512]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	08db      	lsrs	r3, r3, #3
 8007590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	fb02 f303 	mul.w	r3, r2, r3
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80e1 	beq.w	8007770 <HAL_RCC_GetSysClockFreq+0x2b8>
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	f000 8083 	beq.w	80076bc <HAL_RCC_GetSysClockFreq+0x204>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f200 80a1 	bhi.w	8007700 <HAL_RCC_GetSysClockFreq+0x248>
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_RCC_GetSysClockFreq+0x114>
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d056      	beq.n	8007678 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075ca:	e099      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075cc:	4b6f      	ldr	r3, [pc, #444]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d02d      	beq.n	8007634 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075d8:	4b6c      	ldr	r3, [pc, #432]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	08db      	lsrs	r3, r3, #3
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	4a6b      	ldr	r2, [pc, #428]	; (8007790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075e4:	fa22 f303 	lsr.w	r3, r2, r3
 80075e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	ee07 3a90 	vmov	s15, r3
 80075f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007602:	4b62      	ldr	r3, [pc, #392]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007612:	ed97 6a02 	vldr	s12, [r7, #8]
 8007616:	eddf 5a61 	vldr	s11, [pc, #388]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 800761a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007632:	e087      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80077a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007646:	4b51      	ldr	r3, [pc, #324]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007656:	ed97 6a02 	vldr	s12, [r7, #8]
 800765a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 800765e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800766a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007676:	e065      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007682:	eddf 6a48 	vldr	s13, [pc, #288]	; 80077a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768a:	4b40      	ldr	r3, [pc, #256]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769a:	ed97 6a02 	vldr	s12, [r7, #8]
 800769e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 80076a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076ba:	e043      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80077a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ce:	4b2f      	ldr	r3, [pc, #188]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076de:	ed97 6a02 	vldr	s12, [r7, #8]
 80076e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 80076e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076fe:	e021      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80077a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800770e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007722:	ed97 6a02 	vldr	s12, [r7, #8]
 8007726:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 800772a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007742:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007744:	4b11      	ldr	r3, [pc, #68]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	0a5b      	lsrs	r3, r3, #9
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	3301      	adds	r3, #1
 8007750:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	ee07 3a90 	vmov	s15, r3
 8007758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800775c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007768:	ee17 3a90 	vmov	r3, s15
 800776c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800776e:	e005      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	61bb      	str	r3, [r7, #24]
      break;
 8007774:	e002      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007776:	4b07      	ldr	r3, [pc, #28]	; (8007794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007778:	61bb      	str	r3, [r7, #24]
      break;
 800777a:	bf00      	nop
  }

  return sysclockfreq;
 800777c:	69bb      	ldr	r3, [r7, #24]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3724      	adds	r7, #36	; 0x24
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	58024400 	.word	0x58024400
 8007790:	03d09000 	.word	0x03d09000
 8007794:	003d0900 	.word	0x003d0900
 8007798:	017d7840 	.word	0x017d7840
 800779c:	46000000 	.word	0x46000000
 80077a0:	4c742400 	.word	0x4c742400
 80077a4:	4a742400 	.word	0x4a742400
 80077a8:	4bbebc20 	.word	0x4bbebc20

080077ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077b2:	f7ff fe81 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 80077b6:	4602      	mov	r2, r0
 80077b8:	4b10      	ldr	r3, [pc, #64]	; (80077fc <HAL_RCC_GetHCLKFreq+0x50>)
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	0a1b      	lsrs	r3, r3, #8
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	490f      	ldr	r1, [pc, #60]	; (8007800 <HAL_RCC_GetHCLKFreq+0x54>)
 80077c4:	5ccb      	ldrb	r3, [r1, r3]
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	fa22 f303 	lsr.w	r3, r2, r3
 80077ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <HAL_RCC_GetHCLKFreq+0x50>)
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <HAL_RCC_GetHCLKFreq+0x54>)
 80077da:	5cd3      	ldrb	r3, [r2, r3]
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	fa22 f303 	lsr.w	r3, r2, r3
 80077e6:	4a07      	ldr	r2, [pc, #28]	; (8007804 <HAL_RCC_GetHCLKFreq+0x58>)
 80077e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077ea:	4a07      	ldr	r2, [pc, #28]	; (8007808 <HAL_RCC_GetHCLKFreq+0x5c>)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80077f0:	4b04      	ldr	r3, [pc, #16]	; (8007804 <HAL_RCC_GetHCLKFreq+0x58>)
 80077f2:	681b      	ldr	r3, [r3, #0]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	58024400 	.word	0x58024400
 8007800:	0800d208 	.word	0x0800d208
 8007804:	24000004 	.word	0x24000004
 8007808:	24000000 	.word	0x24000000

0800780c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007810:	f7ff ffcc 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 8007814:	4602      	mov	r2, r0
 8007816:	4b06      	ldr	r3, [pc, #24]	; (8007830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	091b      	lsrs	r3, r3, #4
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	4904      	ldr	r1, [pc, #16]	; (8007834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007822:	5ccb      	ldrb	r3, [r1, r3]
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800782c:	4618      	mov	r0, r3
 800782e:	bd80      	pop	{r7, pc}
 8007830:	58024400 	.word	0x58024400
 8007834:	0800d208 	.word	0x0800d208

08007838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800783c:	f7ff ffb6 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 8007840:	4602      	mov	r2, r0
 8007842:	4b06      	ldr	r3, [pc, #24]	; (800785c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	0a1b      	lsrs	r3, r3, #8
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	4904      	ldr	r1, [pc, #16]	; (8007860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800784e:	5ccb      	ldrb	r3, [r1, r3]
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007858:	4618      	mov	r0, r3
 800785a:	bd80      	pop	{r7, pc}
 800785c:	58024400 	.word	0x58024400
 8007860:	0800d208 	.word	0x0800d208

08007864 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007868:	b0ca      	sub	sp, #296	; 0x128
 800786a:	af00      	add	r7, sp, #0
 800786c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007870:	2300      	movs	r3, #0
 8007872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007876:	2300      	movs	r3, #0
 8007878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800787c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007888:	2500      	movs	r5, #0
 800788a:	ea54 0305 	orrs.w	r3, r4, r5
 800788e:	d049      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007896:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800789a:	d02f      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800789c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078a0:	d828      	bhi.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a6:	d01a      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ac:	d822      	bhi.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b6:	d007      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078b8:	e01c      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ba:	4bb8      	ldr	r3, [pc, #736]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	4ab7      	ldr	r2, [pc, #732]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078c6:	e01a      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078cc:	3308      	adds	r3, #8
 80078ce:	2102      	movs	r1, #2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f002 fb61 	bl	8009f98 <RCCEx_PLL2_Config>
 80078d6:	4603      	mov	r3, r0
 80078d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078dc:	e00f      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e2:	3328      	adds	r3, #40	; 0x28
 80078e4:	2102      	movs	r1, #2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f002 fc08 	bl	800a0fc <RCCEx_PLL3_Config>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078f2:	e004      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078fa:	e000      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80078fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007906:	4ba5      	ldr	r3, [pc, #660]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007914:	4aa1      	ldr	r2, [pc, #644]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007916:	430b      	orrs	r3, r1
 8007918:	6513      	str	r3, [r2, #80]	; 0x50
 800791a:	e003      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007930:	f04f 0900 	mov.w	r9, #0
 8007934:	ea58 0309 	orrs.w	r3, r8, r9
 8007938:	d047      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800793a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007940:	2b04      	cmp	r3, #4
 8007942:	d82a      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007944:	a201      	add	r2, pc, #4	; (adr r2, 800794c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794a:	bf00      	nop
 800794c:	08007961 	.word	0x08007961
 8007950:	0800796f 	.word	0x0800796f
 8007954:	08007985 	.word	0x08007985
 8007958:	080079a3 	.word	0x080079a3
 800795c:	080079a3 	.word	0x080079a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007960:	4b8e      	ldr	r3, [pc, #568]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	4a8d      	ldr	r2, [pc, #564]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800796a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800796c:	e01a      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800796e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007972:	3308      	adds	r3, #8
 8007974:	2100      	movs	r1, #0
 8007976:	4618      	mov	r0, r3
 8007978:	f002 fb0e 	bl	8009f98 <RCCEx_PLL2_Config>
 800797c:	4603      	mov	r3, r0
 800797e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007982:	e00f      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007988:	3328      	adds	r3, #40	; 0x28
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f002 fbb5 	bl	800a0fc <RCCEx_PLL3_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007998:	e004      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079a0:	e000      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80079a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079ac:	4b7b      	ldr	r3, [pc, #492]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	f023 0107 	bic.w	r1, r3, #7
 80079b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ba:	4a78      	ldr	r2, [pc, #480]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079bc:	430b      	orrs	r3, r1
 80079be:	6513      	str	r3, [r2, #80]	; 0x50
 80079c0:	e003      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80079d6:	f04f 0b00 	mov.w	fp, #0
 80079da:	ea5a 030b 	orrs.w	r3, sl, fp
 80079de:	d04c      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ea:	d030      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80079ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f0:	d829      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079f2:	2bc0      	cmp	r3, #192	; 0xc0
 80079f4:	d02d      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80079f6:	2bc0      	cmp	r3, #192	; 0xc0
 80079f8:	d825      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079fa:	2b80      	cmp	r3, #128	; 0x80
 80079fc:	d018      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80079fe:	2b80      	cmp	r3, #128	; 0x80
 8007a00:	d821      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007a06:	2b40      	cmp	r3, #64	; 0x40
 8007a08:	d007      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007a0a:	e01c      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a0c:	4b63      	ldr	r3, [pc, #396]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	4a62      	ldr	r2, [pc, #392]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a18:	e01c      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1e:	3308      	adds	r3, #8
 8007a20:	2100      	movs	r1, #0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f002 fab8 	bl	8009f98 <RCCEx_PLL2_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a2e:	e011      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a34:	3328      	adds	r3, #40	; 0x28
 8007a36:	2100      	movs	r1, #0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f002 fb5f 	bl	800a0fc <RCCEx_PLL3_Config>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a44:	e006      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a4c:	e002      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a4e:	bf00      	nop
 8007a50:	e000      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a5c:	4b4f      	ldr	r3, [pc, #316]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a60:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a6a:	4a4c      	ldr	r2, [pc, #304]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6513      	str	r3, [r2, #80]	; 0x50
 8007a70:	e003      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007a86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007a94:	460b      	mov	r3, r1
 8007a96:	4313      	orrs	r3, r2
 8007a98:	d053      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007aa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aa6:	d035      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aac:	d82e      	bhi.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007aae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ab2:	d031      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ab4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ab8:	d828      	bhi.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007abe:	d01a      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ac4:	d822      	bhi.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ace:	d007      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007ad0:	e01c      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad2:	4b32      	ldr	r3, [pc, #200]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	4a31      	ldr	r2, [pc, #196]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ade:	e01c      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f002 fa55 	bl	8009f98 <RCCEx_PLL2_Config>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007af4:	e011      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007afa:	3328      	adds	r3, #40	; 0x28
 8007afc:	2100      	movs	r1, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f002 fafc 	bl	800a0fc <RCCEx_PLL3_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b0a:	e006      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b12:	e002      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b14:	bf00      	nop
 8007b16:	e000      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b22:	4b1e      	ldr	r3, [pc, #120]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b26:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b32:	4a1a      	ldr	r2, [pc, #104]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b34:	430b      	orrs	r3, r1
 8007b36:	6593      	str	r3, [r2, #88]	; 0x58
 8007b38:	e003      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007b4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b52:	2300      	movs	r3, #0
 8007b54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	d056      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b6e:	d038      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b74:	d831      	bhi.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b7a:	d034      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b80:	d82b      	bhi.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b86:	d01d      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b8c:	d825      	bhi.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d006      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007b92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b96:	d00a      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b98:	e01f      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b9a:	bf00      	nop
 8007b9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba0:	4ba2      	ldr	r3, [pc, #648]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	4aa1      	ldr	r2, [pc, #644]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bac:	e01c      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f002 f9ee 	bl	8009f98 <RCCEx_PLL2_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007bc2:	e011      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc8:	3328      	adds	r3, #40	; 0x28
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f002 fa95 	bl	800a0fc <RCCEx_PLL3_Config>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bd8:	e006      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007be0:	e002      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007be2:	bf00      	nop
 8007be4:	e000      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10b      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007bf0:	4b8e      	ldr	r3, [pc, #568]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c00:	4a8a      	ldr	r2, [pc, #552]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c02:	430b      	orrs	r3, r1
 8007c04:	6593      	str	r3, [r2, #88]	; 0x58
 8007c06:	e003      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	d03a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c36:	2b30      	cmp	r3, #48	; 0x30
 8007c38:	d01f      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007c3a:	2b30      	cmp	r3, #48	; 0x30
 8007c3c:	d819      	bhi.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	d00c      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	d815      	bhi.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d019      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007c4a:	2b10      	cmp	r3, #16
 8007c4c:	d111      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c4e:	4b77      	ldr	r3, [pc, #476]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c52:	4a76      	ldr	r2, [pc, #472]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c5a:	e011      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c60:	3308      	adds	r3, #8
 8007c62:	2102      	movs	r1, #2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f002 f997 	bl	8009f98 <RCCEx_PLL2_Config>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c70:	e006      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c78:	e002      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c88:	4b68      	ldr	r3, [pc, #416]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c96:	4a65      	ldr	r2, [pc, #404]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c9c:	e003      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007cb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cbc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	d051      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd0:	d035      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd6:	d82e      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cdc:	d031      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ce2:	d828      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce8:	d01a      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cee:	d822      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf8:	d007      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007cfa:	e01c      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cfc:	4b4b      	ldr	r3, [pc, #300]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	4a4a      	ldr	r2, [pc, #296]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d08:	e01c      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0e:	3308      	adds	r3, #8
 8007d10:	2100      	movs	r1, #0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f002 f940 	bl	8009f98 <RCCEx_PLL2_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d1e:	e011      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d24:	3328      	adds	r3, #40	; 0x28
 8007d26:	2100      	movs	r1, #0
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f002 f9e7 	bl	800a0fc <RCCEx_PLL3_Config>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d34:	e006      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d3c:	e002      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d3e:	bf00      	nop
 8007d40:	e000      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d4c:	4b37      	ldr	r3, [pc, #220]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d50:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5a:	4a34      	ldr	r2, [pc, #208]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6513      	str	r3, [r2, #80]	; 0x50
 8007d60:	e003      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007d84:	460b      	mov	r3, r1
 8007d86:	4313      	orrs	r3, r2
 8007d88:	d056      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d94:	d033      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d9a:	d82c      	bhi.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007da0:	d02f      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007da2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007da6:	d826      	bhi.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dac:	d02b      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007dae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007db2:	d820      	bhi.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007db8:	d012      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dbe:	d81a      	bhi.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d022      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc8:	d115      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dce:	3308      	adds	r3, #8
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f002 f8e0 	bl	8009f98 <RCCEx_PLL2_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007dde:	e015      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de4:	3328      	adds	r3, #40	; 0x28
 8007de6:	2101      	movs	r1, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f002 f987 	bl	800a0fc <RCCEx_PLL3_Config>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007df4:	e00a      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dfc:	e006      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007dfe:	bf00      	nop
 8007e00:	e004      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e02:	bf00      	nop
 8007e04:	e002      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e06:	bf00      	nop
 8007e08:	e000      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10d      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e18:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e22:	4a02      	ldr	r2, [pc, #8]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e24:	430b      	orrs	r3, r1
 8007e26:	6513      	str	r3, [r2, #80]	; 0x50
 8007e28:	e006      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e2a:	bf00      	nop
 8007e2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e4e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4313      	orrs	r3, r2
 8007e56:	d055      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e64:	d033      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e6a:	d82c      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e70:	d02f      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e76:	d826      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e7c:	d02b      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007e7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e82:	d820      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e88:	d012      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8e:	d81a      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d022      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e98:	d115      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 f878 	bl	8009f98 <RCCEx_PLL2_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007eae:	e015      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb4:	3328      	adds	r3, #40	; 0x28
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 f91f 	bl	800a0fc <RCCEx_PLL3_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ec4:	e00a      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ecc:	e006      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ece:	bf00      	nop
 8007ed0:	e004      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ed2:	bf00      	nop
 8007ed4:	e002      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ed6:	bf00      	nop
 8007ed8:	e000      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007edc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10b      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ee4:	4ba3      	ldr	r3, [pc, #652]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ef4:	4a9f      	ldr	r2, [pc, #636]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8007efa:	e003      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f14:	2300      	movs	r3, #0
 8007f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4313      	orrs	r3, r2
 8007f22:	d037      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f2e:	d00e      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f34:	d816      	bhi.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d018      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f3e:	d111      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f40:	4b8c      	ldr	r3, [pc, #560]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	4a8b      	ldr	r2, [pc, #556]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f4c:	e00f      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f52:	3308      	adds	r3, #8
 8007f54:	2101      	movs	r1, #1
 8007f56:	4618      	mov	r0, r3
 8007f58:	f002 f81e 	bl	8009f98 <RCCEx_PLL2_Config>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f62:	e004      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f6a:	e000      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f76:	4b7f      	ldr	r3, [pc, #508]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f84:	4a7b      	ldr	r2, [pc, #492]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f86:	430b      	orrs	r3, r1
 8007f88:	6513      	str	r3, [r2, #80]	; 0x50
 8007f8a:	e003      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007faa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	d039      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d81c      	bhi.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08008001 	.word	0x08008001
 8007fc8:	08007fd5 	.word	0x08007fd5
 8007fcc:	08007fe3 	.word	0x08007fe3
 8007fd0:	08008001 	.word	0x08008001
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fd4:	4b67      	ldr	r3, [pc, #412]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd8:	4a66      	ldr	r2, [pc, #408]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007fe0:	e00f      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	2102      	movs	r1, #2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f001 ffd4 	bl	8009f98 <RCCEx_PLL2_Config>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ff6:	e004      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ffe:	e000      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10a      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800800a:	4b5a      	ldr	r3, [pc, #360]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800800c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800e:	f023 0103 	bic.w	r1, r3, #3
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008018:	4a56      	ldr	r2, [pc, #344]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800801a:	430b      	orrs	r3, r1
 800801c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800801e:	e003      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008024:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008034:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008038:	2300      	movs	r3, #0
 800803a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800803e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008042:	460b      	mov	r3, r1
 8008044:	4313      	orrs	r3, r2
 8008046:	f000 809f 	beq.w	8008188 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800804a:	4b4b      	ldr	r3, [pc, #300]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a4a      	ldr	r2, [pc, #296]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008054:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008056:	f7fa fe21 	bl	8002c9c <HAL_GetTick>
 800805a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800805e:	e00b      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008060:	f7fa fe1c 	bl	8002c9c <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b64      	cmp	r3, #100	; 0x64
 800806e:	d903      	bls.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008076:	e005      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008078:	4b3f      	ldr	r3, [pc, #252]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0ed      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008088:	2b00      	cmp	r3, #0
 800808a:	d179      	bne.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800808c:	4b39      	ldr	r3, [pc, #228]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800808e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008094:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008098:	4053      	eors	r3, r2
 800809a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d015      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080a2:	4b34      	ldr	r3, [pc, #208]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080ae:	4b31      	ldr	r3, [pc, #196]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b2:	4a30      	ldr	r2, [pc, #192]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080ba:	4b2e      	ldr	r3, [pc, #184]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080be:	4a2d      	ldr	r2, [pc, #180]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080c6:	4a2b      	ldr	r2, [pc, #172]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80080cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080da:	d118      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080dc:	f7fa fdde 	bl	8002c9c <HAL_GetTick>
 80080e0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080e4:	e00d      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080e6:	f7fa fdd9 	bl	8002c9c <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080f0:	1ad2      	subs	r2, r2, r3
 80080f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d903      	bls.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008100:	e005      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008102:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0eb      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800810e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008112:	2b00      	cmp	r3, #0
 8008114:	d129      	bne.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800811a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800811e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008126:	d10e      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008128:	4b12      	ldr	r3, [pc, #72]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008134:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008138:	091a      	lsrs	r2, r3, #4
 800813a:	4b10      	ldr	r3, [pc, #64]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800813c:	4013      	ands	r3, r2
 800813e:	4a0d      	ldr	r2, [pc, #52]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008140:	430b      	orrs	r3, r1
 8008142:	6113      	str	r3, [r2, #16]
 8008144:	e005      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008146:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	4a0a      	ldr	r2, [pc, #40]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008150:	6113      	str	r3, [r2, #16]
 8008152:	4b08      	ldr	r3, [pc, #32]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008154:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800815a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800815e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008162:	4a04      	ldr	r2, [pc, #16]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008164:	430b      	orrs	r3, r1
 8008166:	6713      	str	r3, [r2, #112]	; 0x70
 8008168:	e00e      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800816a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800816e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008172:	e009      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008174:	58024400 	.word	0x58024400
 8008178:	58024800 	.word	0x58024800
 800817c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008184:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f002 0301 	and.w	r3, r2, #1
 8008194:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008198:	2300      	movs	r3, #0
 800819a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800819e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f000 8089 	beq.w	80082bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081b0:	2b28      	cmp	r3, #40	; 0x28
 80081b2:	d86b      	bhi.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80081b4:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ba:	bf00      	nop
 80081bc:	08008295 	.word	0x08008295
 80081c0:	0800828d 	.word	0x0800828d
 80081c4:	0800828d 	.word	0x0800828d
 80081c8:	0800828d 	.word	0x0800828d
 80081cc:	0800828d 	.word	0x0800828d
 80081d0:	0800828d 	.word	0x0800828d
 80081d4:	0800828d 	.word	0x0800828d
 80081d8:	0800828d 	.word	0x0800828d
 80081dc:	08008261 	.word	0x08008261
 80081e0:	0800828d 	.word	0x0800828d
 80081e4:	0800828d 	.word	0x0800828d
 80081e8:	0800828d 	.word	0x0800828d
 80081ec:	0800828d 	.word	0x0800828d
 80081f0:	0800828d 	.word	0x0800828d
 80081f4:	0800828d 	.word	0x0800828d
 80081f8:	0800828d 	.word	0x0800828d
 80081fc:	08008277 	.word	0x08008277
 8008200:	0800828d 	.word	0x0800828d
 8008204:	0800828d 	.word	0x0800828d
 8008208:	0800828d 	.word	0x0800828d
 800820c:	0800828d 	.word	0x0800828d
 8008210:	0800828d 	.word	0x0800828d
 8008214:	0800828d 	.word	0x0800828d
 8008218:	0800828d 	.word	0x0800828d
 800821c:	08008295 	.word	0x08008295
 8008220:	0800828d 	.word	0x0800828d
 8008224:	0800828d 	.word	0x0800828d
 8008228:	0800828d 	.word	0x0800828d
 800822c:	0800828d 	.word	0x0800828d
 8008230:	0800828d 	.word	0x0800828d
 8008234:	0800828d 	.word	0x0800828d
 8008238:	0800828d 	.word	0x0800828d
 800823c:	08008295 	.word	0x08008295
 8008240:	0800828d 	.word	0x0800828d
 8008244:	0800828d 	.word	0x0800828d
 8008248:	0800828d 	.word	0x0800828d
 800824c:	0800828d 	.word	0x0800828d
 8008250:	0800828d 	.word	0x0800828d
 8008254:	0800828d 	.word	0x0800828d
 8008258:	0800828d 	.word	0x0800828d
 800825c:	08008295 	.word	0x08008295
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008264:	3308      	adds	r3, #8
 8008266:	2101      	movs	r1, #1
 8008268:	4618      	mov	r0, r3
 800826a:	f001 fe95 	bl	8009f98 <RCCEx_PLL2_Config>
 800826e:	4603      	mov	r3, r0
 8008270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008274:	e00f      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800827a:	3328      	adds	r3, #40	; 0x28
 800827c:	2101      	movs	r1, #1
 800827e:	4618      	mov	r0, r3
 8008280:	f001 ff3c 	bl	800a0fc <RCCEx_PLL3_Config>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800828a:	e004      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008292:	e000      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10a      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800829e:	4bbf      	ldr	r3, [pc, #764]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ac:	4abb      	ldr	r2, [pc, #748]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082ae:	430b      	orrs	r3, r1
 80082b0:	6553      	str	r3, [r2, #84]	; 0x54
 80082b2:	e003      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f002 0302 	and.w	r3, r2, #2
 80082c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082cc:	2300      	movs	r3, #0
 80082ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80082d6:	460b      	mov	r3, r1
 80082d8:	4313      	orrs	r3, r2
 80082da:	d041      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80082dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082e2:	2b05      	cmp	r3, #5
 80082e4:	d824      	bhi.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	08008339 	.word	0x08008339
 80082f0:	08008305 	.word	0x08008305
 80082f4:	0800831b 	.word	0x0800831b
 80082f8:	08008339 	.word	0x08008339
 80082fc:	08008339 	.word	0x08008339
 8008300:	08008339 	.word	0x08008339
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008308:	3308      	adds	r3, #8
 800830a:	2101      	movs	r1, #1
 800830c:	4618      	mov	r0, r3
 800830e:	f001 fe43 	bl	8009f98 <RCCEx_PLL2_Config>
 8008312:	4603      	mov	r3, r0
 8008314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008318:	e00f      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831e:	3328      	adds	r3, #40	; 0x28
 8008320:	2101      	movs	r1, #1
 8008322:	4618      	mov	r0, r3
 8008324:	f001 feea 	bl	800a0fc <RCCEx_PLL3_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800832e:	e004      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008336:	e000      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800833a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008342:	4b96      	ldr	r3, [pc, #600]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008346:	f023 0107 	bic.w	r1, r3, #7
 800834a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800834e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008350:	4a92      	ldr	r2, [pc, #584]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008352:	430b      	orrs	r3, r1
 8008354:	6553      	str	r3, [r2, #84]	; 0x54
 8008356:	e003      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800835c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f002 0304 	and.w	r3, r2, #4
 800836c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008370:	2300      	movs	r3, #0
 8008372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008376:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800837a:	460b      	mov	r3, r1
 800837c:	4313      	orrs	r3, r2
 800837e:	d044      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008388:	2b05      	cmp	r3, #5
 800838a:	d825      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800838c:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800838e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008392:	bf00      	nop
 8008394:	080083e1 	.word	0x080083e1
 8008398:	080083ad 	.word	0x080083ad
 800839c:	080083c3 	.word	0x080083c3
 80083a0:	080083e1 	.word	0x080083e1
 80083a4:	080083e1 	.word	0x080083e1
 80083a8:	080083e1 	.word	0x080083e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b0:	3308      	adds	r3, #8
 80083b2:	2101      	movs	r1, #1
 80083b4:	4618      	mov	r0, r3
 80083b6:	f001 fdef 	bl	8009f98 <RCCEx_PLL2_Config>
 80083ba:	4603      	mov	r3, r0
 80083bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083c0:	e00f      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c6:	3328      	adds	r3, #40	; 0x28
 80083c8:	2101      	movs	r1, #1
 80083ca:	4618      	mov	r0, r3
 80083cc:	f001 fe96 	bl	800a0fc <RCCEx_PLL3_Config>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083d6:	e004      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083de:	e000      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80083e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10b      	bne.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083ea:	4b6c      	ldr	r3, [pc, #432]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ee:	f023 0107 	bic.w	r1, r3, #7
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083fa:	4a68      	ldr	r2, [pc, #416]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083fc:	430b      	orrs	r3, r1
 80083fe:	6593      	str	r3, [r2, #88]	; 0x58
 8008400:	e003      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800840a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	f002 0320 	and.w	r3, r2, #32
 8008416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800841a:	2300      	movs	r3, #0
 800841c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008420:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008424:	460b      	mov	r3, r1
 8008426:	4313      	orrs	r3, r2
 8008428:	d055      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800842a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800842e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008436:	d033      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800843c:	d82c      	bhi.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800843e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008442:	d02f      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008448:	d826      	bhi.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800844a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800844e:	d02b      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008450:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008454:	d820      	bhi.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845a:	d012      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800845c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008460:	d81a      	bhi.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d022      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800846a:	d115      	bne.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008470:	3308      	adds	r3, #8
 8008472:	2100      	movs	r1, #0
 8008474:	4618      	mov	r0, r3
 8008476:	f001 fd8f 	bl	8009f98 <RCCEx_PLL2_Config>
 800847a:	4603      	mov	r3, r0
 800847c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008480:	e015      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008486:	3328      	adds	r3, #40	; 0x28
 8008488:	2102      	movs	r1, #2
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fe36 	bl	800a0fc <RCCEx_PLL3_Config>
 8008490:	4603      	mov	r3, r0
 8008492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008496:	e00a      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800849e:	e006      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084a0:	bf00      	nop
 80084a2:	e004      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084a4:	bf00      	nop
 80084a6:	e002      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084a8:	bf00      	nop
 80084aa:	e000      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084b6:	4b39      	ldr	r3, [pc, #228]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80084be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c6:	4a35      	ldr	r2, [pc, #212]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084c8:	430b      	orrs	r3, r1
 80084ca:	6553      	str	r3, [r2, #84]	; 0x54
 80084cc:	e003      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80084e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084e6:	2300      	movs	r3, #0
 80084e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80084ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4313      	orrs	r3, r2
 80084f4:	d058      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008502:	d033      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008504:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008508:	d82c      	bhi.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800850a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800850e:	d02f      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008514:	d826      	bhi.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008516:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800851a:	d02b      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800851c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008520:	d820      	bhi.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008526:	d012      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800852c:	d81a      	bhi.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d022      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008536:	d115      	bne.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853c:	3308      	adds	r3, #8
 800853e:	2100      	movs	r1, #0
 8008540:	4618      	mov	r0, r3
 8008542:	f001 fd29 	bl	8009f98 <RCCEx_PLL2_Config>
 8008546:	4603      	mov	r3, r0
 8008548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800854c:	e015      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800854e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008552:	3328      	adds	r3, #40	; 0x28
 8008554:	2102      	movs	r1, #2
 8008556:	4618      	mov	r0, r3
 8008558:	f001 fdd0 	bl	800a0fc <RCCEx_PLL3_Config>
 800855c:	4603      	mov	r3, r0
 800855e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008562:	e00a      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800856a:	e006      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800856c:	bf00      	nop
 800856e:	e004      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008570:	bf00      	nop
 8008572:	e002      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008574:	bf00      	nop
 8008576:	e000      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800857a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10e      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008586:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008592:	4a02      	ldr	r2, [pc, #8]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008594:	430b      	orrs	r3, r1
 8008596:	6593      	str	r3, [r2, #88]	; 0x58
 8008598:	e006      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800859a:	bf00      	nop
 800859c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80085b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085b8:	2300      	movs	r3, #0
 80085ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80085c2:	460b      	mov	r3, r1
 80085c4:	4313      	orrs	r3, r2
 80085c6:	d055      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80085c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085d4:	d033      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80085d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085da:	d82c      	bhi.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e0:	d02f      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80085e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e6:	d826      	bhi.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085ec:	d02b      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80085ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085f2:	d820      	bhi.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085f8:	d012      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80085fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085fe:	d81a      	bhi.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008600:	2b00      	cmp	r3, #0
 8008602:	d022      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008608:	d115      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860e:	3308      	adds	r3, #8
 8008610:	2100      	movs	r1, #0
 8008612:	4618      	mov	r0, r3
 8008614:	f001 fcc0 	bl	8009f98 <RCCEx_PLL2_Config>
 8008618:	4603      	mov	r3, r0
 800861a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800861e:	e015      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008624:	3328      	adds	r3, #40	; 0x28
 8008626:	2102      	movs	r1, #2
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fd67 	bl	800a0fc <RCCEx_PLL3_Config>
 800862e:	4603      	mov	r3, r0
 8008630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008634:	e00a      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800863c:	e006      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800863e:	bf00      	nop
 8008640:	e004      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008642:	bf00      	nop
 8008644:	e002      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008646:	bf00      	nop
 8008648:	e000      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800864a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800864c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10b      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008654:	4ba1      	ldr	r3, [pc, #644]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008658:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008660:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008664:	4a9d      	ldr	r2, [pc, #628]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008666:	430b      	orrs	r3, r1
 8008668:	6593      	str	r3, [r2, #88]	; 0x58
 800866a:	e003      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	f002 0308 	and.w	r3, r2, #8
 8008680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008684:	2300      	movs	r3, #0
 8008686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800868a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800868e:	460b      	mov	r3, r1
 8008690:	4313      	orrs	r3, r2
 8008692:	d01e      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800869c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a0:	d10c      	bne.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a6:	3328      	adds	r3, #40	; 0x28
 80086a8:	2102      	movs	r1, #2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 fd26 	bl	800a0fc <RCCEx_PLL3_Config>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086bc:	4b87      	ldr	r3, [pc, #540]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086cc:	4a83      	ldr	r2, [pc, #524]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086ce:	430b      	orrs	r3, r1
 80086d0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f002 0310 	and.w	r3, r2, #16
 80086de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086e2:	2300      	movs	r3, #0
 80086e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80086ec:	460b      	mov	r3, r1
 80086ee:	4313      	orrs	r3, r2
 80086f0:	d01e      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086fe:	d10c      	bne.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008704:	3328      	adds	r3, #40	; 0x28
 8008706:	2102      	movs	r1, #2
 8008708:	4618      	mov	r0, r3
 800870a:	f001 fcf7 	bl	800a0fc <RCCEx_PLL3_Config>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800871a:	4b70      	ldr	r3, [pc, #448]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800871c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800872a:	4a6c      	ldr	r2, [pc, #432]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800872c:	430b      	orrs	r3, r1
 800872e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800873c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008740:	2300      	movs	r3, #0
 8008742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008746:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800874a:	460b      	mov	r3, r1
 800874c:	4313      	orrs	r3, r2
 800874e:	d03e      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800875c:	d022      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800875e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008762:	d81b      	bhi.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d003      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876c:	d00b      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800876e:	e015      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008774:	3308      	adds	r3, #8
 8008776:	2100      	movs	r1, #0
 8008778:	4618      	mov	r0, r3
 800877a:	f001 fc0d 	bl	8009f98 <RCCEx_PLL2_Config>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008784:	e00f      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800878a:	3328      	adds	r3, #40	; 0x28
 800878c:	2102      	movs	r1, #2
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fcb4 	bl	800a0fc <RCCEx_PLL3_Config>
 8008794:	4603      	mov	r3, r0
 8008796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800879a:	e004      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087a2:	e000      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80087a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10b      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087ae:	4b4b      	ldr	r3, [pc, #300]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087be:	4a47      	ldr	r2, [pc, #284]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087c0:	430b      	orrs	r3, r1
 80087c2:	6593      	str	r3, [r2, #88]	; 0x58
 80087c4:	e003      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80087da:	67bb      	str	r3, [r7, #120]	; 0x78
 80087dc:	2300      	movs	r3, #0
 80087de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80087e4:	460b      	mov	r3, r1
 80087e6:	4313      	orrs	r3, r2
 80087e8:	d03b      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80087ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087f6:	d01f      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80087f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087fc:	d818      	bhi.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80087fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008802:	d003      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008808:	d007      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800880a:	e011      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800880c:	4b33      	ldr	r3, [pc, #204]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	4a32      	ldr	r2, [pc, #200]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008818:	e00f      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800881a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881e:	3328      	adds	r3, #40	; 0x28
 8008820:	2101      	movs	r1, #1
 8008822:	4618      	mov	r0, r3
 8008824:	f001 fc6a 	bl	800a0fc <RCCEx_PLL3_Config>
 8008828:	4603      	mov	r3, r0
 800882a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800882e:	e004      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008836:	e000      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800883a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008842:	4b26      	ldr	r3, [pc, #152]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008846:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008852:	4a22      	ldr	r2, [pc, #136]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008854:	430b      	orrs	r3, r1
 8008856:	6553      	str	r3, [r2, #84]	; 0x54
 8008858:	e003      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800885e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800886e:	673b      	str	r3, [r7, #112]	; 0x70
 8008870:	2300      	movs	r3, #0
 8008872:	677b      	str	r3, [r7, #116]	; 0x74
 8008874:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008878:	460b      	mov	r3, r1
 800887a:	4313      	orrs	r3, r2
 800887c:	d034      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800887e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008884:	2b00      	cmp	r3, #0
 8008886:	d003      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888c:	d007      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800888e:	e011      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	4a11      	ldr	r2, [pc, #68]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800889a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800889c:	e00e      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a2:	3308      	adds	r3, #8
 80088a4:	2102      	movs	r1, #2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 fb76 	bl	8009f98 <RCCEx_PLL2_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088b2:	e003      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10d      	bne.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088c4:	4b05      	ldr	r3, [pc, #20]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d2:	4a02      	ldr	r2, [pc, #8]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088d4:	430b      	orrs	r3, r1
 80088d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088d8:	e006      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80088da:	bf00      	nop
 80088dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80088f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80088f6:	2300      	movs	r3, #0
 80088f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80088fe:	460b      	mov	r3, r1
 8008900:	4313      	orrs	r3, r2
 8008902:	d00c      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008908:	3328      	adds	r3, #40	; 0x28
 800890a:	2102      	movs	r1, #2
 800890c:	4618      	mov	r0, r3
 800890e:	f001 fbf5 	bl	800a0fc <RCCEx_PLL3_Config>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800892a:	663b      	str	r3, [r7, #96]	; 0x60
 800892c:	2300      	movs	r3, #0
 800892e:	667b      	str	r3, [r7, #100]	; 0x64
 8008930:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008934:	460b      	mov	r3, r1
 8008936:	4313      	orrs	r3, r2
 8008938:	d038      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008946:	d018      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800894c:	d811      	bhi.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800894e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008952:	d014      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008958:	d80b      	bhi.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d011      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800895e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008962:	d106      	bne.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008964:	4bc3      	ldr	r3, [pc, #780]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	4ac2      	ldr	r2, [pc, #776]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800896a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800896e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008970:	e008      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008978:	e004      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800897a:	bf00      	nop
 800897c:	e002      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800897e:	bf00      	nop
 8008980:	e000      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008984:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10b      	bne.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800898c:	4bb9      	ldr	r3, [pc, #740]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800898e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008990:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800899c:	4ab5      	ldr	r2, [pc, #724]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800899e:	430b      	orrs	r3, r1
 80089a0:	6553      	str	r3, [r2, #84]	; 0x54
 80089a2:	e003      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80089b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80089ba:	2300      	movs	r3, #0
 80089bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80089c2:	460b      	mov	r3, r1
 80089c4:	4313      	orrs	r3, r2
 80089c6:	d009      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089c8:	4baa      	ldr	r3, [pc, #680]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80089d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089d6:	4aa7      	ldr	r2, [pc, #668]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089d8:	430b      	orrs	r3, r1
 80089da:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80089e8:	653b      	str	r3, [r7, #80]	; 0x50
 80089ea:	2300      	movs	r3, #0
 80089ec:	657b      	str	r3, [r7, #84]	; 0x54
 80089ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80089f2:	460b      	mov	r3, r1
 80089f4:	4313      	orrs	r3, r2
 80089f6:	d00a      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80089f8:	4b9e      	ldr	r3, [pc, #632]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a08:	4a9a      	ldr	r2, [pc, #616]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008a24:	460b      	mov	r3, r1
 8008a26:	4313      	orrs	r3, r2
 8008a28:	d009      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a2a:	4b92      	ldr	r3, [pc, #584]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a38:	4a8e      	ldr	r2, [pc, #568]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a3a:	430b      	orrs	r3, r1
 8008a3c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008a54:	460b      	mov	r3, r1
 8008a56:	4313      	orrs	r3, r2
 8008a58:	d00e      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a5a:	4b86      	ldr	r3, [pc, #536]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	4a85      	ldr	r2, [pc, #532]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a64:	6113      	str	r3, [r2, #16]
 8008a66:	4b83      	ldr	r3, [pc, #524]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a68:	6919      	ldr	r1, [r3, #16]
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a72:	4a80      	ldr	r2, [pc, #512]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a74:	430b      	orrs	r3, r1
 8008a76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a86:	2300      	movs	r3, #0
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4313      	orrs	r3, r2
 8008a92:	d009      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a94:	4b77      	ldr	r3, [pc, #476]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a98:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa2:	4a74      	ldr	r2, [pc, #464]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aa4:	430b      	orrs	r3, r1
 8008aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	d00a      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ac4:	4b6b      	ldr	r3, [pc, #428]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ad4:	4a67      	ldr	r2, [pc, #412]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ad6:	430b      	orrs	r3, r1
 8008ad8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	62b9      	str	r1, [r7, #40]	; 0x28
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008af0:	460b      	mov	r3, r1
 8008af2:	4313      	orrs	r3, r2
 8008af4:	d011      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008afa:	3308      	adds	r3, #8
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f001 fa4a 	bl	8009f98 <RCCEx_PLL2_Config>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	2100      	movs	r1, #0
 8008b24:	6239      	str	r1, [r7, #32]
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b30:	460b      	mov	r3, r1
 8008b32:	4313      	orrs	r3, r2
 8008b34:	d011      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 fa2a 	bl	8009f98 <RCCEx_PLL2_Config>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	2100      	movs	r1, #0
 8008b64:	61b9      	str	r1, [r7, #24]
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b70:	460b      	mov	r3, r1
 8008b72:	4313      	orrs	r3, r2
 8008b74:	d011      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	2102      	movs	r1, #2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 fa0a 	bl	8009f98 <RCCEx_PLL2_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	6139      	str	r1, [r7, #16]
 8008ba6:	f003 0308 	and.w	r3, r3, #8
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	d011      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bba:	3328      	adds	r3, #40	; 0x28
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fa9c 	bl	800a0fc <RCCEx_PLL3_Config>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	2100      	movs	r1, #0
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	f003 0310 	and.w	r3, r3, #16
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	d011      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfa:	3328      	adds	r3, #40	; 0x28
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f001 fa7c 	bl	800a0fc <RCCEx_PLL3_Config>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	2100      	movs	r1, #0
 8008c24:	6039      	str	r1, [r7, #0]
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	607b      	str	r3, [r7, #4]
 8008c2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c30:	460b      	mov	r3, r1
 8008c32:	4313      	orrs	r3, r2
 8008c34:	d011      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3a:	3328      	adds	r3, #40	; 0x28
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 fa5c 	bl	800a0fc <RCCEx_PLL3_Config>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008c5a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e000      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c74:	58024400 	.word	0x58024400

08008c78 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b090      	sub	sp, #64	; 0x40
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c86:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	f040 8094 	bne.w	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008c90:	4b9e      	ldr	r3, [pc, #632]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	f200 8087 	bhi.w	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008ca2:	a201      	add	r2, pc, #4	; (adr r2, 8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca8:	08008cbd 	.word	0x08008cbd
 8008cac:	08008ce5 	.word	0x08008ce5
 8008cb0:	08008d0d 	.word	0x08008d0d
 8008cb4:	08008da9 	.word	0x08008da9
 8008cb8:	08008d35 	.word	0x08008d35
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cbc:	4b93      	ldr	r3, [pc, #588]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cc8:	d108      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 f810 	bl	8009cf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd8:	f000 bd45 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce0:	f000 bd41 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ce4:	4b89      	ldr	r3, [pc, #548]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cf0:	d108      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf2:	f107 0318 	add.w	r3, r7, #24
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fd54 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d00:	f000 bd31 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d08:	f000 bd2d 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d0c:	4b7f      	ldr	r3, [pc, #508]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d18:	d108      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d1a:	f107 030c 	add.w	r3, r7, #12
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fe94 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d28:	f000 bd1d 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d30:	f000 bd19 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d34:	4b75      	ldr	r3, [pc, #468]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d3c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d3e:	4b73      	ldr	r3, [pc, #460]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b04      	cmp	r3, #4
 8008d48:	d10c      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d50:	4b6e      	ldr	r3, [pc, #440]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	08db      	lsrs	r3, r3, #3
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	4a6d      	ldr	r2, [pc, #436]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d62:	e01f      	b.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d64:	4b69      	ldr	r3, [pc, #420]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d70:	d106      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d78:	d102      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d7a:	4b66      	ldr	r3, [pc, #408]	; (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d7e:	e011      	b.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d80:	4b62      	ldr	r3, [pc, #392]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d8c:	d106      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d94:	d102      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d96:	4b60      	ldr	r3, [pc, #384]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d9a:	e003      	b.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008da0:	f000 bce1 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008da4:	f000 bcdf 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008da8:	4b5c      	ldr	r3, [pc, #368]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dac:	f000 bcdb 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008db4:	f000 bcd7 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	f040 80ad 	bne.w	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008dc6:	4b51      	ldr	r3, [pc, #324]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008dce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd6:	d056      	beq.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dde:	f200 8090 	bhi.w	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	2bc0      	cmp	r3, #192	; 0xc0
 8008de6:	f000 8088 	beq.w	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	2bc0      	cmp	r3, #192	; 0xc0
 8008dee:	f200 8088 	bhi.w	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	2b80      	cmp	r3, #128	; 0x80
 8008df6:	d032      	beq.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	2b80      	cmp	r3, #128	; 0x80
 8008dfc:	f200 8081 	bhi.w	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d014      	beq.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008e0c:	e079      	b.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e0e:	4b3f      	ldr	r3, [pc, #252]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e1a:	d108      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 ff67 	bl	8009cf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e2a:	f000 bc9c 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e32:	f000 bc98 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e36:	4b35      	ldr	r3, [pc, #212]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e42:	d108      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e44:	f107 0318 	add.w	r3, r7, #24
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fcab 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e52:	f000 bc88 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e5a:	f000 bc84 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e5e:	4b2b      	ldr	r3, [pc, #172]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e6a:	d108      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e6c:	f107 030c 	add.w	r3, r7, #12
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 fdeb 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e7a:	f000 bc74 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e82:	f000 bc70 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e86:	4b21      	ldr	r3, [pc, #132]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e8e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e90:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d10c      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d109      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ea2:	4b1a      	ldr	r3, [pc, #104]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	08db      	lsrs	r3, r3, #3
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	4a18      	ldr	r2, [pc, #96]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008eae:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb4:	e01f      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008eb6:	4b15      	ldr	r3, [pc, #84]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec2:	d106      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eca:	d102      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ecc:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed0:	e011      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ede:	d106      	bne.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee6:	d102      	bne.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eec:	e003      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008ef2:	f000 bc38 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ef6:	f000 bc36 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008efa:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008efe:	f000 bc32 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f06:	f000 bc2e 	b.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f0a:	bf00      	nop
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	03d09000 	.word	0x03d09000
 8008f14:	003d0900 	.word	0x003d0900
 8008f18:	017d7840 	.word	0x017d7840
 8008f1c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f24:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	f040 809c 	bne.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008f2e:	4b9e      	ldr	r3, [pc, #632]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f32:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008f36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f3e:	d054      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f46:	f200 808b 	bhi.w	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f50:	f000 8083 	beq.w	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f5a:	f200 8081 	bhi.w	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f64:	d02f      	beq.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f6c:	d878      	bhi.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f7a:	d012      	beq.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008f7c:	e070      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f7e:	4b8a      	ldr	r3, [pc, #552]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f8a:	d107      	bne.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 feaf 	bl	8009cf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f9a:	e3e4      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fa0:	e3e1      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fa2:	4b81      	ldr	r3, [pc, #516]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fae:	d107      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fb0:	f107 0318 	add.w	r3, r7, #24
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 fbf5 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fbe:	e3d2      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc4:	e3cf      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fc6:	4b78      	ldr	r3, [pc, #480]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd2:	d107      	bne.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fd4:	f107 030c 	add.w	r3, r7, #12
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fd37 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe2:	e3c0      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe8:	e3bd      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fea:	4b6f      	ldr	r3, [pc, #444]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ff2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ff4:	4b6c      	ldr	r3, [pc, #432]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d10c      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009006:	4b68      	ldr	r3, [pc, #416]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	08db      	lsrs	r3, r3, #3
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	4a66      	ldr	r2, [pc, #408]	; (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009012:	fa22 f303 	lsr.w	r3, r2, r3
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009018:	e01e      	b.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800901a:	4b63      	ldr	r3, [pc, #396]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009026:	d106      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800902e:	d102      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009030:	4b5f      	ldr	r3, [pc, #380]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009034:	e010      	b.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009036:	4b5c      	ldr	r3, [pc, #368]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009042:	d106      	bne.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800904a:	d102      	bne.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800904c:	4b59      	ldr	r3, [pc, #356]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009050:	e002      	b.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009056:	e386      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009058:	e385      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800905a:	4b57      	ldr	r3, [pc, #348]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800905c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800905e:	e382      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009064:	e37f      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800906a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800906e:	430b      	orrs	r3, r1
 8009070:	f040 80a7 	bne.w	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009074:	4b4c      	ldr	r3, [pc, #304]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009078:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800907c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009084:	d055      	beq.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800908c:	f200 8096 	bhi.w	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009096:	f000 8084 	beq.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090a0:	f200 808c 	bhi.w	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090aa:	d030      	beq.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090b2:	f200 8083 	bhi.w	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d004      	beq.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090c2:	d012      	beq.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80090c4:	e07a      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090c6:	4b38      	ldr	r3, [pc, #224]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090d2:	d107      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fe0b 	bl	8009cf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e2:	e340      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090e8:	e33d      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ea:	4b2f      	ldr	r3, [pc, #188]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090f6:	d107      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090f8:	f107 0318 	add.w	r3, r7, #24
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fb51 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009106:	e32e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800910c:	e32b      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800910e:	4b26      	ldr	r3, [pc, #152]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800911a:	d107      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800911c:	f107 030c 	add.w	r3, r7, #12
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fc93 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800912a:	e31c      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009130:	e319      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009132:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800913a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800913c:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b04      	cmp	r3, #4
 8009146:	d10c      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914a:	2b00      	cmp	r3, #0
 800914c:	d109      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800914e:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	08db      	lsrs	r3, r3, #3
 8009154:	f003 0303 	and.w	r3, r3, #3
 8009158:	4a14      	ldr	r2, [pc, #80]	; (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800915a:	fa22 f303 	lsr.w	r3, r2, r3
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009160:	e01e      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009162:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916e:	d106      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009176:	d102      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009178:	4b0d      	ldr	r3, [pc, #52]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800917c:	e010      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800917e:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800918a:	d106      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800918c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009192:	d102      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009194:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009198:	e002      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800919e:	e2e2      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091a0:	e2e1      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091a2:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091a6:	e2de      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091a8:	58024400 	.word	0x58024400
 80091ac:	03d09000 	.word	0x03d09000
 80091b0:	003d0900 	.word	0x003d0900
 80091b4:	017d7840 	.word	0x017d7840
 80091b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c0:	e2d1      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80091c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091c6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80091ca:	430b      	orrs	r3, r1
 80091cc:	f040 809c 	bne.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80091d0:	4b93      	ldr	r3, [pc, #588]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80091d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091e0:	d054      	beq.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091e8:	f200 808b 	bhi.w	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091f2:	f000 8083 	beq.w	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091fc:	f200 8081 	bhi.w	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009206:	d02f      	beq.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800920e:	d878      	bhi.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800921c:	d012      	beq.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800921e:	e070      	b.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009220:	4b7f      	ldr	r3, [pc, #508]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800922c:	d107      	bne.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800922e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fd5e 	bl	8009cf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800923c:	e293      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009242:	e290      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009244:	4b76      	ldr	r3, [pc, #472]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800924c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009250:	d107      	bne.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009252:	f107 0318 	add.w	r3, r7, #24
 8009256:	4618      	mov	r0, r3
 8009258:	f000 faa4 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009260:	e281      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009266:	e27e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009268:	4b6d      	ldr	r3, [pc, #436]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009274:	d107      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009276:	f107 030c 	add.w	r3, r7, #12
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fbe6 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009284:	e26f      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800928a:	e26c      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800928c:	4b64      	ldr	r3, [pc, #400]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800928e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009294:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009296:	4b62      	ldr	r3, [pc, #392]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0304 	and.w	r3, r3, #4
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d10c      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80092a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092a8:	4b5d      	ldr	r3, [pc, #372]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	08db      	lsrs	r3, r3, #3
 80092ae:	f003 0303 	and.w	r3, r3, #3
 80092b2:	4a5c      	ldr	r2, [pc, #368]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
 80092b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ba:	e01e      	b.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092bc:	4b58      	ldr	r3, [pc, #352]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c8:	d106      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80092ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092d0:	d102      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092d2:	4b55      	ldr	r3, [pc, #340]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d6:	e010      	b.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092d8:	4b51      	ldr	r3, [pc, #324]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092e4:	d106      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80092e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092ec:	d102      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092ee:	4b4f      	ldr	r3, [pc, #316]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f2:	e002      	b.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80092f8:	e235      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092fa:	e234      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092fc:	4b4c      	ldr	r3, [pc, #304]	; (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009300:	e231      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009306:	e22e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800930c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009310:	430b      	orrs	r3, r1
 8009312:	f040 808f 	bne.w	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009316:	4b42      	ldr	r3, [pc, #264]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800931e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009326:	d06b      	beq.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800932e:	d874      	bhi.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009336:	d056      	beq.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800933e:	d86c      	bhi.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009346:	d03b      	beq.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800934e:	d864      	bhi.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009352:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009356:	d021      	beq.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800935e:	d85c      	bhi.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009362:	2b00      	cmp	r3, #0
 8009364:	d004      	beq.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800936c:	d004      	beq.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800936e:	e054      	b.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009370:	f7fe fa4c 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 8009374:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009376:	e1f6      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009378:	4b29      	ldr	r3, [pc, #164]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009384:	d107      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009386:	f107 0318 	add.w	r3, r7, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fa0a 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009394:	e1e7      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800939a:	e1e4      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800939c:	4b20      	ldr	r3, [pc, #128]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a8:	d107      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093aa:	f107 030c 	add.w	r3, r7, #12
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fb4c 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093b8:	e1d5      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093be:	e1d2      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093c0:	4b17      	ldr	r3, [pc, #92]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d109      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093cc:	4b14      	ldr	r3, [pc, #80]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	08db      	lsrs	r3, r3, #3
 80093d2:	f003 0303 	and.w	r3, r3, #3
 80093d6:	4a13      	ldr	r2, [pc, #76]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80093d8:	fa22 f303 	lsr.w	r3, r2, r3
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093de:	e1c2      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093e4:	e1bf      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093e6:	4b0e      	ldr	r3, [pc, #56]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f2:	d102      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80093f4:	4b0c      	ldr	r3, [pc, #48]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f8:	e1b5      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093fe:	e1b2      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009400:	4b07      	ldr	r3, [pc, #28]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800940c:	d102      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800940e:	4b07      	ldr	r3, [pc, #28]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009410:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009412:	e1a8      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009418:	e1a5      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800941e:	e1a2      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009420:	58024400 	.word	0x58024400
 8009424:	03d09000 	.word	0x03d09000
 8009428:	003d0900 	.word	0x003d0900
 800942c:	017d7840 	.word	0x017d7840
 8009430:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009438:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800943c:	430b      	orrs	r3, r1
 800943e:	d173      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009440:	4b9c      	ldr	r3, [pc, #624]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009448:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009450:	d02f      	beq.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009458:	d863      	bhi.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	2b00      	cmp	r3, #0
 800945e:	d004      	beq.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009466:	d012      	beq.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009468:	e05b      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800946a:	4b92      	ldr	r3, [pc, #584]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009476:	d107      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009478:	f107 0318 	add.w	r3, r7, #24
 800947c:	4618      	mov	r0, r3
 800947e:	f000 f991 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009486:	e16e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009488:	2300      	movs	r3, #0
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800948c:	e16b      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800948e:	4b89      	ldr	r3, [pc, #548]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800949a:	d107      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800949c:	f107 030c 	add.w	r3, r7, #12
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 fad3 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094aa:	e15c      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094b0:	e159      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094b2:	4b80      	ldr	r3, [pc, #512]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094ba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094bc:	4b7d      	ldr	r3, [pc, #500]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0304 	and.w	r3, r3, #4
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	d10c      	bne.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80094c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d109      	bne.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094ce:	4b79      	ldr	r3, [pc, #484]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	08db      	lsrs	r3, r3, #3
 80094d4:	f003 0303 	and.w	r3, r3, #3
 80094d8:	4a77      	ldr	r2, [pc, #476]	; (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80094da:	fa22 f303 	lsr.w	r3, r2, r3
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e0:	e01e      	b.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094e2:	4b74      	ldr	r3, [pc, #464]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ee:	d106      	bne.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80094f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094f6:	d102      	bne.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094f8:	4b70      	ldr	r3, [pc, #448]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094fc:	e010      	b.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094fe:	4b6d      	ldr	r3, [pc, #436]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800950a:	d106      	bne.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800950c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009512:	d102      	bne.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009514:	4b6a      	ldr	r3, [pc, #424]	; (80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009518:	e002      	b.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800951e:	e122      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009520:	e121      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009526:	e11e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009530:	430b      	orrs	r3, r1
 8009532:	d133      	bne.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009534:	4b5f      	ldr	r3, [pc, #380]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800953c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009540:	2b00      	cmp	r3, #0
 8009542:	d004      	beq.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800954a:	d012      	beq.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800954c:	e023      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800954e:	4b59      	ldr	r3, [pc, #356]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800955a:	d107      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800955c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fbc7 	bl	8009cf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800956a:	e0fc      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009570:	e0f9      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009572:	4b50      	ldr	r3, [pc, #320]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800957a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800957e:	d107      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009580:	f107 0318 	add.w	r3, r7, #24
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f90d 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800958e:	e0ea      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009594:	e0e7      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800959a:	e0e4      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800959c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095a0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80095a4:	430b      	orrs	r3, r1
 80095a6:	f040 808d 	bne.w	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80095aa:	4b42      	ldr	r3, [pc, #264]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80095b2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ba:	d06b      	beq.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095c2:	d874      	bhi.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80095c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ca:	d056      	beq.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d2:	d86c      	bhi.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095da:	d03b      	beq.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095e2:	d864      	bhi.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80095e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ea:	d021      	beq.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095f2:	d85c      	bhi.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d004      	beq.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009600:	d004      	beq.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009602:	e054      	b.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009604:	f000 f8b8 	bl	8009778 <HAL_RCCEx_GetD3PCLK1Freq>
 8009608:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800960a:	e0ac      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800960c:	4b29      	ldr	r3, [pc, #164]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009618:	d107      	bne.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800961a:	f107 0318 	add.w	r3, r7, #24
 800961e:	4618      	mov	r0, r3
 8009620:	f000 f8c0 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009628:	e09d      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800962e:	e09a      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009630:	4b20      	ldr	r3, [pc, #128]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800963c:	d107      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800963e:	f107 030c 	add.w	r3, r7, #12
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fa02 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964c:	e08b      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009652:	e088      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009654:	4b17      	ldr	r3, [pc, #92]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0304 	and.w	r3, r3, #4
 800965c:	2b04      	cmp	r3, #4
 800965e:	d109      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009660:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	08db      	lsrs	r3, r3, #3
 8009666:	f003 0303 	and.w	r3, r3, #3
 800966a:	4a13      	ldr	r2, [pc, #76]	; (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800966c:	fa22 f303 	lsr.w	r3, r2, r3
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009672:	e078      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009678:	e075      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800967a:	4b0e      	ldr	r3, [pc, #56]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009686:	d102      	bne.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009688:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800968a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800968c:	e06b      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009692:	e068      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009694:	4b07      	ldr	r3, [pc, #28]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800969c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096a0:	d102      	bne.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80096a2:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80096a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096a6:	e05e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096ac:	e05b      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096b2:	e058      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096b4:	58024400 	.word	0x58024400
 80096b8:	03d09000 	.word	0x03d09000
 80096bc:	003d0900 	.word	0x003d0900
 80096c0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80096c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096c8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80096cc:	430b      	orrs	r3, r1
 80096ce:	d148      	bne.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80096d0:	4b27      	ldr	r3, [pc, #156]	; (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80096d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096e0:	d02a      	beq.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096e8:	d838      	bhi.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80096ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d004      	beq.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096f6:	d00d      	beq.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80096f8:	e030      	b.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096fa:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009706:	d102      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009708:	4b1a      	ldr	r3, [pc, #104]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800970c:	e02b      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009712:	e028      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009714:	4b16      	ldr	r3, [pc, #88]	; (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800971c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009720:	d107      	bne.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fae4 	bl	8009cf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009730:	e019      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009736:	e016      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009738:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009744:	d107      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009746:	f107 0318 	add.w	r3, r7, #24
 800974a:	4618      	mov	r0, r3
 800974c:	f000 f82a 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009754:	e007      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800975a:	e004      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009760:	e001      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009768:	4618      	mov	r0, r3
 800976a:	3740      	adds	r7, #64	; 0x40
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	58024400 	.word	0x58024400
 8009774:	017d7840 	.word	0x017d7840

08009778 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800977c:	f7fe f816 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 8009780:	4602      	mov	r2, r0
 8009782:	4b06      	ldr	r3, [pc, #24]	; (800979c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	091b      	lsrs	r3, r3, #4
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	4904      	ldr	r1, [pc, #16]	; (80097a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800978e:	5ccb      	ldrb	r3, [r1, r3]
 8009790:	f003 031f 	and.w	r3, r3, #31
 8009794:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009798:	4618      	mov	r0, r3
 800979a:	bd80      	pop	{r7, pc}
 800979c:	58024400 	.word	0x58024400
 80097a0:	0800d208 	.word	0x0800d208

080097a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b089      	sub	sp, #36	; 0x24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097ac:	4ba1      	ldr	r3, [pc, #644]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80097b6:	4b9f      	ldr	r3, [pc, #636]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ba:	0b1b      	lsrs	r3, r3, #12
 80097bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097c2:	4b9c      	ldr	r3, [pc, #624]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c6:	091b      	lsrs	r3, r3, #4
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80097ce:	4b99      	ldr	r3, [pc, #612]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d2:	08db      	lsrs	r3, r3, #3
 80097d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	fb02 f303 	mul.w	r3, r2, r3
 80097de:	ee07 3a90 	vmov	s15, r3
 80097e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 8111 	beq.w	8009a14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	f000 8083 	beq.w	8009900 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	f200 80a1 	bhi.w	8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d056      	beq.n	80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800980e:	e099      	b.n	8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009810:	4b88      	ldr	r3, [pc, #544]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0320 	and.w	r3, r3, #32
 8009818:	2b00      	cmp	r3, #0
 800981a:	d02d      	beq.n	8009878 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800981c:	4b85      	ldr	r3, [pc, #532]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	08db      	lsrs	r3, r3, #3
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	4a84      	ldr	r2, [pc, #528]	; (8009a38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
 800982c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	ee07 3a90 	vmov	s15, r3
 8009834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009846:	4b7b      	ldr	r3, [pc, #492]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009856:	ed97 6a03 	vldr	s12, [r7, #12]
 800985a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800985e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800986a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800986e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009872:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009876:	e087      	b.n	8009988 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009882:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800988a:	4b6a      	ldr	r3, [pc, #424]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009892:	ee07 3a90 	vmov	s15, r3
 8009896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800989a:	ed97 6a03 	vldr	s12, [r7, #12]
 800989e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ba:	e065      	b.n	8009988 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ce:	4b59      	ldr	r3, [pc, #356]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098de:	ed97 6a03 	vldr	s12, [r7, #12]
 80098e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098fe:	e043      	b.n	8009988 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800990e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009912:	4b48      	ldr	r3, [pc, #288]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800991a:	ee07 3a90 	vmov	s15, r3
 800991e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009922:	ed97 6a03 	vldr	s12, [r7, #12]
 8009926:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800992a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800993a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009942:	e021      	b.n	8009988 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009956:	4b37      	ldr	r3, [pc, #220]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995e:	ee07 3a90 	vmov	s15, r3
 8009962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009966:	ed97 6a03 	vldr	s12, [r7, #12]
 800996a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800996e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800997a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009986:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009988:	4b2a      	ldr	r3, [pc, #168]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800998a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998c:	0a5b      	lsrs	r3, r3, #9
 800998e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800999e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ae:	ee17 2a90 	vmov	r2, s15
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80099b6:	4b1f      	ldr	r3, [pc, #124]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	0c1b      	lsrs	r3, r3, #16
 80099bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c0:	ee07 3a90 	vmov	s15, r3
 80099c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099dc:	ee17 2a90 	vmov	r2, s15
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80099e4:	4b13      	ldr	r3, [pc, #76]	; (8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	0e1b      	lsrs	r3, r3, #24
 80099ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0a:	ee17 2a90 	vmov	r2, s15
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a12:	e008      	b.n	8009a26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	609a      	str	r2, [r3, #8]
}
 8009a26:	bf00      	nop
 8009a28:	3724      	adds	r7, #36	; 0x24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	58024400 	.word	0x58024400
 8009a38:	03d09000 	.word	0x03d09000
 8009a3c:	46000000 	.word	0x46000000
 8009a40:	4c742400 	.word	0x4c742400
 8009a44:	4a742400 	.word	0x4a742400
 8009a48:	4bbebc20 	.word	0x4bbebc20

08009a4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b089      	sub	sp, #36	; 0x24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a54:	4ba1      	ldr	r3, [pc, #644]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a58:	f003 0303 	and.w	r3, r3, #3
 8009a5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009a5e:	4b9f      	ldr	r3, [pc, #636]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a62:	0d1b      	lsrs	r3, r3, #20
 8009a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a6a:	4b9c      	ldr	r3, [pc, #624]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009a76:	4b99      	ldr	r3, [pc, #612]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7a:	08db      	lsrs	r3, r3, #3
 8009a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	fb02 f303 	mul.w	r3, r2, r3
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 8111 	beq.w	8009cbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	f000 8083 	beq.w	8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	f200 80a1 	bhi.w	8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d056      	beq.n	8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ab6:	e099      	b.n	8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab8:	4b88      	ldr	r3, [pc, #544]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0320 	and.w	r3, r3, #32
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d02d      	beq.n	8009b20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ac4:	4b85      	ldr	r3, [pc, #532]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	08db      	lsrs	r3, r3, #3
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	4a84      	ldr	r2, [pc, #528]	; (8009ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	ee07 3a90 	vmov	s15, r3
 8009adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aee:	4b7b      	ldr	r3, [pc, #492]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b1e:	e087      	b.n	8009c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b32:	4b6a      	ldr	r3, [pc, #424]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b62:	e065      	b.n	8009c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009cec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b76:	4b59      	ldr	r3, [pc, #356]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ba6:	e043      	b.n	8009c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bba:	4b48      	ldr	r3, [pc, #288]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bea:	e021      	b.n	8009c30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009cec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfe:	4b37      	ldr	r3, [pc, #220]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009c30:	4b2a      	ldr	r3, [pc, #168]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c34:	0a5b      	lsrs	r3, r3, #9
 8009c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c56:	ee17 2a90 	vmov	r2, s15
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009c5e:	4b1f      	ldr	r3, [pc, #124]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	0c1b      	lsrs	r3, r3, #16
 8009c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c68:	ee07 3a90 	vmov	s15, r3
 8009c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c84:	ee17 2a90 	vmov	r2, s15
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009c8c:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c90:	0e1b      	lsrs	r3, r3, #24
 8009c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cb2:	ee17 2a90 	vmov	r2, s15
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009cba:	e008      	b.n	8009cce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	609a      	str	r2, [r3, #8]
}
 8009cce:	bf00      	nop
 8009cd0:	3724      	adds	r7, #36	; 0x24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	03d09000 	.word	0x03d09000
 8009ce4:	46000000 	.word	0x46000000
 8009ce8:	4c742400 	.word	0x4c742400
 8009cec:	4a742400 	.word	0x4a742400
 8009cf0:	4bbebc20 	.word	0x4bbebc20

08009cf4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b089      	sub	sp, #36	; 0x24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cfc:	4ba0      	ldr	r3, [pc, #640]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009d06:	4b9e      	ldr	r3, [pc, #632]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0a:	091b      	lsrs	r3, r3, #4
 8009d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d12:	4b9b      	ldr	r3, [pc, #620]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d1c:	4b98      	ldr	r3, [pc, #608]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d20:	08db      	lsrs	r3, r3, #3
 8009d22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	fb02 f303 	mul.w	r3, r2, r3
 8009d2c:	ee07 3a90 	vmov	s15, r3
 8009d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8111 	beq.w	8009f62 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	f000 8083 	beq.w	8009e4e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	f200 80a1 	bhi.w	8009e92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d056      	beq.n	8009e0a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d5c:	e099      	b.n	8009e92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d5e:	4b88      	ldr	r3, [pc, #544]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0320 	and.w	r3, r3, #32
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d02d      	beq.n	8009dc6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d6a:	4b85      	ldr	r3, [pc, #532]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	08db      	lsrs	r3, r3, #3
 8009d70:	f003 0303 	and.w	r3, r3, #3
 8009d74:	4a83      	ldr	r2, [pc, #524]	; (8009f84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009d76:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	ee07 3a90 	vmov	s15, r3
 8009d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d94:	4b7a      	ldr	r3, [pc, #488]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9c:	ee07 3a90 	vmov	s15, r3
 8009da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009f88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009dc4:	e087      	b.n	8009ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	ee07 3a90 	vmov	s15, r3
 8009dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009f8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd8:	4b69      	ldr	r3, [pc, #420]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de0:	ee07 3a90 	vmov	s15, r3
 8009de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009f88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e08:	e065      	b.n	8009ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	ee07 3a90 	vmov	s15, r3
 8009e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009f90 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1c:	4b58      	ldr	r3, [pc, #352]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e24:	ee07 3a90 	vmov	s15, r3
 8009e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e30:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009f88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e4c:	e043      	b.n	8009ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	ee07 3a90 	vmov	s15, r3
 8009e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009f94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e60:	4b47      	ldr	r3, [pc, #284]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e68:	ee07 3a90 	vmov	s15, r3
 8009e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e70:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e74:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009f88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e90:	e021      	b.n	8009ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	ee07 3a90 	vmov	s15, r3
 8009e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009f8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea4:	4b36      	ldr	r3, [pc, #216]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eac:	ee07 3a90 	vmov	s15, r3
 8009eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009f88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ed4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009ed6:	4b2a      	ldr	r3, [pc, #168]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eda:	0a5b      	lsrs	r3, r3, #9
 8009edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009efc:	ee17 2a90 	vmov	r2, s15
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009f04:	4b1e      	ldr	r3, [pc, #120]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	0c1b      	lsrs	r3, r3, #16
 8009f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f2a:	ee17 2a90 	vmov	r2, s15
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009f32:	4b13      	ldr	r3, [pc, #76]	; (8009f80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f36:	0e1b      	lsrs	r3, r3, #24
 8009f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f3c:	ee07 3a90 	vmov	s15, r3
 8009f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f58:	ee17 2a90 	vmov	r2, s15
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f60:	e008      	b.n	8009f74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	609a      	str	r2, [r3, #8]
}
 8009f74:	bf00      	nop
 8009f76:	3724      	adds	r7, #36	; 0x24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	58024400 	.word	0x58024400
 8009f84:	03d09000 	.word	0x03d09000
 8009f88:	46000000 	.word	0x46000000
 8009f8c:	4c742400 	.word	0x4c742400
 8009f90:	4a742400 	.word	0x4a742400
 8009f94:	4bbebc20 	.word	0x4bbebc20

08009f98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fa6:	4b53      	ldr	r3, [pc, #332]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 8009fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009faa:	f003 0303 	and.w	r3, r3, #3
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d101      	bne.n	8009fb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e099      	b.n	800a0ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009fb6:	4b4f      	ldr	r3, [pc, #316]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a4e      	ldr	r2, [pc, #312]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 8009fbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fc2:	f7f8 fe6b 	bl	8002c9c <HAL_GetTick>
 8009fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fc8:	e008      	b.n	8009fdc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fca:	f7f8 fe67 	bl	8002c9c <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d901      	bls.n	8009fdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e086      	b.n	800a0ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fdc:	4b45      	ldr	r3, [pc, #276]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1f0      	bne.n	8009fca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009fe8:	4b42      	ldr	r3, [pc, #264]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 8009fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	031b      	lsls	r3, r3, #12
 8009ff6:	493f      	ldr	r1, [pc, #252]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	628b      	str	r3, [r1, #40]	; 0x28
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	3b01      	subs	r3, #1
 800a002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	025b      	lsls	r3, r3, #9
 800a00e:	b29b      	uxth	r3, r3
 800a010:	431a      	orrs	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	3b01      	subs	r3, #1
 800a018:	041b      	lsls	r3, r3, #16
 800a01a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a01e:	431a      	orrs	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	3b01      	subs	r3, #1
 800a026:	061b      	lsls	r3, r3, #24
 800a028:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a02c:	4931      	ldr	r1, [pc, #196]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a032:	4b30      	ldr	r3, [pc, #192]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a036:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	492d      	ldr	r1, [pc, #180]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a040:	4313      	orrs	r3, r2
 800a042:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a044:	4b2b      	ldr	r3, [pc, #172]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	f023 0220 	bic.w	r2, r3, #32
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	4928      	ldr	r1, [pc, #160]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a052:	4313      	orrs	r3, r2
 800a054:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a056:	4b27      	ldr	r3, [pc, #156]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05a:	4a26      	ldr	r2, [pc, #152]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a05c:	f023 0310 	bic.w	r3, r3, #16
 800a060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a062:	4b24      	ldr	r3, [pc, #144]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a066:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <RCCEx_PLL2_Config+0x160>)
 800a068:	4013      	ands	r3, r2
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	69d2      	ldr	r2, [r2, #28]
 800a06e:	00d2      	lsls	r2, r2, #3
 800a070:	4920      	ldr	r1, [pc, #128]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a072:	4313      	orrs	r3, r2
 800a074:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a076:	4b1f      	ldr	r3, [pc, #124]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	4a1e      	ldr	r2, [pc, #120]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a07c:	f043 0310 	orr.w	r3, r3, #16
 800a080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d106      	bne.n	800a096 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a088:	4b1a      	ldr	r3, [pc, #104]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	4a19      	ldr	r2, [pc, #100]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a08e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a092:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a094:	e00f      	b.n	800a0b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d106      	bne.n	800a0aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a09c:	4b15      	ldr	r3, [pc, #84]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	4a14      	ldr	r2, [pc, #80]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a0a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0a8:	e005      	b.n	800a0b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0aa:	4b12      	ldr	r3, [pc, #72]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ae:	4a11      	ldr	r2, [pc, #68]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a0b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a0e      	ldr	r2, [pc, #56]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a0bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0c2:	f7f8 fdeb 	bl	8002c9c <HAL_GetTick>
 800a0c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0c8:	e008      	b.n	800a0dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0ca:	f7f8 fde7 	bl	8002c9c <HAL_GetTick>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d901      	bls.n	800a0dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e006      	b.n	800a0ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0dc:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <RCCEx_PLL2_Config+0x15c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d0f0      	beq.n	800a0ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	58024400 	.word	0x58024400
 800a0f8:	ffff0007 	.word	0xffff0007

0800a0fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a10a:	4b53      	ldr	r3, [pc, #332]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	2b03      	cmp	r3, #3
 800a114:	d101      	bne.n	800a11a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e099      	b.n	800a24e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a11a:	4b4f      	ldr	r3, [pc, #316]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a4e      	ldr	r2, [pc, #312]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a126:	f7f8 fdb9 	bl	8002c9c <HAL_GetTick>
 800a12a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a12c:	e008      	b.n	800a140 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a12e:	f7f8 fdb5 	bl	8002c9c <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d901      	bls.n	800a140 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e086      	b.n	800a24e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a140:	4b45      	ldr	r3, [pc, #276]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1f0      	bne.n	800a12e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a14c:	4b42      	ldr	r3, [pc, #264]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a150:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	051b      	lsls	r3, r3, #20
 800a15a:	493f      	ldr	r1, [pc, #252]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	628b      	str	r3, [r1, #40]	; 0x28
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	3b01      	subs	r3, #1
 800a166:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	3b01      	subs	r3, #1
 800a170:	025b      	lsls	r3, r3, #9
 800a172:	b29b      	uxth	r3, r3
 800a174:	431a      	orrs	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	041b      	lsls	r3, r3, #16
 800a17e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a182:	431a      	orrs	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	3b01      	subs	r3, #1
 800a18a:	061b      	lsls	r3, r3, #24
 800a18c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a190:	4931      	ldr	r1, [pc, #196]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a192:	4313      	orrs	r3, r2
 800a194:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a196:	4b30      	ldr	r3, [pc, #192]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	492d      	ldr	r1, [pc, #180]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1a8:	4b2b      	ldr	r3, [pc, #172]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	4928      	ldr	r1, [pc, #160]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1ba:	4b27      	ldr	r3, [pc, #156]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1be:	4a26      	ldr	r2, [pc, #152]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1c6:	4b24      	ldr	r3, [pc, #144]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ca:	4b24      	ldr	r3, [pc, #144]	; (800a25c <RCCEx_PLL3_Config+0x160>)
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	69d2      	ldr	r2, [r2, #28]
 800a1d2:	00d2      	lsls	r2, r2, #3
 800a1d4:	4920      	ldr	r1, [pc, #128]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a1da:	4b1f      	ldr	r3, [pc, #124]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	4a1e      	ldr	r2, [pc, #120]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d106      	bne.n	800a1fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a1ec:	4b1a      	ldr	r3, [pc, #104]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f0:	4a19      	ldr	r2, [pc, #100]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a1f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1f8:	e00f      	b.n	800a21a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d106      	bne.n	800a20e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a200:	4b15      	ldr	r3, [pc, #84]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	4a14      	ldr	r2, [pc, #80]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a206:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a20a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a20c:	e005      	b.n	800a21a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a20e:	4b12      	ldr	r3, [pc, #72]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	4a11      	ldr	r2, [pc, #68]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a218:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a21a:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a0e      	ldr	r2, [pc, #56]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a226:	f7f8 fd39 	bl	8002c9c <HAL_GetTick>
 800a22a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a22c:	e008      	b.n	800a240 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a22e:	f7f8 fd35 	bl	8002c9c <HAL_GetTick>
 800a232:	4602      	mov	r2, r0
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d901      	bls.n	800a240 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e006      	b.n	800a24e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a240:	4b05      	ldr	r3, [pc, #20]	; (800a258 <RCCEx_PLL3_Config+0x15c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0f0      	beq.n	800a22e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	58024400 	.word	0x58024400
 800a25c:	ffff0007 	.word	0xffff0007

0800a260 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d071      	beq.n	800a356 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7f8 f824 	bl	80022d4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2202      	movs	r2, #2
 800a290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f003 0310 	and.w	r3, r3, #16
 800a29e:	2b10      	cmp	r3, #16
 800a2a0:	d050      	beq.n	800a344 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	22ca      	movs	r2, #202	; 0xca
 800a2a8:	625a      	str	r2, [r3, #36]	; 0x24
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2253      	movs	r2, #83	; 0x53
 800a2b0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f87a 	bl	800a3ac <RTC_EnterInitMode>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d124      	bne.n	800a30c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6899      	ldr	r1, [r3, #8]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4b24      	ldr	r3, [pc, #144]	; (800a360 <HAL_RTC_Init+0x100>)
 800a2ce:	400b      	ands	r3, r1
 800a2d0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6899      	ldr	r1, [r3, #8]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	0419      	lsls	r1, r3, #16
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f886 	bl	800a414 <RTC_ExitInitMode>
 800a308:	4603      	mov	r3, r0
 800a30a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d113      	bne.n	800a33a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f022 0203 	bic.w	r2, r2, #3
 800a320:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	69da      	ldr	r2, [r3, #28]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	431a      	orrs	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	430a      	orrs	r2, r1
 800a338:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	22ff      	movs	r2, #255	; 0xff
 800a340:	625a      	str	r2, [r3, #36]	; 0x24
 800a342:	e001      	b.n	800a348 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d103      	bne.n	800a356 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a356:	7bfb      	ldrb	r3, [r7, #15]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	ff8fffbf 	.word	0xff8fffbf

0800a364 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a0d      	ldr	r2, [pc, #52]	; (800a3a8 <HAL_RTC_WaitForSynchro+0x44>)
 800a372:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a374:	f7f8 fc92 	bl	8002c9c <HAL_GetTick>
 800a378:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a37a:	e009      	b.n	800a390 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a37c:	f7f8 fc8e 	bl	8002c9c <HAL_GetTick>
 800a380:	4602      	mov	r2, r0
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a38a:	d901      	bls.n	800a390 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e007      	b.n	800a3a0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	f003 0320 	and.w	r3, r3, #32
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0ee      	beq.n	800a37c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	0003ff5f 	.word	0x0003ff5f

0800a3ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d120      	bne.n	800a408 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a3d0:	f7f8 fc64 	bl	8002c9c <HAL_GetTick>
 800a3d4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a3d6:	e00d      	b.n	800a3f4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a3d8:	f7f8 fc60 	bl	8002c9c <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3e6:	d905      	bls.n	800a3f4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2203      	movs	r2, #3
 800a3f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d102      	bne.n	800a408 <RTC_EnterInitMode+0x5c>
 800a402:	7bfb      	ldrb	r3, [r7, #15]
 800a404:	2b03      	cmp	r3, #3
 800a406:	d1e7      	bne.n	800a3d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
	...

0800a414 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a420:	4b1a      	ldr	r3, [pc, #104]	; (800a48c <RTC_ExitInitMode+0x78>)
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	4a19      	ldr	r2, [pc, #100]	; (800a48c <RTC_ExitInitMode+0x78>)
 800a426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a42a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a42c:	4b17      	ldr	r3, [pc, #92]	; (800a48c <RTC_ExitInitMode+0x78>)
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f003 0320 	and.w	r3, r3, #32
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10c      	bne.n	800a452 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff ff93 	bl	800a364 <HAL_RTC_WaitForSynchro>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d01e      	beq.n	800a482 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2203      	movs	r2, #3
 800a448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	73fb      	strb	r3, [r7, #15]
 800a450:	e017      	b.n	800a482 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a452:	4b0e      	ldr	r3, [pc, #56]	; (800a48c <RTC_ExitInitMode+0x78>)
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	4a0d      	ldr	r2, [pc, #52]	; (800a48c <RTC_ExitInitMode+0x78>)
 800a458:	f023 0320 	bic.w	r3, r3, #32
 800a45c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff ff80 	bl	800a364 <HAL_RTC_WaitForSynchro>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d005      	beq.n	800a476 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2203      	movs	r2, #3
 800a46e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a476:	4b05      	ldr	r3, [pc, #20]	; (800a48c <RTC_ExitInitMode+0x78>)
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	4a04      	ldr	r2, [pc, #16]	; (800a48c <RTC_ExitInitMode+0x78>)
 800a47c:	f043 0320 	orr.w	r3, r3, #32
 800a480:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a482:	7bfb      	ldrb	r3, [r7, #15]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	58004000 	.word	0x58004000

0800a490 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	; 0x28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e28e      	b.n	800a9c0 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a4a2:	f7f8 fc2b 	bl	8002cfc <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d113      	bne.n	800a4d8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a96      	ldr	r2, [pc, #600]	; (800a710 <HAL_SAI_Init+0x280>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d004      	beq.n	800a4c4 <HAL_SAI_Init+0x34>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a95      	ldr	r2, [pc, #596]	; (800a714 <HAL_SAI_Init+0x284>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d107      	bne.n	800a4d4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d103      	bne.n	800a4d4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e273      	b.n	800a9c0 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a8c      	ldr	r2, [pc, #560]	; (800a710 <HAL_SAI_Init+0x280>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d004      	beq.n	800a4ec <HAL_SAI_Init+0x5c>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a8c      	ldr	r2, [pc, #560]	; (800a718 <HAL_SAI_Init+0x288>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d102      	bne.n	800a4f2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a4ec:	4b8b      	ldr	r3, [pc, #556]	; (800a71c <HAL_SAI_Init+0x28c>)
 800a4ee:	61bb      	str	r3, [r7, #24]
 800a4f0:	e028      	b.n	800a544 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a8a      	ldr	r2, [pc, #552]	; (800a720 <HAL_SAI_Init+0x290>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d004      	beq.n	800a506 <HAL_SAI_Init+0x76>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a88      	ldr	r2, [pc, #544]	; (800a724 <HAL_SAI_Init+0x294>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d102      	bne.n	800a50c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a506:	4b88      	ldr	r3, [pc, #544]	; (800a728 <HAL_SAI_Init+0x298>)
 800a508:	61bb      	str	r3, [r7, #24]
 800a50a:	e01b      	b.n	800a544 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a86      	ldr	r2, [pc, #536]	; (800a72c <HAL_SAI_Init+0x29c>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d004      	beq.n	800a520 <HAL_SAI_Init+0x90>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a85      	ldr	r2, [pc, #532]	; (800a730 <HAL_SAI_Init+0x2a0>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d102      	bne.n	800a526 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a520:	4b84      	ldr	r3, [pc, #528]	; (800a734 <HAL_SAI_Init+0x2a4>)
 800a522:	61bb      	str	r3, [r7, #24]
 800a524:	e00e      	b.n	800a544 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a7a      	ldr	r2, [pc, #488]	; (800a714 <HAL_SAI_Init+0x284>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d004      	beq.n	800a53a <HAL_SAI_Init+0xaa>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a80      	ldr	r2, [pc, #512]	; (800a738 <HAL_SAI_Init+0x2a8>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d102      	bne.n	800a540 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a53a:	4b80      	ldr	r3, [pc, #512]	; (800a73c <HAL_SAI_Init+0x2ac>)
 800a53c:	61bb      	str	r3, [r7, #24]
 800a53e:	e001      	b.n	800a544 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e23d      	b.n	800a9c0 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d106      	bne.n	800a55e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7f8 f963 	bl	8002824 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fa40 	bl	800a9e4 <SAI_Disable>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e228      	b.n	800a9c0 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2202      	movs	r2, #2
 800a572:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d00c      	beq.n	800a598 <HAL_SAI_Init+0x108>
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d80d      	bhi.n	800a59e <HAL_SAI_Init+0x10e>
 800a582:	2b00      	cmp	r3, #0
 800a584:	d002      	beq.n	800a58c <HAL_SAI_Init+0xfc>
 800a586:	2b01      	cmp	r3, #1
 800a588:	d003      	beq.n	800a592 <HAL_SAI_Init+0x102>
 800a58a:	e008      	b.n	800a59e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a590:	e008      	b.n	800a5a4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a592:	2310      	movs	r3, #16
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a596:	e005      	b.n	800a5a4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a598:	2320      	movs	r3, #32
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a59c:	e002      	b.n	800a5a4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a5a2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	2b05      	cmp	r3, #5
 800a5aa:	d832      	bhi.n	800a612 <HAL_SAI_Init+0x182>
 800a5ac:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <HAL_SAI_Init+0x124>)
 800a5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b2:	bf00      	nop
 800a5b4:	0800a5cd 	.word	0x0800a5cd
 800a5b8:	0800a5d3 	.word	0x0800a5d3
 800a5bc:	0800a5db 	.word	0x0800a5db
 800a5c0:	0800a5e3 	.word	0x0800a5e3
 800a5c4:	0800a5f3 	.word	0x0800a5f3
 800a5c8:	0800a603 	.word	0x0800a603
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
      break;
 800a5d0:	e022      	b.n	800a618 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a5d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d6:	61fb      	str	r3, [r7, #28]
      break;
 800a5d8:	e01e      	b.n	800a618 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a5da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5de:	61fb      	str	r3, [r7, #28]
      break;
 800a5e0:	e01a      	b.n	800a618 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a5e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5e6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	f043 0301 	orr.w	r3, r3, #1
 800a5ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a5f0:	e012      	b.n	800a618 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a5f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5f6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	f043 0302 	orr.w	r3, r3, #2
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a600:	e00a      	b.n	800a618 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a606:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	f043 0303 	orr.w	r3, r3, #3
 800a60e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a610:	e002      	b.n	800a618 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	61fb      	str	r3, [r7, #28]
      break;
 800a616:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a61c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 80c5 	beq.w	800a7b2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a37      	ldr	r2, [pc, #220]	; (800a710 <HAL_SAI_Init+0x280>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d004      	beq.n	800a640 <HAL_SAI_Init+0x1b0>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a37      	ldr	r2, [pc, #220]	; (800a718 <HAL_SAI_Init+0x288>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d106      	bne.n	800a64e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a640:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a644:	f04f 0100 	mov.w	r1, #0
 800a648:	f7fe fb16 	bl	8008c78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a64c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a33      	ldr	r2, [pc, #204]	; (800a720 <HAL_SAI_Init+0x290>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d004      	beq.n	800a662 <HAL_SAI_Init+0x1d2>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a31      	ldr	r2, [pc, #196]	; (800a724 <HAL_SAI_Init+0x294>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d106      	bne.n	800a670 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a662:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a666:	f04f 0100 	mov.w	r1, #0
 800a66a:	f7fe fb05 	bl	8008c78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a66e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a2d      	ldr	r2, [pc, #180]	; (800a72c <HAL_SAI_Init+0x29c>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d004      	beq.n	800a684 <HAL_SAI_Init+0x1f4>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a2c      	ldr	r2, [pc, #176]	; (800a730 <HAL_SAI_Init+0x2a0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d106      	bne.n	800a692 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a684:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a688:	f04f 0100 	mov.w	r1, #0
 800a68c:	f7fe faf4 	bl	8008c78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a690:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a1f      	ldr	r2, [pc, #124]	; (800a714 <HAL_SAI_Init+0x284>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d106      	bne.n	800a6aa <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a69c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a6a0:	f04f 0100 	mov.w	r1, #0
 800a6a4:	f7fe fae8 	bl	8008c78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6a8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a22      	ldr	r2, [pc, #136]	; (800a738 <HAL_SAI_Init+0x2a8>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d106      	bne.n	800a6c2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a6b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a6b8:	f04f 0100 	mov.w	r1, #0
 800a6bc:	f7fe fadc 	bl	8008c78 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6c0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6ca:	d139      	bne.n	800a740 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6d0:	2b04      	cmp	r3, #4
 800a6d2:	d102      	bne.n	800a6da <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a6d4:	2340      	movs	r3, #64	; 0x40
 800a6d6:	60fb      	str	r3, [r7, #12]
 800a6d8:	e00a      	b.n	800a6f0 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6de:	2b08      	cmp	r3, #8
 800a6e0:	d103      	bne.n	800a6ea <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a6e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	e002      	b.n	800a6f0 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ee:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a1b      	ldr	r3, [r3, #32]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	fb02 f303 	mul.w	r3, r2, r3
 800a706:	fbb1 f3f3 	udiv	r3, r1, r3
 800a70a:	613b      	str	r3, [r7, #16]
 800a70c:	e030      	b.n	800a770 <HAL_SAI_Init+0x2e0>
 800a70e:	bf00      	nop
 800a710:	40015804 	.word	0x40015804
 800a714:	58005404 	.word	0x58005404
 800a718:	40015824 	.word	0x40015824
 800a71c:	40015800 	.word	0x40015800
 800a720:	40015c04 	.word	0x40015c04
 800a724:	40015c24 	.word	0x40015c24
 800a728:	40015c00 	.word	0x40015c00
 800a72c:	40016004 	.word	0x40016004
 800a730:	40016024 	.word	0x40016024
 800a734:	40016000 	.word	0x40016000
 800a738:	58005424 	.word	0x58005424
 800a73c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a748:	d101      	bne.n	800a74e <HAL_SAI_Init+0x2be>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e000      	b.n	800a750 <HAL_SAI_Init+0x2c0>
 800a74e:	2301      	movs	r3, #1
 800a750:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	4619      	mov	r1, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	fb02 f303 	mul.w	r3, r2, r3
 800a768:	021b      	lsls	r3, r3, #8
 800a76a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a76e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	4a95      	ldr	r2, [pc, #596]	; (800a9c8 <HAL_SAI_Init+0x538>)
 800a774:	fba2 2303 	umull	r2, r3, r2, r3
 800a778:	08da      	lsrs	r2, r3, #3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a77e:	6939      	ldr	r1, [r7, #16]
 800a780:	4b91      	ldr	r3, [pc, #580]	; (800a9c8 <HAL_SAI_Init+0x538>)
 800a782:	fba3 2301 	umull	r2, r3, r3, r1
 800a786:	08da      	lsrs	r2, r3, #3
 800a788:	4613      	mov	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	005b      	lsls	r3, r3, #1
 800a790:	1aca      	subs	r2, r1, r3
 800a792:	2a08      	cmp	r2, #8
 800a794:	d904      	bls.n	800a7a0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a4:	2b04      	cmp	r3, #4
 800a7a6:	d104      	bne.n	800a7b2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	085a      	lsrs	r2, r3, #1
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_SAI_Init+0x332>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d109      	bne.n	800a7d6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d101      	bne.n	800a7ce <HAL_SAI_Init+0x33e>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	e001      	b.n	800a7d2 <HAL_SAI_Init+0x342>
 800a7ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7d2:	623b      	str	r3, [r7, #32]
 800a7d4:	e008      	b.n	800a7e8 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d102      	bne.n	800a7e4 <HAL_SAI_Init+0x354>
 800a7de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7e2:	e000      	b.n	800a7e6 <HAL_SAI_Init+0x356>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a7e8:	f7f8 fa88 	bl	8002cfc <HAL_GetREVID>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7f2:	d331      	bcc.n	800a858 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	4b73      	ldr	r3, [pc, #460]	; (800a9cc <HAL_SAI_Init+0x53c>)
 800a800:	400b      	ands	r3, r1
 800a802:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6819      	ldr	r1, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a812:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a818:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a81e:	431a      	orrs	r2, r3
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a82c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a838:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	051b      	lsls	r3, r3, #20
 800a840:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a846:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	e02d      	b.n	800a8b4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6819      	ldr	r1, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	4b5b      	ldr	r3, [pc, #364]	; (800a9d0 <HAL_SAI_Init+0x540>)
 800a864:	400b      	ands	r3, r1
 800a866:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6819      	ldr	r1, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a876:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a87c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a882:	431a      	orrs	r2, r3
 800a884:	6a3b      	ldr	r3, [r7, #32]
 800a886:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a890:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a89c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	051b      	lsls	r3, r3, #20
 800a8a4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a8aa:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6859      	ldr	r1, [r3, #4]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	4b45      	ldr	r3, [pc, #276]	; (800a9d4 <HAL_SAI_Init+0x544>)
 800a8c0:	400b      	ands	r3, r1
 800a8c2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6859      	ldr	r1, [r3, #4]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	69da      	ldr	r2, [r3, #28]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d2:	431a      	orrs	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d8:	431a      	orrs	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	430a      	orrs	r2, r1
 800a8e0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6899      	ldr	r1, [r3, #8]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	4b3a      	ldr	r3, [pc, #232]	; (800a9d8 <HAL_SAI_Init+0x548>)
 800a8ee:	400b      	ands	r3, r1
 800a8f0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6899      	ldr	r1, [r3, #8]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8fc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a902:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a908:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a90e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a914:	3b01      	subs	r3, #1
 800a916:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a918:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	430a      	orrs	r2, r1
 800a920:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68d9      	ldr	r1, [r3, #12]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a930:	400b      	ands	r3, r1
 800a932:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68d9      	ldr	r1, [r3, #12]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a942:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a948:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a94a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a950:	3b01      	subs	r3, #1
 800a952:	021b      	lsls	r3, r3, #8
 800a954:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	430a      	orrs	r2, r1
 800a95c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a1e      	ldr	r2, [pc, #120]	; (800a9dc <HAL_SAI_Init+0x54c>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d004      	beq.n	800a972 <HAL_SAI_Init+0x4e2>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a1c      	ldr	r2, [pc, #112]	; (800a9e0 <HAL_SAI_Init+0x550>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d119      	bne.n	800a9a6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a976:	f023 0201 	bic.w	r2, r3, #1
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a984:	2b01      	cmp	r3, #1
 800a986:	d10e      	bne.n	800a9a6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a990:	3b01      	subs	r3, #1
 800a992:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a994:	431a      	orrs	r2, r3
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99e:	f043 0201 	orr.w	r2, r3, #1
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3728      	adds	r7, #40	; 0x28
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	cccccccd 	.word	0xcccccccd
 800a9cc:	f005c010 	.word	0xf005c010
 800a9d0:	f805c010 	.word	0xf805c010
 800a9d4:	ffff1ff0 	.word	0xffff1ff0
 800a9d8:	fff88000 	.word	0xfff88000
 800a9dc:	40015804 	.word	0x40015804
 800a9e0:	58005404 	.word	0x58005404

0800a9e4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a9ec:	4b18      	ldr	r3, [pc, #96]	; (800aa50 <SAI_Disable+0x6c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a18      	ldr	r2, [pc, #96]	; (800aa54 <SAI_Disable+0x70>)
 800a9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f6:	0b1b      	lsrs	r3, r3, #12
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aa0e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	72fb      	strb	r3, [r7, #11]
      break;
 800aa2a:	e009      	b.n	800aa40 <SAI_Disable+0x5c>
    }
    count--;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1e7      	bne.n	800aa10 <SAI_Disable+0x2c>

  return status;
 800aa40:	7afb      	ldrb	r3, [r7, #11]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	24000000 	.word	0x24000000
 800aa54:	95cbec1b 	.word	0x95cbec1b

0800aa58 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e02b      	b.n	800aac4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d106      	bne.n	800aa86 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7f7 fec5 	bl	8002810 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3304      	adds	r3, #4
 800aa96:	4619      	mov	r1, r3
 800aa98:	4610      	mov	r0, r2
 800aa9a:	f001 fabd 	bl	800c018 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	f001 fb11 	bl	800c0d0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800aaae:	4b07      	ldr	r3, [pc, #28]	; (800aacc <HAL_SDRAM_Init+0x74>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a06      	ldr	r2, [pc, #24]	; (800aacc <HAL_SDRAM_Init+0x74>)
 800aab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aab8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	52004000 	.word	0x52004000

0800aad0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e10f      	b.n	800ad02 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a87      	ldr	r2, [pc, #540]	; (800ad0c <HAL_SPI_Init+0x23c>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d00f      	beq.n	800ab12 <HAL_SPI_Init+0x42>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a86      	ldr	r2, [pc, #536]	; (800ad10 <HAL_SPI_Init+0x240>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d00a      	beq.n	800ab12 <HAL_SPI_Init+0x42>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a84      	ldr	r2, [pc, #528]	; (800ad14 <HAL_SPI_Init+0x244>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d005      	beq.n	800ab12 <HAL_SPI_Init+0x42>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	2b0f      	cmp	r3, #15
 800ab0c:	d901      	bls.n	800ab12 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e0f7      	b.n	800ad02 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f900 	bl	800ad18 <SPI_GetPacketSize>
 800ab18:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a7b      	ldr	r2, [pc, #492]	; (800ad0c <HAL_SPI_Init+0x23c>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d00c      	beq.n	800ab3e <HAL_SPI_Init+0x6e>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a79      	ldr	r2, [pc, #484]	; (800ad10 <HAL_SPI_Init+0x240>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d007      	beq.n	800ab3e <HAL_SPI_Init+0x6e>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a78      	ldr	r2, [pc, #480]	; (800ad14 <HAL_SPI_Init+0x244>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d002      	beq.n	800ab3e <HAL_SPI_Init+0x6e>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b08      	cmp	r3, #8
 800ab3c:	d811      	bhi.n	800ab62 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ab42:	4a72      	ldr	r2, [pc, #456]	; (800ad0c <HAL_SPI_Init+0x23c>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d009      	beq.n	800ab5c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a70      	ldr	r2, [pc, #448]	; (800ad10 <HAL_SPI_Init+0x240>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d004      	beq.n	800ab5c <HAL_SPI_Init+0x8c>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a6f      	ldr	r2, [pc, #444]	; (800ad14 <HAL_SPI_Init+0x244>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d104      	bne.n	800ab66 <HAL_SPI_Init+0x96>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b10      	cmp	r3, #16
 800ab60:	d901      	bls.n	800ab66 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e0cd      	b.n	800ad02 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d106      	bne.n	800ab80 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7f7 fbdc 	bl	8002338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0201 	bic.w	r2, r2, #1
 800ab96:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800aba2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abac:	d119      	bne.n	800abe2 <HAL_SPI_Init+0x112>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abb6:	d103      	bne.n	800abc0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d008      	beq.n	800abd2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10c      	bne.n	800abe2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800abcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abd0:	d107      	bne.n	800abe2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800abe0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00f      	beq.n	800ac0e <HAL_SPI_Init+0x13e>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	2b06      	cmp	r3, #6
 800abf4:	d90b      	bls.n	800ac0e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	e007      	b.n	800ac1e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	69da      	ldr	r2, [r3, #28]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac26:	431a      	orrs	r2, r3
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	431a      	orrs	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac30:	ea42 0103 	orr.w	r1, r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68da      	ldr	r2, [r3, #12]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	431a      	orrs	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4e:	431a      	orrs	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	431a      	orrs	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	431a      	orrs	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	431a      	orrs	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	431a      	orrs	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac72:	431a      	orrs	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac7e:	ea42 0103 	orr.w	r1, r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d113      	bne.n	800acbe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aca8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800acbc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f022 0201 	bic.w	r2, r2, #1
 800accc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	430a      	orrs	r2, r1
 800acee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	40013000 	.word	0x40013000
 800ad10:	40003800 	.word	0x40003800
 800ad14:	40003c00 	.word	0x40003c00

0800ad18 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad24:	095b      	lsrs	r3, r3, #5
 800ad26:	3301      	adds	r3, #1
 800ad28:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	3307      	adds	r3, #7
 800ad36:	08db      	lsrs	r3, r3, #3
 800ad38:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e042      	b.n	800ade6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d106      	bne.n	800ad78 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7f7 fbaa 	bl	80024cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2224      	movs	r2, #36	; 0x24
 800ad7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f022 0201 	bic.w	r2, r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f8bb 	bl	800af0c <UART_SetConfig>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d101      	bne.n	800ada0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e022      	b.n	800ade6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fe17 	bl	800b9dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f042 0201 	orr.w	r2, r2, #1
 800addc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fe9e 	bl	800bb20 <UART_CheckIdleState>
 800ade4:	4603      	mov	r3, r0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b08a      	sub	sp, #40	; 0x28
 800adf2:	af02      	add	r7, sp, #8
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	603b      	str	r3, [r7, #0]
 800adfa:	4613      	mov	r3, r2
 800adfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae04:	2b20      	cmp	r3, #32
 800ae06:	d17b      	bne.n	800af00 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <HAL_UART_Transmit+0x26>
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e074      	b.n	800af02 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2221      	movs	r2, #33	; 0x21
 800ae24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae28:	f7f7 ff38 	bl	8002c9c <HAL_GetTick>
 800ae2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	88fa      	ldrh	r2, [r7, #6]
 800ae32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	88fa      	ldrh	r2, [r7, #6]
 800ae3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae46:	d108      	bne.n	800ae5a <HAL_UART_Transmit+0x6c>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d104      	bne.n	800ae5a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ae50:	2300      	movs	r3, #0
 800ae52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	61bb      	str	r3, [r7, #24]
 800ae58:	e003      	b.n	800ae62 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae62:	e030      	b.n	800aec6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2180      	movs	r1, #128	; 0x80
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 ff00 	bl	800bc74 <UART_WaitOnFlagUntilTimeout>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d005      	beq.n	800ae86 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e03d      	b.n	800af02 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	881b      	ldrh	r3, [r3, #0]
 800ae90:	461a      	mov	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	3302      	adds	r3, #2
 800aea0:	61bb      	str	r3, [r7, #24]
 800aea2:	e007      	b.n	800aeb4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	781a      	ldrb	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	3b01      	subs	r3, #1
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aecc:	b29b      	uxth	r3, r3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1c8      	bne.n	800ae64 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2200      	movs	r2, #0
 800aeda:	2140      	movs	r1, #64	; 0x40
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 fec9 	bl	800bc74 <UART_WaitOnFlagUntilTimeout>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d005      	beq.n	800aef4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2220      	movs	r2, #32
 800aeec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e006      	b.n	800af02 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2220      	movs	r2, #32
 800aef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	e000      	b.n	800af02 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800af00:	2302      	movs	r3, #2
  }
}
 800af02:	4618      	mov	r0, r3
 800af04:	3720      	adds	r7, #32
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
	...

0800af0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af10:	b092      	sub	sp, #72	; 0x48
 800af12:	af00      	add	r7, sp, #0
 800af14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	431a      	orrs	r2, r3
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	431a      	orrs	r2, r3
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	69db      	ldr	r3, [r3, #28]
 800af30:	4313      	orrs	r3, r2
 800af32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	4bbe      	ldr	r3, [pc, #760]	; (800b234 <UART_SetConfig+0x328>)
 800af3c:	4013      	ands	r3, r2
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	6812      	ldr	r2, [r2, #0]
 800af42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af44:	430b      	orrs	r3, r1
 800af46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4ab3      	ldr	r2, [pc, #716]	; (800b238 <UART_SetConfig+0x32c>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d004      	beq.n	800af78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af74:	4313      	orrs	r3, r2
 800af76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689a      	ldr	r2, [r3, #8]
 800af7e:	4baf      	ldr	r3, [pc, #700]	; (800b23c <UART_SetConfig+0x330>)
 800af80:	4013      	ands	r3, r2
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	6812      	ldr	r2, [r2, #0]
 800af86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af88:	430b      	orrs	r3, r1
 800af8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af92:	f023 010f 	bic.w	r1, r3, #15
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4aa6      	ldr	r2, [pc, #664]	; (800b240 <UART_SetConfig+0x334>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d177      	bne.n	800b09c <UART_SetConfig+0x190>
 800afac:	4ba5      	ldr	r3, [pc, #660]	; (800b244 <UART_SetConfig+0x338>)
 800afae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afb4:	2b28      	cmp	r3, #40	; 0x28
 800afb6:	d86d      	bhi.n	800b094 <UART_SetConfig+0x188>
 800afb8:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <UART_SetConfig+0xb4>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800b065 	.word	0x0800b065
 800afc4:	0800b095 	.word	0x0800b095
 800afc8:	0800b095 	.word	0x0800b095
 800afcc:	0800b095 	.word	0x0800b095
 800afd0:	0800b095 	.word	0x0800b095
 800afd4:	0800b095 	.word	0x0800b095
 800afd8:	0800b095 	.word	0x0800b095
 800afdc:	0800b095 	.word	0x0800b095
 800afe0:	0800b06d 	.word	0x0800b06d
 800afe4:	0800b095 	.word	0x0800b095
 800afe8:	0800b095 	.word	0x0800b095
 800afec:	0800b095 	.word	0x0800b095
 800aff0:	0800b095 	.word	0x0800b095
 800aff4:	0800b095 	.word	0x0800b095
 800aff8:	0800b095 	.word	0x0800b095
 800affc:	0800b095 	.word	0x0800b095
 800b000:	0800b075 	.word	0x0800b075
 800b004:	0800b095 	.word	0x0800b095
 800b008:	0800b095 	.word	0x0800b095
 800b00c:	0800b095 	.word	0x0800b095
 800b010:	0800b095 	.word	0x0800b095
 800b014:	0800b095 	.word	0x0800b095
 800b018:	0800b095 	.word	0x0800b095
 800b01c:	0800b095 	.word	0x0800b095
 800b020:	0800b07d 	.word	0x0800b07d
 800b024:	0800b095 	.word	0x0800b095
 800b028:	0800b095 	.word	0x0800b095
 800b02c:	0800b095 	.word	0x0800b095
 800b030:	0800b095 	.word	0x0800b095
 800b034:	0800b095 	.word	0x0800b095
 800b038:	0800b095 	.word	0x0800b095
 800b03c:	0800b095 	.word	0x0800b095
 800b040:	0800b085 	.word	0x0800b085
 800b044:	0800b095 	.word	0x0800b095
 800b048:	0800b095 	.word	0x0800b095
 800b04c:	0800b095 	.word	0x0800b095
 800b050:	0800b095 	.word	0x0800b095
 800b054:	0800b095 	.word	0x0800b095
 800b058:	0800b095 	.word	0x0800b095
 800b05c:	0800b095 	.word	0x0800b095
 800b060:	0800b08d 	.word	0x0800b08d
 800b064:	2301      	movs	r3, #1
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06a:	e222      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b06c:	2304      	movs	r3, #4
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b072:	e21e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b074:	2308      	movs	r3, #8
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07a:	e21a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b07c:	2310      	movs	r3, #16
 800b07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b082:	e216      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b084:	2320      	movs	r3, #32
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b08a:	e212      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b08c:	2340      	movs	r3, #64	; 0x40
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b092:	e20e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b094:	2380      	movs	r3, #128	; 0x80
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b09a:	e20a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a69      	ldr	r2, [pc, #420]	; (800b248 <UART_SetConfig+0x33c>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d130      	bne.n	800b108 <UART_SetConfig+0x1fc>
 800b0a6:	4b67      	ldr	r3, [pc, #412]	; (800b244 <UART_SetConfig+0x338>)
 800b0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0aa:	f003 0307 	and.w	r3, r3, #7
 800b0ae:	2b05      	cmp	r3, #5
 800b0b0:	d826      	bhi.n	800b100 <UART_SetConfig+0x1f4>
 800b0b2:	a201      	add	r2, pc, #4	; (adr r2, 800b0b8 <UART_SetConfig+0x1ac>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b0d1 	.word	0x0800b0d1
 800b0bc:	0800b0d9 	.word	0x0800b0d9
 800b0c0:	0800b0e1 	.word	0x0800b0e1
 800b0c4:	0800b0e9 	.word	0x0800b0e9
 800b0c8:	0800b0f1 	.word	0x0800b0f1
 800b0cc:	0800b0f9 	.word	0x0800b0f9
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0d6:	e1ec      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0de:	e1e8      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0e6:	e1e4      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0e8:	2310      	movs	r3, #16
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ee:	e1e0      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0f6:	e1dc      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b0f8:	2340      	movs	r3, #64	; 0x40
 800b0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0fe:	e1d8      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b100:	2380      	movs	r3, #128	; 0x80
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b106:	e1d4      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a4f      	ldr	r2, [pc, #316]	; (800b24c <UART_SetConfig+0x340>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d130      	bne.n	800b174 <UART_SetConfig+0x268>
 800b112:	4b4c      	ldr	r3, [pc, #304]	; (800b244 <UART_SetConfig+0x338>)
 800b114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	2b05      	cmp	r3, #5
 800b11c:	d826      	bhi.n	800b16c <UART_SetConfig+0x260>
 800b11e:	a201      	add	r2, pc, #4	; (adr r2, 800b124 <UART_SetConfig+0x218>)
 800b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b124:	0800b13d 	.word	0x0800b13d
 800b128:	0800b145 	.word	0x0800b145
 800b12c:	0800b14d 	.word	0x0800b14d
 800b130:	0800b155 	.word	0x0800b155
 800b134:	0800b15d 	.word	0x0800b15d
 800b138:	0800b165 	.word	0x0800b165
 800b13c:	2300      	movs	r3, #0
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b142:	e1b6      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b144:	2304      	movs	r3, #4
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b14a:	e1b2      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b14c:	2308      	movs	r3, #8
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b152:	e1ae      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b154:	2310      	movs	r3, #16
 800b156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b15a:	e1aa      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b15c:	2320      	movs	r3, #32
 800b15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b162:	e1a6      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b164:	2340      	movs	r3, #64	; 0x40
 800b166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b16a:	e1a2      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b16c:	2380      	movs	r3, #128	; 0x80
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b172:	e19e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a35      	ldr	r2, [pc, #212]	; (800b250 <UART_SetConfig+0x344>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d130      	bne.n	800b1e0 <UART_SetConfig+0x2d4>
 800b17e:	4b31      	ldr	r3, [pc, #196]	; (800b244 <UART_SetConfig+0x338>)
 800b180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b182:	f003 0307 	and.w	r3, r3, #7
 800b186:	2b05      	cmp	r3, #5
 800b188:	d826      	bhi.n	800b1d8 <UART_SetConfig+0x2cc>
 800b18a:	a201      	add	r2, pc, #4	; (adr r2, 800b190 <UART_SetConfig+0x284>)
 800b18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b190:	0800b1a9 	.word	0x0800b1a9
 800b194:	0800b1b1 	.word	0x0800b1b1
 800b198:	0800b1b9 	.word	0x0800b1b9
 800b19c:	0800b1c1 	.word	0x0800b1c1
 800b1a0:	0800b1c9 	.word	0x0800b1c9
 800b1a4:	0800b1d1 	.word	0x0800b1d1
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ae:	e180      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1b0:	2304      	movs	r3, #4
 800b1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1b6:	e17c      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1b8:	2308      	movs	r3, #8
 800b1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1be:	e178      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1c0:	2310      	movs	r3, #16
 800b1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1c6:	e174      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1c8:	2320      	movs	r3, #32
 800b1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ce:	e170      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1d6:	e16c      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1d8:	2380      	movs	r3, #128	; 0x80
 800b1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1de:	e168      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a1b      	ldr	r2, [pc, #108]	; (800b254 <UART_SetConfig+0x348>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d142      	bne.n	800b270 <UART_SetConfig+0x364>
 800b1ea:	4b16      	ldr	r3, [pc, #88]	; (800b244 <UART_SetConfig+0x338>)
 800b1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	2b05      	cmp	r3, #5
 800b1f4:	d838      	bhi.n	800b268 <UART_SetConfig+0x35c>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <UART_SetConfig+0x2f0>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b215 	.word	0x0800b215
 800b200:	0800b21d 	.word	0x0800b21d
 800b204:	0800b225 	.word	0x0800b225
 800b208:	0800b22d 	.word	0x0800b22d
 800b20c:	0800b259 	.word	0x0800b259
 800b210:	0800b261 	.word	0x0800b261
 800b214:	2300      	movs	r3, #0
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b21a:	e14a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b21c:	2304      	movs	r3, #4
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b222:	e146      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b224:	2308      	movs	r3, #8
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b22a:	e142      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b22c:	2310      	movs	r3, #16
 800b22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b232:	e13e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b234:	cfff69f3 	.word	0xcfff69f3
 800b238:	58000c00 	.word	0x58000c00
 800b23c:	11fff4ff 	.word	0x11fff4ff
 800b240:	40011000 	.word	0x40011000
 800b244:	58024400 	.word	0x58024400
 800b248:	40004400 	.word	0x40004400
 800b24c:	40004800 	.word	0x40004800
 800b250:	40004c00 	.word	0x40004c00
 800b254:	40005000 	.word	0x40005000
 800b258:	2320      	movs	r3, #32
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b25e:	e128      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b260:	2340      	movs	r3, #64	; 0x40
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b266:	e124      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b268:	2380      	movs	r3, #128	; 0x80
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26e:	e120      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4acb      	ldr	r2, [pc, #812]	; (800b5a4 <UART_SetConfig+0x698>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d176      	bne.n	800b368 <UART_SetConfig+0x45c>
 800b27a:	4bcb      	ldr	r3, [pc, #812]	; (800b5a8 <UART_SetConfig+0x69c>)
 800b27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b282:	2b28      	cmp	r3, #40	; 0x28
 800b284:	d86c      	bhi.n	800b360 <UART_SetConfig+0x454>
 800b286:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <UART_SetConfig+0x380>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b331 	.word	0x0800b331
 800b290:	0800b361 	.word	0x0800b361
 800b294:	0800b361 	.word	0x0800b361
 800b298:	0800b361 	.word	0x0800b361
 800b29c:	0800b361 	.word	0x0800b361
 800b2a0:	0800b361 	.word	0x0800b361
 800b2a4:	0800b361 	.word	0x0800b361
 800b2a8:	0800b361 	.word	0x0800b361
 800b2ac:	0800b339 	.word	0x0800b339
 800b2b0:	0800b361 	.word	0x0800b361
 800b2b4:	0800b361 	.word	0x0800b361
 800b2b8:	0800b361 	.word	0x0800b361
 800b2bc:	0800b361 	.word	0x0800b361
 800b2c0:	0800b361 	.word	0x0800b361
 800b2c4:	0800b361 	.word	0x0800b361
 800b2c8:	0800b361 	.word	0x0800b361
 800b2cc:	0800b341 	.word	0x0800b341
 800b2d0:	0800b361 	.word	0x0800b361
 800b2d4:	0800b361 	.word	0x0800b361
 800b2d8:	0800b361 	.word	0x0800b361
 800b2dc:	0800b361 	.word	0x0800b361
 800b2e0:	0800b361 	.word	0x0800b361
 800b2e4:	0800b361 	.word	0x0800b361
 800b2e8:	0800b361 	.word	0x0800b361
 800b2ec:	0800b349 	.word	0x0800b349
 800b2f0:	0800b361 	.word	0x0800b361
 800b2f4:	0800b361 	.word	0x0800b361
 800b2f8:	0800b361 	.word	0x0800b361
 800b2fc:	0800b361 	.word	0x0800b361
 800b300:	0800b361 	.word	0x0800b361
 800b304:	0800b361 	.word	0x0800b361
 800b308:	0800b361 	.word	0x0800b361
 800b30c:	0800b351 	.word	0x0800b351
 800b310:	0800b361 	.word	0x0800b361
 800b314:	0800b361 	.word	0x0800b361
 800b318:	0800b361 	.word	0x0800b361
 800b31c:	0800b361 	.word	0x0800b361
 800b320:	0800b361 	.word	0x0800b361
 800b324:	0800b361 	.word	0x0800b361
 800b328:	0800b361 	.word	0x0800b361
 800b32c:	0800b359 	.word	0x0800b359
 800b330:	2301      	movs	r3, #1
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b336:	e0bc      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b338:	2304      	movs	r3, #4
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33e:	e0b8      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b340:	2308      	movs	r3, #8
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b346:	e0b4      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b348:	2310      	movs	r3, #16
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34e:	e0b0      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b350:	2320      	movs	r3, #32
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b356:	e0ac      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b358:	2340      	movs	r3, #64	; 0x40
 800b35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35e:	e0a8      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b360:	2380      	movs	r3, #128	; 0x80
 800b362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b366:	e0a4      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a8f      	ldr	r2, [pc, #572]	; (800b5ac <UART_SetConfig+0x6a0>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d130      	bne.n	800b3d4 <UART_SetConfig+0x4c8>
 800b372:	4b8d      	ldr	r3, [pc, #564]	; (800b5a8 <UART_SetConfig+0x69c>)
 800b374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	2b05      	cmp	r3, #5
 800b37c:	d826      	bhi.n	800b3cc <UART_SetConfig+0x4c0>
 800b37e:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <UART_SetConfig+0x478>)
 800b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b384:	0800b39d 	.word	0x0800b39d
 800b388:	0800b3a5 	.word	0x0800b3a5
 800b38c:	0800b3ad 	.word	0x0800b3ad
 800b390:	0800b3b5 	.word	0x0800b3b5
 800b394:	0800b3bd 	.word	0x0800b3bd
 800b398:	0800b3c5 	.word	0x0800b3c5
 800b39c:	2300      	movs	r3, #0
 800b39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a2:	e086      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3a4:	2304      	movs	r3, #4
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3aa:	e082      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3ac:	2308      	movs	r3, #8
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b2:	e07e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ba:	e07a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3bc:	2320      	movs	r3, #32
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c2:	e076      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3c4:	2340      	movs	r3, #64	; 0x40
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ca:	e072      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3cc:	2380      	movs	r3, #128	; 0x80
 800b3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d2:	e06e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a75      	ldr	r2, [pc, #468]	; (800b5b0 <UART_SetConfig+0x6a4>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d130      	bne.n	800b440 <UART_SetConfig+0x534>
 800b3de:	4b72      	ldr	r3, [pc, #456]	; (800b5a8 <UART_SetConfig+0x69c>)
 800b3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e2:	f003 0307 	and.w	r3, r3, #7
 800b3e6:	2b05      	cmp	r3, #5
 800b3e8:	d826      	bhi.n	800b438 <UART_SetConfig+0x52c>
 800b3ea:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <UART_SetConfig+0x4e4>)
 800b3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f0:	0800b409 	.word	0x0800b409
 800b3f4:	0800b411 	.word	0x0800b411
 800b3f8:	0800b419 	.word	0x0800b419
 800b3fc:	0800b421 	.word	0x0800b421
 800b400:	0800b429 	.word	0x0800b429
 800b404:	0800b431 	.word	0x0800b431
 800b408:	2300      	movs	r3, #0
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b40e:	e050      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b410:	2304      	movs	r3, #4
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b416:	e04c      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b418:	2308      	movs	r3, #8
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41e:	e048      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b420:	2310      	movs	r3, #16
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b426:	e044      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b428:	2320      	movs	r3, #32
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42e:	e040      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b430:	2340      	movs	r3, #64	; 0x40
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b436:	e03c      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b438:	2380      	movs	r3, #128	; 0x80
 800b43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43e:	e038      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a5b      	ldr	r2, [pc, #364]	; (800b5b4 <UART_SetConfig+0x6a8>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d130      	bne.n	800b4ac <UART_SetConfig+0x5a0>
 800b44a:	4b57      	ldr	r3, [pc, #348]	; (800b5a8 <UART_SetConfig+0x69c>)
 800b44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44e:	f003 0307 	and.w	r3, r3, #7
 800b452:	2b05      	cmp	r3, #5
 800b454:	d826      	bhi.n	800b4a4 <UART_SetConfig+0x598>
 800b456:	a201      	add	r2, pc, #4	; (adr r2, 800b45c <UART_SetConfig+0x550>)
 800b458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45c:	0800b475 	.word	0x0800b475
 800b460:	0800b47d 	.word	0x0800b47d
 800b464:	0800b485 	.word	0x0800b485
 800b468:	0800b48d 	.word	0x0800b48d
 800b46c:	0800b495 	.word	0x0800b495
 800b470:	0800b49d 	.word	0x0800b49d
 800b474:	2302      	movs	r3, #2
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b47a:	e01a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b47c:	2304      	movs	r3, #4
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b482:	e016      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b484:	2308      	movs	r3, #8
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b48a:	e012      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b48c:	2310      	movs	r3, #16
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b492:	e00e      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b494:	2320      	movs	r3, #32
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b49a:	e00a      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b49c:	2340      	movs	r3, #64	; 0x40
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a2:	e006      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b4a4:	2380      	movs	r3, #128	; 0x80
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4aa:	e002      	b.n	800b4b2 <UART_SetConfig+0x5a6>
 800b4ac:	2380      	movs	r3, #128	; 0x80
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a3f      	ldr	r2, [pc, #252]	; (800b5b4 <UART_SetConfig+0x6a8>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	f040 80f8 	bne.w	800b6ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b4c2:	2b20      	cmp	r3, #32
 800b4c4:	dc46      	bgt.n	800b554 <UART_SetConfig+0x648>
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	f2c0 8082 	blt.w	800b5d0 <UART_SetConfig+0x6c4>
 800b4cc:	3b02      	subs	r3, #2
 800b4ce:	2b1e      	cmp	r3, #30
 800b4d0:	d87e      	bhi.n	800b5d0 <UART_SetConfig+0x6c4>
 800b4d2:	a201      	add	r2, pc, #4	; (adr r2, 800b4d8 <UART_SetConfig+0x5cc>)
 800b4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d8:	0800b55b 	.word	0x0800b55b
 800b4dc:	0800b5d1 	.word	0x0800b5d1
 800b4e0:	0800b563 	.word	0x0800b563
 800b4e4:	0800b5d1 	.word	0x0800b5d1
 800b4e8:	0800b5d1 	.word	0x0800b5d1
 800b4ec:	0800b5d1 	.word	0x0800b5d1
 800b4f0:	0800b573 	.word	0x0800b573
 800b4f4:	0800b5d1 	.word	0x0800b5d1
 800b4f8:	0800b5d1 	.word	0x0800b5d1
 800b4fc:	0800b5d1 	.word	0x0800b5d1
 800b500:	0800b5d1 	.word	0x0800b5d1
 800b504:	0800b5d1 	.word	0x0800b5d1
 800b508:	0800b5d1 	.word	0x0800b5d1
 800b50c:	0800b5d1 	.word	0x0800b5d1
 800b510:	0800b583 	.word	0x0800b583
 800b514:	0800b5d1 	.word	0x0800b5d1
 800b518:	0800b5d1 	.word	0x0800b5d1
 800b51c:	0800b5d1 	.word	0x0800b5d1
 800b520:	0800b5d1 	.word	0x0800b5d1
 800b524:	0800b5d1 	.word	0x0800b5d1
 800b528:	0800b5d1 	.word	0x0800b5d1
 800b52c:	0800b5d1 	.word	0x0800b5d1
 800b530:	0800b5d1 	.word	0x0800b5d1
 800b534:	0800b5d1 	.word	0x0800b5d1
 800b538:	0800b5d1 	.word	0x0800b5d1
 800b53c:	0800b5d1 	.word	0x0800b5d1
 800b540:	0800b5d1 	.word	0x0800b5d1
 800b544:	0800b5d1 	.word	0x0800b5d1
 800b548:	0800b5d1 	.word	0x0800b5d1
 800b54c:	0800b5d1 	.word	0x0800b5d1
 800b550:	0800b5c3 	.word	0x0800b5c3
 800b554:	2b40      	cmp	r3, #64	; 0x40
 800b556:	d037      	beq.n	800b5c8 <UART_SetConfig+0x6bc>
 800b558:	e03a      	b.n	800b5d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b55a:	f7fe f90d 	bl	8009778 <HAL_RCCEx_GetD3PCLK1Freq>
 800b55e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b560:	e03c      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b566:	4618      	mov	r0, r3
 800b568:	f7fe f91c 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b570:	e034      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b572:	f107 0318 	add.w	r3, r7, #24
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe fa68 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b580:	e02c      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b582:	4b09      	ldr	r3, [pc, #36]	; (800b5a8 <UART_SetConfig+0x69c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0320 	and.w	r3, r3, #32
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d016      	beq.n	800b5bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b58e:	4b06      	ldr	r3, [pc, #24]	; (800b5a8 <UART_SetConfig+0x69c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	08db      	lsrs	r3, r3, #3
 800b594:	f003 0303 	and.w	r3, r3, #3
 800b598:	4a07      	ldr	r2, [pc, #28]	; (800b5b8 <UART_SetConfig+0x6ac>)
 800b59a:	fa22 f303 	lsr.w	r3, r2, r3
 800b59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5a0:	e01c      	b.n	800b5dc <UART_SetConfig+0x6d0>
 800b5a2:	bf00      	nop
 800b5a4:	40011400 	.word	0x40011400
 800b5a8:	58024400 	.word	0x58024400
 800b5ac:	40007800 	.word	0x40007800
 800b5b0:	40007c00 	.word	0x40007c00
 800b5b4:	58000c00 	.word	0x58000c00
 800b5b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b5bc:	4b9d      	ldr	r3, [pc, #628]	; (800b834 <UART_SetConfig+0x928>)
 800b5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c0:	e00c      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5c2:	4b9d      	ldr	r3, [pc, #628]	; (800b838 <UART_SetConfig+0x92c>)
 800b5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c6:	e009      	b.n	800b5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ce:	e005      	b.n	800b5dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b5da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 81de 	beq.w	800b9a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	4a94      	ldr	r2, [pc, #592]	; (800b83c <UART_SetConfig+0x930>)
 800b5ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	005b      	lsls	r3, r3, #1
 800b600:	4413      	add	r3, r2
 800b602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b604:	429a      	cmp	r2, r3
 800b606:	d305      	bcc.n	800b614 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b610:	429a      	cmp	r2, r3
 800b612:	d903      	bls.n	800b61c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b61a:	e1c1      	b.n	800b9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b61e:	2200      	movs	r2, #0
 800b620:	60bb      	str	r3, [r7, #8]
 800b622:	60fa      	str	r2, [r7, #12]
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b628:	4a84      	ldr	r2, [pc, #528]	; (800b83c <UART_SetConfig+0x930>)
 800b62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b62e:	b29b      	uxth	r3, r3
 800b630:	2200      	movs	r2, #0
 800b632:	603b      	str	r3, [r7, #0]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b63a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b63e:	f7f4 fea7 	bl	8000390 <__aeabi_uldivmod>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	4610      	mov	r0, r2
 800b648:	4619      	mov	r1, r3
 800b64a:	f04f 0200 	mov.w	r2, #0
 800b64e:	f04f 0300 	mov.w	r3, #0
 800b652:	020b      	lsls	r3, r1, #8
 800b654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b658:	0202      	lsls	r2, r0, #8
 800b65a:	6979      	ldr	r1, [r7, #20]
 800b65c:	6849      	ldr	r1, [r1, #4]
 800b65e:	0849      	lsrs	r1, r1, #1
 800b660:	2000      	movs	r0, #0
 800b662:	460c      	mov	r4, r1
 800b664:	4605      	mov	r5, r0
 800b666:	eb12 0804 	adds.w	r8, r2, r4
 800b66a:	eb43 0905 	adc.w	r9, r3, r5
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	469a      	mov	sl, r3
 800b676:	4693      	mov	fp, r2
 800b678:	4652      	mov	r2, sl
 800b67a:	465b      	mov	r3, fp
 800b67c:	4640      	mov	r0, r8
 800b67e:	4649      	mov	r1, r9
 800b680:	f7f4 fe86 	bl	8000390 <__aeabi_uldivmod>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4613      	mov	r3, r2
 800b68a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b692:	d308      	bcc.n	800b6a6 <UART_SetConfig+0x79a>
 800b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b69a:	d204      	bcs.n	800b6a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a2:	60da      	str	r2, [r3, #12]
 800b6a4:	e17c      	b.n	800b9a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b6ac:	e178      	b.n	800b9a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6b6:	f040 80c5 	bne.w	800b844 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b6ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b6be:	2b20      	cmp	r3, #32
 800b6c0:	dc48      	bgt.n	800b754 <UART_SetConfig+0x848>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	db7b      	blt.n	800b7be <UART_SetConfig+0x8b2>
 800b6c6:	2b20      	cmp	r3, #32
 800b6c8:	d879      	bhi.n	800b7be <UART_SetConfig+0x8b2>
 800b6ca:	a201      	add	r2, pc, #4	; (adr r2, 800b6d0 <UART_SetConfig+0x7c4>)
 800b6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d0:	0800b75b 	.word	0x0800b75b
 800b6d4:	0800b763 	.word	0x0800b763
 800b6d8:	0800b7bf 	.word	0x0800b7bf
 800b6dc:	0800b7bf 	.word	0x0800b7bf
 800b6e0:	0800b76b 	.word	0x0800b76b
 800b6e4:	0800b7bf 	.word	0x0800b7bf
 800b6e8:	0800b7bf 	.word	0x0800b7bf
 800b6ec:	0800b7bf 	.word	0x0800b7bf
 800b6f0:	0800b77b 	.word	0x0800b77b
 800b6f4:	0800b7bf 	.word	0x0800b7bf
 800b6f8:	0800b7bf 	.word	0x0800b7bf
 800b6fc:	0800b7bf 	.word	0x0800b7bf
 800b700:	0800b7bf 	.word	0x0800b7bf
 800b704:	0800b7bf 	.word	0x0800b7bf
 800b708:	0800b7bf 	.word	0x0800b7bf
 800b70c:	0800b7bf 	.word	0x0800b7bf
 800b710:	0800b78b 	.word	0x0800b78b
 800b714:	0800b7bf 	.word	0x0800b7bf
 800b718:	0800b7bf 	.word	0x0800b7bf
 800b71c:	0800b7bf 	.word	0x0800b7bf
 800b720:	0800b7bf 	.word	0x0800b7bf
 800b724:	0800b7bf 	.word	0x0800b7bf
 800b728:	0800b7bf 	.word	0x0800b7bf
 800b72c:	0800b7bf 	.word	0x0800b7bf
 800b730:	0800b7bf 	.word	0x0800b7bf
 800b734:	0800b7bf 	.word	0x0800b7bf
 800b738:	0800b7bf 	.word	0x0800b7bf
 800b73c:	0800b7bf 	.word	0x0800b7bf
 800b740:	0800b7bf 	.word	0x0800b7bf
 800b744:	0800b7bf 	.word	0x0800b7bf
 800b748:	0800b7bf 	.word	0x0800b7bf
 800b74c:	0800b7bf 	.word	0x0800b7bf
 800b750:	0800b7b1 	.word	0x0800b7b1
 800b754:	2b40      	cmp	r3, #64	; 0x40
 800b756:	d02e      	beq.n	800b7b6 <UART_SetConfig+0x8aa>
 800b758:	e031      	b.n	800b7be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b75a:	f7fc f857 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 800b75e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b760:	e033      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b762:	f7fc f869 	bl	8007838 <HAL_RCC_GetPCLK2Freq>
 800b766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b768:	e02f      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b76a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe f818 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b778:	e027      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b77a:	f107 0318 	add.w	r3, r7, #24
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe f964 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b788:	e01f      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b78a:	4b2d      	ldr	r3, [pc, #180]	; (800b840 <UART_SetConfig+0x934>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f003 0320 	and.w	r3, r3, #32
 800b792:	2b00      	cmp	r3, #0
 800b794:	d009      	beq.n	800b7aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b796:	4b2a      	ldr	r3, [pc, #168]	; (800b840 <UART_SetConfig+0x934>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	08db      	lsrs	r3, r3, #3
 800b79c:	f003 0303 	and.w	r3, r3, #3
 800b7a0:	4a24      	ldr	r2, [pc, #144]	; (800b834 <UART_SetConfig+0x928>)
 800b7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7a8:	e00f      	b.n	800b7ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b7aa:	4b22      	ldr	r3, [pc, #136]	; (800b834 <UART_SetConfig+0x928>)
 800b7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ae:	e00c      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7b0:	4b21      	ldr	r3, [pc, #132]	; (800b838 <UART_SetConfig+0x92c>)
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b4:	e009      	b.n	800b7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7bc:	e005      	b.n	800b7ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b7c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 80e7 	beq.w	800b9a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	4a19      	ldr	r2, [pc, #100]	; (800b83c <UART_SetConfig+0x930>)
 800b7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7e4:	005a      	lsls	r2, r3, #1
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	085b      	lsrs	r3, r3, #1
 800b7ec:	441a      	add	r2, r3
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fa:	2b0f      	cmp	r3, #15
 800b7fc:	d916      	bls.n	800b82c <UART_SetConfig+0x920>
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b804:	d212      	bcs.n	800b82c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	b29b      	uxth	r3, r3
 800b80a:	f023 030f 	bic.w	r3, r3, #15
 800b80e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	085b      	lsrs	r3, r3, #1
 800b814:	b29b      	uxth	r3, r3
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b81e:	4313      	orrs	r3, r2
 800b820:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b828:	60da      	str	r2, [r3, #12]
 800b82a:	e0b9      	b.n	800b9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b832:	e0b5      	b.n	800b9a0 <UART_SetConfig+0xa94>
 800b834:	03d09000 	.word	0x03d09000
 800b838:	003d0900 	.word	0x003d0900
 800b83c:	0800d218 	.word	0x0800d218
 800b840:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b844:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b848:	2b20      	cmp	r3, #32
 800b84a:	dc49      	bgt.n	800b8e0 <UART_SetConfig+0x9d4>
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	db7c      	blt.n	800b94a <UART_SetConfig+0xa3e>
 800b850:	2b20      	cmp	r3, #32
 800b852:	d87a      	bhi.n	800b94a <UART_SetConfig+0xa3e>
 800b854:	a201      	add	r2, pc, #4	; (adr r2, 800b85c <UART_SetConfig+0x950>)
 800b856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85a:	bf00      	nop
 800b85c:	0800b8e7 	.word	0x0800b8e7
 800b860:	0800b8ef 	.word	0x0800b8ef
 800b864:	0800b94b 	.word	0x0800b94b
 800b868:	0800b94b 	.word	0x0800b94b
 800b86c:	0800b8f7 	.word	0x0800b8f7
 800b870:	0800b94b 	.word	0x0800b94b
 800b874:	0800b94b 	.word	0x0800b94b
 800b878:	0800b94b 	.word	0x0800b94b
 800b87c:	0800b907 	.word	0x0800b907
 800b880:	0800b94b 	.word	0x0800b94b
 800b884:	0800b94b 	.word	0x0800b94b
 800b888:	0800b94b 	.word	0x0800b94b
 800b88c:	0800b94b 	.word	0x0800b94b
 800b890:	0800b94b 	.word	0x0800b94b
 800b894:	0800b94b 	.word	0x0800b94b
 800b898:	0800b94b 	.word	0x0800b94b
 800b89c:	0800b917 	.word	0x0800b917
 800b8a0:	0800b94b 	.word	0x0800b94b
 800b8a4:	0800b94b 	.word	0x0800b94b
 800b8a8:	0800b94b 	.word	0x0800b94b
 800b8ac:	0800b94b 	.word	0x0800b94b
 800b8b0:	0800b94b 	.word	0x0800b94b
 800b8b4:	0800b94b 	.word	0x0800b94b
 800b8b8:	0800b94b 	.word	0x0800b94b
 800b8bc:	0800b94b 	.word	0x0800b94b
 800b8c0:	0800b94b 	.word	0x0800b94b
 800b8c4:	0800b94b 	.word	0x0800b94b
 800b8c8:	0800b94b 	.word	0x0800b94b
 800b8cc:	0800b94b 	.word	0x0800b94b
 800b8d0:	0800b94b 	.word	0x0800b94b
 800b8d4:	0800b94b 	.word	0x0800b94b
 800b8d8:	0800b94b 	.word	0x0800b94b
 800b8dc:	0800b93d 	.word	0x0800b93d
 800b8e0:	2b40      	cmp	r3, #64	; 0x40
 800b8e2:	d02e      	beq.n	800b942 <UART_SetConfig+0xa36>
 800b8e4:	e031      	b.n	800b94a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8e6:	f7fb ff91 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 800b8ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8ec:	e033      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8ee:	f7fb ffa3 	bl	8007838 <HAL_RCC_GetPCLK2Freq>
 800b8f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8f4:	e02f      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fd ff52 	bl	80097a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b904:	e027      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b906:	f107 0318 	add.w	r3, r7, #24
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe f89e 	bl	8009a4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b914:	e01f      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b916:	4b2d      	ldr	r3, [pc, #180]	; (800b9cc <UART_SetConfig+0xac0>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d009      	beq.n	800b936 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b922:	4b2a      	ldr	r3, [pc, #168]	; (800b9cc <UART_SetConfig+0xac0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	08db      	lsrs	r3, r3, #3
 800b928:	f003 0303 	and.w	r3, r3, #3
 800b92c:	4a28      	ldr	r2, [pc, #160]	; (800b9d0 <UART_SetConfig+0xac4>)
 800b92e:	fa22 f303 	lsr.w	r3, r2, r3
 800b932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b934:	e00f      	b.n	800b956 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b936:	4b26      	ldr	r3, [pc, #152]	; (800b9d0 <UART_SetConfig+0xac4>)
 800b938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b93a:	e00c      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b93c:	4b25      	ldr	r3, [pc, #148]	; (800b9d4 <UART_SetConfig+0xac8>)
 800b93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b940:	e009      	b.n	800b956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b948:	e005      	b.n	800b956 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b954:	bf00      	nop
    }

    if (pclk != 0U)
 800b956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d021      	beq.n	800b9a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	4a1d      	ldr	r2, [pc, #116]	; (800b9d8 <UART_SetConfig+0xacc>)
 800b962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b966:	461a      	mov	r2, r3
 800b968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	085b      	lsrs	r3, r3, #1
 800b974:	441a      	add	r2, r3
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b97e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b982:	2b0f      	cmp	r3, #15
 800b984:	d909      	bls.n	800b99a <UART_SetConfig+0xa8e>
 800b986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b98c:	d205      	bcs.n	800b99a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	b29a      	uxth	r2, r3
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60da      	str	r2, [r3, #12]
 800b998:	e002      	b.n	800b9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b9bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3748      	adds	r7, #72	; 0x48
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9ca:	bf00      	nop
 800b9cc:	58024400 	.word	0x58024400
 800b9d0:	03d09000 	.word	0x03d09000
 800b9d4:	003d0900 	.word	0x003d0900
 800b9d8:	0800d218 	.word	0x0800d218

0800b9dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00a      	beq.n	800ba06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0a:	f003 0302 	and.w	r3, r3, #2
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00a      	beq.n	800ba28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	430a      	orrs	r2, r1
 800ba26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2c:	f003 0304 	and.w	r3, r3, #4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00a      	beq.n	800ba4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4e:	f003 0308 	and.w	r3, r3, #8
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba70:	f003 0310 	and.w	r3, r3, #16
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00a      	beq.n	800ba8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba92:	f003 0320 	and.w	r3, r3, #32
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	430a      	orrs	r2, r1
 800baae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d01a      	beq.n	800baf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	430a      	orrs	r2, r1
 800bad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bada:	d10a      	bne.n	800baf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	605a      	str	r2, [r3, #4]
  }
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b098      	sub	sp, #96	; 0x60
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb30:	f7f7 f8b4 	bl	8002c9c <HAL_GetTick>
 800bb34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 0308 	and.w	r3, r3, #8
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d12f      	bne.n	800bba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f88e 	bl	800bc74 <UART_WaitOnFlagUntilTimeout>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d022      	beq.n	800bba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb72:	653b      	str	r3, [r7, #80]	; 0x50
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	461a      	mov	r2, r3
 800bb7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb7c:	647b      	str	r3, [r7, #68]	; 0x44
 800bb7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb84:	e841 2300 	strex	r3, r2, [r1]
 800bb88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e6      	bne.n	800bb5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2220      	movs	r2, #32
 800bb94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e063      	b.n	800bc6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 0304 	and.w	r3, r3, #4
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	d149      	bne.n	800bc46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f857 	bl	800bc74 <UART_WaitOnFlagUntilTimeout>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d03c      	beq.n	800bc46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	e853 3f00 	ldrex	r3, [r3]
 800bbd8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbea:	633b      	str	r3, [r7, #48]	; 0x30
 800bbec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbf2:	e841 2300 	strex	r3, r2, [r1]
 800bbf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1e6      	bne.n	800bbcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3308      	adds	r3, #8
 800bc04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	e853 3f00 	ldrex	r3, [r3]
 800bc0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f023 0301 	bic.w	r3, r3, #1
 800bc14:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc1e:	61fa      	str	r2, [r7, #28]
 800bc20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc22:	69b9      	ldr	r1, [r7, #24]
 800bc24:	69fa      	ldr	r2, [r7, #28]
 800bc26:	e841 2300 	strex	r3, r2, [r1]
 800bc2a:	617b      	str	r3, [r7, #20]
   return(result);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1e5      	bne.n	800bbfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2220      	movs	r2, #32
 800bc36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc42:	2303      	movs	r3, #3
 800bc44:	e012      	b.n	800bc6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2220      	movs	r2, #32
 800bc4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2220      	movs	r2, #32
 800bc52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3758      	adds	r7, #88	; 0x58
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	603b      	str	r3, [r7, #0]
 800bc80:	4613      	mov	r3, r2
 800bc82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc84:	e049      	b.n	800bd1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8c:	d045      	beq.n	800bd1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc8e:	f7f7 f805 	bl	8002c9c <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d302      	bcc.n	800bca4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bca4:	2303      	movs	r3, #3
 800bca6:	e048      	b.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 0304 	and.w	r3, r3, #4
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d031      	beq.n	800bd1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	f003 0308 	and.w	r3, r3, #8
 800bcc0:	2b08      	cmp	r3, #8
 800bcc2:	d110      	bne.n	800bce6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2208      	movs	r2, #8
 800bcca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 f839 	bl	800bd44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2208      	movs	r2, #8
 800bcd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e029      	b.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf4:	d111      	bne.n	800bd1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f000 f81f 	bl	800bd44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2220      	movs	r2, #32
 800bd0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e00f      	b.n	800bd3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	69da      	ldr	r2, [r3, #28]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	4013      	ands	r3, r2
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	bf0c      	ite	eq
 800bd2a:	2301      	moveq	r3, #1
 800bd2c:	2300      	movne	r3, #0
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	461a      	mov	r2, r3
 800bd32:	79fb      	ldrb	r3, [r7, #7]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d0a6      	beq.n	800bc86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
	...

0800bd44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b095      	sub	sp, #84	; 0x54
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd54:	e853 3f00 	ldrex	r3, [r3]
 800bd58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	461a      	mov	r2, r3
 800bd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd6a:	643b      	str	r3, [r7, #64]	; 0x40
 800bd6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd72:	e841 2300 	strex	r3, r2, [r1]
 800bd76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1e6      	bne.n	800bd4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	3308      	adds	r3, #8
 800bd84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	e853 3f00 	ldrex	r3, [r3]
 800bd8c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd8e:	69fa      	ldr	r2, [r7, #28]
 800bd90:	4b1e      	ldr	r3, [pc, #120]	; (800be0c <UART_EndRxTransfer+0xc8>)
 800bd92:	4013      	ands	r3, r2
 800bd94:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bda0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bda4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bda6:	e841 2300 	strex	r3, r2, [r1]
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1e5      	bne.n	800bd7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d118      	bne.n	800bdec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	e853 3f00 	ldrex	r3, [r3]
 800bdc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f023 0310 	bic.w	r3, r3, #16
 800bdce:	647b      	str	r3, [r7, #68]	; 0x44
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdd8:	61bb      	str	r3, [r7, #24]
 800bdda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bddc:	6979      	ldr	r1, [r7, #20]
 800bdde:	69ba      	ldr	r2, [r7, #24]
 800bde0:	e841 2300 	strex	r3, r2, [r1]
 800bde4:	613b      	str	r3, [r7, #16]
   return(result);
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1e6      	bne.n	800bdba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2220      	movs	r2, #32
 800bdf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800be00:	bf00      	nop
 800be02:	3754      	adds	r7, #84	; 0x54
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	effffffe 	.word	0xeffffffe

0800be10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d101      	bne.n	800be26 <HAL_UARTEx_DisableFifoMode+0x16>
 800be22:	2302      	movs	r3, #2
 800be24:	e027      	b.n	800be76 <HAL_UARTEx_DisableFifoMode+0x66>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2201      	movs	r2, #1
 800be2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2224      	movs	r2, #36	; 0x24
 800be32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f022 0201 	bic.w	r2, r2, #1
 800be4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be92:	2b01      	cmp	r3, #1
 800be94:	d101      	bne.n	800be9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be96:	2302      	movs	r3, #2
 800be98:	e02d      	b.n	800bef6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2224      	movs	r2, #36	; 0x24
 800bea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f022 0201 	bic.w	r2, r2, #1
 800bec0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	430a      	orrs	r2, r1
 800bed4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f850 	bl	800bf7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2220      	movs	r2, #32
 800bee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d101      	bne.n	800bf16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf12:	2302      	movs	r3, #2
 800bf14:	e02d      	b.n	800bf72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2224      	movs	r2, #36	; 0x24
 800bf22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f022 0201 	bic.w	r2, r2, #1
 800bf3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	683a      	ldr	r2, [r7, #0]
 800bf4e:	430a      	orrs	r2, r1
 800bf50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f812 	bl	800bf7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2220      	movs	r2, #32
 800bf64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d108      	bne.n	800bf9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf9c:	e031      	b.n	800c002 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf9e:	2310      	movs	r3, #16
 800bfa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfa2:	2310      	movs	r3, #16
 800bfa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	0e5b      	lsrs	r3, r3, #25
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	f003 0307 	and.w	r3, r3, #7
 800bfb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	0f5b      	lsrs	r3, r3, #29
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	f003 0307 	and.w	r3, r3, #7
 800bfc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfc6:	7bbb      	ldrb	r3, [r7, #14]
 800bfc8:	7b3a      	ldrb	r2, [r7, #12]
 800bfca:	4911      	ldr	r1, [pc, #68]	; (800c010 <UARTEx_SetNbDataToProcess+0x94>)
 800bfcc:	5c8a      	ldrb	r2, [r1, r2]
 800bfce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfd2:	7b3a      	ldrb	r2, [r7, #12]
 800bfd4:	490f      	ldr	r1, [pc, #60]	; (800c014 <UARTEx_SetNbDataToProcess+0x98>)
 800bfd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	7b7a      	ldrb	r2, [r7, #13]
 800bfe8:	4909      	ldr	r1, [pc, #36]	; (800c010 <UARTEx_SetNbDataToProcess+0x94>)
 800bfea:	5c8a      	ldrb	r2, [r1, r2]
 800bfec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bff0:	7b7a      	ldrb	r2, [r7, #13]
 800bff2:	4908      	ldr	r1, [pc, #32]	; (800c014 <UARTEx_SetNbDataToProcess+0x98>)
 800bff4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bff6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c002:	bf00      	nop
 800c004:	3714      	adds	r7, #20
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	0800d230 	.word	0x0800d230
 800c014:	0800d238 	.word	0x0800d238

0800c018 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d121      	bne.n	800c06e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	4b27      	ldr	r3, [pc, #156]	; (800c0cc <FMC_SDRAM_Init+0xb4>)
 800c030:	4013      	ands	r3, r2
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	6851      	ldr	r1, [r2, #4]
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	6892      	ldr	r2, [r2, #8]
 800c03a:	4311      	orrs	r1, r2
 800c03c:	683a      	ldr	r2, [r7, #0]
 800c03e:	68d2      	ldr	r2, [r2, #12]
 800c040:	4311      	orrs	r1, r2
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	6912      	ldr	r2, [r2, #16]
 800c046:	4311      	orrs	r1, r2
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	6952      	ldr	r2, [r2, #20]
 800c04c:	4311      	orrs	r1, r2
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	6992      	ldr	r2, [r2, #24]
 800c052:	4311      	orrs	r1, r2
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	69d2      	ldr	r2, [r2, #28]
 800c058:	4311      	orrs	r1, r2
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	6a12      	ldr	r2, [r2, #32]
 800c05e:	4311      	orrs	r1, r2
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c064:	430a      	orrs	r2, r1
 800c066:	431a      	orrs	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	e026      	b.n	800c0bc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	69d9      	ldr	r1, [r3, #28]
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	4319      	orrs	r1, r3
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	430b      	orrs	r3, r1
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	4b0e      	ldr	r3, [pc, #56]	; (800c0cc <FMC_SDRAM_Init+0xb4>)
 800c092:	4013      	ands	r3, r2
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	6851      	ldr	r1, [r2, #4]
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	6892      	ldr	r2, [r2, #8]
 800c09c:	4311      	orrs	r1, r2
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	68d2      	ldr	r2, [r2, #12]
 800c0a2:	4311      	orrs	r1, r2
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	6912      	ldr	r2, [r2, #16]
 800c0a8:	4311      	orrs	r1, r2
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	6952      	ldr	r2, [r2, #20]
 800c0ae:	4311      	orrs	r1, r2
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	6992      	ldr	r2, [r2, #24]
 800c0b4:	430a      	orrs	r2, r1
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	ffff8000 	.word	0xffff8000

0800c0d0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d128      	bne.n	800c134 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	1e59      	subs	r1, r3, #1
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	011b      	lsls	r3, r3, #4
 800c0f8:	4319      	orrs	r1, r3
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	021b      	lsls	r3, r3, #8
 800c102:	4319      	orrs	r1, r3
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	3b01      	subs	r3, #1
 800c10a:	031b      	lsls	r3, r3, #12
 800c10c:	4319      	orrs	r1, r3
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	3b01      	subs	r3, #1
 800c114:	041b      	lsls	r3, r3, #16
 800c116:	4319      	orrs	r1, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	695b      	ldr	r3, [r3, #20]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	051b      	lsls	r3, r3, #20
 800c120:	4319      	orrs	r1, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	3b01      	subs	r3, #1
 800c128:	061b      	lsls	r3, r3, #24
 800c12a:	430b      	orrs	r3, r1
 800c12c:	431a      	orrs	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	609a      	str	r2, [r3, #8]
 800c132:	e02d      	b.n	800c190 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	689a      	ldr	r2, [r3, #8]
 800c138:	4b19      	ldr	r3, [pc, #100]	; (800c1a0 <FMC_SDRAM_Timing_Init+0xd0>)
 800c13a:	4013      	ands	r3, r2
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	68d2      	ldr	r2, [r2, #12]
 800c140:	3a01      	subs	r2, #1
 800c142:	0311      	lsls	r1, r2, #12
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	6952      	ldr	r2, [r2, #20]
 800c148:	3a01      	subs	r2, #1
 800c14a:	0512      	lsls	r2, r2, #20
 800c14c:	430a      	orrs	r2, r1
 800c14e:	431a      	orrs	r2, r3
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	1e59      	subs	r1, r3, #1
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	3b01      	subs	r3, #1
 800c168:	011b      	lsls	r3, r3, #4
 800c16a:	4319      	orrs	r1, r3
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	3b01      	subs	r3, #1
 800c172:	021b      	lsls	r3, r3, #8
 800c174:	4319      	orrs	r1, r3
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	3b01      	subs	r3, #1
 800c17c:	041b      	lsls	r3, r3, #16
 800c17e:	4319      	orrs	r1, r3
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	3b01      	subs	r3, #1
 800c186:	061b      	lsls	r3, r3, #24
 800c188:	430b      	orrs	r3, r1
 800c18a:	431a      	orrs	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	ff0f0fff 	.word	0xff0f0fff

0800c1a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1a4:	b084      	sub	sp, #16
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b084      	sub	sp, #16
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	f107 001c 	add.w	r0, r7, #28
 800c1b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d120      	bne.n	800c1fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68da      	ldr	r2, [r3, #12]
 800c1cc:	4b2a      	ldr	r3, [pc, #168]	; (800c278 <USB_CoreInit+0xd4>)
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d105      	bne.n	800c1f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 faac 	bl	800c750 <USB_CoreReset>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73fb      	strb	r3, [r7, #15]
 800c1fc:	e01a      	b.n	800c234 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 faa0 	bl	800c750 <USB_CoreReset>
 800c210:	4603      	mov	r3, r0
 800c212:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c216:	2b00      	cmp	r3, #0
 800c218:	d106      	bne.n	800c228 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	639a      	str	r2, [r3, #56]	; 0x38
 800c226:	e005      	b.n	800c234 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	2b01      	cmp	r3, #1
 800c238:	d116      	bne.n	800c268 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c23e:	b29a      	uxth	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c248:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <USB_CoreInit+0xd8>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	f043 0206 	orr.w	r2, r3, #6
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	f043 0220 	orr.w	r2, r3, #32
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c268:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c274:	b004      	add	sp, #16
 800c276:	4770      	bx	lr
 800c278:	ffbdffbf 	.word	0xffbdffbf
 800c27c:	03ee0000 	.word	0x03ee0000

0800c280 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	f023 0201 	bic.w	r2, r3, #1
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b084      	sub	sp, #16
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c2be:	78fb      	ldrb	r3, [r7, #3]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d115      	bne.n	800c2f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c2d0:	2001      	movs	r0, #1
 800c2d2:	f7f6 fcef 	bl	8002cb4 <HAL_Delay>
      ms++;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fa29 	bl	800c734 <USB_GetMode>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d01e      	beq.n	800c326 <USB_SetCurrentMode+0x84>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b31      	cmp	r3, #49	; 0x31
 800c2ec:	d9f0      	bls.n	800c2d0 <USB_SetCurrentMode+0x2e>
 800c2ee:	e01a      	b.n	800c326 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d115      	bne.n	800c322 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c302:	2001      	movs	r0, #1
 800c304:	f7f6 fcd6 	bl	8002cb4 <HAL_Delay>
      ms++;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3301      	adds	r3, #1
 800c30c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fa10 	bl	800c734 <USB_GetMode>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d005      	beq.n	800c326 <USB_SetCurrentMode+0x84>
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b31      	cmp	r3, #49	; 0x31
 800c31e:	d9f0      	bls.n	800c302 <USB_SetCurrentMode+0x60>
 800c320:	e001      	b.n	800c326 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e005      	b.n	800c332 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b32      	cmp	r3, #50	; 0x32
 800c32a:	d101      	bne.n	800c330 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e000      	b.n	800c332 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
	...

0800c33c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c33c:	b084      	sub	sp, #16
 800c33e:	b580      	push	{r7, lr}
 800c340:	b086      	sub	sp, #24
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c34a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c356:	2300      	movs	r3, #0
 800c358:	613b      	str	r3, [r7, #16]
 800c35a:	e009      	b.n	800c370 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	3340      	adds	r3, #64	; 0x40
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	2200      	movs	r2, #0
 800c368:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	3301      	adds	r3, #1
 800c36e:	613b      	str	r3, [r7, #16]
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	2b0e      	cmp	r3, #14
 800c374:	d9f2      	bls.n	800c35c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d11c      	bne.n	800c3b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c38a:	f043 0302 	orr.w	r3, r3, #2
 800c38e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c394:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	601a      	str	r2, [r3, #0]
 800c3b4:	e005      	b.n	800c3c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3dc:	461a      	mov	r2, r3
 800c3de:	680b      	ldr	r3, [r1, #0]
 800c3e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d10c      	bne.n	800c402 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d104      	bne.n	800c3f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f965 	bl	800c6c0 <USB_SetDevSpeed>
 800c3f6:	e008      	b.n	800c40a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f960 	bl	800c6c0 <USB_SetDevSpeed>
 800c400:	e003      	b.n	800c40a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c402:	2103      	movs	r1, #3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f95b 	bl	800c6c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c40a:	2110      	movs	r1, #16
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 f8f3 	bl	800c5f8 <USB_FlushTxFifo>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c418:	2301      	movs	r3, #1
 800c41a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f91f 	bl	800c660 <USB_FlushRxFifo>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c432:	461a      	mov	r2, r3
 800c434:	2300      	movs	r3, #0
 800c436:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c43e:	461a      	mov	r2, r3
 800c440:	2300      	movs	r3, #0
 800c442:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c44a:	461a      	mov	r2, r3
 800c44c:	2300      	movs	r3, #0
 800c44e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c450:	2300      	movs	r3, #0
 800c452:	613b      	str	r3, [r7, #16]
 800c454:	e043      	b.n	800c4de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	015a      	lsls	r2, r3, #5
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c46c:	d118      	bne.n	800c4a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10a      	bne.n	800c48a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c480:	461a      	mov	r2, r3
 800c482:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c486:	6013      	str	r3, [r2, #0]
 800c488:	e013      	b.n	800c4b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	015a      	lsls	r2, r3, #5
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	4413      	add	r3, r2
 800c492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c496:	461a      	mov	r2, r3
 800c498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c49c:	6013      	str	r3, [r2, #0]
 800c49e:	e008      	b.n	800c4b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	015a      	lsls	r2, r3, #5
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	015a      	lsls	r2, r3, #5
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4be:	461a      	mov	r2, r3
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	015a      	lsls	r2, r3, #5
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c4d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	613b      	str	r3, [r7, #16]
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d3b7      	bcc.n	800c456 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	613b      	str	r3, [r7, #16]
 800c4ea:	e043      	b.n	800c574 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c502:	d118      	bne.n	800c536 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10a      	bne.n	800c520 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	015a      	lsls	r2, r3, #5
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	4413      	add	r3, r2
 800c512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c516:	461a      	mov	r2, r3
 800c518:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	e013      	b.n	800c548 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	015a      	lsls	r2, r3, #5
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	4413      	add	r3, r2
 800c528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c52c:	461a      	mov	r2, r3
 800c52e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c532:	6013      	str	r3, [r2, #0]
 800c534:	e008      	b.n	800c548 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	015a      	lsls	r2, r3, #5
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	4413      	add	r3, r2
 800c53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c542:	461a      	mov	r2, r3
 800c544:	2300      	movs	r3, #0
 800c546:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	015a      	lsls	r2, r3, #5
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4413      	add	r3, r2
 800c550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c554:	461a      	mov	r2, r3
 800c556:	2300      	movs	r3, #0
 800c558:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	015a      	lsls	r2, r3, #5
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	4413      	add	r3, r2
 800c562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c566:	461a      	mov	r2, r3
 800c568:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c56c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	3301      	adds	r3, #1
 800c572:	613b      	str	r3, [r7, #16]
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d3b7      	bcc.n	800c4ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c58a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c58e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c59c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	f043 0210 	orr.w	r2, r3, #16
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	699a      	ldr	r2, [r3, #24]
 800c5b4:	4b0e      	ldr	r3, [pc, #56]	; (800c5f0 <USB_DevInit+0x2b4>)
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d005      	beq.n	800c5ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	699b      	ldr	r3, [r3, #24]
 800c5c6:	f043 0208 	orr.w	r2, r3, #8
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d105      	bne.n	800c5e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	699a      	ldr	r2, [r3, #24]
 800c5d8:	4b06      	ldr	r3, [pc, #24]	; (800c5f4 <USB_DevInit+0x2b8>)
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3718      	adds	r7, #24
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5ec:	b004      	add	sp, #16
 800c5ee:	4770      	bx	lr
 800c5f0:	803c3800 	.word	0x803c3800
 800c5f4:	40000004 	.word	0x40000004

0800c5f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c602:	2300      	movs	r3, #0
 800c604:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	3301      	adds	r3, #1
 800c60a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	4a13      	ldr	r2, [pc, #76]	; (800c65c <USB_FlushTxFifo+0x64>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d901      	bls.n	800c618 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c614:	2303      	movs	r3, #3
 800c616:	e01b      	b.n	800c650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	daf2      	bge.n	800c606 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c620:	2300      	movs	r3, #0
 800c622:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	019b      	lsls	r3, r3, #6
 800c628:	f043 0220 	orr.w	r2, r3, #32
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3301      	adds	r3, #1
 800c634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	4a08      	ldr	r2, [pc, #32]	; (800c65c <USB_FlushTxFifo+0x64>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d901      	bls.n	800c642 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e006      	b.n	800c650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	f003 0320 	and.w	r3, r3, #32
 800c64a:	2b20      	cmp	r3, #32
 800c64c:	d0f0      	beq.n	800c630 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3714      	adds	r7, #20
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	00030d40 	.word	0x00030d40

0800c660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c668:	2300      	movs	r3, #0
 800c66a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	3301      	adds	r3, #1
 800c670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	4a11      	ldr	r2, [pc, #68]	; (800c6bc <USB_FlushRxFifo+0x5c>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d901      	bls.n	800c67e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c67a:	2303      	movs	r3, #3
 800c67c:	e018      	b.n	800c6b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	2b00      	cmp	r3, #0
 800c684:	daf2      	bge.n	800c66c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c686:	2300      	movs	r3, #0
 800c688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2210      	movs	r2, #16
 800c68e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	4a08      	ldr	r2, [pc, #32]	; (800c6bc <USB_FlushRxFifo+0x5c>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d901      	bls.n	800c6a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e006      	b.n	800c6b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	f003 0310 	and.w	r3, r3, #16
 800c6aa:	2b10      	cmp	r3, #16
 800c6ac:	d0f0      	beq.n	800c690 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c6ae:	2300      	movs	r3, #0
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	00030d40 	.word	0x00030d40

0800c6c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	78fb      	ldrb	r3, [r7, #3]
 800c6da:	68f9      	ldr	r1, [r7, #12]
 800c6dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c720:	f043 0302 	orr.w	r3, r3, #2
 800c724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	f003 0301 	and.w	r3, r3, #1
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c758:	2300      	movs	r3, #0
 800c75a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3301      	adds	r3, #1
 800c760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	4a13      	ldr	r2, [pc, #76]	; (800c7b4 <USB_CoreReset+0x64>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d901      	bls.n	800c76e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c76a:	2303      	movs	r3, #3
 800c76c:	e01b      	b.n	800c7a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	2b00      	cmp	r3, #0
 800c774:	daf2      	bge.n	800c75c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c776:	2300      	movs	r3, #0
 800c778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	f043 0201 	orr.w	r2, r3, #1
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	3301      	adds	r3, #1
 800c78a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4a09      	ldr	r2, [pc, #36]	; (800c7b4 <USB_CoreReset+0x64>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d901      	bls.n	800c798 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c794:	2303      	movs	r3, #3
 800c796:	e006      	b.n	800c7a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d0f0      	beq.n	800c786 <USB_CoreReset+0x36>

  return HAL_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3714      	adds	r7, #20
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	00030d40 	.word	0x00030d40

0800c7b8 <__errno>:
 800c7b8:	4b01      	ldr	r3, [pc, #4]	; (800c7c0 <__errno+0x8>)
 800c7ba:	6818      	ldr	r0, [r3, #0]
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	24000010 	.word	0x24000010

0800c7c4 <__libc_init_array>:
 800c7c4:	b570      	push	{r4, r5, r6, lr}
 800c7c6:	4d0d      	ldr	r5, [pc, #52]	; (800c7fc <__libc_init_array+0x38>)
 800c7c8:	4c0d      	ldr	r4, [pc, #52]	; (800c800 <__libc_init_array+0x3c>)
 800c7ca:	1b64      	subs	r4, r4, r5
 800c7cc:	10a4      	asrs	r4, r4, #2
 800c7ce:	2600      	movs	r6, #0
 800c7d0:	42a6      	cmp	r6, r4
 800c7d2:	d109      	bne.n	800c7e8 <__libc_init_array+0x24>
 800c7d4:	4d0b      	ldr	r5, [pc, #44]	; (800c804 <__libc_init_array+0x40>)
 800c7d6:	4c0c      	ldr	r4, [pc, #48]	; (800c808 <__libc_init_array+0x44>)
 800c7d8:	f000 fca2 	bl	800d120 <_init>
 800c7dc:	1b64      	subs	r4, r4, r5
 800c7de:	10a4      	asrs	r4, r4, #2
 800c7e0:	2600      	movs	r6, #0
 800c7e2:	42a6      	cmp	r6, r4
 800c7e4:	d105      	bne.n	800c7f2 <__libc_init_array+0x2e>
 800c7e6:	bd70      	pop	{r4, r5, r6, pc}
 800c7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ec:	4798      	blx	r3
 800c7ee:	3601      	adds	r6, #1
 800c7f0:	e7ee      	b.n	800c7d0 <__libc_init_array+0xc>
 800c7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7f6:	4798      	blx	r3
 800c7f8:	3601      	adds	r6, #1
 800c7fa:	e7f2      	b.n	800c7e2 <__libc_init_array+0x1e>
 800c7fc:	0800d27c 	.word	0x0800d27c
 800c800:	0800d27c 	.word	0x0800d27c
 800c804:	0800d27c 	.word	0x0800d27c
 800c808:	0800d280 	.word	0x0800d280

0800c80c <memcpy>:
 800c80c:	440a      	add	r2, r1
 800c80e:	4291      	cmp	r1, r2
 800c810:	f100 33ff 	add.w	r3, r0, #4294967295
 800c814:	d100      	bne.n	800c818 <memcpy+0xc>
 800c816:	4770      	bx	lr
 800c818:	b510      	push	{r4, lr}
 800c81a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c81e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c822:	4291      	cmp	r1, r2
 800c824:	d1f9      	bne.n	800c81a <memcpy+0xe>
 800c826:	bd10      	pop	{r4, pc}

0800c828 <memset>:
 800c828:	4402      	add	r2, r0
 800c82a:	4603      	mov	r3, r0
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d100      	bne.n	800c832 <memset+0xa>
 800c830:	4770      	bx	lr
 800c832:	f803 1b01 	strb.w	r1, [r3], #1
 800c836:	e7f9      	b.n	800c82c <memset+0x4>

0800c838 <sniprintf>:
 800c838:	b40c      	push	{r2, r3}
 800c83a:	b530      	push	{r4, r5, lr}
 800c83c:	4b17      	ldr	r3, [pc, #92]	; (800c89c <sniprintf+0x64>)
 800c83e:	1e0c      	subs	r4, r1, #0
 800c840:	681d      	ldr	r5, [r3, #0]
 800c842:	b09d      	sub	sp, #116	; 0x74
 800c844:	da08      	bge.n	800c858 <sniprintf+0x20>
 800c846:	238b      	movs	r3, #139	; 0x8b
 800c848:	602b      	str	r3, [r5, #0]
 800c84a:	f04f 30ff 	mov.w	r0, #4294967295
 800c84e:	b01d      	add	sp, #116	; 0x74
 800c850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c854:	b002      	add	sp, #8
 800c856:	4770      	bx	lr
 800c858:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c85c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c860:	bf14      	ite	ne
 800c862:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c866:	4623      	moveq	r3, r4
 800c868:	9304      	str	r3, [sp, #16]
 800c86a:	9307      	str	r3, [sp, #28]
 800c86c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c870:	9002      	str	r0, [sp, #8]
 800c872:	9006      	str	r0, [sp, #24]
 800c874:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c878:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c87a:	ab21      	add	r3, sp, #132	; 0x84
 800c87c:	a902      	add	r1, sp, #8
 800c87e:	4628      	mov	r0, r5
 800c880:	9301      	str	r3, [sp, #4]
 800c882:	f000 f869 	bl	800c958 <_svfiprintf_r>
 800c886:	1c43      	adds	r3, r0, #1
 800c888:	bfbc      	itt	lt
 800c88a:	238b      	movlt	r3, #139	; 0x8b
 800c88c:	602b      	strlt	r3, [r5, #0]
 800c88e:	2c00      	cmp	r4, #0
 800c890:	d0dd      	beq.n	800c84e <sniprintf+0x16>
 800c892:	9b02      	ldr	r3, [sp, #8]
 800c894:	2200      	movs	r2, #0
 800c896:	701a      	strb	r2, [r3, #0]
 800c898:	e7d9      	b.n	800c84e <sniprintf+0x16>
 800c89a:	bf00      	nop
 800c89c:	24000010 	.word	0x24000010

0800c8a0 <__ssputs_r>:
 800c8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	688e      	ldr	r6, [r1, #8]
 800c8a6:	429e      	cmp	r6, r3
 800c8a8:	4682      	mov	sl, r0
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	4690      	mov	r8, r2
 800c8ae:	461f      	mov	r7, r3
 800c8b0:	d838      	bhi.n	800c924 <__ssputs_r+0x84>
 800c8b2:	898a      	ldrh	r2, [r1, #12]
 800c8b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8b8:	d032      	beq.n	800c920 <__ssputs_r+0x80>
 800c8ba:	6825      	ldr	r5, [r4, #0]
 800c8bc:	6909      	ldr	r1, [r1, #16]
 800c8be:	eba5 0901 	sub.w	r9, r5, r1
 800c8c2:	6965      	ldr	r5, [r4, #20]
 800c8c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	444b      	add	r3, r9
 800c8d0:	106d      	asrs	r5, r5, #1
 800c8d2:	429d      	cmp	r5, r3
 800c8d4:	bf38      	it	cc
 800c8d6:	461d      	movcc	r5, r3
 800c8d8:	0553      	lsls	r3, r2, #21
 800c8da:	d531      	bpl.n	800c940 <__ssputs_r+0xa0>
 800c8dc:	4629      	mov	r1, r5
 800c8de:	f000 fb55 	bl	800cf8c <_malloc_r>
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	b950      	cbnz	r0, 800c8fc <__ssputs_r+0x5c>
 800c8e6:	230c      	movs	r3, #12
 800c8e8:	f8ca 3000 	str.w	r3, [sl]
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f2:	81a3      	strh	r3, [r4, #12]
 800c8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8fc:	6921      	ldr	r1, [r4, #16]
 800c8fe:	464a      	mov	r2, r9
 800c900:	f7ff ff84 	bl	800c80c <memcpy>
 800c904:	89a3      	ldrh	r3, [r4, #12]
 800c906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c90e:	81a3      	strh	r3, [r4, #12]
 800c910:	6126      	str	r6, [r4, #16]
 800c912:	6165      	str	r5, [r4, #20]
 800c914:	444e      	add	r6, r9
 800c916:	eba5 0509 	sub.w	r5, r5, r9
 800c91a:	6026      	str	r6, [r4, #0]
 800c91c:	60a5      	str	r5, [r4, #8]
 800c91e:	463e      	mov	r6, r7
 800c920:	42be      	cmp	r6, r7
 800c922:	d900      	bls.n	800c926 <__ssputs_r+0x86>
 800c924:	463e      	mov	r6, r7
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	4632      	mov	r2, r6
 800c92a:	4641      	mov	r1, r8
 800c92c:	f000 faa8 	bl	800ce80 <memmove>
 800c930:	68a3      	ldr	r3, [r4, #8]
 800c932:	1b9b      	subs	r3, r3, r6
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	4433      	add	r3, r6
 800c93a:	6023      	str	r3, [r4, #0]
 800c93c:	2000      	movs	r0, #0
 800c93e:	e7db      	b.n	800c8f8 <__ssputs_r+0x58>
 800c940:	462a      	mov	r2, r5
 800c942:	f000 fb97 	bl	800d074 <_realloc_r>
 800c946:	4606      	mov	r6, r0
 800c948:	2800      	cmp	r0, #0
 800c94a:	d1e1      	bne.n	800c910 <__ssputs_r+0x70>
 800c94c:	6921      	ldr	r1, [r4, #16]
 800c94e:	4650      	mov	r0, sl
 800c950:	f000 fab0 	bl	800ceb4 <_free_r>
 800c954:	e7c7      	b.n	800c8e6 <__ssputs_r+0x46>
	...

0800c958 <_svfiprintf_r>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	4698      	mov	r8, r3
 800c95e:	898b      	ldrh	r3, [r1, #12]
 800c960:	061b      	lsls	r3, r3, #24
 800c962:	b09d      	sub	sp, #116	; 0x74
 800c964:	4607      	mov	r7, r0
 800c966:	460d      	mov	r5, r1
 800c968:	4614      	mov	r4, r2
 800c96a:	d50e      	bpl.n	800c98a <_svfiprintf_r+0x32>
 800c96c:	690b      	ldr	r3, [r1, #16]
 800c96e:	b963      	cbnz	r3, 800c98a <_svfiprintf_r+0x32>
 800c970:	2140      	movs	r1, #64	; 0x40
 800c972:	f000 fb0b 	bl	800cf8c <_malloc_r>
 800c976:	6028      	str	r0, [r5, #0]
 800c978:	6128      	str	r0, [r5, #16]
 800c97a:	b920      	cbnz	r0, 800c986 <_svfiprintf_r+0x2e>
 800c97c:	230c      	movs	r3, #12
 800c97e:	603b      	str	r3, [r7, #0]
 800c980:	f04f 30ff 	mov.w	r0, #4294967295
 800c984:	e0d1      	b.n	800cb2a <_svfiprintf_r+0x1d2>
 800c986:	2340      	movs	r3, #64	; 0x40
 800c988:	616b      	str	r3, [r5, #20]
 800c98a:	2300      	movs	r3, #0
 800c98c:	9309      	str	r3, [sp, #36]	; 0x24
 800c98e:	2320      	movs	r3, #32
 800c990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c994:	f8cd 800c 	str.w	r8, [sp, #12]
 800c998:	2330      	movs	r3, #48	; 0x30
 800c99a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb44 <_svfiprintf_r+0x1ec>
 800c99e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9a2:	f04f 0901 	mov.w	r9, #1
 800c9a6:	4623      	mov	r3, r4
 800c9a8:	469a      	mov	sl, r3
 800c9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ae:	b10a      	cbz	r2, 800c9b4 <_svfiprintf_r+0x5c>
 800c9b0:	2a25      	cmp	r2, #37	; 0x25
 800c9b2:	d1f9      	bne.n	800c9a8 <_svfiprintf_r+0x50>
 800c9b4:	ebba 0b04 	subs.w	fp, sl, r4
 800c9b8:	d00b      	beq.n	800c9d2 <_svfiprintf_r+0x7a>
 800c9ba:	465b      	mov	r3, fp
 800c9bc:	4622      	mov	r2, r4
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f7ff ff6d 	bl	800c8a0 <__ssputs_r>
 800c9c6:	3001      	adds	r0, #1
 800c9c8:	f000 80aa 	beq.w	800cb20 <_svfiprintf_r+0x1c8>
 800c9cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9ce:	445a      	add	r2, fp
 800c9d0:	9209      	str	r2, [sp, #36]	; 0x24
 800c9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80a2 	beq.w	800cb20 <_svfiprintf_r+0x1c8>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9e6:	f10a 0a01 	add.w	sl, sl, #1
 800c9ea:	9304      	str	r3, [sp, #16]
 800c9ec:	9307      	str	r3, [sp, #28]
 800c9ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9f2:	931a      	str	r3, [sp, #104]	; 0x68
 800c9f4:	4654      	mov	r4, sl
 800c9f6:	2205      	movs	r2, #5
 800c9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9fc:	4851      	ldr	r0, [pc, #324]	; (800cb44 <_svfiprintf_r+0x1ec>)
 800c9fe:	f7f3 fc77 	bl	80002f0 <memchr>
 800ca02:	9a04      	ldr	r2, [sp, #16]
 800ca04:	b9d8      	cbnz	r0, 800ca3e <_svfiprintf_r+0xe6>
 800ca06:	06d0      	lsls	r0, r2, #27
 800ca08:	bf44      	itt	mi
 800ca0a:	2320      	movmi	r3, #32
 800ca0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca10:	0711      	lsls	r1, r2, #28
 800ca12:	bf44      	itt	mi
 800ca14:	232b      	movmi	r3, #43	; 0x2b
 800ca16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca20:	d015      	beq.n	800ca4e <_svfiprintf_r+0xf6>
 800ca22:	9a07      	ldr	r2, [sp, #28]
 800ca24:	4654      	mov	r4, sl
 800ca26:	2000      	movs	r0, #0
 800ca28:	f04f 0c0a 	mov.w	ip, #10
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca32:	3b30      	subs	r3, #48	; 0x30
 800ca34:	2b09      	cmp	r3, #9
 800ca36:	d94e      	bls.n	800cad6 <_svfiprintf_r+0x17e>
 800ca38:	b1b0      	cbz	r0, 800ca68 <_svfiprintf_r+0x110>
 800ca3a:	9207      	str	r2, [sp, #28]
 800ca3c:	e014      	b.n	800ca68 <_svfiprintf_r+0x110>
 800ca3e:	eba0 0308 	sub.w	r3, r0, r8
 800ca42:	fa09 f303 	lsl.w	r3, r9, r3
 800ca46:	4313      	orrs	r3, r2
 800ca48:	9304      	str	r3, [sp, #16]
 800ca4a:	46a2      	mov	sl, r4
 800ca4c:	e7d2      	b.n	800c9f4 <_svfiprintf_r+0x9c>
 800ca4e:	9b03      	ldr	r3, [sp, #12]
 800ca50:	1d19      	adds	r1, r3, #4
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	9103      	str	r1, [sp, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	bfbb      	ittet	lt
 800ca5a:	425b      	neglt	r3, r3
 800ca5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca60:	9307      	strge	r3, [sp, #28]
 800ca62:	9307      	strlt	r3, [sp, #28]
 800ca64:	bfb8      	it	lt
 800ca66:	9204      	strlt	r2, [sp, #16]
 800ca68:	7823      	ldrb	r3, [r4, #0]
 800ca6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca6c:	d10c      	bne.n	800ca88 <_svfiprintf_r+0x130>
 800ca6e:	7863      	ldrb	r3, [r4, #1]
 800ca70:	2b2a      	cmp	r3, #42	; 0x2a
 800ca72:	d135      	bne.n	800cae0 <_svfiprintf_r+0x188>
 800ca74:	9b03      	ldr	r3, [sp, #12]
 800ca76:	1d1a      	adds	r2, r3, #4
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	9203      	str	r2, [sp, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	bfb8      	it	lt
 800ca80:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca84:	3402      	adds	r4, #2
 800ca86:	9305      	str	r3, [sp, #20]
 800ca88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb54 <_svfiprintf_r+0x1fc>
 800ca8c:	7821      	ldrb	r1, [r4, #0]
 800ca8e:	2203      	movs	r2, #3
 800ca90:	4650      	mov	r0, sl
 800ca92:	f7f3 fc2d 	bl	80002f0 <memchr>
 800ca96:	b140      	cbz	r0, 800caaa <_svfiprintf_r+0x152>
 800ca98:	2340      	movs	r3, #64	; 0x40
 800ca9a:	eba0 000a 	sub.w	r0, r0, sl
 800ca9e:	fa03 f000 	lsl.w	r0, r3, r0
 800caa2:	9b04      	ldr	r3, [sp, #16]
 800caa4:	4303      	orrs	r3, r0
 800caa6:	3401      	adds	r4, #1
 800caa8:	9304      	str	r3, [sp, #16]
 800caaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caae:	4826      	ldr	r0, [pc, #152]	; (800cb48 <_svfiprintf_r+0x1f0>)
 800cab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cab4:	2206      	movs	r2, #6
 800cab6:	f7f3 fc1b 	bl	80002f0 <memchr>
 800caba:	2800      	cmp	r0, #0
 800cabc:	d038      	beq.n	800cb30 <_svfiprintf_r+0x1d8>
 800cabe:	4b23      	ldr	r3, [pc, #140]	; (800cb4c <_svfiprintf_r+0x1f4>)
 800cac0:	bb1b      	cbnz	r3, 800cb0a <_svfiprintf_r+0x1b2>
 800cac2:	9b03      	ldr	r3, [sp, #12]
 800cac4:	3307      	adds	r3, #7
 800cac6:	f023 0307 	bic.w	r3, r3, #7
 800caca:	3308      	adds	r3, #8
 800cacc:	9303      	str	r3, [sp, #12]
 800cace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad0:	4433      	add	r3, r6
 800cad2:	9309      	str	r3, [sp, #36]	; 0x24
 800cad4:	e767      	b.n	800c9a6 <_svfiprintf_r+0x4e>
 800cad6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cada:	460c      	mov	r4, r1
 800cadc:	2001      	movs	r0, #1
 800cade:	e7a5      	b.n	800ca2c <_svfiprintf_r+0xd4>
 800cae0:	2300      	movs	r3, #0
 800cae2:	3401      	adds	r4, #1
 800cae4:	9305      	str	r3, [sp, #20]
 800cae6:	4619      	mov	r1, r3
 800cae8:	f04f 0c0a 	mov.w	ip, #10
 800caec:	4620      	mov	r0, r4
 800caee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caf2:	3a30      	subs	r2, #48	; 0x30
 800caf4:	2a09      	cmp	r2, #9
 800caf6:	d903      	bls.n	800cb00 <_svfiprintf_r+0x1a8>
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d0c5      	beq.n	800ca88 <_svfiprintf_r+0x130>
 800cafc:	9105      	str	r1, [sp, #20]
 800cafe:	e7c3      	b.n	800ca88 <_svfiprintf_r+0x130>
 800cb00:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb04:	4604      	mov	r4, r0
 800cb06:	2301      	movs	r3, #1
 800cb08:	e7f0      	b.n	800caec <_svfiprintf_r+0x194>
 800cb0a:	ab03      	add	r3, sp, #12
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	462a      	mov	r2, r5
 800cb10:	4b0f      	ldr	r3, [pc, #60]	; (800cb50 <_svfiprintf_r+0x1f8>)
 800cb12:	a904      	add	r1, sp, #16
 800cb14:	4638      	mov	r0, r7
 800cb16:	f3af 8000 	nop.w
 800cb1a:	1c42      	adds	r2, r0, #1
 800cb1c:	4606      	mov	r6, r0
 800cb1e:	d1d6      	bne.n	800cace <_svfiprintf_r+0x176>
 800cb20:	89ab      	ldrh	r3, [r5, #12]
 800cb22:	065b      	lsls	r3, r3, #25
 800cb24:	f53f af2c 	bmi.w	800c980 <_svfiprintf_r+0x28>
 800cb28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb2a:	b01d      	add	sp, #116	; 0x74
 800cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb30:	ab03      	add	r3, sp, #12
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	462a      	mov	r2, r5
 800cb36:	4b06      	ldr	r3, [pc, #24]	; (800cb50 <_svfiprintf_r+0x1f8>)
 800cb38:	a904      	add	r1, sp, #16
 800cb3a:	4638      	mov	r0, r7
 800cb3c:	f000 f87a 	bl	800cc34 <_printf_i>
 800cb40:	e7eb      	b.n	800cb1a <_svfiprintf_r+0x1c2>
 800cb42:	bf00      	nop
 800cb44:	0800d240 	.word	0x0800d240
 800cb48:	0800d24a 	.word	0x0800d24a
 800cb4c:	00000000 	.word	0x00000000
 800cb50:	0800c8a1 	.word	0x0800c8a1
 800cb54:	0800d246 	.word	0x0800d246

0800cb58 <_printf_common>:
 800cb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb5c:	4616      	mov	r6, r2
 800cb5e:	4699      	mov	r9, r3
 800cb60:	688a      	ldr	r2, [r1, #8]
 800cb62:	690b      	ldr	r3, [r1, #16]
 800cb64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	bfb8      	it	lt
 800cb6c:	4613      	movlt	r3, r2
 800cb6e:	6033      	str	r3, [r6, #0]
 800cb70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb74:	4607      	mov	r7, r0
 800cb76:	460c      	mov	r4, r1
 800cb78:	b10a      	cbz	r2, 800cb7e <_printf_common+0x26>
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	6033      	str	r3, [r6, #0]
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	0699      	lsls	r1, r3, #26
 800cb82:	bf42      	ittt	mi
 800cb84:	6833      	ldrmi	r3, [r6, #0]
 800cb86:	3302      	addmi	r3, #2
 800cb88:	6033      	strmi	r3, [r6, #0]
 800cb8a:	6825      	ldr	r5, [r4, #0]
 800cb8c:	f015 0506 	ands.w	r5, r5, #6
 800cb90:	d106      	bne.n	800cba0 <_printf_common+0x48>
 800cb92:	f104 0a19 	add.w	sl, r4, #25
 800cb96:	68e3      	ldr	r3, [r4, #12]
 800cb98:	6832      	ldr	r2, [r6, #0]
 800cb9a:	1a9b      	subs	r3, r3, r2
 800cb9c:	42ab      	cmp	r3, r5
 800cb9e:	dc26      	bgt.n	800cbee <_printf_common+0x96>
 800cba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cba4:	1e13      	subs	r3, r2, #0
 800cba6:	6822      	ldr	r2, [r4, #0]
 800cba8:	bf18      	it	ne
 800cbaa:	2301      	movne	r3, #1
 800cbac:	0692      	lsls	r2, r2, #26
 800cbae:	d42b      	bmi.n	800cc08 <_printf_common+0xb0>
 800cbb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	47c0      	blx	r8
 800cbba:	3001      	adds	r0, #1
 800cbbc:	d01e      	beq.n	800cbfc <_printf_common+0xa4>
 800cbbe:	6823      	ldr	r3, [r4, #0]
 800cbc0:	68e5      	ldr	r5, [r4, #12]
 800cbc2:	6832      	ldr	r2, [r6, #0]
 800cbc4:	f003 0306 	and.w	r3, r3, #6
 800cbc8:	2b04      	cmp	r3, #4
 800cbca:	bf08      	it	eq
 800cbcc:	1aad      	subeq	r5, r5, r2
 800cbce:	68a3      	ldr	r3, [r4, #8]
 800cbd0:	6922      	ldr	r2, [r4, #16]
 800cbd2:	bf0c      	ite	eq
 800cbd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbd8:	2500      	movne	r5, #0
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	bfc4      	itt	gt
 800cbde:	1a9b      	subgt	r3, r3, r2
 800cbe0:	18ed      	addgt	r5, r5, r3
 800cbe2:	2600      	movs	r6, #0
 800cbe4:	341a      	adds	r4, #26
 800cbe6:	42b5      	cmp	r5, r6
 800cbe8:	d11a      	bne.n	800cc20 <_printf_common+0xc8>
 800cbea:	2000      	movs	r0, #0
 800cbec:	e008      	b.n	800cc00 <_printf_common+0xa8>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4652      	mov	r2, sl
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	47c0      	blx	r8
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	d103      	bne.n	800cc04 <_printf_common+0xac>
 800cbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc04:	3501      	adds	r5, #1
 800cc06:	e7c6      	b.n	800cb96 <_printf_common+0x3e>
 800cc08:	18e1      	adds	r1, r4, r3
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	2030      	movs	r0, #48	; 0x30
 800cc0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc12:	4422      	add	r2, r4
 800cc14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc1c:	3302      	adds	r3, #2
 800cc1e:	e7c7      	b.n	800cbb0 <_printf_common+0x58>
 800cc20:	2301      	movs	r3, #1
 800cc22:	4622      	mov	r2, r4
 800cc24:	4649      	mov	r1, r9
 800cc26:	4638      	mov	r0, r7
 800cc28:	47c0      	blx	r8
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	d0e6      	beq.n	800cbfc <_printf_common+0xa4>
 800cc2e:	3601      	adds	r6, #1
 800cc30:	e7d9      	b.n	800cbe6 <_printf_common+0x8e>
	...

0800cc34 <_printf_i>:
 800cc34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc38:	7e0f      	ldrb	r7, [r1, #24]
 800cc3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc3c:	2f78      	cmp	r7, #120	; 0x78
 800cc3e:	4691      	mov	r9, r2
 800cc40:	4680      	mov	r8, r0
 800cc42:	460c      	mov	r4, r1
 800cc44:	469a      	mov	sl, r3
 800cc46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc4a:	d807      	bhi.n	800cc5c <_printf_i+0x28>
 800cc4c:	2f62      	cmp	r7, #98	; 0x62
 800cc4e:	d80a      	bhi.n	800cc66 <_printf_i+0x32>
 800cc50:	2f00      	cmp	r7, #0
 800cc52:	f000 80d8 	beq.w	800ce06 <_printf_i+0x1d2>
 800cc56:	2f58      	cmp	r7, #88	; 0x58
 800cc58:	f000 80a3 	beq.w	800cda2 <_printf_i+0x16e>
 800cc5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc64:	e03a      	b.n	800ccdc <_printf_i+0xa8>
 800cc66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc6a:	2b15      	cmp	r3, #21
 800cc6c:	d8f6      	bhi.n	800cc5c <_printf_i+0x28>
 800cc6e:	a101      	add	r1, pc, #4	; (adr r1, 800cc74 <_printf_i+0x40>)
 800cc70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc74:	0800cccd 	.word	0x0800cccd
 800cc78:	0800cce1 	.word	0x0800cce1
 800cc7c:	0800cc5d 	.word	0x0800cc5d
 800cc80:	0800cc5d 	.word	0x0800cc5d
 800cc84:	0800cc5d 	.word	0x0800cc5d
 800cc88:	0800cc5d 	.word	0x0800cc5d
 800cc8c:	0800cce1 	.word	0x0800cce1
 800cc90:	0800cc5d 	.word	0x0800cc5d
 800cc94:	0800cc5d 	.word	0x0800cc5d
 800cc98:	0800cc5d 	.word	0x0800cc5d
 800cc9c:	0800cc5d 	.word	0x0800cc5d
 800cca0:	0800cded 	.word	0x0800cded
 800cca4:	0800cd11 	.word	0x0800cd11
 800cca8:	0800cdcf 	.word	0x0800cdcf
 800ccac:	0800cc5d 	.word	0x0800cc5d
 800ccb0:	0800cc5d 	.word	0x0800cc5d
 800ccb4:	0800ce0f 	.word	0x0800ce0f
 800ccb8:	0800cc5d 	.word	0x0800cc5d
 800ccbc:	0800cd11 	.word	0x0800cd11
 800ccc0:	0800cc5d 	.word	0x0800cc5d
 800ccc4:	0800cc5d 	.word	0x0800cc5d
 800ccc8:	0800cdd7 	.word	0x0800cdd7
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	1d1a      	adds	r2, r3, #4
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	602a      	str	r2, [r5, #0]
 800ccd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e0a3      	b.n	800ce28 <_printf_i+0x1f4>
 800cce0:	6820      	ldr	r0, [r4, #0]
 800cce2:	6829      	ldr	r1, [r5, #0]
 800cce4:	0606      	lsls	r6, r0, #24
 800cce6:	f101 0304 	add.w	r3, r1, #4
 800ccea:	d50a      	bpl.n	800cd02 <_printf_i+0xce>
 800ccec:	680e      	ldr	r6, [r1, #0]
 800ccee:	602b      	str	r3, [r5, #0]
 800ccf0:	2e00      	cmp	r6, #0
 800ccf2:	da03      	bge.n	800ccfc <_printf_i+0xc8>
 800ccf4:	232d      	movs	r3, #45	; 0x2d
 800ccf6:	4276      	negs	r6, r6
 800ccf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccfc:	485e      	ldr	r0, [pc, #376]	; (800ce78 <_printf_i+0x244>)
 800ccfe:	230a      	movs	r3, #10
 800cd00:	e019      	b.n	800cd36 <_printf_i+0x102>
 800cd02:	680e      	ldr	r6, [r1, #0]
 800cd04:	602b      	str	r3, [r5, #0]
 800cd06:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd0a:	bf18      	it	ne
 800cd0c:	b236      	sxthne	r6, r6
 800cd0e:	e7ef      	b.n	800ccf0 <_printf_i+0xbc>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	6820      	ldr	r0, [r4, #0]
 800cd14:	1d19      	adds	r1, r3, #4
 800cd16:	6029      	str	r1, [r5, #0]
 800cd18:	0601      	lsls	r1, r0, #24
 800cd1a:	d501      	bpl.n	800cd20 <_printf_i+0xec>
 800cd1c:	681e      	ldr	r6, [r3, #0]
 800cd1e:	e002      	b.n	800cd26 <_printf_i+0xf2>
 800cd20:	0646      	lsls	r6, r0, #25
 800cd22:	d5fb      	bpl.n	800cd1c <_printf_i+0xe8>
 800cd24:	881e      	ldrh	r6, [r3, #0]
 800cd26:	4854      	ldr	r0, [pc, #336]	; (800ce78 <_printf_i+0x244>)
 800cd28:	2f6f      	cmp	r7, #111	; 0x6f
 800cd2a:	bf0c      	ite	eq
 800cd2c:	2308      	moveq	r3, #8
 800cd2e:	230a      	movne	r3, #10
 800cd30:	2100      	movs	r1, #0
 800cd32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd36:	6865      	ldr	r5, [r4, #4]
 800cd38:	60a5      	str	r5, [r4, #8]
 800cd3a:	2d00      	cmp	r5, #0
 800cd3c:	bfa2      	ittt	ge
 800cd3e:	6821      	ldrge	r1, [r4, #0]
 800cd40:	f021 0104 	bicge.w	r1, r1, #4
 800cd44:	6021      	strge	r1, [r4, #0]
 800cd46:	b90e      	cbnz	r6, 800cd4c <_printf_i+0x118>
 800cd48:	2d00      	cmp	r5, #0
 800cd4a:	d04d      	beq.n	800cde8 <_printf_i+0x1b4>
 800cd4c:	4615      	mov	r5, r2
 800cd4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd52:	fb03 6711 	mls	r7, r3, r1, r6
 800cd56:	5dc7      	ldrb	r7, [r0, r7]
 800cd58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd5c:	4637      	mov	r7, r6
 800cd5e:	42bb      	cmp	r3, r7
 800cd60:	460e      	mov	r6, r1
 800cd62:	d9f4      	bls.n	800cd4e <_printf_i+0x11a>
 800cd64:	2b08      	cmp	r3, #8
 800cd66:	d10b      	bne.n	800cd80 <_printf_i+0x14c>
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	07de      	lsls	r6, r3, #31
 800cd6c:	d508      	bpl.n	800cd80 <_printf_i+0x14c>
 800cd6e:	6923      	ldr	r3, [r4, #16]
 800cd70:	6861      	ldr	r1, [r4, #4]
 800cd72:	4299      	cmp	r1, r3
 800cd74:	bfde      	ittt	le
 800cd76:	2330      	movle	r3, #48	; 0x30
 800cd78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd80:	1b52      	subs	r2, r2, r5
 800cd82:	6122      	str	r2, [r4, #16]
 800cd84:	f8cd a000 	str.w	sl, [sp]
 800cd88:	464b      	mov	r3, r9
 800cd8a:	aa03      	add	r2, sp, #12
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4640      	mov	r0, r8
 800cd90:	f7ff fee2 	bl	800cb58 <_printf_common>
 800cd94:	3001      	adds	r0, #1
 800cd96:	d14c      	bne.n	800ce32 <_printf_i+0x1fe>
 800cd98:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9c:	b004      	add	sp, #16
 800cd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda2:	4835      	ldr	r0, [pc, #212]	; (800ce78 <_printf_i+0x244>)
 800cda4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cda8:	6829      	ldr	r1, [r5, #0]
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	f851 6b04 	ldr.w	r6, [r1], #4
 800cdb0:	6029      	str	r1, [r5, #0]
 800cdb2:	061d      	lsls	r5, r3, #24
 800cdb4:	d514      	bpl.n	800cde0 <_printf_i+0x1ac>
 800cdb6:	07df      	lsls	r7, r3, #31
 800cdb8:	bf44      	itt	mi
 800cdba:	f043 0320 	orrmi.w	r3, r3, #32
 800cdbe:	6023      	strmi	r3, [r4, #0]
 800cdc0:	b91e      	cbnz	r6, 800cdca <_printf_i+0x196>
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	f023 0320 	bic.w	r3, r3, #32
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	2310      	movs	r3, #16
 800cdcc:	e7b0      	b.n	800cd30 <_printf_i+0xfc>
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	f043 0320 	orr.w	r3, r3, #32
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	2378      	movs	r3, #120	; 0x78
 800cdd8:	4828      	ldr	r0, [pc, #160]	; (800ce7c <_printf_i+0x248>)
 800cdda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cdde:	e7e3      	b.n	800cda8 <_printf_i+0x174>
 800cde0:	0659      	lsls	r1, r3, #25
 800cde2:	bf48      	it	mi
 800cde4:	b2b6      	uxthmi	r6, r6
 800cde6:	e7e6      	b.n	800cdb6 <_printf_i+0x182>
 800cde8:	4615      	mov	r5, r2
 800cdea:	e7bb      	b.n	800cd64 <_printf_i+0x130>
 800cdec:	682b      	ldr	r3, [r5, #0]
 800cdee:	6826      	ldr	r6, [r4, #0]
 800cdf0:	6961      	ldr	r1, [r4, #20]
 800cdf2:	1d18      	adds	r0, r3, #4
 800cdf4:	6028      	str	r0, [r5, #0]
 800cdf6:	0635      	lsls	r5, r6, #24
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	d501      	bpl.n	800ce00 <_printf_i+0x1cc>
 800cdfc:	6019      	str	r1, [r3, #0]
 800cdfe:	e002      	b.n	800ce06 <_printf_i+0x1d2>
 800ce00:	0670      	lsls	r0, r6, #25
 800ce02:	d5fb      	bpl.n	800cdfc <_printf_i+0x1c8>
 800ce04:	8019      	strh	r1, [r3, #0]
 800ce06:	2300      	movs	r3, #0
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	4615      	mov	r5, r2
 800ce0c:	e7ba      	b.n	800cd84 <_printf_i+0x150>
 800ce0e:	682b      	ldr	r3, [r5, #0]
 800ce10:	1d1a      	adds	r2, r3, #4
 800ce12:	602a      	str	r2, [r5, #0]
 800ce14:	681d      	ldr	r5, [r3, #0]
 800ce16:	6862      	ldr	r2, [r4, #4]
 800ce18:	2100      	movs	r1, #0
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	f7f3 fa68 	bl	80002f0 <memchr>
 800ce20:	b108      	cbz	r0, 800ce26 <_printf_i+0x1f2>
 800ce22:	1b40      	subs	r0, r0, r5
 800ce24:	6060      	str	r0, [r4, #4]
 800ce26:	6863      	ldr	r3, [r4, #4]
 800ce28:	6123      	str	r3, [r4, #16]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce30:	e7a8      	b.n	800cd84 <_printf_i+0x150>
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	462a      	mov	r2, r5
 800ce36:	4649      	mov	r1, r9
 800ce38:	4640      	mov	r0, r8
 800ce3a:	47d0      	blx	sl
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d0ab      	beq.n	800cd98 <_printf_i+0x164>
 800ce40:	6823      	ldr	r3, [r4, #0]
 800ce42:	079b      	lsls	r3, r3, #30
 800ce44:	d413      	bmi.n	800ce6e <_printf_i+0x23a>
 800ce46:	68e0      	ldr	r0, [r4, #12]
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	4298      	cmp	r0, r3
 800ce4c:	bfb8      	it	lt
 800ce4e:	4618      	movlt	r0, r3
 800ce50:	e7a4      	b.n	800cd9c <_printf_i+0x168>
 800ce52:	2301      	movs	r3, #1
 800ce54:	4632      	mov	r2, r6
 800ce56:	4649      	mov	r1, r9
 800ce58:	4640      	mov	r0, r8
 800ce5a:	47d0      	blx	sl
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	d09b      	beq.n	800cd98 <_printf_i+0x164>
 800ce60:	3501      	adds	r5, #1
 800ce62:	68e3      	ldr	r3, [r4, #12]
 800ce64:	9903      	ldr	r1, [sp, #12]
 800ce66:	1a5b      	subs	r3, r3, r1
 800ce68:	42ab      	cmp	r3, r5
 800ce6a:	dcf2      	bgt.n	800ce52 <_printf_i+0x21e>
 800ce6c:	e7eb      	b.n	800ce46 <_printf_i+0x212>
 800ce6e:	2500      	movs	r5, #0
 800ce70:	f104 0619 	add.w	r6, r4, #25
 800ce74:	e7f5      	b.n	800ce62 <_printf_i+0x22e>
 800ce76:	bf00      	nop
 800ce78:	0800d251 	.word	0x0800d251
 800ce7c:	0800d262 	.word	0x0800d262

0800ce80 <memmove>:
 800ce80:	4288      	cmp	r0, r1
 800ce82:	b510      	push	{r4, lr}
 800ce84:	eb01 0402 	add.w	r4, r1, r2
 800ce88:	d902      	bls.n	800ce90 <memmove+0x10>
 800ce8a:	4284      	cmp	r4, r0
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	d807      	bhi.n	800cea0 <memmove+0x20>
 800ce90:	1e43      	subs	r3, r0, #1
 800ce92:	42a1      	cmp	r1, r4
 800ce94:	d008      	beq.n	800cea8 <memmove+0x28>
 800ce96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce9e:	e7f8      	b.n	800ce92 <memmove+0x12>
 800cea0:	4402      	add	r2, r0
 800cea2:	4601      	mov	r1, r0
 800cea4:	428a      	cmp	r2, r1
 800cea6:	d100      	bne.n	800ceaa <memmove+0x2a>
 800cea8:	bd10      	pop	{r4, pc}
 800ceaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ceb2:	e7f7      	b.n	800cea4 <memmove+0x24>

0800ceb4 <_free_r>:
 800ceb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ceb6:	2900      	cmp	r1, #0
 800ceb8:	d044      	beq.n	800cf44 <_free_r+0x90>
 800ceba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cebe:	9001      	str	r0, [sp, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f1a1 0404 	sub.w	r4, r1, #4
 800cec6:	bfb8      	it	lt
 800cec8:	18e4      	addlt	r4, r4, r3
 800ceca:	f000 f913 	bl	800d0f4 <__malloc_lock>
 800cece:	4a1e      	ldr	r2, [pc, #120]	; (800cf48 <_free_r+0x94>)
 800ced0:	9801      	ldr	r0, [sp, #4]
 800ced2:	6813      	ldr	r3, [r2, #0]
 800ced4:	b933      	cbnz	r3, 800cee4 <_free_r+0x30>
 800ced6:	6063      	str	r3, [r4, #4]
 800ced8:	6014      	str	r4, [r2, #0]
 800ceda:	b003      	add	sp, #12
 800cedc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cee0:	f000 b90e 	b.w	800d100 <__malloc_unlock>
 800cee4:	42a3      	cmp	r3, r4
 800cee6:	d908      	bls.n	800cefa <_free_r+0x46>
 800cee8:	6825      	ldr	r5, [r4, #0]
 800ceea:	1961      	adds	r1, r4, r5
 800ceec:	428b      	cmp	r3, r1
 800ceee:	bf01      	itttt	eq
 800cef0:	6819      	ldreq	r1, [r3, #0]
 800cef2:	685b      	ldreq	r3, [r3, #4]
 800cef4:	1949      	addeq	r1, r1, r5
 800cef6:	6021      	streq	r1, [r4, #0]
 800cef8:	e7ed      	b.n	800ced6 <_free_r+0x22>
 800cefa:	461a      	mov	r2, r3
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	b10b      	cbz	r3, 800cf04 <_free_r+0x50>
 800cf00:	42a3      	cmp	r3, r4
 800cf02:	d9fa      	bls.n	800cefa <_free_r+0x46>
 800cf04:	6811      	ldr	r1, [r2, #0]
 800cf06:	1855      	adds	r5, r2, r1
 800cf08:	42a5      	cmp	r5, r4
 800cf0a:	d10b      	bne.n	800cf24 <_free_r+0x70>
 800cf0c:	6824      	ldr	r4, [r4, #0]
 800cf0e:	4421      	add	r1, r4
 800cf10:	1854      	adds	r4, r2, r1
 800cf12:	42a3      	cmp	r3, r4
 800cf14:	6011      	str	r1, [r2, #0]
 800cf16:	d1e0      	bne.n	800ceda <_free_r+0x26>
 800cf18:	681c      	ldr	r4, [r3, #0]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	6053      	str	r3, [r2, #4]
 800cf1e:	4421      	add	r1, r4
 800cf20:	6011      	str	r1, [r2, #0]
 800cf22:	e7da      	b.n	800ceda <_free_r+0x26>
 800cf24:	d902      	bls.n	800cf2c <_free_r+0x78>
 800cf26:	230c      	movs	r3, #12
 800cf28:	6003      	str	r3, [r0, #0]
 800cf2a:	e7d6      	b.n	800ceda <_free_r+0x26>
 800cf2c:	6825      	ldr	r5, [r4, #0]
 800cf2e:	1961      	adds	r1, r4, r5
 800cf30:	428b      	cmp	r3, r1
 800cf32:	bf04      	itt	eq
 800cf34:	6819      	ldreq	r1, [r3, #0]
 800cf36:	685b      	ldreq	r3, [r3, #4]
 800cf38:	6063      	str	r3, [r4, #4]
 800cf3a:	bf04      	itt	eq
 800cf3c:	1949      	addeq	r1, r1, r5
 800cf3e:	6021      	streq	r1, [r4, #0]
 800cf40:	6054      	str	r4, [r2, #4]
 800cf42:	e7ca      	b.n	800ceda <_free_r+0x26>
 800cf44:	b003      	add	sp, #12
 800cf46:	bd30      	pop	{r4, r5, pc}
 800cf48:	24000ed0 	.word	0x24000ed0

0800cf4c <sbrk_aligned>:
 800cf4c:	b570      	push	{r4, r5, r6, lr}
 800cf4e:	4e0e      	ldr	r6, [pc, #56]	; (800cf88 <sbrk_aligned+0x3c>)
 800cf50:	460c      	mov	r4, r1
 800cf52:	6831      	ldr	r1, [r6, #0]
 800cf54:	4605      	mov	r5, r0
 800cf56:	b911      	cbnz	r1, 800cf5e <sbrk_aligned+0x12>
 800cf58:	f000 f8bc 	bl	800d0d4 <_sbrk_r>
 800cf5c:	6030      	str	r0, [r6, #0]
 800cf5e:	4621      	mov	r1, r4
 800cf60:	4628      	mov	r0, r5
 800cf62:	f000 f8b7 	bl	800d0d4 <_sbrk_r>
 800cf66:	1c43      	adds	r3, r0, #1
 800cf68:	d00a      	beq.n	800cf80 <sbrk_aligned+0x34>
 800cf6a:	1cc4      	adds	r4, r0, #3
 800cf6c:	f024 0403 	bic.w	r4, r4, #3
 800cf70:	42a0      	cmp	r0, r4
 800cf72:	d007      	beq.n	800cf84 <sbrk_aligned+0x38>
 800cf74:	1a21      	subs	r1, r4, r0
 800cf76:	4628      	mov	r0, r5
 800cf78:	f000 f8ac 	bl	800d0d4 <_sbrk_r>
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	d101      	bne.n	800cf84 <sbrk_aligned+0x38>
 800cf80:	f04f 34ff 	mov.w	r4, #4294967295
 800cf84:	4620      	mov	r0, r4
 800cf86:	bd70      	pop	{r4, r5, r6, pc}
 800cf88:	24000ed4 	.word	0x24000ed4

0800cf8c <_malloc_r>:
 800cf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf90:	1ccd      	adds	r5, r1, #3
 800cf92:	f025 0503 	bic.w	r5, r5, #3
 800cf96:	3508      	adds	r5, #8
 800cf98:	2d0c      	cmp	r5, #12
 800cf9a:	bf38      	it	cc
 800cf9c:	250c      	movcc	r5, #12
 800cf9e:	2d00      	cmp	r5, #0
 800cfa0:	4607      	mov	r7, r0
 800cfa2:	db01      	blt.n	800cfa8 <_malloc_r+0x1c>
 800cfa4:	42a9      	cmp	r1, r5
 800cfa6:	d905      	bls.n	800cfb4 <_malloc_r+0x28>
 800cfa8:	230c      	movs	r3, #12
 800cfaa:	603b      	str	r3, [r7, #0]
 800cfac:	2600      	movs	r6, #0
 800cfae:	4630      	mov	r0, r6
 800cfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb4:	4e2e      	ldr	r6, [pc, #184]	; (800d070 <_malloc_r+0xe4>)
 800cfb6:	f000 f89d 	bl	800d0f4 <__malloc_lock>
 800cfba:	6833      	ldr	r3, [r6, #0]
 800cfbc:	461c      	mov	r4, r3
 800cfbe:	bb34      	cbnz	r4, 800d00e <_malloc_r+0x82>
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	f7ff ffc2 	bl	800cf4c <sbrk_aligned>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	4604      	mov	r4, r0
 800cfcc:	d14d      	bne.n	800d06a <_malloc_r+0xde>
 800cfce:	6834      	ldr	r4, [r6, #0]
 800cfd0:	4626      	mov	r6, r4
 800cfd2:	2e00      	cmp	r6, #0
 800cfd4:	d140      	bne.n	800d058 <_malloc_r+0xcc>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	4631      	mov	r1, r6
 800cfda:	4638      	mov	r0, r7
 800cfdc:	eb04 0803 	add.w	r8, r4, r3
 800cfe0:	f000 f878 	bl	800d0d4 <_sbrk_r>
 800cfe4:	4580      	cmp	r8, r0
 800cfe6:	d13a      	bne.n	800d05e <_malloc_r+0xd2>
 800cfe8:	6821      	ldr	r1, [r4, #0]
 800cfea:	3503      	adds	r5, #3
 800cfec:	1a6d      	subs	r5, r5, r1
 800cfee:	f025 0503 	bic.w	r5, r5, #3
 800cff2:	3508      	adds	r5, #8
 800cff4:	2d0c      	cmp	r5, #12
 800cff6:	bf38      	it	cc
 800cff8:	250c      	movcc	r5, #12
 800cffa:	4629      	mov	r1, r5
 800cffc:	4638      	mov	r0, r7
 800cffe:	f7ff ffa5 	bl	800cf4c <sbrk_aligned>
 800d002:	3001      	adds	r0, #1
 800d004:	d02b      	beq.n	800d05e <_malloc_r+0xd2>
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	442b      	add	r3, r5
 800d00a:	6023      	str	r3, [r4, #0]
 800d00c:	e00e      	b.n	800d02c <_malloc_r+0xa0>
 800d00e:	6822      	ldr	r2, [r4, #0]
 800d010:	1b52      	subs	r2, r2, r5
 800d012:	d41e      	bmi.n	800d052 <_malloc_r+0xc6>
 800d014:	2a0b      	cmp	r2, #11
 800d016:	d916      	bls.n	800d046 <_malloc_r+0xba>
 800d018:	1961      	adds	r1, r4, r5
 800d01a:	42a3      	cmp	r3, r4
 800d01c:	6025      	str	r5, [r4, #0]
 800d01e:	bf18      	it	ne
 800d020:	6059      	strne	r1, [r3, #4]
 800d022:	6863      	ldr	r3, [r4, #4]
 800d024:	bf08      	it	eq
 800d026:	6031      	streq	r1, [r6, #0]
 800d028:	5162      	str	r2, [r4, r5]
 800d02a:	604b      	str	r3, [r1, #4]
 800d02c:	4638      	mov	r0, r7
 800d02e:	f104 060b 	add.w	r6, r4, #11
 800d032:	f000 f865 	bl	800d100 <__malloc_unlock>
 800d036:	f026 0607 	bic.w	r6, r6, #7
 800d03a:	1d23      	adds	r3, r4, #4
 800d03c:	1af2      	subs	r2, r6, r3
 800d03e:	d0b6      	beq.n	800cfae <_malloc_r+0x22>
 800d040:	1b9b      	subs	r3, r3, r6
 800d042:	50a3      	str	r3, [r4, r2]
 800d044:	e7b3      	b.n	800cfae <_malloc_r+0x22>
 800d046:	6862      	ldr	r2, [r4, #4]
 800d048:	42a3      	cmp	r3, r4
 800d04a:	bf0c      	ite	eq
 800d04c:	6032      	streq	r2, [r6, #0]
 800d04e:	605a      	strne	r2, [r3, #4]
 800d050:	e7ec      	b.n	800d02c <_malloc_r+0xa0>
 800d052:	4623      	mov	r3, r4
 800d054:	6864      	ldr	r4, [r4, #4]
 800d056:	e7b2      	b.n	800cfbe <_malloc_r+0x32>
 800d058:	4634      	mov	r4, r6
 800d05a:	6876      	ldr	r6, [r6, #4]
 800d05c:	e7b9      	b.n	800cfd2 <_malloc_r+0x46>
 800d05e:	230c      	movs	r3, #12
 800d060:	603b      	str	r3, [r7, #0]
 800d062:	4638      	mov	r0, r7
 800d064:	f000 f84c 	bl	800d100 <__malloc_unlock>
 800d068:	e7a1      	b.n	800cfae <_malloc_r+0x22>
 800d06a:	6025      	str	r5, [r4, #0]
 800d06c:	e7de      	b.n	800d02c <_malloc_r+0xa0>
 800d06e:	bf00      	nop
 800d070:	24000ed0 	.word	0x24000ed0

0800d074 <_realloc_r>:
 800d074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d078:	4680      	mov	r8, r0
 800d07a:	4614      	mov	r4, r2
 800d07c:	460e      	mov	r6, r1
 800d07e:	b921      	cbnz	r1, 800d08a <_realloc_r+0x16>
 800d080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d084:	4611      	mov	r1, r2
 800d086:	f7ff bf81 	b.w	800cf8c <_malloc_r>
 800d08a:	b92a      	cbnz	r2, 800d098 <_realloc_r+0x24>
 800d08c:	f7ff ff12 	bl	800ceb4 <_free_r>
 800d090:	4625      	mov	r5, r4
 800d092:	4628      	mov	r0, r5
 800d094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d098:	f000 f838 	bl	800d10c <_malloc_usable_size_r>
 800d09c:	4284      	cmp	r4, r0
 800d09e:	4607      	mov	r7, r0
 800d0a0:	d802      	bhi.n	800d0a8 <_realloc_r+0x34>
 800d0a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0a6:	d812      	bhi.n	800d0ce <_realloc_r+0x5a>
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	f7ff ff6e 	bl	800cf8c <_malloc_r>
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d0ed      	beq.n	800d092 <_realloc_r+0x1e>
 800d0b6:	42bc      	cmp	r4, r7
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	bf28      	it	cs
 800d0be:	463a      	movcs	r2, r7
 800d0c0:	f7ff fba4 	bl	800c80c <memcpy>
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	4640      	mov	r0, r8
 800d0c8:	f7ff fef4 	bl	800ceb4 <_free_r>
 800d0cc:	e7e1      	b.n	800d092 <_realloc_r+0x1e>
 800d0ce:	4635      	mov	r5, r6
 800d0d0:	e7df      	b.n	800d092 <_realloc_r+0x1e>
	...

0800d0d4 <_sbrk_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4d06      	ldr	r5, [pc, #24]	; (800d0f0 <_sbrk_r+0x1c>)
 800d0d8:	2300      	movs	r3, #0
 800d0da:	4604      	mov	r4, r0
 800d0dc:	4608      	mov	r0, r1
 800d0de:	602b      	str	r3, [r5, #0]
 800d0e0:	f7f5 fc6e 	bl	80029c0 <_sbrk>
 800d0e4:	1c43      	adds	r3, r0, #1
 800d0e6:	d102      	bne.n	800d0ee <_sbrk_r+0x1a>
 800d0e8:	682b      	ldr	r3, [r5, #0]
 800d0ea:	b103      	cbz	r3, 800d0ee <_sbrk_r+0x1a>
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
 800d0f0:	24000ed8 	.word	0x24000ed8

0800d0f4 <__malloc_lock>:
 800d0f4:	4801      	ldr	r0, [pc, #4]	; (800d0fc <__malloc_lock+0x8>)
 800d0f6:	f000 b811 	b.w	800d11c <__retarget_lock_acquire_recursive>
 800d0fa:	bf00      	nop
 800d0fc:	24000edc 	.word	0x24000edc

0800d100 <__malloc_unlock>:
 800d100:	4801      	ldr	r0, [pc, #4]	; (800d108 <__malloc_unlock+0x8>)
 800d102:	f000 b80c 	b.w	800d11e <__retarget_lock_release_recursive>
 800d106:	bf00      	nop
 800d108:	24000edc 	.word	0x24000edc

0800d10c <_malloc_usable_size_r>:
 800d10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d110:	1f18      	subs	r0, r3, #4
 800d112:	2b00      	cmp	r3, #0
 800d114:	bfbc      	itt	lt
 800d116:	580b      	ldrlt	r3, [r1, r0]
 800d118:	18c0      	addlt	r0, r0, r3
 800d11a:	4770      	bx	lr

0800d11c <__retarget_lock_acquire_recursive>:
 800d11c:	4770      	bx	lr

0800d11e <__retarget_lock_release_recursive>:
 800d11e:	4770      	bx	lr

0800d120 <_init>:
 800d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d122:	bf00      	nop
 800d124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d126:	bc08      	pop	{r3}
 800d128:	469e      	mov	lr, r3
 800d12a:	4770      	bx	lr

0800d12c <_fini>:
 800d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12e:	bf00      	nop
 800d130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d132:	bc08      	pop	{r3}
 800d134:	469e      	mov	lr, r3
 800d136:	4770      	bx	lr

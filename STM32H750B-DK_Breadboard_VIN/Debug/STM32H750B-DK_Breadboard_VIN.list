
STM32H750B-DK_Breadboard_VIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c694  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800c934  0800c934  0001c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ca10  0800ca10  0001ca10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ca1c  0800ca1c  0001ca1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800ca20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800ca94  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800caf4  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d50  24000134  0800cb54  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000e84  0800cb54  00020e84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d372  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f54  00000000  00000000  0004d4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  00051428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e60  00000000  00000000  000533f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040451  00000000  00000000  00055258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000279b4  00000000  00000000  000956a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019a727  00000000  00000000  000bd05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00257784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090f0  00000000  00000000  002577d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c91c 	.word	0x0800c91c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800c91c 	.word	0x0800c91c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f002 f979 	bl	8002990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f879 	bl	8000794 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a2:	f000 f903 	bl	80008ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 fe69 	bl	800137c <MX_GPIO_Init>
  MX_ADC1_Init();
 80006aa:	f000 f92f 	bl	800090c <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ae:	f000 f9a7 	bl	8000a00 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006b2:	f000 fa09 	bl	8000ac8 <MX_ADC3_Init>
  MX_ETH_Init();
 80006b6:	f000 fa69 	bl	8000b8c <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006ba:	f000 fab3 	bl	8000c24 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006be:	f000 fb15 	bl	8000cec <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006c2:	f000 fe0d 	bl	80012e0 <MX_FMC_Init>
  MX_LTDC_Init();
 80006c6:	f000 fb75 	bl	8000db4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006ca:	f000 fc25 	bl	8000f18 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006ce:	f000 fc4f 	bl	8000f70 <MX_RTC_Init>
  MX_SAI2_Init();
 80006d2:	f000 fc75 	bl	8000fc0 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006d6:	f000 fd31 	bl	800113c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006da:	f000 fd83 	bl	80011e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006de:	f000 fdcd 	bl	800127c <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4821      	ldr	r0, [pc, #132]	; (800076c <main+0xd8>)
 80006e8:	f004 ffc5 	bl	8005676 <HAL_GPIO_TogglePin>

	    HAL_ADC_Start(&hadc1);
 80006ec:	4820      	ldr	r0, [pc, #128]	; (8000770 <main+0xdc>)
 80006ee:	f002 fdbf 	bl	8003270 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006f2:	f04f 31ff 	mov.w	r1, #4294967295
 80006f6:	481e      	ldr	r0, [pc, #120]	; (8000770 <main+0xdc>)
 80006f8:	f002 fe84 	bl	8003404 <HAL_ADC_PollForConversion>
	    AnalogValue = HAL_ADC_GetValue(&hadc1);	           // Read ADC value on analog input
 80006fc:	481c      	ldr	r0, [pc, #112]	; (8000770 <main+0xdc>)
 80006fe:	f002 ff75 	bl	80035ec <HAL_ADC_GetValue>
 8000702:	4603      	mov	r3, r0
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <main+0xe0>)
 8000706:	6013      	str	r3, [r2, #0]



	    KeyState = HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_10);   // Read state of PH10
 8000708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070c:	481a      	ldr	r0, [pc, #104]	; (8000778 <main+0xe4>)
 800070e:	f004 ff81 	bl	8005614 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <main+0xe8>)
 8000718:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, KeyState);    // Write to PA3 accordingly
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <main+0xe8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	2108      	movs	r1, #8
 8000724:	4816      	ldr	r0, [pc, #88]	; (8000780 <main+0xec>)
 8000726:	f004 ff8d 	bl	8005644 <HAL_GPIO_WritePin>


	    snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d | ADC:%d\n\r",Counter++,KeyState,AnalogValue);
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <main+0xf0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	4914      	ldr	r1, [pc, #80]	; (8000784 <main+0xf0>)
 8000732:	600a      	str	r2, [r1, #0]
 8000734:	4a11      	ldr	r2, [pc, #68]	; (800077c <main+0xe8>)
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	490e      	ldr	r1, [pc, #56]	; (8000774 <main+0xe0>)
 800073a:	6809      	ldr	r1, [r1, #0]
 800073c:	9101      	str	r1, [sp, #4]
 800073e:	9200      	str	r2, [sp, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <main+0xf4>)
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <main+0xf8>)
 8000748:	f00b fc74 	bl	800c034 <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 800074c:	480f      	ldr	r0, [pc, #60]	; (800078c <main+0xf8>)
 800074e:	f7ff fdc7 	bl	80002e0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <main+0xf8>)
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <main+0xfc>)
 800075c:	f009 ff45 	bl	800a5ea <HAL_UART_Transmit>

	    HAL_Delay(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f002 f9a6 	bl	8002ab4 <HAL_Delay>
  {
 8000768:	e7bb      	b.n	80006e2 <main+0x4e>
 800076a:	bf00      	nop
 800076c:	58022000 	.word	0x58022000
 8000770:	24000188 	.word	0x24000188
 8000774:	24000e50 	.word	0x24000e50
 8000778:	58021c00 	.word	0x58021c00
 800077c:	24000e4c 	.word	0x24000e4c
 8000780:	58020000 	.word	0x58020000
 8000784:	24000e48 	.word	0x24000e48
 8000788:	0800c934 	.word	0x0800c934
 800078c:	24000d48 	.word	0x24000d48
 8000790:	24000774 	.word	0x24000774

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	224c      	movs	r2, #76	; 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00b fc3e 	bl	800c024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00b fc38 	bl	800c024 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f005 fb69 	bl	8005e8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <SystemClock_Config+0x10c>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	4a37      	ldr	r2, [pc, #220]	; (80008a0 <SystemClock_Config+0x10c>)
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <SystemClock_Config+0x10c>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <SystemClock_Config+0x110>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <SystemClock_Config+0x110>)
 80007de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <SystemClock_Config+0x110>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f0:	bf00      	nop
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <SystemClock_Config+0x110>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007fe:	d1f8      	bne.n	80007f2 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <SystemClock_Config+0x114>)
 8000802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000804:	f023 0303 	bic.w	r3, r3, #3
 8000808:	4a27      	ldr	r2, [pc, #156]	; (80008a8 <SystemClock_Config+0x114>)
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000810:	230b      	movs	r3, #11
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000814:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800081a:	2301      	movs	r3, #1
 800081c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000822:	2301      	movs	r3, #1
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	2302      	movs	r3, #2
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800082e:	2316      	movs	r3, #22
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000832:	23a9      	movs	r3, #169	; 0xa9
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083a:	2304      	movs	r3, #4
 800083c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000842:	2300      	movs	r3, #0
 8000844:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000846:	2300      	movs	r3, #0
 8000848:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4618      	mov	r0, r3
 8000854:	f005 fc1e 	bl	8006094 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800085e:	f000 ff5b 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	233f      	movs	r3, #63	; 0x3f
 8000864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f006 f85e 	bl	8006948 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000892:	f000 ff41 	bl	8001718 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3770      	adds	r7, #112	; 0x70
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	58000400 	.word	0x58000400
 80008a4:	58024800 	.word	0x58024800
 80008a8:	58024400 	.word	0x58024400

080008ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0b0      	sub	sp, #192	; 0xc0
 80008b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	22c0      	movs	r2, #192	; 0xc0
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00b fbb3 	bl	800c024 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008c2:	f04f 0300 	mov.w	r3, #0
 80008c6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80008ce:	230c      	movs	r3, #12
 80008d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80008d2:	2305      	movs	r3, #5
 80008d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008de:	23c0      	movs	r3, #192	; 0xc0
 80008e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008e2:	2320      	movs	r3, #32
 80008e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4618      	mov	r0, r3
 80008f4:	f006 fbb4 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008fe:	f000 ff0b 	bl	8001718 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	37c0      	adds	r7, #192	; 0xc0
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
 800092c:	615a      	str	r2, [r3, #20]
 800092e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000932:	4a31      	ldr	r2, [pc, #196]	; (80009f8 <MX_ADC1_Init+0xec>)
 8000934:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000938:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800093c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_ADC1_Init+0xe8>)
 800094c:	2204      	movs	r2, #4
 800094e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_ADC1_Init+0xe8>)
 800095e:	2201      	movs	r2, #1
 8000960:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_ADC1_Init+0xe8>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000976:	2200      	movs	r2, #0
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_ADC1_Init+0xe8>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000982:	2200      	movs	r2, #0
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <MX_ADC1_Init+0xe8>)
 8000990:	f002 facc 	bl	8002f2c <HAL_ADC_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800099a:	f000 febd 	bl	8001718 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_ADC1_Init+0xe8>)
 80009aa:	f003 fb39 	bl	8004020 <HAL_ADCEx_MultiModeConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009b4:	f000 feb0 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_ADC1_Init+0xf0>)
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009bc:	2306      	movs	r3, #6
 80009be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ca:	2304      	movs	r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <MX_ADC1_Init+0xe8>)
 80009dc:	f002 fe14 	bl	8003608 <HAL_ADC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009e6:	f000 fe97 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	24000188 	.word	0x24000188
 80009f8:	40022000 	.word	0x40022000
 80009fc:	4b840000 	.word	0x4b840000

08000a00 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a1a:	4a2a      	ldr	r2, [pc, #168]	; (8000ac4 <MX_ADC2_Init+0xc4>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a1e:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a24:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2c:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a76:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000a78:	f002 fa58 	bl	8002f2c <HAL_ADC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000a82:	f000 fe49 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a86:	2301      	movs	r3, #1
 8000a88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a92:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a96:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_ADC2_Init+0xc0>)
 8000aaa:	f002 fdad 	bl	8003608 <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000ab4:	f000 fe30 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	240001ec 	.word	0x240001ec
 8000ac4:	40022100 	.word	0x40022100

08000ac8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]
 8000ade:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000ae2:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b38:	f002 f9f8 	bl	8002f2c <HAL_ADC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000b42:	f000 fde9 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_ADC3_Init+0xc0>)
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b56:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_ADC3_Init+0xb8>)
 8000b6a:	f002 fd4d 	bl	8003608 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000b74:	f000 fdd0 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	24000250 	.word	0x24000250
 8000b84:	58026000 	.word	0x58026000
 8000b88:	1d500080 	.word	0x1d500080

08000b8c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_ETH_Init+0x80>)
 8000b92:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <MX_ETH_Init+0x84>)
 8000b94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_ETH_Init+0x88>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_ETH_Init+0x88>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_ETH_Init+0x88>)
 8000ba4:	22e1      	movs	r2, #225	; 0xe1
 8000ba6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_ETH_Init+0x88>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_ETH_Init+0x88>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_ETH_Init+0x88>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <MX_ETH_Init+0x88>)
 8000bbe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <MX_ETH_Init+0x8c>)
 8000bca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <MX_ETH_Init+0x90>)
 8000bd0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bd4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bd8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bda:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bdc:	f003 fbe2 	bl	80043a4 <HAL_ETH_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000be6:	f000 fd97 	bl	8001718 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bea:	2238      	movs	r2, #56	; 0x38
 8000bec:	2100      	movs	r1, #0
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_ETH_Init+0x94>)
 8000bf0:	f00b fa18 	bl	800c024 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_ETH_Init+0x94>)
 8000bf6:	2221      	movs	r2, #33	; 0x21
 8000bf8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_ETH_Init+0x94>)
 8000bfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c00:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_ETH_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	240002b4 	.word	0x240002b4
 8000c10:	40028000 	.word	0x40028000
 8000c14:	24000e54 	.word	0x24000e54
 8000c18:	240000d4 	.word	0x240000d4
 8000c1c:	24000074 	.word	0x24000074
 8000c20:	24000150 	.word	0x24000150

08000c24 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c28:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <MX_FDCAN1_Init+0xc4>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000c4c:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c4e:	2210      	movs	r2, #16
 8000c50:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000cae:	2204      	movs	r2, #4
 8000cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000ccc:	2204      	movs	r2, #4
 8000cce:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_FDCAN1_Init+0xc0>)
 8000cd2:	f003 ff8b 	bl	8004bec <HAL_FDCAN_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000cdc:	f000 fd1c 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000364 	.word	0x24000364
 8000ce8:	4000a000 	.word	0x4000a000

08000cec <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000cf2:	4a2f      	ldr	r2, [pc, #188]	; (8000db0 <MX_FDCAN2_Init+0xc4>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d94:	2204      	movs	r2, #4
 8000d96:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_FDCAN2_Init+0xc0>)
 8000d9a:	f003 ff27 	bl	8004bec <HAL_FDCAN_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000da4:	f000 fcb8 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	24000404 	.word	0x24000404
 8000db0:	4000a400 	.word	0x4000a400

08000db4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09a      	sub	sp, #104	; 0x68
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dbe:	2234      	movs	r2, #52	; 0x34
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00b f92e 	bl	800c024 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2234      	movs	r2, #52	; 0x34
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00b f928 	bl	800c024 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000dd4:	4b4e      	ldr	r3, [pc, #312]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000dd6:	4a4f      	ldr	r2, [pc, #316]	; (8000f14 <MX_LTDC_Init+0x160>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000dda:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000de0:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000de6:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dec:	4b48      	ldr	r3, [pc, #288]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000df2:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e00:	220e      	movs	r2, #14
 8000e02:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000e04:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e06:	2205      	movs	r2, #5
 8000e08:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000e0a:	4b41      	ldr	r3, [pc, #260]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e0c:	f240 228e 	movw	r2, #654	; 0x28e
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e14:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e1c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e24:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000e28:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e32:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e42:	4833      	ldr	r0, [pc, #204]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000e44:	f004 fc32 	bl	80056ac <HAL_LTDC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000e4e:	f000 fc63 	bl	8001718 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e62:	2300      	movs	r3, #0
 8000e64:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e72:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e74:	2305      	movs	r3, #5
 8000e76:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481c      	ldr	r0, [pc, #112]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000ea0:	f004 fcd4 	bl	800584c <HAL_LTDC_ConfigLayer>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000eaa:	f000 fc35 	bl	8001718 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ece:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_LTDC_Init+0x15c>)
 8000efa:	f004 fca7 	bl	800584c <HAL_LTDC_ConfigLayer>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000f04:	f000 fc08 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3768      	adds	r7, #104	; 0x68
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	240004a4 	.word	0x240004a4
 8000f14:	50001000 	.word	0x50001000

08000f18 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <MX_QUADSPI_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f24:	22ff      	movs	r2, #255	; 0xff
 8000f26:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_QUADSPI_Init+0x50>)
 8000f54:	f004 ffe4 	bl	8005f20 <HAL_QSPI_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f5e:	f000 fbdb 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2400054c 	.word	0x2400054c
 8000f6c:	52005000 	.word	0x52005000

08000f70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_RTC_Init+0x48>)
 8000f76:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <MX_RTC_Init+0x4c>)
 8000f78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_RTC_Init+0x48>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <MX_RTC_Init+0x48>)
 8000f82:	227f      	movs	r2, #127	; 0x7f
 8000f84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_RTC_Init+0x48>)
 8000f88:	22ff      	movs	r2, #255	; 0xff
 8000f8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <MX_RTC_Init+0x48>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_RTC_Init+0x48>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <MX_RTC_Init+0x48>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_RTC_Init+0x48>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_RTC_Init+0x48>)
 8000fa6:	f008 fd59 	bl	8009a5c <HAL_RTC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000fb0:	f000 fbb2 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	24000598 	.word	0x24000598
 8000fbc:	58004000 	.word	0x58004000

08000fc0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000fc4:	4b58      	ldr	r3, [pc, #352]	; (8001128 <MX_SAI2_Init+0x168>)
 8000fc6:	4a59      	ldr	r2, [pc, #356]	; (800112c <MX_SAI2_Init+0x16c>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fca:	4b57      	ldr	r3, [pc, #348]	; (8001128 <MX_SAI2_Init+0x168>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000fd0:	4b55      	ldr	r3, [pc, #340]	; (8001128 <MX_SAI2_Init+0x168>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000fd6:	4b54      	ldr	r3, [pc, #336]	; (8001128 <MX_SAI2_Init+0x168>)
 8000fd8:	2240      	movs	r2, #64	; 0x40
 8000fda:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fdc:	4b52      	ldr	r3, [pc, #328]	; (8001128 <MX_SAI2_Init+0x168>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fe2:	4b51      	ldr	r3, [pc, #324]	; (8001128 <MX_SAI2_Init+0x168>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <MX_SAI2_Init+0x168>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fee:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <MX_SAI2_Init+0x168>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ff4:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <MX_SAI2_Init+0x168>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ffa:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <MX_SAI2_Init+0x168>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001000:	4b49      	ldr	r3, [pc, #292]	; (8001128 <MX_SAI2_Init+0x168>)
 8001002:	4a4b      	ldr	r2, [pc, #300]	; (8001130 <MX_SAI2_Init+0x170>)
 8001004:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001006:	4b48      	ldr	r3, [pc, #288]	; (8001128 <MX_SAI2_Init+0x168>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800100c:	4b46      	ldr	r3, [pc, #280]	; (8001128 <MX_SAI2_Init+0x168>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001012:	4b45      	ldr	r3, [pc, #276]	; (8001128 <MX_SAI2_Init+0x168>)
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001018:	4b43      	ldr	r3, [pc, #268]	; (8001128 <MX_SAI2_Init+0x168>)
 800101a:	2200      	movs	r2, #0
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800101e:	4b42      	ldr	r3, [pc, #264]	; (8001128 <MX_SAI2_Init+0x168>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <MX_SAI2_Init+0x168>)
 8001028:	2201      	movs	r2, #1
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800102c:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <MX_SAI2_Init+0x168>)
 800102e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001034:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <MX_SAI2_Init+0x168>)
 8001036:	2208      	movs	r2, #8
 8001038:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800103a:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <MX_SAI2_Init+0x168>)
 800103c:	2201      	movs	r2, #1
 800103e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001040:	4b39      	ldr	r3, [pc, #228]	; (8001128 <MX_SAI2_Init+0x168>)
 8001042:	2200      	movs	r2, #0
 8001044:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <MX_SAI2_Init+0x168>)
 8001048:	2200      	movs	r2, #0
 800104a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <MX_SAI2_Init+0x168>)
 800104e:	2200      	movs	r2, #0
 8001050:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <MX_SAI2_Init+0x168>)
 8001054:	2200      	movs	r2, #0
 8001056:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <MX_SAI2_Init+0x168>)
 800105a:	2200      	movs	r2, #0
 800105c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800105e:	4b32      	ldr	r3, [pc, #200]	; (8001128 <MX_SAI2_Init+0x168>)
 8001060:	2201      	movs	r2, #1
 8001062:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <MX_SAI2_Init+0x168>)
 8001066:	2200      	movs	r2, #0
 8001068:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800106a:	482f      	ldr	r0, [pc, #188]	; (8001128 <MX_SAI2_Init+0x168>)
 800106c:	f008 fe0e 	bl	8009c8c <HAL_SAI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001076:	f000 fb4f 	bl	8001718 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <MX_SAI2_Init+0x174>)
 800107c:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <MX_SAI2_Init+0x178>)
 800107e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <MX_SAI2_Init+0x174>)
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <MX_SAI2_Init+0x174>)
 8001088:	2203      	movs	r2, #3
 800108a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <MX_SAI2_Init+0x174>)
 800108e:	2240      	movs	r2, #64	; 0x40
 8001090:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <MX_SAI2_Init+0x174>)
 8001094:	2200      	movs	r2, #0
 8001096:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MX_SAI2_Init+0x174>)
 800109a:	2200      	movs	r2, #0
 800109c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <MX_SAI2_Init+0x174>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010a4:	4b23      	ldr	r3, [pc, #140]	; (8001134 <MX_SAI2_Init+0x174>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <MX_SAI2_Init+0x174>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <MX_SAI2_Init+0x174>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_SAI2_Init+0x174>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_SAI2_Init+0x174>)
 80010be:	2200      	movs	r2, #0
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_SAI2_Init+0x174>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_SAI2_Init+0x174>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_SAI2_Init+0x174>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_SAI2_Init+0x174>)
 80010d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_SAI2_Init+0x174>)
 80010e0:	2208      	movs	r2, #8
 80010e2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_SAI2_Init+0x174>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_SAI2_Init+0x174>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_SAI2_Init+0x174>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_SAI2_Init+0x174>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_SAI2_Init+0x174>)
 80010fe:	2200      	movs	r2, #0
 8001100:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_SAI2_Init+0x174>)
 8001104:	2200      	movs	r2, #0
 8001106:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_SAI2_Init+0x174>)
 800110a:	2201      	movs	r2, #1
 800110c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_SAI2_Init+0x174>)
 8001110:	2200      	movs	r2, #0
 8001112:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <MX_SAI2_Init+0x174>)
 8001116:	f008 fdb9 	bl	8009c8c <HAL_SAI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001120:	f000 fafa 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	240005bc 	.word	0x240005bc
 800112c:	40015c04 	.word	0x40015c04
 8001130:	0002ee00 	.word	0x0002ee00
 8001134:	24000654 	.word	0x24000654
 8001138:	40015c24 	.word	0x40015c24

0800113c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001142:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <MX_SPI2_Init+0xa4>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001148:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800114c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001156:	2203      	movs	r2, #3
 8001158:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_SPI2_Init+0xa0>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_SPI2_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_SPI2_Init+0xa0>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI2_Init+0xa0>)
 800118c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_SPI2_Init+0xa0>)
 8001194:	2200      	movs	r2, #0
 8001196:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_SPI2_Init+0xa0>)
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI2_Init+0xa0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <MX_SPI2_Init+0xa0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI2_Init+0xa0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_SPI2_Init+0xa0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI2_Init+0xa0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_SPI2_Init+0xa0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI2_Init+0xa0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_SPI2_Init+0xa0>)
 80011ca:	f009 f87f 	bl	800a2cc <HAL_SPI_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80011d4:	f000 faa0 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	240006ec 	.word	0x240006ec
 80011e0:	40003800 	.word	0x40003800

080011e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_USART3_UART_Init+0x90>)
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <MX_USART3_UART_Init+0x94>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_USART3_UART_Init+0x90>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_USART3_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_USART3_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_USART3_UART_Init+0x90>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_USART3_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_USART3_UART_Init+0x90>)
 800122e:	f009 f98c 	bl	800a54a <HAL_UART_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001238:	f000 fa6e 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001240:	f00a fa1d 	bl	800b67e <HAL_UARTEx_SetTxFifoThreshold>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800124a:	f000 fa65 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4808      	ldr	r0, [pc, #32]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001252:	f00a fa52 	bl	800b6fa <HAL_UARTEx_SetRxFifoThreshold>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800125c:	f000 fa5c 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001262:	f00a f9d3 	bl	800b60c <HAL_UARTEx_DisableFifoMode>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800126c:	f000 fa54 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	24000774 	.word	0x24000774
 8001278:	40004800 	.word	0x40004800

0800127c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001282:	4a16      	ldr	r2, [pc, #88]	; (80012dc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001284:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001288:	2209      	movs	r2, #9
 800128a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800128e:	2202      	movs	r2, #2
 8001290:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129a:	2202      	movs	r2, #2
 800129c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c4:	f004 fc9a 	bl	8005bfc <HAL_PCD_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012ce:	f000 fa23 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	24000808 	.word	0x24000808
 80012dc:	40080000 	.word	0x40080000

080012e0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_FMC_Init+0x94>)
 80012fa:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <MX_FMC_Init+0x98>)
 80012fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_FMC_Init+0x94>)
 8001300:	2201      	movs	r2, #1
 8001302:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_FMC_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_FMC_Init+0x94>)
 800130c:	2204      	movs	r2, #4
 800130e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_FMC_Init+0x94>)
 8001312:	2210      	movs	r2, #16
 8001314:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_FMC_Init+0x94>)
 8001318:	2240      	movs	r2, #64	; 0x40
 800131a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_FMC_Init+0x94>)
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_FMC_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_FMC_Init+0x94>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_FMC_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_FMC_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800133a:	2310      	movs	r3, #16
 800133c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800133e:	2310      	movs	r3, #16
 8001340:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001342:	2310      	movs	r3, #16
 8001344:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001346:	2310      	movs	r3, #16
 8001348:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800134a:	2310      	movs	r3, #16
 800134c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800134e:	2310      	movs	r3, #16
 8001350:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001352:	2310      	movs	r3, #16
 8001354:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_FMC_Init+0x94>)
 800135c:	f008 ff7a 	bl	800a254 <HAL_SDRAM_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001366:	f000 f9d7 	bl	8001718 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	24000d14 	.word	0x24000d14
 8001378:	52004140 	.word	0x52004140

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b090      	sub	sp, #64	; 0x40
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001392:	4bbf      	ldr	r3, [pc, #764]	; (8001690 <MX_GPIO_Init+0x314>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	4abd      	ldr	r2, [pc, #756]	; (8001690 <MX_GPIO_Init+0x314>)
 800139a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a2:	4bbb      	ldr	r3, [pc, #748]	; (8001690 <MX_GPIO_Init+0x314>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4bb7      	ldr	r3, [pc, #732]	; (8001690 <MX_GPIO_Init+0x314>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	4ab6      	ldr	r2, [pc, #728]	; (8001690 <MX_GPIO_Init+0x314>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c0:	4bb3      	ldr	r3, [pc, #716]	; (8001690 <MX_GPIO_Init+0x314>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013ce:	4bb0      	ldr	r3, [pc, #704]	; (8001690 <MX_GPIO_Init+0x314>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	4aae      	ldr	r2, [pc, #696]	; (8001690 <MX_GPIO_Init+0x314>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013de:	4bac      	ldr	r3, [pc, #688]	; (8001690 <MX_GPIO_Init+0x314>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e8:	623b      	str	r3, [r7, #32]
 80013ea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ec:	4ba8      	ldr	r3, [pc, #672]	; (8001690 <MX_GPIO_Init+0x314>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f2:	4aa7      	ldr	r2, [pc, #668]	; (8001690 <MX_GPIO_Init+0x314>)
 80013f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fc:	4ba4      	ldr	r3, [pc, #656]	; (8001690 <MX_GPIO_Init+0x314>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4ba1      	ldr	r3, [pc, #644]	; (8001690 <MX_GPIO_Init+0x314>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	4a9f      	ldr	r2, [pc, #636]	; (8001690 <MX_GPIO_Init+0x314>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141a:	4b9d      	ldr	r3, [pc, #628]	; (8001690 <MX_GPIO_Init+0x314>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b99      	ldr	r3, [pc, #612]	; (8001690 <MX_GPIO_Init+0x314>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	4a98      	ldr	r2, [pc, #608]	; (8001690 <MX_GPIO_Init+0x314>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001438:	4b95      	ldr	r3, [pc, #596]	; (8001690 <MX_GPIO_Init+0x314>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001446:	4b92      	ldr	r3, [pc, #584]	; (8001690 <MX_GPIO_Init+0x314>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	4a90      	ldr	r2, [pc, #576]	; (8001690 <MX_GPIO_Init+0x314>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001456:	4b8e      	ldr	r3, [pc, #568]	; (8001690 <MX_GPIO_Init+0x314>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001464:	4b8a      	ldr	r3, [pc, #552]	; (8001690 <MX_GPIO_Init+0x314>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	4a89      	ldr	r2, [pc, #548]	; (8001690 <MX_GPIO_Init+0x314>)
 800146c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001474:	4b86      	ldr	r3, [pc, #536]	; (8001690 <MX_GPIO_Init+0x314>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4b83      	ldr	r3, [pc, #524]	; (8001690 <MX_GPIO_Init+0x314>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	4a81      	ldr	r2, [pc, #516]	; (8001690 <MX_GPIO_Init+0x314>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001492:	4b7f      	ldr	r3, [pc, #508]	; (8001690 <MX_GPIO_Init+0x314>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a0:	4b7b      	ldr	r3, [pc, #492]	; (8001690 <MX_GPIO_Init+0x314>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	4a7a      	ldr	r2, [pc, #488]	; (8001690 <MX_GPIO_Init+0x314>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b0:	4b77      	ldr	r3, [pc, #476]	; (8001690 <MX_GPIO_Init+0x314>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014be:	4b74      	ldr	r3, [pc, #464]	; (8001690 <MX_GPIO_Init+0x314>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	4a72      	ldr	r2, [pc, #456]	; (8001690 <MX_GPIO_Init+0x314>)
 80014c6:	f043 0320 	orr.w	r3, r3, #32
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ce:	4b70      	ldr	r3, [pc, #448]	; (8001690 <MX_GPIO_Init+0x314>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e2:	486c      	ldr	r0, [pc, #432]	; (8001694 <MX_GPIO_Init+0x318>)
 80014e4:	f004 f8ae 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f241 0104 	movw	r1, #4100	; 0x1004
 80014ee:	486a      	ldr	r0, [pc, #424]	; (8001698 <MX_GPIO_Init+0x31c>)
 80014f0:	f004 f8a8 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2104      	movs	r1, #4
 80014f8:	4868      	ldr	r0, [pc, #416]	; (800169c <MX_GPIO_Init+0x320>)
 80014fa:	f004 f8a3 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2108      	movs	r1, #8
 8001502:	4867      	ldr	r0, [pc, #412]	; (80016a0 <MX_GPIO_Init+0x324>)
 8001504:	f004 f89e 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800151a:	2303      	movs	r3, #3
 800151c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800151e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001522:	4619      	mov	r1, r3
 8001524:	485f      	ldr	r0, [pc, #380]	; (80016a4 <MX_GPIO_Init+0x328>)
 8001526:	f003 fec5 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153a:	4619      	mov	r1, r3
 800153c:	485a      	ldr	r0, [pc, #360]	; (80016a8 <MX_GPIO_Init+0x32c>)
 800153e:	f003 feb9 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001542:	2330      	movs	r3, #48	; 0x30
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001552:	230a      	movs	r3, #10
 8001554:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155a:	4619      	mov	r1, r3
 800155c:	4853      	ldr	r0, [pc, #332]	; (80016ac <MX_GPIO_Init+0x330>)
 800155e:	f003 fea9 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001562:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001574:	4619      	mov	r1, r3
 8001576:	484a      	ldr	r0, [pc, #296]	; (80016a0 <MX_GPIO_Init+0x324>)
 8001578:	f003 fe9c 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800157c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800158e:	4619      	mov	r1, r3
 8001590:	4847      	ldr	r0, [pc, #284]	; (80016b0 <MX_GPIO_Init+0x334>)
 8001592:	f003 fe8f 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b0:	4619      	mov	r1, r3
 80015b2:	483b      	ldr	r0, [pc, #236]	; (80016a0 <MX_GPIO_Init+0x324>)
 80015b4:	f003 fe7e 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015c8:	2306      	movs	r3, #6
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d0:	4619      	mov	r1, r3
 80015d2:	4838      	ldr	r0, [pc, #224]	; (80016b4 <MX_GPIO_Init+0x338>)
 80015d4:	f003 fe6e 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ee:	4619      	mov	r1, r3
 80015f0:	4828      	ldr	r0, [pc, #160]	; (8001694 <MX_GPIO_Init+0x318>)
 80015f2:	f003 fe5f 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80015f6:	2304      	movs	r3, #4
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001608:	4619      	mov	r1, r3
 800160a:	482a      	ldr	r0, [pc, #168]	; (80016b4 <MX_GPIO_Init+0x338>)
 800160c:	f003 fe52 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001610:	2301      	movs	r3, #1
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001620:	4619      	mov	r1, r3
 8001622:	4825      	ldr	r0, [pc, #148]	; (80016b8 <MX_GPIO_Init+0x33c>)
 8001624:	f003 fe46 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800163a:	4619      	mov	r1, r3
 800163c:	4819      	ldr	r0, [pc, #100]	; (80016a4 <MX_GPIO_Init+0x328>)
 800163e:	f003 fe39 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001648:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001656:	4619      	mov	r1, r3
 8001658:	4812      	ldr	r0, [pc, #72]	; (80016a4 <MX_GPIO_Init+0x328>)
 800165a:	f003 fe2b 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800165e:	2340      	movs	r3, #64	; 0x40
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800166e:	2309      	movs	r3, #9
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001676:	4619      	mov	r1, r3
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <MX_GPIO_Init+0x324>)
 800167a:	f003 fe1b 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 800167e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	e015      	b.n	80016bc <MX_GPIO_Init+0x340>
 8001690:	58024400 	.word	0x58024400
 8001694:	58022000 	.word	0x58022000
 8001698:	58020400 	.word	0x58020400
 800169c:	58022400 	.word	0x58022400
 80016a0:	58020000 	.word	0x58020000
 80016a4:	58021c00 	.word	0x58021c00
 80016a8:	58020c00 	.word	0x58020c00
 80016ac:	58021000 	.word	0x58021000
 80016b0:	58020800 	.word	0x58020800
 80016b4:	58021800 	.word	0x58021800
 80016b8:	58022800 	.word	0x58022800
 80016bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c2:	4619      	mov	r1, r3
 80016c4:	4811      	ldr	r0, [pc, #68]	; (800170c <MX_GPIO_Init+0x390>)
 80016c6:	f003 fdf5 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80016ca:	2304      	movs	r3, #4
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016de:	4619      	mov	r1, r3
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <MX_GPIO_Init+0x394>)
 80016e2:	f003 fde7 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016e6:	2308      	movs	r3, #8
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_GPIO_Init+0x398>)
 80016fe:	f003 fdd9 	bl	80052b4 <HAL_GPIO_Init>

}
 8001702:	bf00      	nop
 8001704:	3740      	adds	r7, #64	; 0x40
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	58020400 	.word	0x58020400
 8001710:	58022400 	.word	0x58022400
 8001714:	58020000 	.word	0x58020000

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_MspInit+0x30>)
 800172c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001730:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_MspInit+0x30>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_MspInit+0x30>)
 800173c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	58024400 	.word	0x58024400

08001758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b090      	sub	sp, #64	; 0x40
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a72      	ldr	r2, [pc, #456]	; (8001940 <HAL_ADC_MspInit+0x1e8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d154      	bne.n	8001824 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800177a:	4b72      	ldr	r3, [pc, #456]	; (8001944 <HAL_ADC_MspInit+0x1ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a70      	ldr	r2, [pc, #448]	; (8001944 <HAL_ADC_MspInit+0x1ec>)
 8001782:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001784:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_ADC_MspInit+0x1ec>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d10e      	bne.n	80017aa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800178c:	4b6e      	ldr	r3, [pc, #440]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 800178e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001792:	4a6d      	ldr	r2, [pc, #436]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 8001794:	f043 0320 	orr.w	r3, r3, #32
 8001798:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800179c:	4b6a      	ldr	r3, [pc, #424]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 800179e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b67      	ldr	r3, [pc, #412]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	4a65      	ldr	r2, [pc, #404]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	4a5e      	ldr	r2, [pc, #376]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017e6:	2301      	movs	r3, #1
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ea:	2303      	movs	r3, #3
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	4619      	mov	r1, r3
 80017f8:	4854      	ldr	r0, [pc, #336]	; (800194c <HAL_ADC_MspInit+0x1f4>)
 80017fa:	f003 fd5b 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017fe:	2310      	movs	r3, #16
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180e:	4619      	mov	r1, r3
 8001810:	484f      	ldr	r0, [pc, #316]	; (8001950 <HAL_ADC_MspInit+0x1f8>)
 8001812:	f003 fd4f 	bl	80052b4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001816:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800181a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800181e:	f001 f98d 	bl	8002b3c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001822:	e089      	b.n	8001938 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_ADC_MspInit+0x1fc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d12d      	bne.n	800188a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800182e:	4b45      	ldr	r3, [pc, #276]	; (8001944 <HAL_ADC_MspInit+0x1ec>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a43      	ldr	r2, [pc, #268]	; (8001944 <HAL_ADC_MspInit+0x1ec>)
 8001836:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001838:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_ADC_MspInit+0x1ec>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10e      	bne.n	800185e <HAL_ADC_MspInit+0x106>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001840:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 8001842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001846:	4a40      	ldr	r2, [pc, #256]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001850:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 8001852:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001864:	4a38      	ldr	r2, [pc, #224]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800187c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001880:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001884:	f001 f95a 	bl	8002b3c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001888:	e056      	b.n	8001938 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_ADC_MspInit+0x200>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d151      	bne.n	8001938 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189a:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 800189c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	4a23      	ldr	r2, [pc, #140]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80018ba:	f043 0320 	orr.w	r3, r3, #32
 80018be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c2:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_ADC_MspInit+0x1f0>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f4:	2303      	movs	r3, #3
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001900:	4619      	mov	r1, r3
 8001902:	4816      	ldr	r0, [pc, #88]	; (800195c <HAL_ADC_MspInit+0x204>)
 8001904:	f003 fcd6 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001908:	2301      	movs	r3, #1
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190c:	2303      	movs	r3, #3
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	480c      	ldr	r0, [pc, #48]	; (800194c <HAL_ADC_MspInit+0x1f4>)
 800191c:	f003 fcca 	bl	80052b4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001920:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001924:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001928:	f001 f908 	bl	8002b3c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800192c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001930:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001934:	f001 f902 	bl	8002b3c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001938:	bf00      	nop
 800193a:	3740      	adds	r7, #64	; 0x40
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40022000 	.word	0x40022000
 8001944:	24000e5c 	.word	0x24000e5c
 8001948:	58024400 	.word	0x58024400
 800194c:	58020800 	.word	0x58020800
 8001950:	58020000 	.word	0x58020000
 8001954:	40022100 	.word	0x40022100
 8001958:	58026000 	.word	0x58026000
 800195c:	58021400 	.word	0x58021400

08001960 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b092      	sub	sp, #72	; 0x48
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a87      	ldr	r2, [pc, #540]	; (8001b9c <HAL_ETH_MspInit+0x23c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	f040 8108 	bne.w	8001b94 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001984:	4b86      	ldr	r3, [pc, #536]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001986:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198a:	4a85      	ldr	r2, [pc, #532]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 800198c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001990:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001994:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001996:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800199a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
 80019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80019a2:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019a8:	4a7d      	ldr	r2, [pc, #500]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019b2:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80019c0:	4b77      	ldr	r3, [pc, #476]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c6:	4a76      	ldr	r2, [pc, #472]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019d0:	4b73      	ldr	r3, [pc, #460]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019de:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e4:	4a6e      	ldr	r2, [pc, #440]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ee:	4b6c      	ldr	r3, [pc, #432]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	4a67      	ldr	r2, [pc, #412]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a04:	f043 0310 	orr.w	r3, r3, #16
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0c:	4b64      	ldr	r3, [pc, #400]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	623b      	str	r3, [r7, #32]
 8001a18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a1a:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a20:	4a5f      	ldr	r2, [pc, #380]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a38:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3e:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a48:	4b55      	ldr	r3, [pc, #340]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	4b52      	ldr	r3, [pc, #328]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5c:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a66:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7a:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a84:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a98:	4a41      	ldr	r2, [pc, #260]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <HAL_ETH_MspInit+0x240>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001ab0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ac2:	230b      	movs	r3, #11
 8001ac4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ac6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aca:	4619      	mov	r1, r3
 8001acc:	4835      	ldr	r0, [pc, #212]	; (8001ba4 <HAL_ETH_MspInit+0x244>)
 8001ace:	f003 fbf1 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae2:	230b      	movs	r3, #11
 8001ae4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aea:	4619      	mov	r1, r3
 8001aec:	482e      	ldr	r0, [pc, #184]	; (8001ba8 <HAL_ETH_MspInit+0x248>)
 8001aee:	f003 fbe1 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b04:	230b      	movs	r3, #11
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4827      	ldr	r0, [pc, #156]	; (8001bac <HAL_ETH_MspInit+0x24c>)
 8001b10:	f003 fbd0 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001b14:	233e      	movs	r3, #62	; 0x3e
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b24:	230b      	movs	r3, #11
 8001b26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4820      	ldr	r0, [pc, #128]	; (8001bb0 <HAL_ETH_MspInit+0x250>)
 8001b30:	f003 fbc0 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001b34:	230c      	movs	r3, #12
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b44:	230b      	movs	r3, #11
 8001b46:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4819      	ldr	r0, [pc, #100]	; (8001bb4 <HAL_ETH_MspInit+0x254>)
 8001b50:	f003 fbb0 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001b54:	2386      	movs	r3, #134	; 0x86
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b64:	230b      	movs	r3, #11
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4812      	ldr	r0, [pc, #72]	; (8001bb8 <HAL_ETH_MspInit+0x258>)
 8001b70:	f003 fba0 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001b74:	2303      	movs	r3, #3
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b84:	230b      	movs	r3, #11
 8001b86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480b      	ldr	r0, [pc, #44]	; (8001bbc <HAL_ETH_MspInit+0x25c>)
 8001b90:	f003 fb90 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3748      	adds	r7, #72	; 0x48
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40028000 	.word	0x40028000
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	58021800 	.word	0x58021800
 8001ba8:	58021000 	.word	0x58021000
 8001bac:	58022000 	.word	0x58022000
 8001bb0:	58020800 	.word	0x58020800
 8001bb4:	58021c00 	.word	0x58021c00
 8001bb8:	58020000 	.word	0x58020000
 8001bbc:	58020400 	.word	0x58020400

08001bc0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0bc      	sub	sp, #240	; 0xf0
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	22c0      	movs	r2, #192	; 0xc0
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00a fa1f 	bl	800c024 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a57      	ldr	r2, [pc, #348]	; (8001d48 <HAL_FDCAN_MspInit+0x188>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d151      	bne.n	8001c94 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001bfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f005 fa29 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001c14:	f7ff fd80 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_FDCAN_MspInit+0x18c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_FDCAN_MspInit+0x18c>)
 8001c20:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_FDCAN_MspInit+0x18c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d10e      	bne.n	8001c48 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001c2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c30:	4a47      	ldr	r2, [pc, #284]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c36:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c3a:	4b45      	ldr	r3, [pc, #276]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001c3c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c48:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	4a40      	ldr	r2, [pc, #256]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c58:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001c66:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c80:	2309      	movs	r3, #9
 8001c82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4831      	ldr	r0, [pc, #196]	; (8001d54 <HAL_FDCAN_MspInit+0x194>)
 8001c8e:	f003 fb11 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001c92:	e055      	b.n	8001d40 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <HAL_FDCAN_MspInit+0x198>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d150      	bne.n	8001d40 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001caa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f005 f9d2 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001cc2:	f7ff fd29 	bl	8001718 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_FDCAN_MspInit+0x18c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_FDCAN_MspInit+0x18c>)
 8001cce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_FDCAN_MspInit+0x18c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10e      	bne.n	8001cf6 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001cda:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001cea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_FDCAN_MspInit+0x190>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001d14:	f242 0320 	movw	r3, #8224	; 0x2020
 8001d18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001d2e:	2309      	movs	r3, #9
 8001d30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4808      	ldr	r0, [pc, #32]	; (8001d5c <HAL_FDCAN_MspInit+0x19c>)
 8001d3c:	f003 faba 	bl	80052b4 <HAL_GPIO_Init>
}
 8001d40:	bf00      	nop
 8001d42:	37f0      	adds	r7, #240	; 0xf0
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	4000a000 	.word	0x4000a000
 8001d4c:	24000e60 	.word	0x24000e60
 8001d50:	58024400 	.word	0x58024400
 8001d54:	58021c00 	.word	0x58021c00
 8001d58:	4000a400 	.word	0x4000a400
 8001d5c:	58020400 	.word	0x58020400

08001d60 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0be      	sub	sp, #248	; 0xf8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	22c0      	movs	r2, #192	; 0xc0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00a f94f 	bl	800c024 <memset>
  if(hltdc->Instance==LTDC)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a66      	ldr	r2, [pc, #408]	; (8001f24 <HAL_LTDC_MspInit+0x1c4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	f040 80c4 	bne.w	8001f1a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d92:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001daa:	2302      	movs	r3, #2
 8001dac:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001dae:	2302      	movs	r3, #2
 8001db0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001db2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001db6:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dbc:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc2:	f107 0320 	add.w	r3, r7, #32
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f005 f94a 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001dd2:	f7ff fca1 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001dd6:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001dd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001ddc:	4a52      	ldr	r2, [pc, #328]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001de8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001df4:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfa:	4a4b      	ldr	r2, [pc, #300]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e04:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e12:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e18:	4a43      	ldr	r2, [pc, #268]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e36:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e4e:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e54:	4a34      	ldr	r2, [pc, #208]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5e:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <HAL_LTDC_MspInit+0x1c8>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8001e6c:	23fc      	movs	r3, #252	; 0xfc
 8001e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e84:	230e      	movs	r3, #14
 8001e86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e8a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4826      	ldr	r0, [pc, #152]	; (8001f2c <HAL_LTDC_MspInit+0x1cc>)
 8001e92:	f003 fa0f 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001e96:	f24d 2303 	movw	r3, #53763	; 0xd203
 8001e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eb0:	230e      	movs	r3, #14
 8001eb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001eb6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481c      	ldr	r0, [pc, #112]	; (8001f30 <HAL_LTDC_MspInit+0x1d0>)
 8001ebe:	f003 f9f9 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001ec2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001edc:	230e      	movs	r3, #14
 8001ede:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ee2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4812      	ldr	r0, [pc, #72]	; (8001f34 <HAL_LTDC_MspInit+0x1d4>)
 8001eea:	f003 f9e3 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f08:	230e      	movs	r3, #14
 8001f0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4808      	ldr	r0, [pc, #32]	; (8001f38 <HAL_LTDC_MspInit+0x1d8>)
 8001f16:	f003 f9cd 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f1a:	bf00      	nop
 8001f1c:	37f8      	adds	r7, #248	; 0xf8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	50001000 	.word	0x50001000
 8001f28:	58024400 	.word	0x58024400
 8001f2c:	58022800 	.word	0x58022800
 8001f30:	58022000 	.word	0x58022000
 8001f34:	58022400 	.word	0x58022400
 8001f38:	58021c00 	.word	0x58021c00

08001f3c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0bc      	sub	sp, #240	; 0xf0
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	22c0      	movs	r2, #192	; 0xc0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f00a f861 	bl	800c024 <memset>
  if(hqspi->Instance==QUADSPI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a56      	ldr	r2, [pc, #344]	; (80020c0 <HAL_QSPI_MspInit+0x184>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	f040 80a5 	bne.w	80020b8 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7e:	f107 0318 	add.w	r3, r7, #24
 8001f82:	4618      	mov	r0, r3
 8001f84:	f005 f86c 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001f8e:	f7ff fbc3 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001f94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f98:	4a4a      	ldr	r2, [pc, #296]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001fa2:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001fa4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb0:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb6:	4a43      	ldr	r2, [pc, #268]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc0:	4b40      	ldr	r3, [pc, #256]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd4:	4a3b      	ldr	r2, [pc, #236]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001fd6:	f043 0320 	orr.w	r3, r3, #32
 8001fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fde:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fec:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff2:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001ff4:	f043 0308 	orr.w	r3, r3, #8
 8001ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_QSPI_MspInit+0x188>)
 8001ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800200a:	2340      	movs	r3, #64	; 0x40
 800200c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002022:	230a      	movs	r3, #10
 8002024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800202c:	4619      	mov	r1, r3
 800202e:	4826      	ldr	r0, [pc, #152]	; (80020c8 <HAL_QSPI_MspInit+0x18c>)
 8002030:	f003 f940 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002034:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002038:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800204e:	2309      	movs	r3, #9
 8002050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002054:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002058:	4619      	mov	r1, r3
 800205a:	481c      	ldr	r0, [pc, #112]	; (80020cc <HAL_QSPI_MspInit+0x190>)
 800205c:	f003 f92a 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002064:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800207a:	230a      	movs	r3, #10
 800207c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002080:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002084:	4619      	mov	r1, r3
 8002086:	4811      	ldr	r0, [pc, #68]	; (80020cc <HAL_QSPI_MspInit+0x190>)
 8002088:	f003 f914 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800208c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002090:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020a6:	2309      	movs	r3, #9
 80020a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020b0:	4619      	mov	r1, r3
 80020b2:	4807      	ldr	r0, [pc, #28]	; (80020d0 <HAL_QSPI_MspInit+0x194>)
 80020b4:	f003 f8fe 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80020b8:	bf00      	nop
 80020ba:	37f0      	adds	r7, #240	; 0xf0
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	52005000 	.word	0x52005000
 80020c4:	58024400 	.word	0x58024400
 80020c8:	58020400 	.word	0x58020400
 80020cc:	58021400 	.word	0x58021400
 80020d0:	58020c00 	.word	0x58020c00

080020d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0b2      	sub	sp, #200	; 0xc8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	22c0      	movs	r2, #192	; 0xc0
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f009 ff9d 	bl	800c024 <memset>
  if(hrtc->Instance==RTC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_RTC_MspInit+0x5c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d119      	bne.n	8002128 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	4618      	mov	r0, r3
 800210e:	f004 ffa7 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002118:	f7ff fafe 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RTC_MspInit+0x60>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_RTC_MspInit+0x60>)
 8002122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	37c8      	adds	r7, #200	; 0xc8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	58004000 	.word	0x58004000
 8002134:	58024400 	.word	0x58024400

08002138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0bc      	sub	sp, #240	; 0xf0
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002150:	f107 0318 	add.w	r3, r7, #24
 8002154:	22c0      	movs	r2, #192	; 0xc0
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f009 ff63 	bl	800c024 <memset>
  if(hspi->Instance==SPI2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a55      	ldr	r2, [pc, #340]	; (80022b8 <HAL_SPI_MspInit+0x180>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f040 80a3 	bne.w	80022b0 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800216a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002176:	2300      	movs	r3, #0
 8002178:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217a:	f107 0318 	add.w	r3, r7, #24
 800217e:	4618      	mov	r0, r3
 8002180:	f004 ff6e 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800218a:	f7ff fac5 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800218e:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <HAL_SPI_MspInit+0x184>)
 8002190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002194:	4a49      	ldr	r2, [pc, #292]	; (80022bc <HAL_SPI_MspInit+0x184>)
 8002196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b2:	4a42      	ldr	r2, [pc, #264]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021bc:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d0:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021d2:	f043 0308 	orr.w	r3, r3, #8
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021e8:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ee:	4a33      	ldr	r2, [pc, #204]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f8:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_SPI_MspInit+0x184>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002206:	2310      	movs	r3, #16
 8002208:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800221e:	2307      	movs	r3, #7
 8002220:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002228:	4619      	mov	r1, r3
 800222a:	4825      	ldr	r0, [pc, #148]	; (80022c0 <HAL_SPI_MspInit+0x188>)
 800222c:	f003 f842 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002230:	2308      	movs	r3, #8
 8002232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002248:	2305      	movs	r3, #5
 800224a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002252:	4619      	mov	r1, r3
 8002254:	481b      	ldr	r0, [pc, #108]	; (80022c4 <HAL_SPI_MspInit+0x18c>)
 8002256:	f003 f82d 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800225a:	2304      	movs	r3, #4
 800225c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002272:	2305      	movs	r3, #5
 8002274:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002278:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800227c:	4619      	mov	r1, r3
 800227e:	4812      	ldr	r0, [pc, #72]	; (80022c8 <HAL_SPI_MspInit+0x190>)
 8002280:	f003 f818 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002288:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800229e:	2305      	movs	r3, #5
 80022a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022a8:	4619      	mov	r1, r3
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <HAL_SPI_MspInit+0x188>)
 80022ac:	f003 f802 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022b0:	bf00      	nop
 80022b2:	37f0      	adds	r7, #240	; 0xf0
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40003800 	.word	0x40003800
 80022bc:	58024400 	.word	0x58024400
 80022c0:	58020400 	.word	0x58020400
 80022c4:	58020c00 	.word	0x58020c00
 80022c8:	58022000 	.word	0x58022000

080022cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b0ba      	sub	sp, #232	; 0xe8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	22c0      	movs	r2, #192	; 0xc0
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f009 fe99 	bl	800c024 <memset>
  if(huart->Instance==USART3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a27      	ldr	r2, [pc, #156]	; (8002394 <HAL_UART_MspInit+0xc8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d146      	bne.n	800238a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022fc:	f04f 0202 	mov.w	r2, #2
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4618      	mov	r0, r3
 8002314:	f004 fea4 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800231e:	f7ff f9fb 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_UART_MspInit+0xcc>)
 8002324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_UART_MspInit+0xcc>)
 800232a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_UART_MspInit+0xcc>)
 8002334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_UART_MspInit+0xcc>)
 8002342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_UART_MspInit+0xcc>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_UART_MspInit+0xcc>)
 8002352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800235e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002378:	2307      	movs	r3, #7
 800237a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_UART_MspInit+0xd0>)
 8002386:	f002 ff95 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	37e8      	adds	r7, #232	; 0xe8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40004800 	.word	0x40004800
 8002398:	58024400 	.word	0x58024400
 800239c:	58020400 	.word	0x58020400

080023a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0ba      	sub	sp, #232	; 0xe8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	22c0      	movs	r2, #192	; 0xc0
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f009 fe2f 	bl	800c024 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a30      	ldr	r2, [pc, #192]	; (800248c <HAL_PCD_MspInit+0xec>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d159      	bne.n	8002484 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80023d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80023dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	4618      	mov	r0, r3
 80023ea:	f004 fe39 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80023f4:	f7ff f990 	bl	8001718 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80023f8:	f003 fd82 	bl	8005f00 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_PCD_MspInit+0xf0>)
 80023fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002402:	4a23      	ldr	r2, [pc, #140]	; (8002490 <HAL_PCD_MspInit+0xf0>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_PCD_MspInit+0xf0>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800241a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002422:	2300      	movs	r3, #0
 8002424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002432:	4619      	mov	r1, r3
 8002434:	4817      	ldr	r0, [pc, #92]	; (8002494 <HAL_PCD_MspInit+0xf4>)
 8002436:	f002 ff3d 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800243a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800243e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002454:	230a      	movs	r3, #10
 8002456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800245e:	4619      	mov	r1, r3
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <HAL_PCD_MspInit+0xf4>)
 8002462:	f002 ff27 	bl	80052b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_PCD_MspInit+0xf0>)
 8002468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800246c:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_PCD_MspInit+0xf0>)
 800246e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002472:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_PCD_MspInit+0xf0>)
 8002478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800247c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	37e8      	adds	r7, #232	; 0xe8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40080000 	.word	0x40080000
 8002490:	58024400 	.word	0x58024400
 8002494:	58020000 	.word	0x58020000

08002498 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002498:	b580      	push	{r7, lr}
 800249a:	b0b8      	sub	sp, #224	; 0xe0
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800249e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80024ae:	4b51      	ldr	r3, [pc, #324]	; (80025f4 <HAL_FMC_MspInit+0x15c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8099 	bne.w	80025ea <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80024b8:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <HAL_FMC_MspInit+0x15c>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024be:	f107 0308 	add.w	r3, r7, #8
 80024c2:	22c0      	movs	r2, #192	; 0xc0
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f009 fdac 	bl	800c024 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80024cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80024d8:	2300      	movs	r3, #0
 80024da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024dc:	f107 0308 	add.w	r3, r7, #8
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fdbd 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80024ec:	f7ff f914 	bl	8001718 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80024f0:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_FMC_MspInit+0x160>)
 80024f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80024f6:	4a40      	ldr	r2, [pc, #256]	; (80025f8 <HAL_FMC_MspInit+0x160>)
 80024f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002500:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_FMC_MspInit+0x160>)
 8002502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800250e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002512:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002528:	230c      	movs	r3, #12
 800252a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800252e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002532:	4619      	mov	r1, r3
 8002534:	4831      	ldr	r0, [pc, #196]	; (80025fc <HAL_FMC_MspInit+0x164>)
 8002536:	f002 febd 	bl	80052b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800253a:	f248 1333 	movw	r3, #33075	; 0x8133
 800253e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002554:	230c      	movs	r3, #12
 8002556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800255a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800255e:	4619      	mov	r1, r3
 8002560:	4827      	ldr	r0, [pc, #156]	; (8002600 <HAL_FMC_MspInit+0x168>)
 8002562:	f002 fea7 	bl	80052b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002566:	f24c 7303 	movw	r3, #50947	; 0xc703
 800256a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002580:	230c      	movs	r3, #12
 8002582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002586:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800258a:	4619      	mov	r1, r3
 800258c:	481d      	ldr	r0, [pc, #116]	; (8002604 <HAL_FMC_MspInit+0x16c>)
 800258e:	f002 fe91 	bl	80052b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002592:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002596:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025ac:	230c      	movs	r3, #12
 80025ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025b6:	4619      	mov	r1, r3
 80025b8:	4813      	ldr	r0, [pc, #76]	; (8002608 <HAL_FMC_MspInit+0x170>)
 80025ba:	f002 fe7b 	bl	80052b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025be:	23e0      	movs	r3, #224	; 0xe0
 80025c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025d6:	230c      	movs	r3, #12
 80025d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025e0:	4619      	mov	r1, r3
 80025e2:	480a      	ldr	r0, [pc, #40]	; (800260c <HAL_FMC_MspInit+0x174>)
 80025e4:	f002 fe66 	bl	80052b4 <HAL_GPIO_Init>
 80025e8:	e000      	b.n	80025ec <HAL_FMC_MspInit+0x154>
    return;
 80025ea:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80025ec:	37e0      	adds	r7, #224	; 0xe0
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	24000e64 	.word	0x24000e64
 80025f8:	58024400 	.word	0x58024400
 80025fc:	58021000 	.word	0x58021000
 8002600:	58021800 	.word	0x58021800
 8002604:	58020c00 	.word	0x58020c00
 8002608:	58021400 	.word	0x58021400
 800260c:	58021c00 	.word	0x58021c00

08002610 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002618:	f7ff ff3e 	bl	8002498 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0ba      	sub	sp, #232	; 0xe8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	22c0      	movs	r2, #192	; 0xc0
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f009 fcf5 	bl	800c024 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a45      	ldr	r2, [pc, #276]	; (8002754 <HAL_SAI_MspInit+0x130>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d13e      	bne.n	80026c2 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002650:	2300      	movs	r3, #0
 8002652:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4618      	mov	r0, r3
 800265a:	f004 fd01 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002664:	f7ff f858 	bl	8001718 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002668:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_SAI_MspInit+0x134>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10e      	bne.n	800268e <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002670:	4b3a      	ldr	r3, [pc, #232]	; (800275c <HAL_SAI_MspInit+0x138>)
 8002672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002676:	4a39      	ldr	r2, [pc, #228]	; (800275c <HAL_SAI_MspInit+0x138>)
 8002678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800267c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_SAI_MspInit+0x138>)
 8002682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800268e:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_SAI_MspInit+0x134>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	4a30      	ldr	r2, [pc, #192]	; (8002758 <HAL_SAI_MspInit+0x134>)
 8002696:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002698:	23f0      	movs	r3, #240	; 0xf0
 800269a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026b0:	230a      	movs	r3, #10
 80026b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4828      	ldr	r0, [pc, #160]	; (8002760 <HAL_SAI_MspInit+0x13c>)
 80026be:	f002 fdf9 	bl	80052b4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_SAI_MspInit+0x140>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d13f      	bne.n	800274c <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80026cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80026d8:	2300      	movs	r3, #0
 80026da:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 fcbd 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80026ec:	f7ff f814 	bl	8001718 <Error_Handler>
    }

      if (SAI2_client == 0)
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_SAI_MspInit+0x134>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10e      	bne.n	8002716 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_SAI_MspInit+0x138>)
 80026fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026fe:	4a17      	ldr	r2, [pc, #92]	; (800275c <HAL_SAI_MspInit+0x138>)
 8002700:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002704:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_SAI_MspInit+0x138>)
 800270a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800270e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_SAI_MspInit+0x134>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_SAI_MspInit+0x134>)
 800271e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800273a:	230a      	movs	r3, #10
 800273c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002740:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002744:	4619      	mov	r1, r3
 8002746:	4808      	ldr	r0, [pc, #32]	; (8002768 <HAL_SAI_MspInit+0x144>)
 8002748:	f002 fdb4 	bl	80052b4 <HAL_GPIO_Init>

    }
}
 800274c:	bf00      	nop
 800274e:	37e8      	adds	r7, #232	; 0xe8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40015c04 	.word	0x40015c04
 8002758:	24000e68 	.word	0x24000e68
 800275c:	58024400 	.word	0x58024400
 8002760:	58022000 	.word	0x58022000
 8002764:	40015c24 	.word	0x40015c24
 8002768:	58021800 	.word	0x58021800

0800276c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <NMI_Handler+0x4>

08002772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <HardFault_Handler+0x4>

08002778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <MemManage_Handler+0x4>

0800277e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <BusFault_Handler+0x4>

08002784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <UsageFault_Handler+0x4>

0800278a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b8:	f000 f95c 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <_sbrk+0x5c>)
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <_sbrk+0x60>)
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <_sbrk+0x64>)
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <_sbrk+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f0:	f009 fbe0 	bl	800bfb4 <__errno>
 80027f4:	4603      	mov	r3, r0
 80027f6:	220c      	movs	r2, #12
 80027f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e009      	b.n	8002814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <_sbrk+0x64>)
 8002810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	24080000 	.word	0x24080000
 8002820:	00000400 	.word	0x00000400
 8002824:	24000e6c 	.word	0x24000e6c
 8002828:	24000e88 	.word	0x24000e88

0800282c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002830:	4b37      	ldr	r3, [pc, #220]	; (8002910 <SystemInit+0xe4>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	4a36      	ldr	r2, [pc, #216]	; (8002910 <SystemInit+0xe4>)
 8002838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800283c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002840:	4b34      	ldr	r3, [pc, #208]	; (8002914 <SystemInit+0xe8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	2b06      	cmp	r3, #6
 800284a:	d807      	bhi.n	800285c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800284c:	4b31      	ldr	r3, [pc, #196]	; (8002914 <SystemInit+0xe8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 030f 	bic.w	r3, r3, #15
 8002854:	4a2f      	ldr	r2, [pc, #188]	; (8002914 <SystemInit+0xe8>)
 8002856:	f043 0307 	orr.w	r3, r3, #7
 800285a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800285c:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <SystemInit+0xec>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2d      	ldr	r2, [pc, #180]	; (8002918 <SystemInit+0xec>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <SystemInit+0xec>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800286e:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <SystemInit+0xec>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4929      	ldr	r1, [pc, #164]	; (8002918 <SystemInit+0xec>)
 8002874:	4b29      	ldr	r3, [pc, #164]	; (800291c <SystemInit+0xf0>)
 8002876:	4013      	ands	r3, r2
 8002878:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <SystemInit+0xe8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <SystemInit+0xe8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 030f 	bic.w	r3, r3, #15
 800288e:	4a21      	ldr	r2, [pc, #132]	; (8002914 <SystemInit+0xe8>)
 8002890:	f043 0307 	orr.w	r3, r3, #7
 8002894:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <SystemInit+0xec>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800289c:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <SystemInit+0xec>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <SystemInit+0xec>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <SystemInit+0xec>)
 80028aa:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <SystemInit+0xf4>)
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <SystemInit+0xec>)
 80028b0:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <SystemInit+0xf8>)
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <SystemInit+0xec>)
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <SystemInit+0xfc>)
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <SystemInit+0xec>)
 80028bc:	2200      	movs	r2, #0
 80028be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <SystemInit+0xec>)
 80028c2:	4a19      	ldr	r2, [pc, #100]	; (8002928 <SystemInit+0xfc>)
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <SystemInit+0xec>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <SystemInit+0xec>)
 80028ce:	4a16      	ldr	r2, [pc, #88]	; (8002928 <SystemInit+0xfc>)
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <SystemInit+0xec>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <SystemInit+0xec>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <SystemInit+0xec>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <SystemInit+0xec>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <SystemInit+0x100>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <SystemInit+0x104>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028f6:	d202      	bcs.n	80028fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <SystemInit+0x108>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <SystemInit+0x10c>)
 8002900:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002904:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00
 8002914:	52002000 	.word	0x52002000
 8002918:	58024400 	.word	0x58024400
 800291c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002920:	02020200 	.word	0x02020200
 8002924:	01ff0000 	.word	0x01ff0000
 8002928:	01010280 	.word	0x01010280
 800292c:	5c001000 	.word	0x5c001000
 8002930:	ffff0000 	.word	0xffff0000
 8002934:	51008108 	.word	0x51008108
 8002938:	52004000 	.word	0x52004000

0800293c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800293c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002974 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002940:	f7ff ff74 	bl	800282c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002944:	480c      	ldr	r0, [pc, #48]	; (8002978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002946:	490d      	ldr	r1, [pc, #52]	; (800297c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800294c:	e002      	b.n	8002954 <LoopCopyDataInit>

0800294e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002952:	3304      	adds	r3, #4

08002954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002958:	d3f9      	bcc.n	800294e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800295c:	4c0a      	ldr	r4, [pc, #40]	; (8002988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800295e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002960:	e001      	b.n	8002966 <LoopFillZerobss>

08002962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002964:	3204      	adds	r2, #4

08002966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002968:	d3fb      	bcc.n	8002962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800296a:	f009 fb29 	bl	800bfc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800296e:	f7fd fe91 	bl	8000694 <main>
  bx  lr
 8002972:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002974:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002978:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800297c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002980:	0800ca20 	.word	0x0800ca20
  ldr r2, =_sbss
 8002984:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8002988:	24000e84 	.word	0x24000e84

0800298c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800298c:	e7fe      	b.n	800298c <ADC3_IRQHandler>
	...

08002990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002996:	2003      	movs	r0, #3
 8002998:	f001 fcd2 	bl	8004340 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800299c:	f004 f98a 	bl	8006cb4 <HAL_RCC_GetSysClockFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_Init+0x68>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	4913      	ldr	r1, [pc, #76]	; (80029fc <HAL_Init+0x6c>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
 80029b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_Init+0x68>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <HAL_Init+0x6c>)
 80029c4:	5cd3      	ldrb	r3, [r2, r3]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_Init+0x70>)
 80029d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029d4:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <HAL_Init+0x74>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 f814 	bl	8002a08 <HAL_InitTick>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e002      	b.n	80029f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029ea:	f7fe fe9b 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	58024400 	.word	0x58024400
 80029fc:	0800c9a4 	.word	0x0800c9a4
 8002a00:	24000004 	.word	0x24000004
 8002a04:	24000000 	.word	0x24000000

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_InitTick+0x60>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e021      	b.n	8002a60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_InitTick+0x64>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_InitTick+0x60>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f001 fca9 	bl	800438a <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f001 fc81 	bl	8004356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <HAL_InitTick+0x68>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	2400000c 	.word	0x2400000c
 8002a6c:	24000000 	.word	0x24000000
 8002a70:	24000008 	.word	0x24000008

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	2400000c 	.word	0x2400000c
 8002a98:	24000e70 	.word	0x24000e70

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	24000e70 	.word	0x24000e70

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2400000c 	.word	0x2400000c

08002afc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HAL_GetREVID+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0c1b      	lsrs	r3, r3, #16
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	5c001000 	.word	0x5c001000

08002b14 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b24:	4904      	ldr	r1, [pc, #16]	; (8002b38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	58000400 	.word	0x58000400

08002b3c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	4904      	ldr	r1, [pc, #16]	; (8002b64 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	58000400 	.word	0x58000400

08002b68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	609a      	str	r2, [r3, #8]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3360      	adds	r3, #96	; 0x60
 8002be2:	461a      	mov	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	611a      	str	r2, [r3, #16]
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b087      	sub	sp, #28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3360      	adds	r3, #96	; 0x60
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	601a      	str	r2, [r3, #0]
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b087      	sub	sp, #28
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3330      	adds	r3, #48	; 0x30
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	4413      	add	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	211f      	movs	r1, #31
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	0e9b      	lsrs	r3, r3, #26
 8002cd6:	f003 011f 	and.w	r1, r3, #31
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b087      	sub	sp, #28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3314      	adds	r3, #20
 8002d06:	461a      	mov	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	0e5b      	lsrs	r3, r3, #25
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	0d1b      	lsrs	r3, r3, #20
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2107      	movs	r1, #7
 8002d24:	fa01 f303 	lsl.w	r3, r1, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	0d1b      	lsrs	r3, r3, #20
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d40:	bf00      	nop
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0318 	and.w	r3, r3, #24
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d70:	40d9      	lsrs	r1, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	400b      	ands	r3, r1
 8002d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	000fffff 	.word	0x000fffff

08002d94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 031f 	and.w	r3, r3, #31
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <LL_ADC_DisableDeepPowerDown+0x20>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6093      	str	r3, [r2, #8]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	5fffffc0 	.word	0x5fffffc0

08002df0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <LL_ADC_EnableInternalRegulator+0x24>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	6fffffc0 	.word	0x6fffffc0

08002e40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e54:	d101      	bne.n	8002e5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <LL_ADC_Enable+0x24>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	7fffffc0 	.word	0x7fffffc0

08002e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <LL_ADC_IsEnabled+0x18>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <LL_ADC_IsEnabled+0x1a>
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <LL_ADC_REG_StartConversion+0x24>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	7fffffc0 	.word	0x7fffffc0

08002ee0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d101      	bne.n	8002ef8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d101      	bne.n	8002f1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e18f      	b.n	8003266 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fe fbff 	bl	8001758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff3f 	bl	8002df0 <LL_ADC_IsDeepPowerDownEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d004      	beq.n	8002f82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff25 	bl	8002dcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ff5a 	bl	8002e40 <LL_ADC_IsInternalRegulatorEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d114      	bne.n	8002fbc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ff3e 	bl	8002e18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f9c:	4b87      	ldr	r3, [pc, #540]	; (80031bc <HAL_ADC_Init+0x290>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	4a87      	ldr	r2, [pc, #540]	; (80031c0 <HAL_ADC_Init+0x294>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	3301      	adds	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fae:	e002      	b.n	8002fb6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f9      	bne.n	8002fb0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff3d 	bl	8002e40 <LL_ADC_IsInternalRegulatorEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0210 	orr.w	r2, r3, #16
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff77 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 8002ff2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 8129 	bne.w	8003254 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 8125 	bne.w	8003254 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003012:	f043 0202 	orr.w	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff36 	bl	8002e90 <LL_ADC_IsEnabled>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d136      	bne.n	8003098 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a65      	ldr	r2, [pc, #404]	; (80031c4 <HAL_ADC_Init+0x298>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_ADC_Init+0x112>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a63      	ldr	r2, [pc, #396]	; (80031c8 <HAL_ADC_Init+0x29c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10e      	bne.n	800305c <HAL_ADC_Init+0x130>
 800303e:	4861      	ldr	r0, [pc, #388]	; (80031c4 <HAL_ADC_Init+0x298>)
 8003040:	f7ff ff26 	bl	8002e90 <LL_ADC_IsEnabled>
 8003044:	4604      	mov	r4, r0
 8003046:	4860      	ldr	r0, [pc, #384]	; (80031c8 <HAL_ADC_Init+0x29c>)
 8003048:	f7ff ff22 	bl	8002e90 <LL_ADC_IsEnabled>
 800304c:	4603      	mov	r3, r0
 800304e:	4323      	orrs	r3, r4
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e008      	b.n	800306e <HAL_ADC_Init+0x142>
 800305c:	485b      	ldr	r0, [pc, #364]	; (80031cc <HAL_ADC_Init+0x2a0>)
 800305e:	f7ff ff17 	bl	8002e90 <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a53      	ldr	r2, [pc, #332]	; (80031c4 <HAL_ADC_Init+0x298>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_ADC_Init+0x15a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a51      	ldr	r2, [pc, #324]	; (80031c8 <HAL_ADC_Init+0x29c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_ADC_Init+0x15e>
 8003086:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_ADC_Init+0x2a4>)
 8003088:	e000      	b.n	800308c <HAL_ADC_Init+0x160>
 800308a:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_ADC_Init+0x2a8>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f7ff fd68 	bl	8002b68 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003098:	f7ff fd30 	bl	8002afc <HAL_GetREVID>
 800309c:	4603      	mov	r3, r0
 800309e:	f241 0203 	movw	r2, #4099	; 0x1003
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d914      	bls.n	80030d0 <HAL_ADC_Init+0x1a4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d110      	bne.n	80030d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	7d5b      	ldrb	r3, [r3, #21]
 80030b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7f1b      	ldrb	r3, [r3, #28]
 80030c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030c8:	f043 030c 	orr.w	r3, r3, #12
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	e00d      	b.n	80030ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7d5b      	ldrb	r3, [r3, #21]
 80030d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7f1b      	ldrb	r3, [r3, #28]
 80030e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7f1b      	ldrb	r3, [r3, #28]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	045b      	lsls	r3, r3, #17
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_ADC_Init+0x2ac>)
 8003126:	4013      	ands	r3, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	430b      	orrs	r3, r1
 8003130:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fed2 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 800313c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fedf 	bl	8002f06 <LL_ADC_INJ_IsConversionOngoing>
 8003148:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d15f      	bne.n	8003210 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d15c      	bne.n	8003210 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7d1b      	ldrb	r3, [r3, #20]
 800315a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_ADC_Init+0x2b0>)
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	69b9      	ldr	r1, [r7, #24]
 8003174:	430b      	orrs	r3, r1
 8003176:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800317e:	2b01      	cmp	r3, #1
 8003180:	d130      	bne.n	80031e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_ADC_Init+0x2b4>)
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003196:	3a01      	subs	r2, #1
 8003198:	0411      	lsls	r1, r2, #16
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031a4:	4311      	orrs	r1, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031aa:	430a      	orrs	r2, r1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	611a      	str	r2, [r3, #16]
 80031b8:	e01c      	b.n	80031f4 <HAL_ADC_Init+0x2c8>
 80031ba:	bf00      	nop
 80031bc:	24000000 	.word	0x24000000
 80031c0:	053e2d63 	.word	0x053e2d63
 80031c4:	40022000 	.word	0x40022000
 80031c8:	40022100 	.word	0x40022100
 80031cc:	58026000 	.word	0x58026000
 80031d0:	40022300 	.word	0x40022300
 80031d4:	58026300 	.word	0x58026300
 80031d8:	fff0c003 	.word	0xfff0c003
 80031dc:	ffffbffc 	.word	0xffffbffc
 80031e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fdd6 	bl	8003dbc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10c      	bne.n	8003232 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f023 010f 	bic.w	r1, r3, #15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	1e5a      	subs	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
 8003230:	e007      	b.n	8003242 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 020f 	bic.w	r2, r2, #15
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f023 0303 	bic.w	r3, r3, #3
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
 8003252:	e007      	b.n	8003264 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f043 0210 	orr.w	r2, r3, #16
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003264:	7ffb      	ldrb	r3, [r7, #31]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd90      	pop	{r4, r7, pc}
 800326e:	bf00      	nop

08003270 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5c      	ldr	r2, [pc, #368]	; (80033f0 <HAL_ADC_Start+0x180>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_ADC_Start+0x1c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5b      	ldr	r2, [pc, #364]	; (80033f4 <HAL_ADC_Start+0x184>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_ADC_Start+0x20>
 800328c:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <HAL_ADC_Start+0x188>)
 800328e:	e000      	b.n	8003292 <HAL_ADC_Start+0x22>
 8003290:	4b5a      	ldr	r3, [pc, #360]	; (80033fc <HAL_ADC_Start+0x18c>)
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fd7e 	bl	8002d94 <LL_ADC_GetMultimode>
 8003298:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fe1e 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 809a 	bne.w	80033e0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_Start+0x4a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e095      	b.n	80033e6 <HAL_ADC_Start+0x176>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fcf0 	bl	8003ca8 <ADC_Enable>
 80032c8:	4603      	mov	r3, r0
 80032ca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 8081 	bne.w	80033d6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032d8:	4b49      	ldr	r3, [pc, #292]	; (8003400 <HAL_ADC_Start+0x190>)
 80032da:	4013      	ands	r3, r2
 80032dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a42      	ldr	r2, [pc, #264]	; (80033f4 <HAL_ADC_Start+0x184>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d002      	beq.n	80032f4 <HAL_ADC_Start+0x84>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e000      	b.n	80032f6 <HAL_ADC_Start+0x86>
 80032f4:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <HAL_ADC_Start+0x180>)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d002      	beq.n	8003304 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d106      	bne.n	800332c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f023 0206 	bic.w	r2, r3, #6
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	659a      	str	r2, [r3, #88]	; 0x58
 800332a:	e002      	b.n	8003332 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	221c      	movs	r2, #28
 8003338:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <HAL_ADC_Start+0x184>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d002      	beq.n	8003352 <HAL_ADC_Start+0xe2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	e000      	b.n	8003354 <HAL_ADC_Start+0xe4>
 8003352:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <HAL_ADC_Start+0x180>)
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	4293      	cmp	r3, r2
 800335a:	d008      	beq.n	800336e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b05      	cmp	r3, #5
 8003366:	d002      	beq.n	800336e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b09      	cmp	r3, #9
 800336c:	d114      	bne.n	8003398 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003384:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fd91 	bl	8002eb8 <LL_ADC_REG_StartConversion>
 8003396:	e025      	b.n	80033e4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <HAL_ADC_Start+0x184>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d002      	beq.n	80033b4 <HAL_ADC_Start+0x144>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	e000      	b.n	80033b6 <HAL_ADC_Start+0x146>
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_ADC_Start+0x180>)
 80033b6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00f      	beq.n	80033e4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
 80033d4:	e006      	b.n	80033e4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033de:	e001      	b.n	80033e4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
 80033e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40022000 	.word	0x40022000
 80033f4:	40022100 	.word	0x40022100
 80033f8:	40022300 	.word	0x40022300
 80033fc:	58026300 	.word	0x58026300
 8003400:	fffff0fe 	.word	0xfffff0fe

08003404 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a72      	ldr	r2, [pc, #456]	; (80035dc <HAL_ADC_PollForConversion+0x1d8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_ADC_PollForConversion+0x1e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a70      	ldr	r2, [pc, #448]	; (80035e0 <HAL_ADC_PollForConversion+0x1dc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_ADC_PollForConversion+0x22>
 8003422:	4b70      	ldr	r3, [pc, #448]	; (80035e4 <HAL_ADC_PollForConversion+0x1e0>)
 8003424:	e000      	b.n	8003428 <HAL_ADC_PollForConversion+0x24>
 8003426:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_ADC_PollForConversion+0x1e4>)
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fcb3 	bl	8002d94 <LL_ADC_GetMultimode>
 800342e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d102      	bne.n	800343e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003438:	2308      	movs	r3, #8
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	e037      	b.n	80034ae <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d002      	beq.n	8003450 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b09      	cmp	r3, #9
 800344e:	d111      	bne.n	8003474 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0b1      	b.n	80035d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800346e:	2304      	movs	r3, #4
 8003470:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003472:	e01c      	b.n	80034ae <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a58      	ldr	r2, [pc, #352]	; (80035dc <HAL_ADC_PollForConversion+0x1d8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_ADC_PollForConversion+0x84>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a57      	ldr	r2, [pc, #348]	; (80035e0 <HAL_ADC_PollForConversion+0x1dc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <HAL_ADC_PollForConversion+0x88>
 8003488:	4b56      	ldr	r3, [pc, #344]	; (80035e4 <HAL_ADC_PollForConversion+0x1e0>)
 800348a:	e000      	b.n	800348e <HAL_ADC_PollForConversion+0x8a>
 800348c:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_ADC_PollForConversion+0x1e4>)
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fc8e 	bl	8002db0 <LL_ADC_GetMultiDMATransfer>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e093      	b.n	80035d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80034aa:	2304      	movs	r3, #4
 80034ac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80034ae:	f7ff faf5 	bl	8002a9c <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034b4:	e021      	b.n	80034fa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d01d      	beq.n	80034fa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80034be:	f7ff faed 	bl	8002a9c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <HAL_ADC_PollForConversion+0xd0>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d112      	bne.n	80034fa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	f043 0204 	orr.w	r2, r3, #4
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e06b      	b.n	80035d2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0d6      	beq.n	80034b6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fbad 	bl	8002c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01c      	beq.n	800355e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	7d5b      	ldrb	r3, [r3, #21]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d118      	bne.n	800355e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b08      	cmp	r3, #8
 8003538:	d111      	bne.n	800355e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <HAL_ADC_PollForConversion+0x1dc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d002      	beq.n	800356e <HAL_ADC_PollForConversion+0x16a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	e000      	b.n	8003570 <HAL_ADC_PollForConversion+0x16c>
 800356e:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_ADC_PollForConversion+0x1d8>)
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	4293      	cmp	r3, r2
 8003576:	d008      	beq.n	800358a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d002      	beq.n	800358a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b09      	cmp	r3, #9
 8003588:	d104      	bne.n	8003594 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	e00c      	b.n	80035ae <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <HAL_ADC_PollForConversion+0x1dc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d002      	beq.n	80035a4 <HAL_ADC_PollForConversion+0x1a0>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	e000      	b.n	80035a6 <HAL_ADC_PollForConversion+0x1a2>
 80035a4:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_ADC_PollForConversion+0x1d8>)
 80035a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d104      	bne.n	80035be <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2208      	movs	r2, #8
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e008      	b.n	80035d0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	220c      	movs	r2, #12
 80035ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40022000 	.word	0x40022000
 80035e0:	40022100 	.word	0x40022100
 80035e4:	40022300 	.word	0x40022300
 80035e8:	58026300 	.word	0x58026300

080035ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b0a1      	sub	sp, #132	; 0x84
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a9d      	ldr	r2, [pc, #628]	; (8003898 <HAL_ADC_ConfigChannel+0x290>)
 8003622:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x2a>
 800362e:	2302      	movs	r3, #2
 8003630:	e321      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x66e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fc4e 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 8306 	bne.w	8003c58 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003654:	2b00      	cmp	r3, #0
 8003656:	d108      	bne.n	800366a <HAL_ADC_ConfigChannel+0x62>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0e9b      	lsrs	r3, r3, #26
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2201      	movs	r2, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	e016      	b.n	8003698 <HAL_ADC_ConfigChannel+0x90>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800367c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003682:	2320      	movs	r3, #32
 8003684:	e003      	b.n	800368e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2201      	movs	r2, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	69d1      	ldr	r1, [r2, #28]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	430b      	orrs	r3, r1
 80036a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6859      	ldr	r1, [r3, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f7ff faf3 	bl	8002c9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fc0f 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 80036c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fc1c 	bl	8002f06 <LL_ADC_INJ_IsConversionOngoing>
 80036ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f040 80b3 	bne.w	800383e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 80af 	bne.w	800383e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	461a      	mov	r2, r3
 80036ee:	f7ff fb02 	bl	8002cf6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036f2:	4b6a      	ldr	r3, [pc, #424]	; (800389c <HAL_ADC_ConfigChannel+0x294>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80036fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036fe:	d10b      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x110>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	e01d      	b.n	8003754 <HAL_ADC_ConfigChannel+0x14c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <HAL_ADC_ConfigChannel+0x136>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	e00a      	b.n	8003754 <HAL_ADC_ConfigChannel+0x14c>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d027      	beq.n	80037ae <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6919      	ldr	r1, [r3, #16]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800376c:	f7ff fa30 	bl	8002bd0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6919      	ldr	r1, [r3, #16]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	7e5b      	ldrb	r3, [r3, #25]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d102      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x17e>
 8003780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003784:	e000      	b.n	8003788 <HAL_ADC_ConfigChannel+0x180>
 8003786:	2300      	movs	r3, #0
 8003788:	461a      	mov	r2, r3
 800378a:	f7ff fa5a 	bl	8002c42 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6919      	ldr	r1, [r3, #16]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	7e1b      	ldrb	r3, [r3, #24]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d102      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x19c>
 800379e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037a2:	e000      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x19e>
 80037a4:	2300      	movs	r3, #0
 80037a6:	461a      	mov	r2, r3
 80037a8:	f7ff fa32 	bl	8002c10 <LL_ADC_SetDataRightShift>
 80037ac:	e047      	b.n	800383e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	069b      	lsls	r3, r3, #26
 80037be:	429a      	cmp	r2, r3
 80037c0:	d107      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	069b      	lsls	r3, r3, #26
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d107      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037f4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	069b      	lsls	r3, r3, #26
 8003806:	429a      	cmp	r2, r3
 8003808:	d107      	bne.n	800381a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003818:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003820:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	069b      	lsls	r3, r3, #26
 800382a:	429a      	cmp	r2, r3
 800382c:	d107      	bne.n	800383e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800383c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fb24 	bl	8002e90 <LL_ADC_IsEnabled>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 820d 	bne.w	8003c6a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6819      	ldr	r1, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	461a      	mov	r2, r3
 800385e:	f7ff fa75 	bl	8002d4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <HAL_ADC_ConfigChannel+0x290>)
 8003868:	4293      	cmp	r3, r2
 800386a:	f040 8133 	bne.w	8003ad4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800387a:	2b00      	cmp	r3, #0
 800387c:	d110      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x298>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	0e9b      	lsrs	r3, r3, #26
 8003884:	3301      	adds	r3, #1
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2b09      	cmp	r3, #9
 800388c:	bf94      	ite	ls
 800388e:	2301      	movls	r3, #1
 8003890:	2300      	movhi	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e01e      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x2cc>
 8003896:	bf00      	nop
 8003898:	47ff0000 	.word	0x47ff0000
 800389c:	5c001000 	.word	0x5c001000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80038ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80038b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80038b8:	2320      	movs	r3, #32
 80038ba:	e003      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80038bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	2b09      	cmp	r3, #9
 80038cc:	bf94      	ite	ls
 80038ce:	2301      	movls	r3, #1
 80038d0:	2300      	movhi	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d079      	beq.n	80039cc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d107      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x2ec>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0e9b      	lsrs	r3, r3, #26
 80038ea:	3301      	adds	r3, #1
 80038ec:	069b      	lsls	r3, r3, #26
 80038ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038f2:	e015      	b.n	8003920 <HAL_ADC_ConfigChannel+0x318>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003904:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800390c:	2320      	movs	r3, #32
 800390e:	e003      	b.n	8003918 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	069b      	lsls	r3, r3, #26
 800391c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x338>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0e9b      	lsrs	r3, r3, #26
 8003932:	3301      	adds	r3, #1
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	e017      	b.n	8003970 <HAL_ADC_ConfigChannel+0x368>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800394e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003950:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003958:	2320      	movs	r3, #32
 800395a:	e003      	b.n	8003964 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800395c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	3301      	adds	r3, #1
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	ea42 0103 	orr.w	r1, r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x38e>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0e9b      	lsrs	r3, r3, #26
 8003986:	3301      	adds	r3, #1
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	051b      	lsls	r3, r3, #20
 8003994:	e018      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x3c0>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80039ae:	2320      	movs	r3, #32
 80039b0:	e003      	b.n	80039ba <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	4613      	mov	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c8:	430b      	orrs	r3, r1
 80039ca:	e07e      	b.n	8003aca <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d107      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x3e0>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0e9b      	lsrs	r3, r3, #26
 80039de:	3301      	adds	r3, #1
 80039e0:	069b      	lsls	r3, r3, #26
 80039e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039e6:	e015      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x40c>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	fa93 f3a3 	rbit	r3, r3
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003a00:	2320      	movs	r3, #32
 8003a02:	e003      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	069b      	lsls	r3, r3, #26
 8003a10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x42c>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0e9b      	lsrs	r3, r3, #26
 8003a26:	3301      	adds	r3, #1
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	e017      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x45c>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	61bb      	str	r3, [r7, #24]
  return result;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	e003      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	ea42 0103 	orr.w	r1, r2, r3
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x488>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	0e9b      	lsrs	r3, r3, #26
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f003 021f 	and.w	r2, r3, #31
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	3b1e      	subs	r3, #30
 8003a88:	051b      	lsls	r3, r3, #20
 8003a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	e01b      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x4c0>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	60fb      	str	r3, [r7, #12]
  return result;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	e003      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f003 021f 	and.w	r2, r3, #31
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	3b1e      	subs	r3, #30
 8003ac2:	051b      	lsls	r3, r3, #20
 8003ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f7ff f911 	bl	8002cf6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f280 80c6 	bge.w	8003c6a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a67      	ldr	r2, [pc, #412]	; (8003c80 <HAL_ADC_ConfigChannel+0x678>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0x4ea>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a65      	ldr	r2, [pc, #404]	; (8003c84 <HAL_ADC_ConfigChannel+0x67c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x4ee>
 8003af2:	4b65      	ldr	r3, [pc, #404]	; (8003c88 <HAL_ADC_ConfigChannel+0x680>)
 8003af4:	e000      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x4f0>
 8003af6:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_ADC_ConfigChannel+0x684>)
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff f85b 	bl	8002bb4 <LL_ADC_GetCommonPathInternalCh>
 8003afe:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5e      	ldr	r2, [pc, #376]	; (8003c80 <HAL_ADC_ConfigChannel+0x678>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_ADC_ConfigChannel+0x50c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5d      	ldr	r2, [pc, #372]	; (8003c84 <HAL_ADC_ConfigChannel+0x67c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10e      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x52a>
 8003b14:	485a      	ldr	r0, [pc, #360]	; (8003c80 <HAL_ADC_ConfigChannel+0x678>)
 8003b16:	f7ff f9bb 	bl	8002e90 <LL_ADC_IsEnabled>
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4859      	ldr	r0, [pc, #356]	; (8003c84 <HAL_ADC_ConfigChannel+0x67c>)
 8003b1e:	f7ff f9b7 	bl	8002e90 <LL_ADC_IsEnabled>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4323      	orrs	r3, r4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e008      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x53c>
 8003b32:	4857      	ldr	r0, [pc, #348]	; (8003c90 <HAL_ADC_ConfigChannel+0x688>)
 8003b34:	f7ff f9ac 	bl	8002e90 <LL_ADC_IsEnabled>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf0c      	ite	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	2300      	movne	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d07d      	beq.n	8003c44 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a51      	ldr	r2, [pc, #324]	; (8003c94 <HAL_ADC_ConfigChannel+0x68c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d130      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x5ac>
 8003b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d12b      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a4b      	ldr	r2, [pc, #300]	; (8003c90 <HAL_ADC_ConfigChannel+0x688>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	f040 8081 	bne.w	8003c6a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a44      	ldr	r2, [pc, #272]	; (8003c80 <HAL_ADC_ConfigChannel+0x678>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_ADC_ConfigChannel+0x574>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a43      	ldr	r2, [pc, #268]	; (8003c84 <HAL_ADC_ConfigChannel+0x67c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x578>
 8003b7c:	4a42      	ldr	r2, [pc, #264]	; (8003c88 <HAL_ADC_ConfigChannel+0x680>)
 8003b7e:	e000      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x57a>
 8003b80:	4a42      	ldr	r2, [pc, #264]	; (8003c8c <HAL_ADC_ConfigChannel+0x684>)
 8003b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f7fe ffff 	bl	8002b8e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b90:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <HAL_ADC_ConfigChannel+0x690>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	4a41      	ldr	r2, [pc, #260]	; (8003c9c <HAL_ADC_ConfigChannel+0x694>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ba4:	e002      	b.n	8003bac <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f9      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bb2:	e05a      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a39      	ldr	r2, [pc, #228]	; (8003ca0 <HAL_ADC_ConfigChannel+0x698>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d11e      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x5f4>
 8003bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d119      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <HAL_ADC_ConfigChannel+0x688>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d14b      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <HAL_ADC_ConfigChannel+0x678>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_ADC_ConfigChannel+0x5de>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a28      	ldr	r2, [pc, #160]	; (8003c84 <HAL_ADC_ConfigChannel+0x67c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x5e2>
 8003be6:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <HAL_ADC_ConfigChannel+0x680>)
 8003be8:	e000      	b.n	8003bec <HAL_ADC_ConfigChannel+0x5e4>
 8003bea:	4a28      	ldr	r2, [pc, #160]	; (8003c8c <HAL_ADC_ConfigChannel+0x684>)
 8003bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7fe ffca 	bl	8002b8e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bfa:	e036      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a28      	ldr	r2, [pc, #160]	; (8003ca4 <HAL_ADC_ConfigChannel+0x69c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d131      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x662>
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d12c      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <HAL_ADC_ConfigChannel+0x688>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d127      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <HAL_ADC_ConfigChannel+0x678>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_ADC_ConfigChannel+0x626>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <HAL_ADC_ConfigChannel+0x67c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x62a>
 8003c2e:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <HAL_ADC_ConfigChannel+0x680>)
 8003c30:	e000      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x62c>
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <HAL_ADC_ConfigChannel+0x684>)
 8003c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	f7fe ffa6 	bl	8002b8e <LL_ADC_SetCommonPathInternalCh>
 8003c42:	e012      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c56:	e008      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3784      	adds	r7, #132	; 0x84
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40022000 	.word	0x40022000
 8003c84:	40022100 	.word	0x40022100
 8003c88:	40022300 	.word	0x40022300
 8003c8c:	58026300 	.word	0x58026300
 8003c90:	58026000 	.word	0x58026000
 8003c94:	cb840000 	.word	0xcb840000
 8003c98:	24000000 	.word	0x24000000
 8003c9c:	053e2d63 	.word	0x053e2d63
 8003ca0:	c7520000 	.word	0xc7520000
 8003ca4:	cfb80000 	.word	0xcfb80000

08003ca8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff f8eb 	bl	8002e90 <LL_ADC_IsEnabled>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d16e      	bne.n	8003d9e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	4b38      	ldr	r3, [pc, #224]	; (8003da8 <ADC_Enable+0x100>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	f043 0210 	orr.w	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	f043 0201 	orr.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e05a      	b.n	8003da0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff f8ba 	bl	8002e68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003cf4:	f7fe fed2 	bl	8002a9c <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2b      	ldr	r2, [pc, #172]	; (8003dac <ADC_Enable+0x104>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <ADC_Enable+0x66>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <ADC_Enable+0x108>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <ADC_Enable+0x6a>
 8003d0e:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <ADC_Enable+0x10c>)
 8003d10:	e000      	b.n	8003d14 <ADC_Enable+0x6c>
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <ADC_Enable+0x110>)
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff f83d 	bl	8002d94 <LL_ADC_GetMultimode>
 8003d1a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <ADC_Enable+0x108>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d002      	beq.n	8003d2c <ADC_Enable+0x84>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	e000      	b.n	8003d2e <ADC_Enable+0x86>
 8003d2c:	4b1f      	ldr	r3, [pc, #124]	; (8003dac <ADC_Enable+0x104>)
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02c      	beq.n	8003d90 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d130      	bne.n	8003d9e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d3c:	e028      	b.n	8003d90 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff f8a4 	bl	8002e90 <LL_ADC_IsEnabled>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d104      	bne.n	8003d58 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff f888 	bl	8002e68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d58:	f7fe fea0 	bl	8002a9c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d914      	bls.n	8003d90 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d00d      	beq.n	8003d90 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f043 0210 	orr.w	r2, r3, #16
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e007      	b.n	8003da0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d1cf      	bne.n	8003d3e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	8000003f 	.word	0x8000003f
 8003dac:	40022000 	.word	0x40022000
 8003db0:	40022100 	.word	0x40022100
 8003db4:	40022300 	.word	0x40022300
 8003db8:	58026300 	.word	0x58026300

08003dbc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a7a      	ldr	r2, [pc, #488]	; (8003fb4 <ADC_ConfigureBoostMode+0x1f8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <ADC_ConfigureBoostMode+0x1c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a79      	ldr	r2, [pc, #484]	; (8003fb8 <ADC_ConfigureBoostMode+0x1fc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d109      	bne.n	8003dec <ADC_ConfigureBoostMode+0x30>
 8003dd8:	4b78      	ldr	r3, [pc, #480]	; (8003fbc <ADC_ConfigureBoostMode+0x200>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf14      	ite	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	2300      	moveq	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	e008      	b.n	8003dfe <ADC_ConfigureBoostMode+0x42>
 8003dec:	4b74      	ldr	r3, [pc, #464]	; (8003fc0 <ADC_ConfigureBoostMode+0x204>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01c      	beq.n	8003e3c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e02:	f003 f8d1 	bl	8006fa8 <HAL_RCC_GetHCLKFreq>
 8003e06:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e10:	d010      	beq.n	8003e34 <ADC_ConfigureBoostMode+0x78>
 8003e12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e16:	d873      	bhi.n	8003f00 <ADC_ConfigureBoostMode+0x144>
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d002      	beq.n	8003e24 <ADC_ConfigureBoostMode+0x68>
 8003e1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e22:	d16d      	bne.n	8003f00 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	60fb      	str	r3, [r7, #12]
        break;
 8003e32:	e068      	b.n	8003f06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	60fb      	str	r3, [r7, #12]
        break;
 8003e3a:	e064      	b.n	8003f06 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	f004 fb16 	bl	8008474 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e48:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e52:	d051      	beq.n	8003ef8 <ADC_ConfigureBoostMode+0x13c>
 8003e54:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e58:	d854      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x148>
 8003e5a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e5e:	d047      	beq.n	8003ef0 <ADC_ConfigureBoostMode+0x134>
 8003e60:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e64:	d84e      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x148>
 8003e66:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e6a:	d03d      	beq.n	8003ee8 <ADC_ConfigureBoostMode+0x12c>
 8003e6c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e70:	d848      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x148>
 8003e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e76:	d033      	beq.n	8003ee0 <ADC_ConfigureBoostMode+0x124>
 8003e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e7c:	d842      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x148>
 8003e7e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003e82:	d029      	beq.n	8003ed8 <ADC_ConfigureBoostMode+0x11c>
 8003e84:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003e88:	d83c      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x148>
 8003e8a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e8e:	d01a      	beq.n	8003ec6 <ADC_ConfigureBoostMode+0x10a>
 8003e90:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e94:	d836      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x148>
 8003e96:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e9a:	d014      	beq.n	8003ec6 <ADC_ConfigureBoostMode+0x10a>
 8003e9c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ea0:	d830      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x148>
 8003ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea6:	d00e      	beq.n	8003ec6 <ADC_ConfigureBoostMode+0x10a>
 8003ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eac:	d82a      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x148>
 8003eae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003eb2:	d008      	beq.n	8003ec6 <ADC_ConfigureBoostMode+0x10a>
 8003eb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003eb8:	d824      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x148>
 8003eba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ebe:	d002      	beq.n	8003ec6 <ADC_ConfigureBoostMode+0x10a>
 8003ec0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ec4:	d11e      	bne.n	8003f04 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	0c9b      	lsrs	r3, r3, #18
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
        break;
 8003ed6:	e016      	b.n	8003f06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	60fb      	str	r3, [r7, #12]
        break;
 8003ede:	e012      	b.n	8003f06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	60fb      	str	r3, [r7, #12]
        break;
 8003ee6:	e00e      	b.n	8003f06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	099b      	lsrs	r3, r3, #6
 8003eec:	60fb      	str	r3, [r7, #12]
        break;
 8003eee:	e00a      	b.n	8003f06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	09db      	lsrs	r3, r3, #7
 8003ef4:	60fb      	str	r3, [r7, #12]
        break;
 8003ef6:	e006      	b.n	8003f06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	60fb      	str	r3, [r7, #12]
        break;
 8003efe:	e002      	b.n	8003f06 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003f00:	bf00      	nop
 8003f02:	e000      	b.n	8003f06 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003f04:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f06:	f7fe fdf9 	bl	8002afc <HAL_GetREVID>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d815      	bhi.n	8003f40 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a2b      	ldr	r2, [pc, #172]	; (8003fc4 <ADC_ConfigureBoostMode+0x208>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d908      	bls.n	8003f2e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f2a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f2c:	e03e      	b.n	8003fac <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f3c:	609a      	str	r2, [r3, #8]
}
 8003f3e:	e035      	b.n	8003fac <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a1f      	ldr	r2, [pc, #124]	; (8003fc8 <ADC_ConfigureBoostMode+0x20c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d808      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f5c:	609a      	str	r2, [r3, #8]
}
 8003f5e:	e025      	b.n	8003fac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a1a      	ldr	r2, [pc, #104]	; (8003fcc <ADC_ConfigureBoostMode+0x210>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d80a      	bhi.n	8003f7e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	e016      	b.n	8003fac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <ADC_ConfigureBoostMode+0x214>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d80a      	bhi.n	8003f9c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f98:	609a      	str	r2, [r3, #8]
}
 8003f9a:	e007      	b.n	8003fac <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40022000 	.word	0x40022000
 8003fb8:	40022100 	.word	0x40022100
 8003fbc:	40022300 	.word	0x40022300
 8003fc0:	58026300 	.word	0x58026300
 8003fc4:	01312d00 	.word	0x01312d00
 8003fc8:	005f5e10 	.word	0x005f5e10
 8003fcc:	00bebc20 	.word	0x00bebc20
 8003fd0:	017d7840 	.word	0x017d7840

08003fd4 <LL_ADC_IsEnabled>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <LL_ADC_IsEnabled+0x18>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <LL_ADC_IsEnabled+0x1a>
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_ADC_REG_IsConversionOngoing>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b04      	cmp	r3, #4
 800400c:	d101      	bne.n	8004012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b09f      	sub	sp, #124	; 0x7c
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800403a:	2302      	movs	r3, #2
 800403c:	e0be      	b.n	80041bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800404a:	2300      	movs	r3, #0
 800404c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a5c      	ldr	r2, [pc, #368]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d102      	bne.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004058:	4b5b      	ldr	r3, [pc, #364]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	e001      	b.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e09d      	b.n	80041bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ffb9 	bl	8003ffa <LL_ADC_REG_IsConversionOngoing>
 8004088:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ffb3 	bl	8003ffa <LL_ADC_REG_IsConversionOngoing>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d17f      	bne.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800409a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800409c:	2b00      	cmp	r3, #0
 800409e:	d17c      	bne.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a47      	ldr	r2, [pc, #284]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a46      	ldr	r2, [pc, #280]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80040b4:	4b45      	ldr	r3, [pc, #276]	; (80041cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040b6:	e000      	b.n	80040ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040b8:	4b45      	ldr	r3, [pc, #276]	; (80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d039      	beq.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80040c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a38      	ldr	r2, [pc, #224]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10e      	bne.n	8004108 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040ea:	4836      	ldr	r0, [pc, #216]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040ec:	f7ff ff72 	bl	8003fd4 <LL_ADC_IsEnabled>
 80040f0:	4604      	mov	r4, r0
 80040f2:	4835      	ldr	r0, [pc, #212]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040f4:	f7ff ff6e 	bl	8003fd4 <LL_ADC_IsEnabled>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4323      	orrs	r3, r4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e008      	b.n	800411a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004108:	4832      	ldr	r0, [pc, #200]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800410a:	f7ff ff63 	bl	8003fd4 <LL_ADC_IsEnabled>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d047      	beq.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800411e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004124:	4013      	ands	r3, r2
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	6811      	ldr	r1, [r2, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	6892      	ldr	r2, [r2, #8]
 800412e:	430a      	orrs	r2, r1
 8004130:	431a      	orrs	r2, r3
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004136:	e03a      	b.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10e      	bne.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004158:	481a      	ldr	r0, [pc, #104]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800415a:	f7ff ff3b 	bl	8003fd4 <LL_ADC_IsEnabled>
 800415e:	4604      	mov	r4, r0
 8004160:	4819      	ldr	r0, [pc, #100]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004162:	f7ff ff37 	bl	8003fd4 <LL_ADC_IsEnabled>
 8004166:	4603      	mov	r3, r0
 8004168:	4323      	orrs	r3, r4
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e008      	b.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004176:	4817      	ldr	r0, [pc, #92]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004178:	f7ff ff2c 	bl	8003fd4 <LL_ADC_IsEnabled>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004192:	4013      	ands	r3, r2
 8004194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004196:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004198:	e009      	b.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f043 0220 	orr.w	r2, r3, #32
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80041ac:	e000      	b.n	80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80041bc:	4618      	mov	r0, r3
 80041be:	377c      	adds	r7, #124	; 0x7c
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40022100 	.word	0x40022100
 80041cc:	40022300 	.word	0x40022300
 80041d0:	58026300 	.word	0x58026300
 80041d4:	58026000 	.word	0x58026000
 80041d8:	fffff0e0 	.word	0xfffff0e0

080041dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <__NVIC_SetPriorityGrouping+0x40>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <__NVIC_SetPriorityGrouping+0x44>)
 8004206:	4313      	orrs	r3, r2
 8004208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800420a:	4a04      	ldr	r2, [pc, #16]	; (800421c <__NVIC_SetPriorityGrouping+0x40>)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	60d3      	str	r3, [r2, #12]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000ed00 	.word	0xe000ed00
 8004220:	05fa0000 	.word	0x05fa0000

08004224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <__NVIC_GetPriorityGrouping+0x18>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	f003 0307 	and.w	r3, r3, #7
}
 8004232:	4618      	mov	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	6039      	str	r1, [r7, #0]
 800424a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800424c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004250:	2b00      	cmp	r3, #0
 8004252:	db0a      	blt.n	800426a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	490c      	ldr	r1, [pc, #48]	; (800428c <__NVIC_SetPriority+0x4c>)
 800425a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	440b      	add	r3, r1
 8004264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004268:	e00a      	b.n	8004280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4908      	ldr	r1, [pc, #32]	; (8004290 <__NVIC_SetPriority+0x50>)
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	3b04      	subs	r3, #4
 8004278:	0112      	lsls	r2, r2, #4
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	440b      	add	r3, r1
 800427e:	761a      	strb	r2, [r3, #24]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000e100 	.word	0xe000e100
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	; 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f1c3 0307 	rsb	r3, r3, #7
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	bf28      	it	cs
 80042b2:	2304      	movcs	r3, #4
 80042b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d902      	bls.n	80042c4 <NVIC_EncodePriority+0x30>
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3b03      	subs	r3, #3
 80042c2:	e000      	b.n	80042c6 <NVIC_EncodePriority+0x32>
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43da      	mvns	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	401a      	ands	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042dc:	f04f 31ff 	mov.w	r1, #4294967295
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43d9      	mvns	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	4313      	orrs	r3, r2
         );
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	; 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800430c:	d301      	bcc.n	8004312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800430e:	2301      	movs	r3, #1
 8004310:	e00f      	b.n	8004332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004312:	4a0a      	ldr	r2, [pc, #40]	; (800433c <SysTick_Config+0x40>)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3b01      	subs	r3, #1
 8004318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800431a:	210f      	movs	r1, #15
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	f7ff ff8e 	bl	8004240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <SysTick_Config+0x40>)
 8004326:	2200      	movs	r2, #0
 8004328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800432a:	4b04      	ldr	r3, [pc, #16]	; (800433c <SysTick_Config+0x40>)
 800432c:	2207      	movs	r2, #7
 800432e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	e000e010 	.word	0xe000e010

08004340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ff47 	bl	80041dc <__NVIC_SetPriorityGrouping>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	4603      	mov	r3, r0
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004364:	f7ff ff5e 	bl	8004224 <__NVIC_GetPriorityGrouping>
 8004368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	6978      	ldr	r0, [r7, #20]
 8004370:	f7ff ff90 	bl	8004294 <NVIC_EncodePriority>
 8004374:	4602      	mov	r2, r0
 8004376:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff ff5f 	bl	8004240 <__NVIC_SetPriority>
}
 8004382:	bf00      	nop
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ffb2 	bl	80042fc <SysTick_Config>
 8004398:	4603      	mov	r3, r0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0cf      	b.n	8004556 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2223      	movs	r2, #35	; 0x23
 80043c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fd fac9 	bl	8001960 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ce:	4b64      	ldr	r3, [pc, #400]	; (8004560 <HAL_ETH_Init+0x1bc>)
 80043d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043d4:	4a62      	ldr	r2, [pc, #392]	; (8004560 <HAL_ETH_Init+0x1bc>)
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043de:	4b60      	ldr	r3, [pc, #384]	; (8004560 <HAL_ETH_Init+0x1bc>)
 80043e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7a1b      	ldrb	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d103      	bne.n	80043fc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80043f4:	2000      	movs	r0, #0
 80043f6:	f7fe fb8d 	bl	8002b14 <HAL_SYSCFG_ETHInterfaceSelect>
 80043fa:	e003      	b.n	8004404 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80043fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004400:	f7fe fb88 	bl	8002b14 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004404:	4b57      	ldr	r3, [pc, #348]	; (8004564 <HAL_ETH_Init+0x1c0>)
 8004406:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800441e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004420:	f7fe fb3c 	bl	8002a9c <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004426:	e011      	b.n	800444c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004428:	f7fe fb38 	bl	8002a9c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004436:	d909      	bls.n	800444c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2204      	movs	r2, #4
 800443c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	22e0      	movs	r2, #224	; 0xe0
 8004444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e084      	b.n	8004556 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e4      	bne.n	8004428 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f886 	bl	8004570 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004464:	f002 fda0 	bl	8006fa8 <HAL_RCC_GetHCLKFreq>
 8004468:	4603      	mov	r3, r0
 800446a:	4a3f      	ldr	r2, [pc, #252]	; (8004568 <HAL_ETH_Init+0x1c4>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	0c9a      	lsrs	r2, r3, #18
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3a01      	subs	r2, #1
 8004478:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fa71 	bl	8004964 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800448e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800449a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800449e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	22e0      	movs	r2, #224	; 0xe0
 80044ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e049      	b.n	8004556 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80044ce:	4b27      	ldr	r3, [pc, #156]	; (800456c <HAL_ETH_Init+0x1c8>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6952      	ldr	r2, [r2, #20]
 80044d6:	0051      	lsls	r1, r2, #1
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	430b      	orrs	r3, r1
 80044de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fad9 	bl	8004a9e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fb1f 	bl	8004b30 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	3305      	adds	r3, #5
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	021a      	lsls	r2, r3, #8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	4619      	mov	r1, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	3303      	adds	r3, #3
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	061a      	lsls	r2, r3, #24
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	3302      	adds	r3, #2
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	041b      	lsls	r3, r3, #16
 8004524:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	3301      	adds	r3, #1
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004530:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800453e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004540:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2210      	movs	r2, #16
 8004550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	58024400 	.word	0x58024400
 8004564:	58000400 	.word	0x58000400
 8004568:	431bde83 	.word	0x431bde83
 800456c:	ffff8001 	.word	0xffff8001

08004570 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004580:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004588:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800458a:	f002 fd0d 	bl	8006fa8 <HAL_RCC_GetHCLKFreq>
 800458e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4a1e      	ldr	r2, [pc, #120]	; (800460c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d908      	bls.n	80045aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d804      	bhi.n	80045aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e027      	b.n	80045fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a18      	ldr	r2, [pc, #96]	; (8004610 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d908      	bls.n	80045c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4a17      	ldr	r2, [pc, #92]	; (8004614 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d204      	bcs.n	80045c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e01a      	b.n	80045fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d303      	bcc.n	80045d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d911      	bls.n	80045f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4a10      	ldr	r2, [pc, #64]	; (8004618 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d908      	bls.n	80045ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4a0f      	ldr	r2, [pc, #60]	; (800461c <HAL_ETH_SetMDIOClockRange+0xac>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d804      	bhi.n	80045ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e005      	b.n	80045fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e000      	b.n	80045fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80045f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	01312cff 	.word	0x01312cff
 8004610:	02160ebf 	.word	0x02160ebf
 8004614:	03938700 	.word	0x03938700
 8004618:	05f5e0ff 	.word	0x05f5e0ff
 800461c:	08f0d17f 	.word	0x08f0d17f

08004620 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004632:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	791b      	ldrb	r3, [r3, #4]
 8004638:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800463a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	7b1b      	ldrb	r3, [r3, #12]
 8004640:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004642:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	7b5b      	ldrb	r3, [r3, #13]
 8004648:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800464a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	7b9b      	ldrb	r3, [r3, #14]
 8004650:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004652:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	7bdb      	ldrb	r3, [r3, #15]
 8004658:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800465a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	7c12      	ldrb	r2, [r2, #16]
 8004660:	2a00      	cmp	r2, #0
 8004662:	d102      	bne.n	800466a <ETH_SetMACConfig+0x4a>
 8004664:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004668:	e000      	b.n	800466c <ETH_SetMACConfig+0x4c>
 800466a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800466c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	7c52      	ldrb	r2, [r2, #17]
 8004672:	2a00      	cmp	r2, #0
 8004674:	d102      	bne.n	800467c <ETH_SetMACConfig+0x5c>
 8004676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800467a:	e000      	b.n	800467e <ETH_SetMACConfig+0x5e>
 800467c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800467e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	7c9b      	ldrb	r3, [r3, #18]
 8004684:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004686:	431a      	orrs	r2, r3
               macconf->Speed |
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800468c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004692:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	7f1b      	ldrb	r3, [r3, #28]
 8004698:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800469a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	7f5b      	ldrb	r3, [r3, #29]
 80046a0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80046a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	7f92      	ldrb	r2, [r2, #30]
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	d102      	bne.n	80046b2 <ETH_SetMACConfig+0x92>
 80046ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046b0:	e000      	b.n	80046b4 <ETH_SetMACConfig+0x94>
 80046b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80046b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	7fdb      	ldrb	r3, [r3, #31]
 80046ba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80046bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	d102      	bne.n	80046ce <ETH_SetMACConfig+0xae>
 80046c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046cc:	e000      	b.n	80046d0 <ETH_SetMACConfig+0xb0>
 80046ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80046d0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80046d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046de:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80046e0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b56      	ldr	r3, [pc, #344]	; (800484c <ETH_SetMACConfig+0x22c>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	68f9      	ldr	r1, [r7, #12]
 80046fa:	430b      	orrs	r3, r1
 80046fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800470a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800470c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004714:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004716:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800471e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004720:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004728:	2a00      	cmp	r2, #0
 800472a:	d102      	bne.n	8004732 <ETH_SetMACConfig+0x112>
 800472c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004730:	e000      	b.n	8004734 <ETH_SetMACConfig+0x114>
 8004732:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004734:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4b42      	ldr	r3, [pc, #264]	; (8004850 <ETH_SetMACConfig+0x230>)
 8004746:	4013      	ands	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	430b      	orrs	r3, r1
 8004750:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004758:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	4b3a      	ldr	r3, [pc, #232]	; (8004854 <ETH_SetMACConfig+0x234>)
 800476a:	4013      	ands	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	68f9      	ldr	r1, [r7, #12]
 8004772:	430b      	orrs	r3, r1
 8004774:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800477c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004782:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800478a:	2a00      	cmp	r2, #0
 800478c:	d101      	bne.n	8004792 <ETH_SetMACConfig+0x172>
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	e000      	b.n	8004794 <ETH_SetMACConfig+0x174>
 8004792:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004794:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80047aa:	4013      	ands	r3, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	68f9      	ldr	r1, [r7, #12]
 80047b2:	430b      	orrs	r3, r1
 80047b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80047bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80047c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f023 0103 	bic.w	r1, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	430a      	orrs	r2, r1
 80047de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80047ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004806:	2a00      	cmp	r2, #0
 8004808:	d101      	bne.n	800480e <ETH_SetMACConfig+0x1ee>
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	e000      	b.n	8004810 <ETH_SetMACConfig+0x1f0>
 800480e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004810:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004818:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800481a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004822:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004830:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	430a      	orrs	r2, r1
 800483c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	00048083 	.word	0x00048083
 8004850:	c0f88000 	.word	0xc0f88000
 8004854:	fffffef0 	.word	0xfffffef0

08004858 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b38      	ldr	r3, [pc, #224]	; (8004950 <ETH_SetDMAConfig+0xf8>)
 800486e:	4013      	ands	r3, r2
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	6811      	ldr	r1, [r2, #0]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	430b      	orrs	r3, r1
 800487a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800487e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	791b      	ldrb	r3, [r3, #4]
 8004884:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800488a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	7b1b      	ldrb	r3, [r3, #12]
 8004890:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <ETH_SetDMAConfig+0xfc>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	68f9      	ldr	r1, [r7, #12]
 80048aa:	430b      	orrs	r3, r1
 80048ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048b0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	7b5b      	ldrb	r3, [r3, #13]
 80048b6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80048cc:	4b22      	ldr	r3, [pc, #136]	; (8004958 <ETH_SetDMAConfig+0x100>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	430b      	orrs	r3, r1
 80048d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	7d1b      	ldrb	r3, [r3, #20]
 80048e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80048ea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	7f5b      	ldrb	r3, [r3, #29]
 80048f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004902:	4b16      	ldr	r3, [pc, #88]	; (800495c <ETH_SetDMAConfig+0x104>)
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	430b      	orrs	r3, r1
 800490e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004912:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	7f1b      	ldrb	r3, [r3, #28]
 800491a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <ETH_SetDMAConfig+0x108>)
 8004932:	4013      	ands	r3, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	68f9      	ldr	r1, [r7, #12]
 800493a:	430b      	orrs	r3, r1
 800493c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004940:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	ffff87fd 	.word	0xffff87fd
 8004954:	ffff2ffe 	.word	0xffff2ffe
 8004958:	fffec000 	.word	0xfffec000
 800495c:	ffc0efef 	.word	0xffc0efef
 8004960:	7fc0ffff 	.word	0x7fc0ffff

08004964 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b0a4      	sub	sp, #144	; 0x90
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004972:	2300      	movs	r3, #0
 8004974:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004976:	2300      	movs	r3, #0
 8004978:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800497c:	2300      	movs	r3, #0
 800497e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80049a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80049bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80049c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80049c8:	2300      	movs	r3, #0
 80049ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80049de:	2300      	movs	r3, #0
 80049e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80049e6:	2300      	movs	r3, #0
 80049e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80049fc:	2320      	movs	r3, #32
 80049fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004a0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004a14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a18:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004a20:	2302      	movs	r3, #2
 8004a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff fde6 	bl	8004620 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004a84:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004a8a:	f107 0308 	add.w	r3, r7, #8
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fee1 	bl	8004858 <ETH_SetDMAConfig>
}
 8004a96:	bf00      	nop
 8004a98:	3790      	adds	r7, #144	; 0x90
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e01d      	b.n	8004ae8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68d9      	ldr	r1, [r3, #12]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	440b      	add	r3, r1
 8004abc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	3206      	adds	r2, #6
 8004ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d9de      	bls.n	8004aac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004afc:	461a      	mov	r2, r3
 8004afe:	2303      	movs	r3, #3
 8004b00:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b10:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e023      	b.n	8004b86 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6919      	ldr	r1, [r3, #16]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2200      	movs	r2, #0
 8004b66:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2200      	movs	r2, #0
 8004b72:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	3212      	adds	r2, #18
 8004b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3301      	adds	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d9d8      	bls.n	8004b3e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bda:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b098      	sub	sp, #96	; 0x60
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004bf4:	4a84      	ldr	r2, [pc, #528]	; (8004e08 <HAL_FDCAN_Init+0x21c>)
 8004bf6:	f107 030c 	add.w	r3, r7, #12
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	224c      	movs	r2, #76	; 0x4c
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f007 fa02 	bl	800c008 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1c6      	b.n	8004f9c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7e      	ldr	r2, [pc, #504]	; (8004e0c <HAL_FDCAN_Init+0x220>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d106      	bne.n	8004c26 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c20:	461a      	mov	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fc ffc0 	bl	8001bc0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0210 	bic.w	r2, r2, #16
 8004c4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c50:	f7fd ff24 	bl	8002a9c <HAL_GetTick>
 8004c54:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c56:	e014      	b.n	8004c82 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c58:	f7fd ff20 	bl	8002a9c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b0a      	cmp	r3, #10
 8004c64:	d90d      	bls.n	8004c82 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e18c      	b.n	8004f9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d0e3      	beq.n	8004c58 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ca0:	f7fd fefc 	bl	8002a9c <HAL_GetTick>
 8004ca4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004ca6:	e014      	b.n	8004cd2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ca8:	f7fd fef8 	bl	8002a9c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b0a      	cmp	r3, #10
 8004cb4:	d90d      	bls.n	8004cd2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cbc:	f043 0201 	orr.w	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2203      	movs	r2, #3
 8004cca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e164      	b.n	8004f9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0e3      	beq.n	8004ca8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0202 	orr.w	r2, r2, #2
 8004cee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	7c1b      	ldrb	r3, [r3, #16]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d108      	bne.n	8004d0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d06:	619a      	str	r2, [r3, #24]
 8004d08:	e007      	b.n	8004d1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7c5b      	ldrb	r3, [r3, #17]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d108      	bne.n	8004d34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d30:	619a      	str	r2, [r3, #24]
 8004d32:	e007      	b.n	8004d44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7c9b      	ldrb	r3, [r3, #18]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d108      	bne.n	8004d5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d5a:	619a      	str	r2, [r3, #24]
 8004d5c:	e007      	b.n	8004d6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004d92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0210 	bic.w	r2, r2, #16
 8004da2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d108      	bne.n	8004dbe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0204 	orr.w	r2, r2, #4
 8004dba:	619a      	str	r2, [r3, #24]
 8004dbc:	e030      	b.n	8004e20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02c      	beq.n	8004e20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d020      	beq.n	8004e10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ddc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0210 	orr.w	r2, r2, #16
 8004dec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d114      	bne.n	8004e20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0220 	orr.w	r2, r2, #32
 8004e04:	619a      	str	r2, [r3, #24]
 8004e06:	e00b      	b.n	8004e20 <HAL_FDCAN_Init+0x234>
 8004e08:	0800c958 	.word	0x0800c958
 8004e0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0220 	orr.w	r2, r2, #32
 8004e1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e54:	d115      	bne.n	8004e82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	3b01      	subs	r3, #1
 8004e62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004e6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	3b01      	subs	r3, #1
 8004e78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004e7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea8:	4413      	add	r3, r2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d011      	beq.n	8004ed2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004eb6:	f023 0107 	bic.w	r1, r3, #7
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	3360      	adds	r3, #96	; 0x60
 8004ec2:	443b      	add	r3, r7
 8004ec4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d011      	beq.n	8004efe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ee2:	f023 0107 	bic.w	r1, r3, #7
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	3360      	adds	r3, #96	; 0x60
 8004eee:	443b      	add	r3, r7
 8004ef0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d012      	beq.n	8004f2c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f0e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	3360      	adds	r3, #96	; 0x60
 8004f1a:	443b      	add	r3, r7
 8004f1c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f20:	011a      	lsls	r2, r3, #4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f3c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	3360      	adds	r3, #96	; 0x60
 8004f48:	443b      	add	r3, r7
 8004f4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <HAL_FDCAN_Init+0x3b8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d107      	bne.n	8004f74 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f022 0203 	bic.w	r2, r2, #3
 8004f72:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f80b 	bl	8004fa8 <FDCAN_CalcultateRamBlockAddresses>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004f98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3760      	adds	r7, #96	; 0x60
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	4000a000 	.word	0x4000a000

08004fa8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fbe:	4ba7      	ldr	r3, [pc, #668]	; (800525c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	0091      	lsls	r1, r2, #2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	041a      	lsls	r2, r3, #16
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ffe:	4b97      	ldr	r3, [pc, #604]	; (800525c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005000:	4013      	ands	r3, r2
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	0091      	lsls	r1, r2, #2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	430b      	orrs	r3, r1
 800500c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	041a      	lsls	r2, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	4413      	add	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005040:	4b86      	ldr	r3, [pc, #536]	; (800525c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005042:	4013      	ands	r3, r2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	0091      	lsls	r1, r2, #2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	430b      	orrs	r3, r1
 800504e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800505a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	041a      	lsls	r2, r3, #16
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005088:	4b74      	ldr	r3, [pc, #464]	; (800525c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800508a:	4013      	ands	r3, r2
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	0091      	lsls	r1, r2, #2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	430b      	orrs	r3, r1
 8005096:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050aa:	041a      	lsls	r2, r3, #16
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4413      	add	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80050d0:	4b62      	ldr	r3, [pc, #392]	; (800525c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	0091      	lsls	r1, r2, #2
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	430b      	orrs	r3, r1
 80050de:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	4413      	add	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80050fc:	4b57      	ldr	r3, [pc, #348]	; (800525c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050fe:	4013      	ands	r3, r2
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	0091      	lsls	r1, r2, #2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	430b      	orrs	r3, r1
 800510a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005116:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	041a      	lsls	r2, r3, #16
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	4413      	add	r3, r2
 8005134:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800513e:	4b47      	ldr	r3, [pc, #284]	; (800525c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005140:	4013      	ands	r3, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	0091      	lsls	r1, r2, #2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	430b      	orrs	r3, r1
 800514c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005158:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005160:	041a      	lsls	r2, r3, #16
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005174:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517c:	061a      	lsls	r2, r3, #24
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518c:	4b34      	ldr	r3, [pc, #208]	; (8005260 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800518e:	4413      	add	r3, r2
 8005190:	009a      	lsls	r2, r3, #2
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	441a      	add	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	441a      	add	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	441a      	add	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80051f2:	fb01 f303 	mul.w	r3, r1, r3
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	441a      	add	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005252:	4a04      	ldr	r2, [pc, #16]	; (8005264 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d915      	bls.n	8005284 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005258:	e006      	b.n	8005268 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800525a:	bf00      	nop
 800525c:	ffff0003 	.word	0xffff0003
 8005260:	10002b00 	.word	0x10002b00
 8005264:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2203      	movs	r2, #3
 800527c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e010      	b.n	80052a6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e005      	b.n	8005298 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3304      	adds	r3, #4
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d3f3      	bcc.n	800528c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop

080052b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b089      	sub	sp, #36	; 0x24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052c2:	4b89      	ldr	r3, [pc, #548]	; (80054e8 <HAL_GPIO_Init+0x234>)
 80052c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052c6:	e194      	b.n	80055f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2101      	movs	r1, #1
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	4013      	ands	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8186 	beq.w	80055ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d005      	beq.n	80052f8 <HAL_GPIO_Init+0x44>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d130      	bne.n	800535a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2203      	movs	r2, #3
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4013      	ands	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4313      	orrs	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800532e:	2201      	movs	r2, #1
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43db      	mvns	r3, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4013      	ands	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	f003 0201 	and.w	r2, r3, #1
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b03      	cmp	r3, #3
 8005364:	d017      	beq.n	8005396 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	2203      	movs	r2, #3
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4013      	ands	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d123      	bne.n	80053ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	08da      	lsrs	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3208      	adds	r2, #8
 80053aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	220f      	movs	r2, #15
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4313      	orrs	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	08da      	lsrs	r2, r3, #3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3208      	adds	r2, #8
 80053e4:	69b9      	ldr	r1, [r7, #24]
 80053e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	2203      	movs	r2, #3
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43db      	mvns	r3, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4013      	ands	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f003 0203 	and.w	r2, r3, #3
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	4313      	orrs	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80e0 	beq.w	80055ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800542c:	4b2f      	ldr	r3, [pc, #188]	; (80054ec <HAL_GPIO_Init+0x238>)
 800542e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005432:	4a2e      	ldr	r2, [pc, #184]	; (80054ec <HAL_GPIO_Init+0x238>)
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800543c:	4b2b      	ldr	r3, [pc, #172]	; (80054ec <HAL_GPIO_Init+0x238>)
 800543e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800544a:	4a29      	ldr	r2, [pc, #164]	; (80054f0 <HAL_GPIO_Init+0x23c>)
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	089b      	lsrs	r3, r3, #2
 8005450:	3302      	adds	r3, #2
 8005452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	220f      	movs	r2, #15
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	4013      	ands	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a20      	ldr	r2, [pc, #128]	; (80054f4 <HAL_GPIO_Init+0x240>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d052      	beq.n	800551c <HAL_GPIO_Init+0x268>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <HAL_GPIO_Init+0x244>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d031      	beq.n	80054e2 <HAL_GPIO_Init+0x22e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <HAL_GPIO_Init+0x248>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d02b      	beq.n	80054de <HAL_GPIO_Init+0x22a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <HAL_GPIO_Init+0x24c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d025      	beq.n	80054da <HAL_GPIO_Init+0x226>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1c      	ldr	r2, [pc, #112]	; (8005504 <HAL_GPIO_Init+0x250>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01f      	beq.n	80054d6 <HAL_GPIO_Init+0x222>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <HAL_GPIO_Init+0x254>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d019      	beq.n	80054d2 <HAL_GPIO_Init+0x21e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1a      	ldr	r2, [pc, #104]	; (800550c <HAL_GPIO_Init+0x258>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <HAL_GPIO_Init+0x21a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a19      	ldr	r2, [pc, #100]	; (8005510 <HAL_GPIO_Init+0x25c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00d      	beq.n	80054ca <HAL_GPIO_Init+0x216>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a18      	ldr	r2, [pc, #96]	; (8005514 <HAL_GPIO_Init+0x260>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <HAL_GPIO_Init+0x212>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a17      	ldr	r2, [pc, #92]	; (8005518 <HAL_GPIO_Init+0x264>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d101      	bne.n	80054c2 <HAL_GPIO_Init+0x20e>
 80054be:	2309      	movs	r3, #9
 80054c0:	e02d      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054c2:	230a      	movs	r3, #10
 80054c4:	e02b      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054c6:	2308      	movs	r3, #8
 80054c8:	e029      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054ca:	2307      	movs	r3, #7
 80054cc:	e027      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054ce:	2306      	movs	r3, #6
 80054d0:	e025      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054d2:	2305      	movs	r3, #5
 80054d4:	e023      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054d6:	2304      	movs	r3, #4
 80054d8:	e021      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054da:	2303      	movs	r3, #3
 80054dc:	e01f      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054de:	2302      	movs	r3, #2
 80054e0:	e01d      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e01b      	b.n	800551e <HAL_GPIO_Init+0x26a>
 80054e6:	bf00      	nop
 80054e8:	58000080 	.word	0x58000080
 80054ec:	58024400 	.word	0x58024400
 80054f0:	58000400 	.word	0x58000400
 80054f4:	58020000 	.word	0x58020000
 80054f8:	58020400 	.word	0x58020400
 80054fc:	58020800 	.word	0x58020800
 8005500:	58020c00 	.word	0x58020c00
 8005504:	58021000 	.word	0x58021000
 8005508:	58021400 	.word	0x58021400
 800550c:	58021800 	.word	0x58021800
 8005510:	58021c00 	.word	0x58021c00
 8005514:	58022000 	.word	0x58022000
 8005518:	58022400 	.word	0x58022400
 800551c:	2300      	movs	r3, #0
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	f002 0203 	and.w	r2, r2, #3
 8005524:	0092      	lsls	r2, r2, #2
 8005526:	4093      	lsls	r3, r2
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4313      	orrs	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800552e:	4938      	ldr	r1, [pc, #224]	; (8005610 <HAL_GPIO_Init+0x35c>)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	089b      	lsrs	r3, r3, #2
 8005534:	3302      	adds	r3, #2
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	43db      	mvns	r3, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4013      	ands	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	43db      	mvns	r3, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4013      	ands	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4013      	ands	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	3301      	adds	r3, #1
 80055f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f47f ae63 	bne.w	80052c8 <HAL_GPIO_Init+0x14>
  }
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	3724      	adds	r7, #36	; 0x24
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	58000400 	.word	0x58000400

08005614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	887b      	ldrh	r3, [r7, #2]
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	e001      	b.n	8005636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	807b      	strh	r3, [r7, #2]
 8005650:	4613      	mov	r3, r2
 8005652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005654:	787b      	ldrb	r3, [r7, #1]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005660:	e003      	b.n	800566a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005662:	887b      	ldrh	r3, [r7, #2]
 8005664:	041a      	lsls	r2, r3, #16
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	619a      	str	r2, [r3, #24]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005688:	887a      	ldrh	r2, [r7, #2]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4013      	ands	r3, r2
 800568e:	041a      	lsls	r2, r3, #16
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	43d9      	mvns	r1, r3
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	400b      	ands	r3, r1
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	619a      	str	r2, [r3, #24]
}
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e0bf      	b.n	800583e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fc fb44 	bl	8001d60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80056ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6999      	ldr	r1, [r3, #24]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005704:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6899      	ldr	r1, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_LTDC_Init+0x19c>)
 8005720:	400b      	ands	r3, r1
 8005722:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6899      	ldr	r1, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68d9      	ldr	r1, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b3e      	ldr	r3, [pc, #248]	; (8005848 <HAL_LTDC_Init+0x19c>)
 800574e:	400b      	ands	r3, r1
 8005750:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68d9      	ldr	r1, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6919      	ldr	r1, [r3, #16]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b33      	ldr	r3, [pc, #204]	; (8005848 <HAL_LTDC_Init+0x19c>)
 800577c:	400b      	ands	r3, r1
 800577e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6919      	ldr	r1, [r3, #16]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4b27      	ldr	r3, [pc, #156]	; (8005848 <HAL_LTDC_Init+0x19c>)
 80057aa:	400b      	ands	r3, r1
 80057ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6959      	ldr	r1, [r3, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0206 	orr.w	r2, r2, #6
 800581a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	f000f800 	.word	0xf000f800

0800584c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800584c:	b5b0      	push	{r4, r5, r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_LTDC_ConfigLayer+0x1a>
 8005862:	2302      	movs	r3, #2
 8005864:	e02c      	b.n	80058c0 <HAL_LTDC_ConfigLayer+0x74>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2134      	movs	r1, #52	; 0x34
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4614      	mov	r4, r2
 800588a:	461d      	mov	r5, r3
 800588c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800588e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f811 	bl	80058c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2201      	movs	r2, #1
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bdb0      	pop	{r4, r5, r7, pc}

080058c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	0c1b      	lsrs	r3, r3, #16
 80058e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e4:	4413      	add	r3, r2
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	01db      	lsls	r3, r3, #7
 80058f4:	4413      	add	r3, r2
 80058f6:	3384      	adds	r3, #132	; 0x84
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	4611      	mov	r1, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	01d2      	lsls	r2, r2, #7
 8005904:	440a      	add	r2, r1
 8005906:	3284      	adds	r2, #132	; 0x84
 8005908:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800590c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	0c1b      	lsrs	r3, r3, #16
 800591a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800591e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005920:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4619      	mov	r1, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	01db      	lsls	r3, r3, #7
 800592c:	440b      	add	r3, r1
 800592e:	3384      	adds	r3, #132	; 0x84
 8005930:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005936:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005946:	4413      	add	r3, r2
 8005948:	041b      	lsls	r3, r3, #16
 800594a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	01db      	lsls	r3, r3, #7
 8005956:	4413      	add	r3, r2
 8005958:	3384      	adds	r3, #132	; 0x84
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	4611      	mov	r1, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	01d2      	lsls	r2, r2, #7
 8005966:	440a      	add	r2, r1
 8005968:	3284      	adds	r2, #132	; 0x84
 800596a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800596e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800597e:	4413      	add	r3, r2
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	01db      	lsls	r3, r3, #7
 800598c:	440b      	add	r3, r1
 800598e:	3384      	adds	r3, #132	; 0x84
 8005990:	4619      	mov	r1, r3
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4313      	orrs	r3, r2
 8005996:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	01db      	lsls	r3, r3, #7
 80059a2:	4413      	add	r3, r2
 80059a4:	3384      	adds	r3, #132	; 0x84
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	4611      	mov	r1, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	01d2      	lsls	r2, r2, #7
 80059b2:	440a      	add	r2, r1
 80059b4:	3284      	adds	r2, #132	; 0x84
 80059b6:	f023 0307 	bic.w	r3, r3, #7
 80059ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	01db      	lsls	r3, r3, #7
 80059c6:	4413      	add	r3, r2
 80059c8:	3384      	adds	r3, #132	; 0x84
 80059ca:	461a      	mov	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	061b      	lsls	r3, r3, #24
 80059ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	01db      	lsls	r3, r3, #7
 80059f8:	4413      	add	r3, r2
 80059fa:	3384      	adds	r3, #132	; 0x84
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	01db      	lsls	r3, r3, #7
 8005a08:	4413      	add	r3, r2
 8005a0a:	3384      	adds	r3, #132	; 0x84
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a18:	461a      	mov	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4619      	mov	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	01db      	lsls	r3, r3, #7
 8005a2c:	440b      	add	r3, r1
 8005a2e:	3384      	adds	r3, #132	; 0x84
 8005a30:	4619      	mov	r1, r3
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	01db      	lsls	r3, r3, #7
 8005a42:	4413      	add	r3, r2
 8005a44:	3384      	adds	r3, #132	; 0x84
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	01d2      	lsls	r2, r2, #7
 8005a52:	440a      	add	r2, r1
 8005a54:	3284      	adds	r2, #132	; 0x84
 8005a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	01db      	lsls	r3, r3, #7
 8005a66:	4413      	add	r3, r2
 8005a68:	3384      	adds	r3, #132	; 0x84
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	01db      	lsls	r3, r3, #7
 8005a7c:	4413      	add	r3, r2
 8005a7e:	3384      	adds	r3, #132	; 0x84
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4619      	mov	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	01db      	lsls	r3, r3, #7
 8005a8c:	440b      	add	r3, r1
 8005a8e:	3384      	adds	r3, #132	; 0x84
 8005a90:	4619      	mov	r1, r3
 8005a92:	4b58      	ldr	r3, [pc, #352]	; (8005bf4 <LTDC_SetConfig+0x32c>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	68f9      	ldr	r1, [r7, #12]
 8005aa2:	6809      	ldr	r1, [r1, #0]
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	01c9      	lsls	r1, r1, #7
 8005aaa:	4401      	add	r1, r0
 8005aac:	3184      	adds	r1, #132	; 0x84
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	01db      	lsls	r3, r3, #7
 8005abc:	4413      	add	r3, r2
 8005abe:	3384      	adds	r3, #132	; 0x84
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	01db      	lsls	r3, r3, #7
 8005acc:	4413      	add	r3, r2
 8005ace:	3384      	adds	r3, #132	; 0x84
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	01db      	lsls	r3, r3, #7
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3384      	adds	r3, #132	; 0x84
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005af4:	2304      	movs	r3, #4
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	e01b      	b.n	8005b32 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d102      	bne.n	8005b08 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005b02:	2303      	movs	r3, #3
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	e014      	b.n	8005b32 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d00b      	beq.n	8005b28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d007      	beq.n	8005b28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d003      	beq.n	8005b28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b24:	2b07      	cmp	r3, #7
 8005b26:	d102      	bne.n	8005b2e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005b28:	2302      	movs	r3, #2
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	e001      	b.n	8005b32 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	01db      	lsls	r3, r3, #7
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3384      	adds	r3, #132	; 0x84
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	4611      	mov	r1, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	01d2      	lsls	r2, r2, #7
 8005b4c:	440a      	add	r2, r1
 8005b4e:	3284      	adds	r2, #132	; 0x84
 8005b50:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005b54:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	fb02 f303 	mul.w	r3, r2, r3
 8005b60:	041a      	lsls	r2, r3, #16
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	1acb      	subs	r3, r1, r3
 8005b6c:	69f9      	ldr	r1, [r7, #28]
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	3307      	adds	r3, #7
 8005b74:	68f9      	ldr	r1, [r7, #12]
 8005b76:	6809      	ldr	r1, [r1, #0]
 8005b78:	4608      	mov	r0, r1
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	01c9      	lsls	r1, r1, #7
 8005b7e:	4401      	add	r1, r0
 8005b80:	3184      	adds	r1, #132	; 0x84
 8005b82:	4313      	orrs	r3, r2
 8005b84:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	01db      	lsls	r3, r3, #7
 8005b90:	4413      	add	r3, r2
 8005b92:	3384      	adds	r3, #132	; 0x84
 8005b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	01db      	lsls	r3, r3, #7
 8005ba0:	440b      	add	r3, r1
 8005ba2:	3384      	adds	r3, #132	; 0x84
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <LTDC_SetConfig+0x330>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	01db      	lsls	r3, r3, #7
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3384      	adds	r3, #132	; 0x84
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	01db      	lsls	r3, r3, #7
 8005bcc:	4413      	add	r3, r2
 8005bce:	3384      	adds	r3, #132	; 0x84
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	01d2      	lsls	r2, r2, #7
 8005bdc:	440a      	add	r2, r1
 8005bde:	3284      	adds	r2, #132	; 0x84
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	6013      	str	r3, [r2, #0]
}
 8005be6:	bf00      	nop
 8005be8:	3724      	adds	r7, #36	; 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	fffff8f8 	.word	0xfffff8f8
 8005bf8:	fffff800 	.word	0xfffff800

08005bfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfe:	b08f      	sub	sp, #60	; 0x3c
 8005c00:	af0a      	add	r7, sp, #40	; 0x28
 8005c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e116      	b.n	8005e3c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fc fbb9 	bl	80023a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2203      	movs	r2, #3
 8005c32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f005 ff15 	bl	800ba7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	687e      	ldr	r6, [r7, #4]
 8005c5a:	466d      	mov	r5, sp
 8005c5c:	f106 0410 	add.w	r4, r6, #16
 8005c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c70:	1d33      	adds	r3, r6, #4
 8005c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c74:	6838      	ldr	r0, [r7, #0]
 8005c76:	f005 fe93 	bl	800b9a0 <USB_CoreInit>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0d7      	b.n	8005e3c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f005 ff03 	bl	800ba9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	73fb      	strb	r3, [r7, #15]
 8005c9c:	e04a      	b.n	8005d34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	333d      	adds	r3, #61	; 0x3d
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cb2:	7bfa      	ldrb	r2, [r7, #15]
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	333c      	adds	r3, #60	; 0x3c
 8005cc2:	7bfa      	ldrb	r2, [r7, #15]
 8005cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cc6:	7bfa      	ldrb	r2, [r7, #15]
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	b298      	uxth	r0, r3
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3356      	adds	r3, #86	; 0x56
 8005cda:	4602      	mov	r2, r0
 8005cdc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	3340      	adds	r3, #64	; 0x40
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cf2:	7bfa      	ldrb	r2, [r7, #15]
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	3344      	adds	r3, #68	; 0x44
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	440b      	add	r3, r1
 8005d14:	3348      	adds	r3, #72	; 0x48
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d1a:	7bfa      	ldrb	r2, [r7, #15]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	334c      	adds	r3, #76	; 0x4c
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	3301      	adds	r3, #1
 8005d32:	73fb      	strb	r3, [r7, #15]
 8005d34:	7bfa      	ldrb	r2, [r7, #15]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3af      	bcc.n	8005c9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73fb      	strb	r3, [r7, #15]
 8005d42:	e044      	b.n	8005dce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d44:	7bfa      	ldrb	r2, [r7, #15]
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005d6c:	7bfa      	ldrb	r2, [r7, #15]
 8005d6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005db2:	7bfa      	ldrb	r2, [r7, #15]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
 8005dce:	7bfa      	ldrb	r2, [r7, #15]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d3b5      	bcc.n	8005d44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	687e      	ldr	r6, [r7, #4]
 8005de0:	466d      	mov	r5, sp
 8005de2:	f106 0410 	add.w	r4, r6, #16
 8005de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005df2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005df6:	1d33      	adds	r3, r6, #4
 8005df8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dfa:	6838      	ldr	r0, [r7, #0]
 8005dfc:	f005 fe9c 	bl	800bb38 <USB_DevInit>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e014      	b.n	8005e3c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f80a 	bl	8005e44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f006 f85a 	bl	800beee <USB_DevDisconnect>

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e72:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_PCDEx_ActivateLPM+0x44>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	10000003 	.word	0x10000003

08005e8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e94:	4b19      	ldr	r3, [pc, #100]	; (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ea0:	4b16      	ldr	r3, [pc, #88]	; (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d001      	beq.n	8005eb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e01f      	b.n	8005ef2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e01d      	b.n	8005ef2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005eb6:	4b11      	ldr	r3, [pc, #68]	; (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f023 0207 	bic.w	r2, r3, #7
 8005ebe:	490f      	ldr	r1, [pc, #60]	; (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ec6:	f7fc fde9 	bl	8002a9c <HAL_GetTick>
 8005eca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ecc:	e009      	b.n	8005ee2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ece:	f7fc fde5 	bl	8002a9c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005edc:	d901      	bls.n	8005ee2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e007      	b.n	8005ef2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eee:	d1ee      	bne.n	8005ece <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	58024800 	.word	0x58024800

08005f00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005f04:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f0e:	60d3      	str	r3, [r2, #12]
}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	58024800 	.word	0x58024800

08005f20 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005f28:	f7fc fdb8 	bl	8002a9c <HAL_GetTick>
 8005f2c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e05f      	b.n	8005ff8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fb fff9 	bl	8001f3c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005f4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f85a 	bl	8006008 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	021a      	lsls	r2, r3, #8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2120      	movs	r1, #32
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f852 	bl	8006024 <QSPI_WaitFlagStateUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005f84:	7afb      	ldrb	r3, [r7, #11]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d135      	bne.n	8005ff6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b1b      	ldr	r3, [pc, #108]	; (8006000 <HAL_QSPI_Init+0xe0>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6852      	ldr	r2, [r2, #4]
 8005f98:	0611      	lsls	r1, r2, #24
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68d2      	ldr	r2, [r2, #12]
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	69d2      	ldr	r2, [r2, #28]
 8005fa4:	4311      	orrs	r1, r2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6a12      	ldr	r2, [r2, #32]
 8005faa:	4311      	orrs	r1, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	4b12      	ldr	r3, [pc, #72]	; (8006004 <HAL_QSPI_Init+0xe4>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6912      	ldr	r2, [r2, #16]
 8005fc2:	0411      	lsls	r1, r2, #16
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6952      	ldr	r2, [r2, #20]
 8005fc8:	4311      	orrs	r1, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6992      	ldr	r2, [r2, #24]
 8005fce:	4311      	orrs	r1, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005ff6:	7afb      	ldrb	r3, [r7, #11]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	00ffff2f 	.word	0x00ffff2f
 8006004:	ffe0f8fe 	.word	0xffe0f8fe

08006008 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006034:	e01a      	b.n	800606c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d016      	beq.n	800606c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fc fd2d 	bl	8002a9c <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10b      	bne.n	800606c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2204      	movs	r2, #4
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006060:	f043 0201 	orr.w	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e00e      	b.n	800608a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	bf14      	ite	ne
 800607a:	2301      	movne	r3, #1
 800607c:	2300      	moveq	r3, #0
 800607e:	b2db      	uxtb	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	429a      	cmp	r2, r3
 8006086:	d1d6      	bne.n	8006036 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08c      	sub	sp, #48	; 0x30
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d102      	bne.n	80060a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f000 bc48 	b.w	8006938 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8088 	beq.w	80061c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060b6:	4b99      	ldr	r3, [pc, #612]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060c0:	4b96      	ldr	r3, [pc, #600]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d007      	beq.n	80060dc <HAL_RCC_OscConfig+0x48>
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	2b18      	cmp	r3, #24
 80060d0:	d111      	bne.n	80060f6 <HAL_RCC_OscConfig+0x62>
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d10c      	bne.n	80060f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060dc:	4b8f      	ldr	r3, [pc, #572]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d06d      	beq.n	80061c4 <HAL_RCC_OscConfig+0x130>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d169      	bne.n	80061c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f000 bc21 	b.w	8006938 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fe:	d106      	bne.n	800610e <HAL_RCC_OscConfig+0x7a>
 8006100:	4b86      	ldr	r3, [pc, #536]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a85      	ldr	r2, [pc, #532]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e02e      	b.n	800616c <HAL_RCC_OscConfig+0xd8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10c      	bne.n	8006130 <HAL_RCC_OscConfig+0x9c>
 8006116:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a80      	ldr	r2, [pc, #512]	; (800631c <HAL_RCC_OscConfig+0x288>)
 800611c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	4b7e      	ldr	r3, [pc, #504]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a7d      	ldr	r2, [pc, #500]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	e01d      	b.n	800616c <HAL_RCC_OscConfig+0xd8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006138:	d10c      	bne.n	8006154 <HAL_RCC_OscConfig+0xc0>
 800613a:	4b78      	ldr	r3, [pc, #480]	; (800631c <HAL_RCC_OscConfig+0x288>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a77      	ldr	r2, [pc, #476]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	4b75      	ldr	r3, [pc, #468]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a74      	ldr	r2, [pc, #464]	; (800631c <HAL_RCC_OscConfig+0x288>)
 800614c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	e00b      	b.n	800616c <HAL_RCC_OscConfig+0xd8>
 8006154:	4b71      	ldr	r3, [pc, #452]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a70      	ldr	r2, [pc, #448]	; (800631c <HAL_RCC_OscConfig+0x288>)
 800615a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	4b6e      	ldr	r3, [pc, #440]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a6d      	ldr	r2, [pc, #436]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800616a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d013      	beq.n	800619c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fc fc92 	bl	8002a9c <HAL_GetTick>
 8006178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800617c:	f7fc fc8e 	bl	8002a9c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b64      	cmp	r3, #100	; 0x64
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e3d4      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800618e:	4b63      	ldr	r3, [pc, #396]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f0      	beq.n	800617c <HAL_RCC_OscConfig+0xe8>
 800619a:	e014      	b.n	80061c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7fc fc7e 	bl	8002a9c <HAL_GetTick>
 80061a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061a4:	f7fc fc7a 	bl	8002a9c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b64      	cmp	r3, #100	; 0x64
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e3c0      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061b6:	4b59      	ldr	r3, [pc, #356]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0x110>
 80061c2:	e000      	b.n	80061c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80ca 	beq.w	8006368 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061d4:	4b51      	ldr	r3, [pc, #324]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061de:	4b4f      	ldr	r3, [pc, #316]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <HAL_RCC_OscConfig+0x166>
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	2b18      	cmp	r3, #24
 80061ee:	d156      	bne.n	800629e <HAL_RCC_OscConfig+0x20a>
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d151      	bne.n	800629e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061fa:	4b48      	ldr	r3, [pc, #288]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d005      	beq.n	8006212 <HAL_RCC_OscConfig+0x17e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e392      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006212:	4b42      	ldr	r3, [pc, #264]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f023 0219 	bic.w	r2, r3, #25
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	493f      	ldr	r1, [pc, #252]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006220:	4313      	orrs	r3, r2
 8006222:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006224:	f7fc fc3a 	bl	8002a9c <HAL_GetTick>
 8006228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800622c:	f7fc fc36 	bl	8002a9c <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e37c      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800623e:	4b37      	ldr	r3, [pc, #220]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f0      	beq.n	800622c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800624a:	f7fc fc57 	bl	8002afc <HAL_GetREVID>
 800624e:	4603      	mov	r3, r0
 8006250:	f241 0203 	movw	r2, #4099	; 0x1003
 8006254:	4293      	cmp	r3, r2
 8006256:	d817      	bhi.n	8006288 <HAL_RCC_OscConfig+0x1f4>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d108      	bne.n	8006272 <HAL_RCC_OscConfig+0x1de>
 8006260:	4b2e      	ldr	r3, [pc, #184]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006268:	4a2c      	ldr	r2, [pc, #176]	; (800631c <HAL_RCC_OscConfig+0x288>)
 800626a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006270:	e07a      	b.n	8006368 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006272:	4b2a      	ldr	r3, [pc, #168]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	031b      	lsls	r3, r3, #12
 8006280:	4926      	ldr	r1, [pc, #152]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006282:	4313      	orrs	r3, r2
 8006284:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006286:	e06f      	b.n	8006368 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006288:	4b24      	ldr	r3, [pc, #144]	; (800631c <HAL_RCC_OscConfig+0x288>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	4921      	ldr	r1, [pc, #132]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006298:	4313      	orrs	r3, r2
 800629a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800629c:	e064      	b.n	8006368 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d047      	beq.n	8006336 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062a6:	4b1d      	ldr	r3, [pc, #116]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f023 0219 	bic.w	r2, r3, #25
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	491a      	ldr	r1, [pc, #104]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fc fbf0 	bl	8002a9c <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c0:	f7fc fbec 	bl	8002a9c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e332      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062d2:	4b12      	ldr	r3, [pc, #72]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062de:	f7fc fc0d 	bl	8002afc <HAL_GetREVID>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d819      	bhi.n	8006320 <HAL_RCC_OscConfig+0x28c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d108      	bne.n	8006306 <HAL_RCC_OscConfig+0x272>
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80062fc:	4a07      	ldr	r2, [pc, #28]	; (800631c <HAL_RCC_OscConfig+0x288>)
 80062fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006302:	6053      	str	r3, [r2, #4]
 8006304:	e030      	b.n	8006368 <HAL_RCC_OscConfig+0x2d4>
 8006306:	4b05      	ldr	r3, [pc, #20]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	031b      	lsls	r3, r3, #12
 8006314:	4901      	ldr	r1, [pc, #4]	; (800631c <HAL_RCC_OscConfig+0x288>)
 8006316:	4313      	orrs	r3, r2
 8006318:	604b      	str	r3, [r1, #4]
 800631a:	e025      	b.n	8006368 <HAL_RCC_OscConfig+0x2d4>
 800631c:	58024400 	.word	0x58024400
 8006320:	4b9a      	ldr	r3, [pc, #616]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	061b      	lsls	r3, r3, #24
 800632e:	4997      	ldr	r1, [pc, #604]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006330:	4313      	orrs	r3, r2
 8006332:	604b      	str	r3, [r1, #4]
 8006334:	e018      	b.n	8006368 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006336:	4b95      	ldr	r3, [pc, #596]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a94      	ldr	r2, [pc, #592]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006342:	f7fc fbab 	bl	8002a9c <HAL_GetTick>
 8006346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800634a:	f7fc fba7 	bl	8002a9c <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e2ed      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800635c:	4b8b      	ldr	r3, [pc, #556]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1f0      	bne.n	800634a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80a9 	beq.w	80064c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006376:	4b85      	ldr	r3, [pc, #532]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800637e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006380:	4b82      	ldr	r3, [pc, #520]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d007      	beq.n	800639c <HAL_RCC_OscConfig+0x308>
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b18      	cmp	r3, #24
 8006390:	d13a      	bne.n	8006408 <HAL_RCC_OscConfig+0x374>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	2b01      	cmp	r3, #1
 800639a:	d135      	bne.n	8006408 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800639c:	4b7b      	ldr	r3, [pc, #492]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_RCC_OscConfig+0x320>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	d001      	beq.n	80063b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e2c1      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063b4:	f7fc fba2 	bl	8002afc <HAL_GetREVID>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80063be:	4293      	cmp	r3, r2
 80063c0:	d817      	bhi.n	80063f2 <HAL_RCC_OscConfig+0x35e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d108      	bne.n	80063dc <HAL_RCC_OscConfig+0x348>
 80063ca:	4b70      	ldr	r3, [pc, #448]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063d2:	4a6e      	ldr	r2, [pc, #440]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 80063d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063da:	e075      	b.n	80064c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063dc:	4b6b      	ldr	r3, [pc, #428]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	069b      	lsls	r3, r3, #26
 80063ea:	4968      	ldr	r1, [pc, #416]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063f0:	e06a      	b.n	80064c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063f2:	4b66      	ldr	r3, [pc, #408]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	061b      	lsls	r3, r3, #24
 8006400:	4962      	ldr	r1, [pc, #392]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006402:	4313      	orrs	r3, r2
 8006404:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006406:	e05f      	b.n	80064c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d042      	beq.n	8006496 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006410:	4b5e      	ldr	r3, [pc, #376]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a5d      	ldr	r2, [pc, #372]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641c:	f7fc fb3e 	bl	8002a9c <HAL_GetTick>
 8006420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006424:	f7fc fb3a 	bl	8002a9c <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e280      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006436:	4b55      	ldr	r3, [pc, #340]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f0      	beq.n	8006424 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006442:	f7fc fb5b 	bl	8002afc <HAL_GetREVID>
 8006446:	4603      	mov	r3, r0
 8006448:	f241 0203 	movw	r2, #4099	; 0x1003
 800644c:	4293      	cmp	r3, r2
 800644e:	d817      	bhi.n	8006480 <HAL_RCC_OscConfig+0x3ec>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	2b20      	cmp	r3, #32
 8006456:	d108      	bne.n	800646a <HAL_RCC_OscConfig+0x3d6>
 8006458:	4b4c      	ldr	r3, [pc, #304]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006460:	4a4a      	ldr	r2, [pc, #296]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006466:	6053      	str	r3, [r2, #4]
 8006468:	e02e      	b.n	80064c8 <HAL_RCC_OscConfig+0x434>
 800646a:	4b48      	ldr	r3, [pc, #288]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	069b      	lsls	r3, r3, #26
 8006478:	4944      	ldr	r1, [pc, #272]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 800647a:	4313      	orrs	r3, r2
 800647c:	604b      	str	r3, [r1, #4]
 800647e:	e023      	b.n	80064c8 <HAL_RCC_OscConfig+0x434>
 8006480:	4b42      	ldr	r3, [pc, #264]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	061b      	lsls	r3, r3, #24
 800648e:	493f      	ldr	r1, [pc, #252]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006490:	4313      	orrs	r3, r2
 8006492:	60cb      	str	r3, [r1, #12]
 8006494:	e018      	b.n	80064c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006496:	4b3d      	ldr	r3, [pc, #244]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3c      	ldr	r2, [pc, #240]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 800649c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a2:	f7fc fafb 	bl	8002a9c <HAL_GetTick>
 80064a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064aa:	f7fc faf7 	bl	8002a9c <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e23d      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064bc:	4b33      	ldr	r3, [pc, #204]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f0      	bne.n	80064aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d036      	beq.n	8006542 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d019      	beq.n	8006510 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064dc:	4b2b      	ldr	r3, [pc, #172]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 80064de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e0:	4a2a      	ldr	r2, [pc, #168]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e8:	f7fc fad8 	bl	8002a9c <HAL_GetTick>
 80064ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f0:	f7fc fad4 	bl	8002a9c <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e21a      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006502:	4b22      	ldr	r3, [pc, #136]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f0      	beq.n	80064f0 <HAL_RCC_OscConfig+0x45c>
 800650e:	e018      	b.n	8006542 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006510:	4b1e      	ldr	r3, [pc, #120]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006514:	4a1d      	ldr	r2, [pc, #116]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651c:	f7fc fabe 	bl	8002a9c <HAL_GetTick>
 8006520:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006524:	f7fc faba 	bl	8002a9c <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e200      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006536:	4b15      	ldr	r3, [pc, #84]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d039      	beq.n	80065c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d01c      	beq.n	8006590 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006556:	4b0d      	ldr	r3, [pc, #52]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a0c      	ldr	r2, [pc, #48]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 800655c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006560:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006562:	f7fc fa9b 	bl	8002a9c <HAL_GetTick>
 8006566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800656a:	f7fc fa97 	bl	8002a9c <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e1dd      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800657c:	4b03      	ldr	r3, [pc, #12]	; (800658c <HAL_RCC_OscConfig+0x4f8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0f0      	beq.n	800656a <HAL_RCC_OscConfig+0x4d6>
 8006588:	e01b      	b.n	80065c2 <HAL_RCC_OscConfig+0x52e>
 800658a:	bf00      	nop
 800658c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006590:	4b9b      	ldr	r3, [pc, #620]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a9a      	ldr	r2, [pc, #616]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800659a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800659c:	f7fc fa7e 	bl	8002a9c <HAL_GetTick>
 80065a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065a4:	f7fc fa7a 	bl	8002a9c <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e1c0      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065b6:	4b92      	ldr	r3, [pc, #584]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8081 	beq.w	80066d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065d0:	4b8c      	ldr	r3, [pc, #560]	; (8006804 <HAL_RCC_OscConfig+0x770>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a8b      	ldr	r2, [pc, #556]	; (8006804 <HAL_RCC_OscConfig+0x770>)
 80065d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065dc:	f7fc fa5e 	bl	8002a9c <HAL_GetTick>
 80065e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e4:	f7fc fa5a 	bl	8002a9c <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b64      	cmp	r3, #100	; 0x64
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e1a0      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065f6:	4b83      	ldr	r3, [pc, #524]	; (8006804 <HAL_RCC_OscConfig+0x770>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f0      	beq.n	80065e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d106      	bne.n	8006618 <HAL_RCC_OscConfig+0x584>
 800660a:	4b7d      	ldr	r3, [pc, #500]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	4a7c      	ldr	r2, [pc, #496]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	6713      	str	r3, [r2, #112]	; 0x70
 8006616:	e02d      	b.n	8006674 <HAL_RCC_OscConfig+0x5e0>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10c      	bne.n	800663a <HAL_RCC_OscConfig+0x5a6>
 8006620:	4b77      	ldr	r3, [pc, #476]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006624:	4a76      	ldr	r2, [pc, #472]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	6713      	str	r3, [r2, #112]	; 0x70
 800662c:	4b74      	ldr	r3, [pc, #464]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 800662e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006630:	4a73      	ldr	r2, [pc, #460]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006632:	f023 0304 	bic.w	r3, r3, #4
 8006636:	6713      	str	r3, [r2, #112]	; 0x70
 8006638:	e01c      	b.n	8006674 <HAL_RCC_OscConfig+0x5e0>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b05      	cmp	r3, #5
 8006640:	d10c      	bne.n	800665c <HAL_RCC_OscConfig+0x5c8>
 8006642:	4b6f      	ldr	r3, [pc, #444]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	4a6e      	ldr	r2, [pc, #440]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006648:	f043 0304 	orr.w	r3, r3, #4
 800664c:	6713      	str	r3, [r2, #112]	; 0x70
 800664e:	4b6c      	ldr	r3, [pc, #432]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	4a6b      	ldr	r2, [pc, #428]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	6713      	str	r3, [r2, #112]	; 0x70
 800665a:	e00b      	b.n	8006674 <HAL_RCC_OscConfig+0x5e0>
 800665c:	4b68      	ldr	r3, [pc, #416]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	4a67      	ldr	r2, [pc, #412]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	6713      	str	r3, [r2, #112]	; 0x70
 8006668:	4b65      	ldr	r3, [pc, #404]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	4a64      	ldr	r2, [pc, #400]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 800666e:	f023 0304 	bic.w	r3, r3, #4
 8006672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d015      	beq.n	80066a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667c:	f7fc fa0e 	bl	8002a9c <HAL_GetTick>
 8006680:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006682:	e00a      	b.n	800669a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006684:	f7fc fa0a 	bl	8002a9c <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e14e      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800669a:	4b59      	ldr	r3, [pc, #356]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0ee      	beq.n	8006684 <HAL_RCC_OscConfig+0x5f0>
 80066a6:	e014      	b.n	80066d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a8:	f7fc f9f8 	bl	8002a9c <HAL_GetTick>
 80066ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066ae:	e00a      	b.n	80066c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b0:	f7fc f9f4 	bl	8002a9c <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e138      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066c6:	4b4e      	ldr	r3, [pc, #312]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1ee      	bne.n	80066b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 812d 	beq.w	8006936 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066dc:	4b48      	ldr	r3, [pc, #288]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066e4:	2b18      	cmp	r3, #24
 80066e6:	f000 80bd 	beq.w	8006864 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	f040 809e 	bne.w	8006830 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f4:	4b42      	ldr	r3, [pc, #264]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a41      	ldr	r2, [pc, #260]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80066fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fc f9cc 	bl	8002a9c <HAL_GetTick>
 8006704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006708:	f7fc f9c8 	bl	8002a9c <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e10e      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800671a:	4b39      	ldr	r3, [pc, #228]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006726:	4b36      	ldr	r3, [pc, #216]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800672a:	4b37      	ldr	r3, [pc, #220]	; (8006808 <HAL_RCC_OscConfig+0x774>)
 800672c:	4013      	ands	r3, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006736:	0112      	lsls	r2, r2, #4
 8006738:	430a      	orrs	r2, r1
 800673a:	4931      	ldr	r1, [pc, #196]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 800673c:	4313      	orrs	r3, r2
 800673e:	628b      	str	r3, [r1, #40]	; 0x28
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	3b01      	subs	r3, #1
 8006746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674e:	3b01      	subs	r3, #1
 8006750:	025b      	lsls	r3, r3, #9
 8006752:	b29b      	uxth	r3, r3
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	3b01      	subs	r3, #1
 800675c:	041b      	lsls	r3, r3, #16
 800675e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006768:	3b01      	subs	r3, #1
 800676a:	061b      	lsls	r3, r3, #24
 800676c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006770:	4923      	ldr	r1, [pc, #140]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006772:	4313      	orrs	r3, r2
 8006774:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006776:	4b22      	ldr	r3, [pc, #136]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	4a21      	ldr	r2, [pc, #132]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006782:	4b1f      	ldr	r3, [pc, #124]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006786:	4b21      	ldr	r3, [pc, #132]	; (800680c <HAL_RCC_OscConfig+0x778>)
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800678e:	00d2      	lsls	r2, r2, #3
 8006790:	491b      	ldr	r1, [pc, #108]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006792:	4313      	orrs	r3, r2
 8006794:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	f023 020c 	bic.w	r2, r3, #12
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	4917      	ldr	r1, [pc, #92]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067a8:	4b15      	ldr	r3, [pc, #84]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	f023 0202 	bic.w	r2, r3, #2
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	4912      	ldr	r1, [pc, #72]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	4a10      	ldr	r2, [pc, #64]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c6:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	4a0d      	ldr	r2, [pc, #52]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	4a0a      	ldr	r2, [pc, #40]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	4a07      	ldr	r2, [pc, #28]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067e4:	f043 0301 	orr.w	r3, r3, #1
 80067e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ea:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a04      	ldr	r2, [pc, #16]	; (8006800 <HAL_RCC_OscConfig+0x76c>)
 80067f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f6:	f7fc f951 	bl	8002a9c <HAL_GetTick>
 80067fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067fc:	e011      	b.n	8006822 <HAL_RCC_OscConfig+0x78e>
 80067fe:	bf00      	nop
 8006800:	58024400 	.word	0x58024400
 8006804:	58024800 	.word	0x58024800
 8006808:	fffffc0c 	.word	0xfffffc0c
 800680c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006810:	f7fc f944 	bl	8002a9c <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e08a      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006822:	4b47      	ldr	r3, [pc, #284]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <HAL_RCC_OscConfig+0x77c>
 800682e:	e082      	b.n	8006936 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006830:	4b43      	ldr	r3, [pc, #268]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a42      	ldr	r2, [pc, #264]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 8006836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800683a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fc f92e 	bl	8002a9c <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006844:	f7fc f92a 	bl	8002a9c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e070      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006856:	4b3a      	ldr	r3, [pc, #232]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x7b0>
 8006862:	e068      	b.n	8006936 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006864:	4b36      	ldr	r3, [pc, #216]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800686a:	4b35      	ldr	r3, [pc, #212]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b01      	cmp	r3, #1
 8006876:	d031      	beq.n	80068dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f003 0203 	and.w	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006882:	429a      	cmp	r2, r3
 8006884:	d12a      	bne.n	80068dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006892:	429a      	cmp	r2, r3
 8006894:	d122      	bne.n	80068dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d11a      	bne.n	80068dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	0a5b      	lsrs	r3, r3, #9
 80068aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d111      	bne.n	80068dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	0c1b      	lsrs	r3, r3, #16
 80068bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d108      	bne.n	80068dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	0e1b      	lsrs	r3, r3, #24
 80068ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e02b      	b.n	8006938 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80068e0:	4b17      	ldr	r3, [pc, #92]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 80068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e4:	08db      	lsrs	r3, r3, #3
 80068e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d01f      	beq.n	8006936 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80068f6:	4b12      	ldr	r3, [pc, #72]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	4a11      	ldr	r2, [pc, #68]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006902:	f7fc f8cb 	bl	8002a9c <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006908:	bf00      	nop
 800690a:	f7fc f8c7 	bl	8002a9c <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	4293      	cmp	r3, r2
 8006914:	d0f9      	beq.n	800690a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006916:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 8006918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <HAL_RCC_OscConfig+0x8b0>)
 800691c:	4013      	ands	r3, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006922:	00d2      	lsls	r2, r2, #3
 8006924:	4906      	ldr	r1, [pc, #24]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 8006926:	4313      	orrs	r3, r2
 8006928:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	4a04      	ldr	r2, [pc, #16]	; (8006940 <HAL_RCC_OscConfig+0x8ac>)
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3730      	adds	r7, #48	; 0x30
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	58024400 	.word	0x58024400
 8006944:	ffff0007 	.word	0xffff0007

08006948 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e19c      	b.n	8006c96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800695c:	4b8a      	ldr	r3, [pc, #552]	; (8006b88 <HAL_RCC_ClockConfig+0x240>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d910      	bls.n	800698c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696a:	4b87      	ldr	r3, [pc, #540]	; (8006b88 <HAL_RCC_ClockConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 020f 	bic.w	r2, r3, #15
 8006972:	4985      	ldr	r1, [pc, #532]	; (8006b88 <HAL_RCC_ClockConfig+0x240>)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	4313      	orrs	r3, r2
 8006978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800697a:	4b83      	ldr	r3, [pc, #524]	; (8006b88 <HAL_RCC_ClockConfig+0x240>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d001      	beq.n	800698c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e184      	b.n	8006c96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d010      	beq.n	80069ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	4b7b      	ldr	r3, [pc, #492]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d908      	bls.n	80069ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069a8:	4b78      	ldr	r3, [pc, #480]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	4975      	ldr	r1, [pc, #468]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d010      	beq.n	80069e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695a      	ldr	r2, [r3, #20]
 80069ca:	4b70      	ldr	r3, [pc, #448]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d908      	bls.n	80069e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069d6:	4b6d      	ldr	r3, [pc, #436]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	496a      	ldr	r1, [pc, #424]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d010      	beq.n	8006a16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	4b64      	ldr	r3, [pc, #400]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d908      	bls.n	8006a16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a04:	4b61      	ldr	r3, [pc, #388]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	495e      	ldr	r1, [pc, #376]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d010      	beq.n	8006a44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69da      	ldr	r2, [r3, #28]
 8006a26:	4b59      	ldr	r3, [pc, #356]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d908      	bls.n	8006a44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a32:	4b56      	ldr	r3, [pc, #344]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	4953      	ldr	r1, [pc, #332]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	4b4d      	ldr	r3, [pc, #308]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d908      	bls.n	8006a72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a60:	4b4a      	ldr	r3, [pc, #296]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f023 020f 	bic.w	r2, r3, #15
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	4947      	ldr	r1, [pc, #284]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d055      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a7e:	4b43      	ldr	r3, [pc, #268]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	4940      	ldr	r1, [pc, #256]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d107      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a98:	4b3c      	ldr	r3, [pc, #240]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d121      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0f6      	b.n	8006c96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d107      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ab0:	4b36      	ldr	r3, [pc, #216]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d115      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0ea      	b.n	8006c96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ac8:	4b30      	ldr	r3, [pc, #192]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d109      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0de      	b.n	8006c96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad8:	4b2c      	ldr	r3, [pc, #176]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0d6      	b.n	8006c96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ae8:	4b28      	ldr	r3, [pc, #160]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f023 0207 	bic.w	r2, r3, #7
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4925      	ldr	r1, [pc, #148]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006afa:	f7fb ffcf 	bl	8002a9c <HAL_GetTick>
 8006afe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b00:	e00a      	b.n	8006b18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b02:	f7fb ffcb 	bl	8002a9c <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e0be      	b.n	8006c96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b18:	4b1c      	ldr	r3, [pc, #112]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d1eb      	bne.n	8006b02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d010      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	4b14      	ldr	r3, [pc, #80]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d208      	bcs.n	8006b58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b46:	4b11      	ldr	r3, [pc, #68]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	f023 020f 	bic.w	r2, r3, #15
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	490e      	ldr	r1, [pc, #56]	; (8006b8c <HAL_RCC_ClockConfig+0x244>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_RCC_ClockConfig+0x240>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d214      	bcs.n	8006b90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b66:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <HAL_RCC_ClockConfig+0x240>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f023 020f 	bic.w	r2, r3, #15
 8006b6e:	4906      	ldr	r1, [pc, #24]	; (8006b88 <HAL_RCC_ClockConfig+0x240>)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b76:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <HAL_RCC_ClockConfig+0x240>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d005      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e086      	b.n	8006c96 <HAL_RCC_ClockConfig+0x34e>
 8006b88:	52002000 	.word	0x52002000
 8006b8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d010      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	4b3f      	ldr	r3, [pc, #252]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d208      	bcs.n	8006bbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bac:	4b3c      	ldr	r3, [pc, #240]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	4939      	ldr	r1, [pc, #228]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0308 	and.w	r3, r3, #8
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d010      	beq.n	8006bec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695a      	ldr	r2, [r3, #20]
 8006bce:	4b34      	ldr	r3, [pc, #208]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d208      	bcs.n	8006bec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bda:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	492e      	ldr	r1, [pc, #184]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d010      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699a      	ldr	r2, [r3, #24]
 8006bfc:	4b28      	ldr	r3, [pc, #160]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d208      	bcs.n	8006c1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c08:	4b25      	ldr	r3, [pc, #148]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	4922      	ldr	r1, [pc, #136]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d010      	beq.n	8006c48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69da      	ldr	r2, [r3, #28]
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d208      	bcs.n	8006c48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c36:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	4917      	ldr	r1, [pc, #92]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c48:	f000 f834 	bl	8006cb4 <HAL_RCC_GetSysClockFreq>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	4912      	ldr	r1, [pc, #72]	; (8006ca4 <HAL_RCC_ClockConfig+0x35c>)
 8006c5a:	5ccb      	ldrb	r3, [r1, r3]
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
 8006c64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c66:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <HAL_RCC_ClockConfig+0x358>)
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	4a0d      	ldr	r2, [pc, #52]	; (8006ca4 <HAL_RCC_ClockConfig+0x35c>)
 8006c70:	5cd3      	ldrb	r3, [r2, r3]
 8006c72:	f003 031f 	and.w	r3, r3, #31
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7c:	4a0a      	ldr	r2, [pc, #40]	; (8006ca8 <HAL_RCC_ClockConfig+0x360>)
 8006c7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <HAL_RCC_ClockConfig+0x364>)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <HAL_RCC_ClockConfig+0x368>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fb febc 	bl	8002a08 <HAL_InitTick>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	58024400 	.word	0x58024400
 8006ca4:	0800c9a4 	.word	0x0800c9a4
 8006ca8:	24000004 	.word	0x24000004
 8006cac:	24000000 	.word	0x24000000
 8006cb0:	24000008 	.word	0x24000008

08006cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b089      	sub	sp, #36	; 0x24
 8006cb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cba:	4bb3      	ldr	r3, [pc, #716]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cc2:	2b18      	cmp	r3, #24
 8006cc4:	f200 8155 	bhi.w	8006f72 <HAL_RCC_GetSysClockFreq+0x2be>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d35 	.word	0x08006d35
 8006cd4:	08006f73 	.word	0x08006f73
 8006cd8:	08006f73 	.word	0x08006f73
 8006cdc:	08006f73 	.word	0x08006f73
 8006ce0:	08006f73 	.word	0x08006f73
 8006ce4:	08006f73 	.word	0x08006f73
 8006ce8:	08006f73 	.word	0x08006f73
 8006cec:	08006f73 	.word	0x08006f73
 8006cf0:	08006d5b 	.word	0x08006d5b
 8006cf4:	08006f73 	.word	0x08006f73
 8006cf8:	08006f73 	.word	0x08006f73
 8006cfc:	08006f73 	.word	0x08006f73
 8006d00:	08006f73 	.word	0x08006f73
 8006d04:	08006f73 	.word	0x08006f73
 8006d08:	08006f73 	.word	0x08006f73
 8006d0c:	08006f73 	.word	0x08006f73
 8006d10:	08006d61 	.word	0x08006d61
 8006d14:	08006f73 	.word	0x08006f73
 8006d18:	08006f73 	.word	0x08006f73
 8006d1c:	08006f73 	.word	0x08006f73
 8006d20:	08006f73 	.word	0x08006f73
 8006d24:	08006f73 	.word	0x08006f73
 8006d28:	08006f73 	.word	0x08006f73
 8006d2c:	08006f73 	.word	0x08006f73
 8006d30:	08006d67 	.word	0x08006d67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d34:	4b94      	ldr	r3, [pc, #592]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d40:	4b91      	ldr	r3, [pc, #580]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	08db      	lsrs	r3, r3, #3
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	4a90      	ldr	r2, [pc, #576]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d52:	e111      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d54:	4b8d      	ldr	r3, [pc, #564]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d56:	61bb      	str	r3, [r7, #24]
      break;
 8006d58:	e10e      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d5a:	4b8d      	ldr	r3, [pc, #564]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d5c:	61bb      	str	r3, [r7, #24]
      break;
 8006d5e:	e10b      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d60:	4b8c      	ldr	r3, [pc, #560]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d62:	61bb      	str	r3, [r7, #24]
      break;
 8006d64:	e108      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d66:	4b88      	ldr	r3, [pc, #544]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006d70:	4b85      	ldr	r3, [pc, #532]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	091b      	lsrs	r3, r3, #4
 8006d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d7c:	4b82      	ldr	r3, [pc, #520]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d86:	4b80      	ldr	r3, [pc, #512]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8a:	08db      	lsrs	r3, r3, #3
 8006d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80e1 	beq.w	8006f6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	f000 8083 	beq.w	8006eb8 <HAL_RCC_GetSysClockFreq+0x204>
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	f200 80a1 	bhi.w	8006efc <HAL_RCC_GetSysClockFreq+0x248>
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x114>
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d056      	beq.n	8006e74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dc6:	e099      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc8:	4b6f      	ldr	r3, [pc, #444]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d02d      	beq.n	8006e30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dd4:	4b6c      	ldr	r3, [pc, #432]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	08db      	lsrs	r3, r3, #3
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	4a6b      	ldr	r2, [pc, #428]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006de0:	fa22 f303 	lsr.w	r3, r2, r3
 8006de4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	ee07 3a90 	vmov	s15, r3
 8006dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b62      	ldr	r3, [pc, #392]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e2e:	e087      	b.n	8006f40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e42:	4b51      	ldr	r3, [pc, #324]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e72:	e065      	b.n	8006f40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e86:	4b40      	ldr	r3, [pc, #256]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eb6:	e043      	b.n	8006f40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ede:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006efa:	e021      	b.n	8006f40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0e:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f40:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f44:	0a5b      	lsrs	r3, r3, #9
 8006f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f58:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f64:	ee17 3a90 	vmov	r3, s15
 8006f68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006f6a:	e005      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61bb      	str	r3, [r7, #24]
      break;
 8006f70:	e002      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f74:	61bb      	str	r3, [r7, #24]
      break;
 8006f76:	bf00      	nop
  }

  return sysclockfreq;
 8006f78:	69bb      	ldr	r3, [r7, #24]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3724      	adds	r7, #36	; 0x24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	58024400 	.word	0x58024400
 8006f8c:	03d09000 	.word	0x03d09000
 8006f90:	003d0900 	.word	0x003d0900
 8006f94:	017d7840 	.word	0x017d7840
 8006f98:	46000000 	.word	0x46000000
 8006f9c:	4c742400 	.word	0x4c742400
 8006fa0:	4a742400 	.word	0x4a742400
 8006fa4:	4bbebc20 	.word	0x4bbebc20

08006fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fae:	f7ff fe81 	bl	8006cb4 <HAL_RCC_GetSysClockFreq>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	0a1b      	lsrs	r3, r3, #8
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	490f      	ldr	r1, [pc, #60]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8006fc0:	5ccb      	ldrb	r3, [r1, r3]
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8006fd6:	5cd3      	ldrb	r3, [r2, r3]
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe2:	4a07      	ldr	r2, [pc, #28]	; (8007000 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fe4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fe6:	4a07      	ldr	r2, [pc, #28]	; (8007004 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	58024400 	.word	0x58024400
 8006ffc:	0800c9a4 	.word	0x0800c9a4
 8007000:	24000004 	.word	0x24000004
 8007004:	24000000 	.word	0x24000000

08007008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800700c:	f7ff ffcc 	bl	8006fa8 <HAL_RCC_GetHCLKFreq>
 8007010:	4602      	mov	r2, r0
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	091b      	lsrs	r3, r3, #4
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	4904      	ldr	r1, [pc, #16]	; (8007030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800701e:	5ccb      	ldrb	r3, [r1, r3]
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007028:	4618      	mov	r0, r3
 800702a:	bd80      	pop	{r7, pc}
 800702c:	58024400 	.word	0x58024400
 8007030:	0800c9a4 	.word	0x0800c9a4

08007034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007038:	f7ff ffb6 	bl	8006fa8 <HAL_RCC_GetHCLKFreq>
 800703c:	4602      	mov	r2, r0
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	4904      	ldr	r1, [pc, #16]	; (800705c <HAL_RCC_GetPCLK2Freq+0x28>)
 800704a:	5ccb      	ldrb	r3, [r1, r3]
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007054:	4618      	mov	r0, r3
 8007056:	bd80      	pop	{r7, pc}
 8007058:	58024400 	.word	0x58024400
 800705c:	0800c9a4 	.word	0x0800c9a4

08007060 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007064:	b0ca      	sub	sp, #296	; 0x128
 8007066:	af00      	add	r7, sp, #0
 8007068:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800706c:	2300      	movs	r3, #0
 800706e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007072:	2300      	movs	r3, #0
 8007074:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007084:	2500      	movs	r5, #0
 8007086:	ea54 0305 	orrs.w	r3, r4, r5
 800708a:	d049      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800708c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007092:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007096:	d02f      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800709c:	d828      	bhi.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800709e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070a2:	d01a      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070a8:	d822      	bhi.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b2:	d007      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070b4:	e01c      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b6:	4bb8      	ldr	r3, [pc, #736]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	4ab7      	ldr	r2, [pc, #732]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070c2:	e01a      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c8:	3308      	adds	r3, #8
 80070ca:	2102      	movs	r1, #2
 80070cc:	4618      	mov	r0, r3
 80070ce:	f002 fb61 	bl	8009794 <RCCEx_PLL2_Config>
 80070d2:	4603      	mov	r3, r0
 80070d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070d8:	e00f      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070de:	3328      	adds	r3, #40	; 0x28
 80070e0:	2102      	movs	r1, #2
 80070e2:	4618      	mov	r0, r3
 80070e4:	f002 fc08 	bl	80098f8 <RCCEx_PLL3_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070ee:	e004      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070f6:	e000      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80070f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007102:	4ba5      	ldr	r3, [pc, #660]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007106:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800710a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800710e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007110:	4aa1      	ldr	r2, [pc, #644]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007112:	430b      	orrs	r3, r1
 8007114:	6513      	str	r3, [r2, #80]	; 0x50
 8007116:	e003      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800711c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800712c:	f04f 0900 	mov.w	r9, #0
 8007130:	ea58 0309 	orrs.w	r3, r8, r9
 8007134:	d047      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713c:	2b04      	cmp	r3, #4
 800713e:	d82a      	bhi.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	0800715d 	.word	0x0800715d
 800714c:	0800716b 	.word	0x0800716b
 8007150:	08007181 	.word	0x08007181
 8007154:	0800719f 	.word	0x0800719f
 8007158:	0800719f 	.word	0x0800719f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800715c:	4b8e      	ldr	r3, [pc, #568]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	4a8d      	ldr	r2, [pc, #564]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007168:	e01a      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716e:	3308      	adds	r3, #8
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f002 fb0e 	bl	8009794 <RCCEx_PLL2_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800717e:	e00f      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007184:	3328      	adds	r3, #40	; 0x28
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f002 fbb5 	bl	80098f8 <RCCEx_PLL3_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007194:	e004      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800719c:	e000      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800719e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071a8:	4b7b      	ldr	r3, [pc, #492]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ac:	f023 0107 	bic.w	r1, r3, #7
 80071b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b6:	4a78      	ldr	r2, [pc, #480]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6513      	str	r3, [r2, #80]	; 0x50
 80071bc:	e003      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80071d2:	f04f 0b00 	mov.w	fp, #0
 80071d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80071da:	d04c      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80071dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e6:	d030      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80071e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ec:	d829      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80071ee:	2bc0      	cmp	r3, #192	; 0xc0
 80071f0:	d02d      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80071f2:	2bc0      	cmp	r3, #192	; 0xc0
 80071f4:	d825      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80071f6:	2b80      	cmp	r3, #128	; 0x80
 80071f8:	d018      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80071fa:	2b80      	cmp	r3, #128	; 0x80
 80071fc:	d821      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d007      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007206:	e01c      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007208:	4b63      	ldr	r3, [pc, #396]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	4a62      	ldr	r2, [pc, #392]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800720e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007214:	e01c      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800721a:	3308      	adds	r3, #8
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f002 fab8 	bl	8009794 <RCCEx_PLL2_Config>
 8007224:	4603      	mov	r3, r0
 8007226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800722a:	e011      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007230:	3328      	adds	r3, #40	; 0x28
 8007232:	2100      	movs	r1, #0
 8007234:	4618      	mov	r0, r3
 8007236:	f002 fb5f 	bl	80098f8 <RCCEx_PLL3_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007240:	e006      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007248:	e002      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800724a:	bf00      	nop
 800724c:	e000      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800724e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007258:	4b4f      	ldr	r3, [pc, #316]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800725a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007266:	4a4c      	ldr	r2, [pc, #304]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007268:	430b      	orrs	r3, r1
 800726a:	6513      	str	r3, [r2, #80]	; 0x50
 800726c:	e003      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007282:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007286:	2300      	movs	r3, #0
 8007288:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800728c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007290:	460b      	mov	r3, r1
 8007292:	4313      	orrs	r3, r2
 8007294:	d053      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800729a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800729e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072a2:	d035      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80072a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072a8:	d82e      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072ae:	d031      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80072b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072b4:	d828      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072ba:	d01a      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80072bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c0:	d822      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80072c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ca:	d007      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80072cc:	e01c      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ce:	4b32      	ldr	r3, [pc, #200]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	4a31      	ldr	r2, [pc, #196]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072da:	e01c      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e0:	3308      	adds	r3, #8
 80072e2:	2100      	movs	r1, #0
 80072e4:	4618      	mov	r0, r3
 80072e6:	f002 fa55 	bl	8009794 <RCCEx_PLL2_Config>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072f0:	e011      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f6:	3328      	adds	r3, #40	; 0x28
 80072f8:	2100      	movs	r1, #0
 80072fa:	4618      	mov	r0, r3
 80072fc:	f002 fafc 	bl	80098f8 <RCCEx_PLL3_Config>
 8007300:	4603      	mov	r3, r0
 8007302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007306:	e006      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800730e:	e002      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007310:	bf00      	nop
 8007312:	e000      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10b      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800731e:	4b1e      	ldr	r3, [pc, #120]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007322:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800732e:	4a1a      	ldr	r2, [pc, #104]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007330:	430b      	orrs	r3, r1
 8007332:	6593      	str	r3, [r2, #88]	; 0x58
 8007334:	e003      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800733a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800733e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800734a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800734e:	2300      	movs	r3, #0
 8007350:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007354:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007358:	460b      	mov	r3, r1
 800735a:	4313      	orrs	r3, r2
 800735c:	d056      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007362:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800736a:	d038      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800736c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007370:	d831      	bhi.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007372:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007376:	d034      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007378:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800737c:	d82b      	bhi.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800737e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007382:	d01d      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007388:	d825      	bhi.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d006      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800738e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007392:	d00a      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007394:	e01f      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007396:	bf00      	nop
 8007398:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800739c:	4ba2      	ldr	r3, [pc, #648]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	4aa1      	ldr	r2, [pc, #644]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073a8:	e01c      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ae:	3308      	adds	r3, #8
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f002 f9ee 	bl	8009794 <RCCEx_PLL2_Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073be:	e011      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c4:	3328      	adds	r3, #40	; 0x28
 80073c6:	2100      	movs	r1, #0
 80073c8:	4618      	mov	r0, r3
 80073ca:	f002 fa95 	bl	80098f8 <RCCEx_PLL3_Config>
 80073ce:	4603      	mov	r3, r0
 80073d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073d4:	e006      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073dc:	e002      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80073de:	bf00      	nop
 80073e0:	e000      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80073e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10b      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073ec:	4b8e      	ldr	r3, [pc, #568]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073fc:	4a8a      	ldr	r2, [pc, #552]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073fe:	430b      	orrs	r3, r1
 8007400:	6593      	str	r3, [r2, #88]	; 0x58
 8007402:	e003      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007418:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800741c:	2300      	movs	r3, #0
 800741e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007422:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007426:	460b      	mov	r3, r1
 8007428:	4313      	orrs	r3, r2
 800742a:	d03a      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007432:	2b30      	cmp	r3, #48	; 0x30
 8007434:	d01f      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007436:	2b30      	cmp	r3, #48	; 0x30
 8007438:	d819      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800743a:	2b20      	cmp	r3, #32
 800743c:	d00c      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800743e:	2b20      	cmp	r3, #32
 8007440:	d815      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d019      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007446:	2b10      	cmp	r3, #16
 8007448:	d111      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800744a:	4b77      	ldr	r3, [pc, #476]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	4a76      	ldr	r2, [pc, #472]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007454:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007456:	e011      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745c:	3308      	adds	r3, #8
 800745e:	2102      	movs	r1, #2
 8007460:	4618      	mov	r0, r3
 8007462:	f002 f997 	bl	8009794 <RCCEx_PLL2_Config>
 8007466:	4603      	mov	r3, r0
 8007468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800746c:	e006      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007474:	e002      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007476:	bf00      	nop
 8007478:	e000      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800747a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800747c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007484:	4b68      	ldr	r3, [pc, #416]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007488:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007492:	4a65      	ldr	r2, [pc, #404]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007494:	430b      	orrs	r3, r1
 8007496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007498:	e003      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800749e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80074ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074b2:	2300      	movs	r3, #0
 80074b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80074bc:	460b      	mov	r3, r1
 80074be:	4313      	orrs	r3, r2
 80074c0:	d051      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80074c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074cc:	d035      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80074ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d2:	d82e      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074d8:	d031      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80074da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074de:	d828      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e4:	d01a      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80074e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ea:	d822      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80074f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f4:	d007      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80074f6:	e01c      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f8:	4b4b      	ldr	r3, [pc, #300]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	4a4a      	ldr	r2, [pc, #296]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007504:	e01c      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750a:	3308      	adds	r3, #8
 800750c:	2100      	movs	r1, #0
 800750e:	4618      	mov	r0, r3
 8007510:	f002 f940 	bl	8009794 <RCCEx_PLL2_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800751a:	e011      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007520:	3328      	adds	r3, #40	; 0x28
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f002 f9e7 	bl	80098f8 <RCCEx_PLL3_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007530:	e006      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007538:	e002      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800753a:	bf00      	nop
 800753c:	e000      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800753e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10a      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007548:	4b37      	ldr	r3, [pc, #220]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800754a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007556:	4a34      	ldr	r2, [pc, #208]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007558:	430b      	orrs	r3, r1
 800755a:	6513      	str	r3, [r2, #80]	; 0x50
 800755c:	e003      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007572:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007576:	2300      	movs	r3, #0
 8007578:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800757c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007580:	460b      	mov	r3, r1
 8007582:	4313      	orrs	r3, r2
 8007584:	d056      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800758c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007590:	d033      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007592:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007596:	d82c      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800759c:	d02f      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800759e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075a2:	d826      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075a8:	d02b      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80075aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075ae:	d820      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075b4:	d012      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80075b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ba:	d81a      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d022      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80075c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c4:	d115      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ca:	3308      	adds	r3, #8
 80075cc:	2101      	movs	r1, #1
 80075ce:	4618      	mov	r0, r3
 80075d0:	f002 f8e0 	bl	8009794 <RCCEx_PLL2_Config>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075da:	e015      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e0:	3328      	adds	r3, #40	; 0x28
 80075e2:	2101      	movs	r1, #1
 80075e4:	4618      	mov	r0, r3
 80075e6:	f002 f987 	bl	80098f8 <RCCEx_PLL3_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075f0:	e00a      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075f8:	e006      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80075fa:	bf00      	nop
 80075fc:	e004      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007608:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10d      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007614:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800761c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800761e:	4a02      	ldr	r2, [pc, #8]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007620:	430b      	orrs	r3, r1
 8007622:	6513      	str	r3, [r2, #80]	; 0x50
 8007624:	e006      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007626:	bf00      	nop
 8007628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007644:	2300      	movs	r3, #0
 8007646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800764a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800764e:	460b      	mov	r3, r1
 8007650:	4313      	orrs	r3, r2
 8007652:	d055      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800765c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007660:	d033      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007666:	d82c      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766c:	d02f      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800766e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007672:	d826      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007674:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007678:	d02b      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800767a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800767e:	d820      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007684:	d012      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800768a:	d81a      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d022      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007694:	d115      	bne.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769a:	3308      	adds	r3, #8
 800769c:	2101      	movs	r1, #1
 800769e:	4618      	mov	r0, r3
 80076a0:	f002 f878 	bl	8009794 <RCCEx_PLL2_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076aa:	e015      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b0:	3328      	adds	r3, #40	; 0x28
 80076b2:	2101      	movs	r1, #1
 80076b4:	4618      	mov	r0, r3
 80076b6:	f002 f91f 	bl	80098f8 <RCCEx_PLL3_Config>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076c0:	e00a      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076c8:	e006      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076ca:	bf00      	nop
 80076cc:	e004      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076ce:	bf00      	nop
 80076d0:	e002      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076d2:	bf00      	nop
 80076d4:	e000      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10b      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80076e0:	4ba3      	ldr	r3, [pc, #652]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076f0:	4a9f      	ldr	r2, [pc, #636]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076f2:	430b      	orrs	r3, r1
 80076f4:	6593      	str	r3, [r2, #88]	; 0x58
 80076f6:	e003      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800770c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007710:	2300      	movs	r3, #0
 8007712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800771a:	460b      	mov	r3, r1
 800771c:	4313      	orrs	r3, r2
 800771e:	d037      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772a:	d00e      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800772c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007730:	d816      	bhi.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d018      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800773a:	d111      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773c:	4b8c      	ldr	r3, [pc, #560]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	4a8b      	ldr	r2, [pc, #556]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007748:	e00f      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774e:	3308      	adds	r3, #8
 8007750:	2101      	movs	r1, #1
 8007752:	4618      	mov	r0, r3
 8007754:	f002 f81e 	bl	8009794 <RCCEx_PLL2_Config>
 8007758:	4603      	mov	r3, r0
 800775a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800775e:	e004      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007766:	e000      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800776a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10a      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007772:	4b7f      	ldr	r3, [pc, #508]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007776:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007780:	4a7b      	ldr	r2, [pc, #492]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007782:	430b      	orrs	r3, r1
 8007784:	6513      	str	r3, [r2, #80]	; 0x50
 8007786:	e003      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800778c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800779c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077a0:	2300      	movs	r3, #0
 80077a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80077a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4313      	orrs	r3, r2
 80077ae:	d039      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d81c      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077fd 	.word	0x080077fd
 80077c4:	080077d1 	.word	0x080077d1
 80077c8:	080077df 	.word	0x080077df
 80077cc:	080077fd 	.word	0x080077fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d0:	4b67      	ldr	r3, [pc, #412]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	4a66      	ldr	r2, [pc, #408]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80077dc:	e00f      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e2:	3308      	adds	r3, #8
 80077e4:	2102      	movs	r1, #2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 ffd4 	bl	8009794 <RCCEx_PLL2_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80077f2:	e004      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077fa:	e000      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80077fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007806:	4b5a      	ldr	r3, [pc, #360]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	f023 0103 	bic.w	r1, r3, #3
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007814:	4a56      	ldr	r2, [pc, #344]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007816:	430b      	orrs	r3, r1
 8007818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800781a:	e003      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007830:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007834:	2300      	movs	r3, #0
 8007836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800783a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800783e:	460b      	mov	r3, r1
 8007840:	4313      	orrs	r3, r2
 8007842:	f000 809f 	beq.w	8007984 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007846:	4b4b      	ldr	r3, [pc, #300]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a4a      	ldr	r2, [pc, #296]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800784c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007850:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007852:	f7fb f923 	bl	8002a9c <HAL_GetTick>
 8007856:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800785a:	e00b      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800785c:	f7fb f91e 	bl	8002a9c <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b64      	cmp	r3, #100	; 0x64
 800786a:	d903      	bls.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007872:	e005      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007874:	4b3f      	ldr	r3, [pc, #252]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0ed      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007884:	2b00      	cmp	r3, #0
 8007886:	d179      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007888:	4b39      	ldr	r3, [pc, #228]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800788a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007890:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007894:	4053      	eors	r3, r2
 8007896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800789a:	2b00      	cmp	r3, #0
 800789c:	d015      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800789e:	4b34      	ldr	r3, [pc, #208]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078aa:	4b31      	ldr	r3, [pc, #196]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ae:	4a30      	ldr	r2, [pc, #192]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078b6:	4b2e      	ldr	r3, [pc, #184]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	4a2d      	ldr	r2, [pc, #180]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078c2:	4a2b      	ldr	r2, [pc, #172]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d6:	d118      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d8:	f7fb f8e0 	bl	8002a9c <HAL_GetTick>
 80078dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078e0:	e00d      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078e2:	f7fb f8db 	bl	8002a9c <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80078ec:	1ad2      	subs	r2, r2, r3
 80078ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d903      	bls.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80078fc:	e005      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078fe:	4b1c      	ldr	r3, [pc, #112]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0eb      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800790a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800790e:	2b00      	cmp	r3, #0
 8007910:	d129      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007916:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800791a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800791e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007922:	d10e      	bne.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007924:	4b12      	ldr	r3, [pc, #72]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800792c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007930:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007934:	091a      	lsrs	r2, r3, #4
 8007936:	4b10      	ldr	r3, [pc, #64]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007938:	4013      	ands	r3, r2
 800793a:	4a0d      	ldr	r2, [pc, #52]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800793c:	430b      	orrs	r3, r1
 800793e:	6113      	str	r3, [r2, #16]
 8007940:	e005      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007942:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007948:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800794c:	6113      	str	r3, [r2, #16]
 800794e:	4b08      	ldr	r3, [pc, #32]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007950:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007956:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800795a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800795e:	4a04      	ldr	r2, [pc, #16]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007960:	430b      	orrs	r3, r1
 8007962:	6713      	str	r3, [r2, #112]	; 0x70
 8007964:	e00e      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800796a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800796e:	e009      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007970:	58024400 	.word	0x58024400
 8007974:	58024800 	.word	0x58024800
 8007978:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007980:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f002 0301 	and.w	r3, r2, #1
 8007990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007994:	2300      	movs	r3, #0
 8007996:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800799a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800799e:	460b      	mov	r3, r1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	f000 8089 	beq.w	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ac:	2b28      	cmp	r3, #40	; 0x28
 80079ae:	d86b      	bhi.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80079b0:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	08007a91 	.word	0x08007a91
 80079bc:	08007a89 	.word	0x08007a89
 80079c0:	08007a89 	.word	0x08007a89
 80079c4:	08007a89 	.word	0x08007a89
 80079c8:	08007a89 	.word	0x08007a89
 80079cc:	08007a89 	.word	0x08007a89
 80079d0:	08007a89 	.word	0x08007a89
 80079d4:	08007a89 	.word	0x08007a89
 80079d8:	08007a5d 	.word	0x08007a5d
 80079dc:	08007a89 	.word	0x08007a89
 80079e0:	08007a89 	.word	0x08007a89
 80079e4:	08007a89 	.word	0x08007a89
 80079e8:	08007a89 	.word	0x08007a89
 80079ec:	08007a89 	.word	0x08007a89
 80079f0:	08007a89 	.word	0x08007a89
 80079f4:	08007a89 	.word	0x08007a89
 80079f8:	08007a73 	.word	0x08007a73
 80079fc:	08007a89 	.word	0x08007a89
 8007a00:	08007a89 	.word	0x08007a89
 8007a04:	08007a89 	.word	0x08007a89
 8007a08:	08007a89 	.word	0x08007a89
 8007a0c:	08007a89 	.word	0x08007a89
 8007a10:	08007a89 	.word	0x08007a89
 8007a14:	08007a89 	.word	0x08007a89
 8007a18:	08007a91 	.word	0x08007a91
 8007a1c:	08007a89 	.word	0x08007a89
 8007a20:	08007a89 	.word	0x08007a89
 8007a24:	08007a89 	.word	0x08007a89
 8007a28:	08007a89 	.word	0x08007a89
 8007a2c:	08007a89 	.word	0x08007a89
 8007a30:	08007a89 	.word	0x08007a89
 8007a34:	08007a89 	.word	0x08007a89
 8007a38:	08007a91 	.word	0x08007a91
 8007a3c:	08007a89 	.word	0x08007a89
 8007a40:	08007a89 	.word	0x08007a89
 8007a44:	08007a89 	.word	0x08007a89
 8007a48:	08007a89 	.word	0x08007a89
 8007a4c:	08007a89 	.word	0x08007a89
 8007a50:	08007a89 	.word	0x08007a89
 8007a54:	08007a89 	.word	0x08007a89
 8007a58:	08007a91 	.word	0x08007a91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a60:	3308      	adds	r3, #8
 8007a62:	2101      	movs	r1, #1
 8007a64:	4618      	mov	r0, r3
 8007a66:	f001 fe95 	bl	8009794 <RCCEx_PLL2_Config>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a70:	e00f      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a76:	3328      	adds	r3, #40	; 0x28
 8007a78:	2101      	movs	r1, #1
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 ff3c 	bl	80098f8 <RCCEx_PLL3_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a86:	e004      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a8e:	e000      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10a      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a9a:	4bbf      	ldr	r3, [pc, #764]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa8:	4abb      	ldr	r2, [pc, #748]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	6553      	str	r3, [r2, #84]	; 0x54
 8007aae:	e003      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f002 0302 	and.w	r3, r2, #2
 8007ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ace:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	d041      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	d824      	bhi.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007ae2:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007b35 	.word	0x08007b35
 8007aec:	08007b01 	.word	0x08007b01
 8007af0:	08007b17 	.word	0x08007b17
 8007af4:	08007b35 	.word	0x08007b35
 8007af8:	08007b35 	.word	0x08007b35
 8007afc:	08007b35 	.word	0x08007b35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b04:	3308      	adds	r3, #8
 8007b06:	2101      	movs	r1, #1
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fe43 	bl	8009794 <RCCEx_PLL2_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b14:	e00f      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1a:	3328      	adds	r3, #40	; 0x28
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 feea 	bl	80098f8 <RCCEx_PLL3_Config>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b2a:	e004      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b32:	e000      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b3e:	4b96      	ldr	r3, [pc, #600]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	f023 0107 	bic.w	r1, r3, #7
 8007b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b4c:	4a92      	ldr	r2, [pc, #584]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	6553      	str	r3, [r2, #84]	; 0x54
 8007b52:	e003      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f002 0304 	and.w	r3, r2, #4
 8007b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	d044      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b84:	2b05      	cmp	r3, #5
 8007b86:	d825      	bhi.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007bdd 	.word	0x08007bdd
 8007b94:	08007ba9 	.word	0x08007ba9
 8007b98:	08007bbf 	.word	0x08007bbf
 8007b9c:	08007bdd 	.word	0x08007bdd
 8007ba0:	08007bdd 	.word	0x08007bdd
 8007ba4:	08007bdd 	.word	0x08007bdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bac:	3308      	adds	r3, #8
 8007bae:	2101      	movs	r1, #1
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 fdef 	bl	8009794 <RCCEx_PLL2_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bbc:	e00f      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc2:	3328      	adds	r3, #40	; 0x28
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f001 fe96 	bl	80098f8 <RCCEx_PLL3_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bd2:	e004      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bda:	e000      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007be6:	4b6c      	ldr	r3, [pc, #432]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bea:	f023 0107 	bic.w	r1, r3, #7
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf6:	4a68      	ldr	r2, [pc, #416]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8007bfc:	e003      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f002 0320 	and.w	r3, r2, #32
 8007c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c16:	2300      	movs	r3, #0
 8007c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c20:	460b      	mov	r3, r1
 8007c22:	4313      	orrs	r3, r2
 8007c24:	d055      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c32:	d033      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c38:	d82c      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3e:	d02f      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c44:	d826      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c4a:	d02b      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007c4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c50:	d820      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c56:	d012      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c5c:	d81a      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d022      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c66:	d115      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fd8f 	bl	8009794 <RCCEx_PLL2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c7c:	e015      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c82:	3328      	adds	r3, #40	; 0x28
 8007c84:	2102      	movs	r1, #2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 fe36 	bl	80098f8 <RCCEx_PLL3_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c92:	e00a      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c9a:	e006      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007c9c:	bf00      	nop
 8007c9e:	e004      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ca0:	bf00      	nop
 8007ca2:	e002      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ca4:	bf00      	nop
 8007ca6:	e000      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10b      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cb2:	4b39      	ldr	r3, [pc, #228]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc2:	4a35      	ldr	r2, [pc, #212]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6553      	str	r3, [r2, #84]	; 0x54
 8007cc8:	e003      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ce8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	d058      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007cfe:	d033      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007d00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d04:	d82c      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0a:	d02f      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d10:	d826      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d16:	d02b      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d1c:	d820      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d22:	d012      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d28:	d81a      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d022      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d32:	d115      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d38:	3308      	adds	r3, #8
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f001 fd29 	bl	8009794 <RCCEx_PLL2_Config>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d48:	e015      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4e:	3328      	adds	r3, #40	; 0x28
 8007d50:	2102      	movs	r1, #2
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 fdd0 	bl	80098f8 <RCCEx_PLL3_Config>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d5e:	e00a      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d66:	e006      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d68:	bf00      	nop
 8007d6a:	e004      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d6c:	bf00      	nop
 8007d6e:	e002      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d70:	bf00      	nop
 8007d72:	e000      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10e      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d7e:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d8e:	4a02      	ldr	r2, [pc, #8]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d90:	430b      	orrs	r3, r1
 8007d92:	6593      	str	r3, [r2, #88]	; 0x58
 8007d94:	e006      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007d96:	bf00      	nop
 8007d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007db4:	2300      	movs	r3, #0
 8007db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	d055      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007dcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007dd0:	d033      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007dd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007dd6:	d82c      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ddc:	d02f      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de2:	d826      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007de4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007de8:	d02b      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007dea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007dee:	d820      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007df4:	d012      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dfa:	d81a      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d022      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e04:	d115      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 fcc0 	bl	8009794 <RCCEx_PLL2_Config>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e1a:	e015      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e20:	3328      	adds	r3, #40	; 0x28
 8007e22:	2102      	movs	r1, #2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 fd67 	bl	80098f8 <RCCEx_PLL3_Config>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e30:	e00a      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e3a:	bf00      	nop
 8007e3c:	e004      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e3e:	bf00      	nop
 8007e40:	e002      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e42:	bf00      	nop
 8007e44:	e000      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e50:	4ba1      	ldr	r3, [pc, #644]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e54:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e60:	4a9d      	ldr	r2, [pc, #628]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e62:	430b      	orrs	r3, r1
 8007e64:	6593      	str	r3, [r2, #88]	; 0x58
 8007e66:	e003      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f002 0308 	and.w	r3, r2, #8
 8007e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e80:	2300      	movs	r3, #0
 8007e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	d01e      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9c:	d10c      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea2:	3328      	adds	r3, #40	; 0x28
 8007ea4:	2102      	movs	r1, #2
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 fd26 	bl	80098f8 <RCCEx_PLL3_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007eb8:	4b87      	ldr	r3, [pc, #540]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ebc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec8:	4a83      	ldr	r2, [pc, #524]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f002 0310 	and.w	r3, r2, #16
 8007eda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ee4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4313      	orrs	r3, r2
 8007eec:	d01e      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007efa:	d10c      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f00:	3328      	adds	r3, #40	; 0x28
 8007f02:	2102      	movs	r1, #2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f001 fcf7 	bl	80098f8 <RCCEx_PLL3_Config>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f16:	4b70      	ldr	r3, [pc, #448]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f26:	4a6c      	ldr	r2, [pc, #432]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007f46:	460b      	mov	r3, r1
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	d03e      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f58:	d022      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007f5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f5e:	d81b      	bhi.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d00b      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007f6a:	e015      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f70:	3308      	adds	r3, #8
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f001 fc0d 	bl	8009794 <RCCEx_PLL2_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f80:	e00f      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f86:	3328      	adds	r3, #40	; 0x28
 8007f88:	2102      	movs	r1, #2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 fcb4 	bl	80098f8 <RCCEx_PLL3_Config>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f96:	e004      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f9e:	e000      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10b      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007faa:	4b4b      	ldr	r3, [pc, #300]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fba:	4a47      	ldr	r2, [pc, #284]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fbc:	430b      	orrs	r3, r1
 8007fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8007fc0:	e003      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007fd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fd8:	2300      	movs	r3, #0
 8007fda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fdc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	d03b      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ff2:	d01f      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007ff4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ff8:	d818      	bhi.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ffe:	d003      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008004:	d007      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008006:	e011      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008008:	4b33      	ldr	r3, [pc, #204]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	4a32      	ldr	r2, [pc, #200]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800800e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008014:	e00f      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801a:	3328      	adds	r3, #40	; 0x28
 800801c:	2101      	movs	r1, #1
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fc6a 	bl	80098f8 <RCCEx_PLL3_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800802a:	e004      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008032:	e000      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10b      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800803e:	4b26      	ldr	r3, [pc, #152]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008042:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804e:	4a22      	ldr	r2, [pc, #136]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008050:	430b      	orrs	r3, r1
 8008052:	6553      	str	r3, [r2, #84]	; 0x54
 8008054:	e003      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800805a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800806a:	673b      	str	r3, [r7, #112]	; 0x70
 800806c:	2300      	movs	r3, #0
 800806e:	677b      	str	r3, [r7, #116]	; 0x74
 8008070:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008074:	460b      	mov	r3, r1
 8008076:	4313      	orrs	r3, r2
 8008078:	d034      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008088:	d007      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800808a:	e011      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	4a11      	ldr	r2, [pc, #68]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008096:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008098:	e00e      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800809a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800809e:	3308      	adds	r3, #8
 80080a0:	2102      	movs	r1, #2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f001 fb76 	bl	8009794 <RCCEx_PLL2_Config>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080ae:	e003      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10d      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080c0:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ce:	4a02      	ldr	r2, [pc, #8]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080d0:	430b      	orrs	r3, r1
 80080d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080d4:	e006      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80080d6:	bf00      	nop
 80080d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80080f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80080f2:	2300      	movs	r3, #0
 80080f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80080fa:	460b      	mov	r3, r1
 80080fc:	4313      	orrs	r3, r2
 80080fe:	d00c      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008104:	3328      	adds	r3, #40	; 0x28
 8008106:	2102      	movs	r1, #2
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fbf5 	bl	80098f8 <RCCEx_PLL3_Config>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800811a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008126:	663b      	str	r3, [r7, #96]	; 0x60
 8008128:	2300      	movs	r3, #0
 800812a:	667b      	str	r3, [r7, #100]	; 0x64
 800812c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008130:	460b      	mov	r3, r1
 8008132:	4313      	orrs	r3, r2
 8008134:	d038      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800813a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800813e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008142:	d018      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008148:	d811      	bhi.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800814a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800814e:	d014      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008154:	d80b      	bhi.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d011      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800815a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800815e:	d106      	bne.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008160:	4bc3      	ldr	r3, [pc, #780]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	4ac2      	ldr	r2, [pc, #776]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800816a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800816c:	e008      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008174:	e004      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008176:	bf00      	nop
 8008178:	e002      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800817a:	bf00      	nop
 800817c:	e000      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800817e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10b      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008188:	4bb9      	ldr	r3, [pc, #740]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800818a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008198:	4ab5      	ldr	r2, [pc, #724]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800819a:	430b      	orrs	r3, r1
 800819c:	6553      	str	r3, [r2, #84]	; 0x54
 800819e:	e003      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80081b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80081b6:	2300      	movs	r3, #0
 80081b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80081be:	460b      	mov	r3, r1
 80081c0:	4313      	orrs	r3, r2
 80081c2:	d009      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081c4:	4baa      	ldr	r3, [pc, #680]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d2:	4aa7      	ldr	r2, [pc, #668]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d4:	430b      	orrs	r3, r1
 80081d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80081e4:	653b      	str	r3, [r7, #80]	; 0x50
 80081e6:	2300      	movs	r3, #0
 80081e8:	657b      	str	r3, [r7, #84]	; 0x54
 80081ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80081ee:	460b      	mov	r3, r1
 80081f0:	4313      	orrs	r3, r2
 80081f2:	d00a      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80081f4:	4b9e      	ldr	r3, [pc, #632]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008200:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008204:	4a9a      	ldr	r2, [pc, #616]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008206:	430b      	orrs	r3, r1
 8008208:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008216:	64bb      	str	r3, [r7, #72]	; 0x48
 8008218:	2300      	movs	r3, #0
 800821a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008220:	460b      	mov	r3, r1
 8008222:	4313      	orrs	r3, r2
 8008224:	d009      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008226:	4b92      	ldr	r3, [pc, #584]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800822e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008234:	4a8e      	ldr	r2, [pc, #568]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008236:	430b      	orrs	r3, r1
 8008238:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008246:	643b      	str	r3, [r7, #64]	; 0x40
 8008248:	2300      	movs	r3, #0
 800824a:	647b      	str	r3, [r7, #68]	; 0x44
 800824c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008250:	460b      	mov	r3, r1
 8008252:	4313      	orrs	r3, r2
 8008254:	d00e      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008256:	4b86      	ldr	r3, [pc, #536]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	4a85      	ldr	r2, [pc, #532]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800825c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008260:	6113      	str	r3, [r2, #16]
 8008262:	4b83      	ldr	r3, [pc, #524]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008264:	6919      	ldr	r1, [r3, #16]
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800826e:	4a80      	ldr	r2, [pc, #512]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008270:	430b      	orrs	r3, r1
 8008272:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008280:	63bb      	str	r3, [r7, #56]	; 0x38
 8008282:	2300      	movs	r3, #0
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008286:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800828a:	460b      	mov	r3, r1
 800828c:	4313      	orrs	r3, r2
 800828e:	d009      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008290:	4b77      	ldr	r3, [pc, #476]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008294:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800829c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829e:	4a74      	ldr	r2, [pc, #464]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082a0:	430b      	orrs	r3, r1
 80082a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80082b0:	633b      	str	r3, [r7, #48]	; 0x30
 80082b2:	2300      	movs	r3, #0
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
 80082b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80082ba:	460b      	mov	r3, r1
 80082bc:	4313      	orrs	r3, r2
 80082be:	d00a      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082c0:	4b6b      	ldr	r3, [pc, #428]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80082c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082d0:	4a67      	ldr	r2, [pc, #412]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082d2:	430b      	orrs	r3, r1
 80082d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80082d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	2100      	movs	r1, #0
 80082e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80082ec:	460b      	mov	r3, r1
 80082ee:	4313      	orrs	r3, r2
 80082f0:	d011      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f6:	3308      	adds	r3, #8
 80082f8:	2100      	movs	r1, #0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 fa4a 	bl	8009794 <RCCEx_PLL2_Config>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	2100      	movs	r1, #0
 8008320:	6239      	str	r1, [r7, #32]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
 8008328:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800832c:	460b      	mov	r3, r1
 800832e:	4313      	orrs	r3, r2
 8008330:	d011      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008336:	3308      	adds	r3, #8
 8008338:	2101      	movs	r1, #1
 800833a:	4618      	mov	r0, r3
 800833c:	f001 fa2a 	bl	8009794 <RCCEx_PLL2_Config>
 8008340:	4603      	mov	r3, r0
 8008342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008352:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	2100      	movs	r1, #0
 8008360:	61b9      	str	r1, [r7, #24]
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800836c:	460b      	mov	r3, r1
 800836e:	4313      	orrs	r3, r2
 8008370:	d011      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008376:	3308      	adds	r3, #8
 8008378:	2102      	movs	r1, #2
 800837a:	4618      	mov	r0, r3
 800837c:	f001 fa0a 	bl	8009794 <RCCEx_PLL2_Config>
 8008380:	4603      	mov	r3, r0
 8008382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	2100      	movs	r1, #0
 80083a0:	6139      	str	r1, [r7, #16]
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80083ac:	460b      	mov	r3, r1
 80083ae:	4313      	orrs	r3, r2
 80083b0:	d011      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b6:	3328      	adds	r3, #40	; 0x28
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 fa9c 	bl	80098f8 <RCCEx_PLL3_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80083c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	2100      	movs	r1, #0
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80083ec:	460b      	mov	r3, r1
 80083ee:	4313      	orrs	r3, r2
 80083f0:	d011      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f6:	3328      	adds	r3, #40	; 0x28
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 fa7c 	bl	80098f8 <RCCEx_PLL3_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008412:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	2100      	movs	r1, #0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	f003 0320 	and.w	r3, r3, #32
 8008426:	607b      	str	r3, [r7, #4]
 8008428:	e9d7 1200 	ldrd	r1, r2, [r7]
 800842c:	460b      	mov	r3, r1
 800842e:	4313      	orrs	r3, r2
 8008430:	d011      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008436:	3328      	adds	r3, #40	; 0x28
 8008438:	2102      	movs	r1, #2
 800843a:	4618      	mov	r0, r3
 800843c:	f001 fa5c 	bl	80098f8 <RCCEx_PLL3_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008456:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	e000      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
}
 8008464:	4618      	mov	r0, r3
 8008466:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800846a:	46bd      	mov	sp, r7
 800846c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008470:	58024400 	.word	0x58024400

08008474 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b090      	sub	sp, #64	; 0x40
 8008478:	af00      	add	r7, sp, #0
 800847a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800847e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008482:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008486:	430b      	orrs	r3, r1
 8008488:	f040 8094 	bne.w	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800848c:	4b9e      	ldr	r3, [pc, #632]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800848e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	2b04      	cmp	r3, #4
 800849a:	f200 8087 	bhi.w	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800849e:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084b9 	.word	0x080084b9
 80084a8:	080084e1 	.word	0x080084e1
 80084ac:	08008509 	.word	0x08008509
 80084b0:	080085a5 	.word	0x080085a5
 80084b4:	08008531 	.word	0x08008531
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084b8:	4b93      	ldr	r3, [pc, #588]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084c4:	d108      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ca:	4618      	mov	r0, r3
 80084cc:	f001 f810 	bl	80094f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d4:	f000 bd45 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084dc:	f000 bd41 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084e0:	4b89      	ldr	r3, [pc, #548]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084ec:	d108      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ee:	f107 0318 	add.w	r3, r7, #24
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fd54 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084fc:	f000 bd31 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008504:	f000 bd2d 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008508:	4b7f      	ldr	r3, [pc, #508]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008514:	d108      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008516:	f107 030c 	add.w	r3, r7, #12
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fe94 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008524:	f000 bd1d 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800852c:	f000 bd19 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008530:	4b75      	ldr	r3, [pc, #468]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008534:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008538:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800853a:	4b73      	ldr	r3, [pc, #460]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0304 	and.w	r3, r3, #4
 8008542:	2b04      	cmp	r3, #4
 8008544:	d10c      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008548:	2b00      	cmp	r3, #0
 800854a:	d109      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800854c:	4b6e      	ldr	r3, [pc, #440]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	08db      	lsrs	r3, r3, #3
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	4a6d      	ldr	r2, [pc, #436]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008558:	fa22 f303 	lsr.w	r3, r2, r3
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800855e:	e01f      	b.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008560:	4b69      	ldr	r3, [pc, #420]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800856c:	d106      	bne.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800856e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008574:	d102      	bne.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008576:	4b66      	ldr	r3, [pc, #408]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800857a:	e011      	b.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800857c:	4b62      	ldr	r3, [pc, #392]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008588:	d106      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008590:	d102      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008592:	4b60      	ldr	r3, [pc, #384]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008596:	e003      	b.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800859c:	f000 bce1 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085a0:	f000 bcdf 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085a4:	4b5c      	ldr	r3, [pc, #368]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a8:	f000 bcdb 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b0:	f000 bcd7 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80085b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80085bc:	430b      	orrs	r3, r1
 80085be:	f040 80ad 	bne.w	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80085c2:	4b51      	ldr	r3, [pc, #324]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80085ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d2:	d056      	beq.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085da:	f200 8090 	bhi.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	2bc0      	cmp	r3, #192	; 0xc0
 80085e2:	f000 8088 	beq.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	2bc0      	cmp	r3, #192	; 0xc0
 80085ea:	f200 8088 	bhi.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	2b80      	cmp	r3, #128	; 0x80
 80085f2:	d032      	beq.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	2b80      	cmp	r3, #128	; 0x80
 80085f8:	f200 8081 	bhi.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	2b40      	cmp	r3, #64	; 0x40
 8008606:	d014      	beq.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008608:	e079      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800860a:	4b3f      	ldr	r3, [pc, #252]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008616:	d108      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800861c:	4618      	mov	r0, r3
 800861e:	f000 ff67 	bl	80094f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008626:	f000 bc9c 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800862e:	f000 bc98 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008632:	4b35      	ldr	r3, [pc, #212]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800863a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800863e:	d108      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008640:	f107 0318 	add.w	r3, r7, #24
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fcab 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864e:	f000 bc88 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008656:	f000 bc84 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800865a:	4b2b      	ldr	r3, [pc, #172]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008666:	d108      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fdeb 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008676:	f000 bc74 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800867e:	f000 bc70 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008682:	4b21      	ldr	r3, [pc, #132]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008686:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800868a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800868c:	4b1e      	ldr	r3, [pc, #120]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b04      	cmp	r3, #4
 8008696:	d10c      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800869e:	4b1a      	ldr	r3, [pc, #104]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	08db      	lsrs	r3, r3, #3
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	4a18      	ldr	r2, [pc, #96]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80086aa:	fa22 f303 	lsr.w	r3, r2, r3
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b0:	e01f      	b.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086b2:	4b15      	ldr	r3, [pc, #84]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086be:	d106      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80086c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086c6:	d102      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086c8:	4b11      	ldr	r3, [pc, #68]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086cc:	e011      	b.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086ce:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086da:	d106      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086e2:	d102      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086e4:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80086e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e8:	e003      	b.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80086ee:	f000 bc38 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086f2:	f000 bc36 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086fa:	f000 bc32 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008702:	f000 bc2e 	b.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008706:	bf00      	nop
 8008708:	58024400 	.word	0x58024400
 800870c:	03d09000 	.word	0x03d09000
 8008710:	003d0900 	.word	0x003d0900
 8008714:	017d7840 	.word	0x017d7840
 8008718:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800871c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008720:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008724:	430b      	orrs	r3, r1
 8008726:	f040 809c 	bne.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800872a:	4b9e      	ldr	r3, [pc, #632]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800872c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800872e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008732:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800873a:	d054      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008742:	f200 808b 	bhi.w	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800874c:	f000 8083 	beq.w	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008756:	f200 8081 	bhi.w	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008760:	d02f      	beq.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008768:	d878      	bhi.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008776:	d012      	beq.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008778:	e070      	b.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800877a:	4b8a      	ldr	r3, [pc, #552]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008786:	d107      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800878c:	4618      	mov	r0, r3
 800878e:	f000 feaf 	bl	80094f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008796:	e3e4      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800879c:	e3e1      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800879e:	4b81      	ldr	r3, [pc, #516]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087aa:	d107      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ac:	f107 0318 	add.w	r3, r7, #24
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fbf5 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ba:	e3d2      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087c0:	e3cf      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087c2:	4b78      	ldr	r3, [pc, #480]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ce:	d107      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d0:	f107 030c 	add.w	r3, r7, #12
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fd37 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087de:	e3c0      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e4:	e3bd      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087e6:	4b6f      	ldr	r3, [pc, #444]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087f0:	4b6c      	ldr	r3, [pc, #432]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d10c      	bne.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80087fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008802:	4b68      	ldr	r3, [pc, #416]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	08db      	lsrs	r3, r3, #3
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	4a66      	ldr	r2, [pc, #408]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800880e:	fa22 f303 	lsr.w	r3, r2, r3
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008814:	e01e      	b.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008816:	4b63      	ldr	r3, [pc, #396]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008822:	d106      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800882a:	d102      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800882c:	4b5f      	ldr	r3, [pc, #380]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008830:	e010      	b.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008832:	4b5c      	ldr	r3, [pc, #368]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800883e:	d106      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008846:	d102      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008848:	4b59      	ldr	r3, [pc, #356]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800884c:	e002      	b.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008852:	e386      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008854:	e385      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008856:	4b57      	ldr	r3, [pc, #348]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800885a:	e382      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008860:	e37f      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008866:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800886a:	430b      	orrs	r3, r1
 800886c:	f040 80a7 	bne.w	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008870:	4b4c      	ldr	r3, [pc, #304]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008874:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008878:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008880:	d055      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008888:	f200 8096 	bhi.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008892:	f000 8084 	beq.w	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800889c:	f200 808c 	bhi.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088a6:	d030      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ae:	f200 8083 	bhi.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d004      	beq.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088be:	d012      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80088c0:	e07a      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088c2:	4b38      	ldr	r3, [pc, #224]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ce:	d107      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fe0b 	bl	80094f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088de:	e340      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e4:	e33d      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e6:	4b2f      	ldr	r3, [pc, #188]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088f2:	d107      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088f4:	f107 0318 	add.w	r3, r7, #24
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fb51 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008902:	e32e      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008908:	e32b      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800890a:	4b26      	ldr	r3, [pc, #152]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008916:	d107      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008918:	f107 030c 	add.w	r3, r7, #12
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fc93 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008926:	e31c      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892c:	e319      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800892e:	4b1d      	ldr	r3, [pc, #116]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008932:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008936:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008938:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b04      	cmp	r3, #4
 8008942:	d10c      	bne.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894a:	4b16      	ldr	r3, [pc, #88]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	08db      	lsrs	r3, r3, #3
 8008950:	f003 0303 	and.w	r3, r3, #3
 8008954:	4a14      	ldr	r2, [pc, #80]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008956:	fa22 f303 	lsr.w	r3, r2, r3
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800895c:	e01e      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800895e:	4b11      	ldr	r3, [pc, #68]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800896a:	d106      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008972:	d102      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008974:	4b0d      	ldr	r3, [pc, #52]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008978:	e010      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008986:	d106      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898e:	d102      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008994:	e002      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800899a:	e2e2      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800899c:	e2e1      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800899e:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089a2:	e2de      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089a4:	58024400 	.word	0x58024400
 80089a8:	03d09000 	.word	0x03d09000
 80089ac:	003d0900 	.word	0x003d0900
 80089b0:	017d7840 	.word	0x017d7840
 80089b4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089bc:	e2d1      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80089be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80089c6:	430b      	orrs	r3, r1
 80089c8:	f040 809c 	bne.w	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80089cc:	4b93      	ldr	r3, [pc, #588]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80089d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089dc:	d054      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089e4:	f200 808b 	bhi.w	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089ee:	f000 8083 	beq.w	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80089f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089f8:	f200 8081 	bhi.w	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a02:	d02f      	beq.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a0a:	d878      	bhi.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d004      	beq.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a18:	d012      	beq.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a1a:	e070      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a1c:	4b7f      	ldr	r3, [pc, #508]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a28:	d107      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fd5e 	bl	80094f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a38:	e293      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a3e:	e290      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a40:	4b76      	ldr	r3, [pc, #472]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a4e:	f107 0318 	add.w	r3, r7, #24
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 faa4 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a5c:	e281      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a62:	e27e      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a64:	4b6d      	ldr	r3, [pc, #436]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a70:	d107      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a72:	f107 030c 	add.w	r3, r7, #12
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 fbe6 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a80:	e26f      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a86:	e26c      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a88:	4b64      	ldr	r3, [pc, #400]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a92:	4b62      	ldr	r3, [pc, #392]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d10c      	bne.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d109      	bne.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aa4:	4b5d      	ldr	r3, [pc, #372]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	08db      	lsrs	r3, r3, #3
 8008aaa:	f003 0303 	and.w	r3, r3, #3
 8008aae:	4a5c      	ldr	r2, [pc, #368]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab6:	e01e      	b.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ab8:	4b58      	ldr	r3, [pc, #352]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac4:	d106      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008acc:	d102      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ace:	4b55      	ldr	r3, [pc, #340]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ad2:	e010      	b.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ad4:	4b51      	ldr	r3, [pc, #324]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ae0:	d106      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae8:	d102      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008aea:	4b4f      	ldr	r3, [pc, #316]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aee:	e002      	b.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008af4:	e235      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008af6:	e234      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008af8:	4b4c      	ldr	r3, [pc, #304]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008afc:	e231      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b02:	e22e      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b08:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	f040 808f 	bne.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b12:	4b42      	ldr	r3, [pc, #264]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b16:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008b1a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b22:	d06b      	beq.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b2a:	d874      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b32:	d056      	beq.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b3a:	d86c      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b42:	d03b      	beq.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b4a:	d864      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b52:	d021      	beq.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b5a:	d85c      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d004      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b68:	d004      	beq.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008b6a:	e054      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008b6c:	f7fe fa4c 	bl	8007008 <HAL_RCC_GetPCLK1Freq>
 8008b70:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b72:	e1f6      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b74:	4b29      	ldr	r3, [pc, #164]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b80:	d107      	bne.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b82:	f107 0318 	add.w	r3, r7, #24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fa0a 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b90:	e1e7      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b96:	e1e4      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b98:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba4:	d107      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba6:	f107 030c 	add.w	r3, r7, #12
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fb4c 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb4:	e1d5      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bba:	e1d2      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bbc:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d109      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	08db      	lsrs	r3, r3, #3
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	4a13      	ldr	r2, [pc, #76]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bda:	e1c2      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be0:	e1bf      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008be2:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bee:	d102      	bne.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008bf0:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf4:	e1b5      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bfa:	e1b2      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bfc:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c08:	d102      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c0e:	e1a8      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c14:	e1a5      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c1a:	e1a2      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	03d09000 	.word	0x03d09000
 8008c24:	003d0900 	.word	0x003d0900
 8008c28:	017d7840 	.word	0x017d7840
 8008c2c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c34:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	d173      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008c3c:	4b9c      	ldr	r3, [pc, #624]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c44:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c4c:	d02f      	beq.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c54:	d863      	bhi.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c62:	d012      	beq.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008c64:	e05b      	b.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c66:	4b92      	ldr	r3, [pc, #584]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c72:	d107      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c74:	f107 0318 	add.w	r3, r7, #24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 f991 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c82:	e16e      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c88:	e16b      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c8a:	4b89      	ldr	r3, [pc, #548]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c96:	d107      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c98:	f107 030c 	add.w	r3, r7, #12
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 fad3 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca6:	e15c      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cac:	e159      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cae:	4b80      	ldr	r3, [pc, #512]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cb8:	4b7d      	ldr	r3, [pc, #500]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d10c      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d109      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cca:	4b79      	ldr	r3, [pc, #484]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	08db      	lsrs	r3, r3, #3
 8008cd0:	f003 0303 	and.w	r3, r3, #3
 8008cd4:	4a77      	ldr	r2, [pc, #476]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cdc:	e01e      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cde:	4b74      	ldr	r3, [pc, #464]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cea:	d106      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cf2:	d102      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008cf4:	4b70      	ldr	r3, [pc, #448]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf8:	e010      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cfa:	4b6d      	ldr	r3, [pc, #436]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d06:	d106      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d0e:	d102      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d10:	4b6a      	ldr	r3, [pc, #424]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d14:	e002      	b.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d1a:	e122      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d1c:	e121      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d22:	e11e      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d28:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	d133      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d30:	4b5f      	ldr	r3, [pc, #380]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d004      	beq.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d46:	d012      	beq.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008d48:	e023      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d4a:	4b59      	ldr	r3, [pc, #356]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d56:	d107      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 fbc7 	bl	80094f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d66:	e0fc      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d6c:	e0f9      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d6e:	4b50      	ldr	r3, [pc, #320]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d7a:	d107      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d7c:	f107 0318 	add.w	r3, r7, #24
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 f90d 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d8a:	e0ea      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d90:	e0e7      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d96:	e0e4      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008da0:	430b      	orrs	r3, r1
 8008da2:	f040 808d 	bne.w	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008da6:	4b42      	ldr	r3, [pc, #264]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008daa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008dae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008db6:	d06b      	beq.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dbe:	d874      	bhi.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc6:	d056      	beq.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dce:	d86c      	bhi.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dd6:	d03b      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dde:	d864      	bhi.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008de6:	d021      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dee:	d85c      	bhi.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dfc:	d004      	beq.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008dfe:	e054      	b.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e00:	f000 f8b8 	bl	8008f74 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e04:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e06:	e0ac      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e08:	4b29      	ldr	r3, [pc, #164]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e14:	d107      	bne.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e16:	f107 0318 	add.w	r3, r7, #24
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f8c0 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e24:	e09d      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e2a:	e09a      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e2c:	4b20      	ldr	r3, [pc, #128]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e38:	d107      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e3a:	f107 030c 	add.w	r3, r7, #12
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fa02 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e48:	e08b      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e4e:	e088      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e50:	4b17      	ldr	r3, [pc, #92]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d109      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e5c:	4b14      	ldr	r3, [pc, #80]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	08db      	lsrs	r3, r3, #3
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	4a13      	ldr	r2, [pc, #76]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008e68:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6e:	e078      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e74:	e075      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e76:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e82:	d102      	bne.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008e84:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e88:	e06b      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e8e:	e068      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e90:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e9c:	d102      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008e9e:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea2:	e05e      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea8:	e05b      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eae:	e058      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008eb0:	58024400 	.word	0x58024400
 8008eb4:	03d09000 	.word	0x03d09000
 8008eb8:	003d0900 	.word	0x003d0900
 8008ebc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008ec8:	430b      	orrs	r3, r1
 8008eca:	d148      	bne.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ecc:	4b27      	ldr	r3, [pc, #156]	; (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ed4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008edc:	d02a      	beq.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee4:	d838      	bhi.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d004      	beq.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ef2:	d00d      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008ef4:	e030      	b.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ef6:	4b1d      	ldr	r3, [pc, #116]	; (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f02:	d102      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008f04:	4b1a      	ldr	r3, [pc, #104]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f08:	e02b      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f0e:	e028      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f10:	4b16      	ldr	r3, [pc, #88]	; (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f1c:	d107      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fae4 	bl	80094f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f2c:	e019      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f32:	e016      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f34:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f40:	d107      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f42:	f107 0318 	add.w	r3, r7, #24
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 f82a 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f50:	e007      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f56:	e004      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f5c:	e001      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3740      	adds	r7, #64	; 0x40
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	58024400 	.word	0x58024400
 8008f70:	017d7840 	.word	0x017d7840

08008f74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f78:	f7fe f816 	bl	8006fa8 <HAL_RCC_GetHCLKFreq>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	091b      	lsrs	r3, r3, #4
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	4904      	ldr	r1, [pc, #16]	; (8008f9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008f8a:	5ccb      	ldrb	r3, [r1, r3]
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	0800c9a4 	.word	0x0800c9a4

08008fa0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b089      	sub	sp, #36	; 0x24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fa8:	4ba1      	ldr	r3, [pc, #644]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	f003 0303 	and.w	r3, r3, #3
 8008fb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008fb2:	4b9f      	ldr	r3, [pc, #636]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb6:	0b1b      	lsrs	r3, r3, #12
 8008fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008fbe:	4b9c      	ldr	r3, [pc, #624]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008fca:	4b99      	ldr	r3, [pc, #612]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fce:	08db      	lsrs	r3, r3, #3
 8008fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	fb02 f303 	mul.w	r3, r2, r3
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 8111 	beq.w	8009210 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	f000 8083 	beq.w	80090fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	f200 80a1 	bhi.w	8009140 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d056      	beq.n	80090b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800900a:	e099      	b.n	8009140 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800900c:	4b88      	ldr	r3, [pc, #544]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0320 	and.w	r3, r3, #32
 8009014:	2b00      	cmp	r3, #0
 8009016:	d02d      	beq.n	8009074 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009018:	4b85      	ldr	r3, [pc, #532]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	08db      	lsrs	r3, r3, #3
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	4a84      	ldr	r2, [pc, #528]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009024:	fa22 f303 	lsr.w	r3, r2, r3
 8009028:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	ee07 3a90 	vmov	s15, r3
 8009030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	ee07 3a90 	vmov	s15, r3
 800903a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009042:	4b7b      	ldr	r3, [pc, #492]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009052:	ed97 6a03 	vldr	s12, [r7, #12]
 8009056:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800905a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800905e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800906a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009072:	e087      	b.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800923c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009086:	4b6a      	ldr	r3, [pc, #424]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009096:	ed97 6a03 	vldr	s12, [r7, #12]
 800909a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800909e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090b6:	e065      	b.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ca:	4b59      	ldr	r3, [pc, #356]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090da:	ed97 6a03 	vldr	s12, [r7, #12]
 80090de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090fa:	e043      	b.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800910a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910e:	4b48      	ldr	r3, [pc, #288]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009122:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800913e:	e021      	b.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800914e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009152:	4b37      	ldr	r3, [pc, #220]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009162:	ed97 6a03 	vldr	s12, [r7, #12]
 8009166:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800916a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009182:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009184:	4b2a      	ldr	r3, [pc, #168]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	0a5b      	lsrs	r3, r3, #9
 800918a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800919a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800919e:	edd7 6a07 	vldr	s13, [r7, #28]
 80091a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091aa:	ee17 2a90 	vmov	r2, s15
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80091b2:	4b1f      	ldr	r3, [pc, #124]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b6:	0c1b      	lsrs	r3, r3, #16
 80091b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091bc:	ee07 3a90 	vmov	s15, r3
 80091c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80091d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d8:	ee17 2a90 	vmov	r2, s15
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80091e0:	4b13      	ldr	r3, [pc, #76]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e4:	0e1b      	lsrs	r3, r3, #24
 80091e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ea:	ee07 3a90 	vmov	s15, r3
 80091ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80091fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009206:	ee17 2a90 	vmov	r2, s15
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800920e:	e008      	b.n	8009222 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	609a      	str	r2, [r3, #8]
}
 8009222:	bf00      	nop
 8009224:	3724      	adds	r7, #36	; 0x24
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400
 8009234:	03d09000 	.word	0x03d09000
 8009238:	46000000 	.word	0x46000000
 800923c:	4c742400 	.word	0x4c742400
 8009240:	4a742400 	.word	0x4a742400
 8009244:	4bbebc20 	.word	0x4bbebc20

08009248 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009248:	b480      	push	{r7}
 800924a:	b089      	sub	sp, #36	; 0x24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009250:	4ba1      	ldr	r3, [pc, #644]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	f003 0303 	and.w	r3, r3, #3
 8009258:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800925a:	4b9f      	ldr	r3, [pc, #636]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800925c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925e:	0d1b      	lsrs	r3, r3, #20
 8009260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009264:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009266:	4b9c      	ldr	r3, [pc, #624]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	0a1b      	lsrs	r3, r3, #8
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009272:	4b99      	ldr	r3, [pc, #612]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009276:	08db      	lsrs	r3, r3, #3
 8009278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	fb02 f303 	mul.w	r3, r2, r3
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8111 	beq.w	80094b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b02      	cmp	r3, #2
 800929a:	f000 8083 	beq.w	80093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	f200 80a1 	bhi.w	80093e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d056      	beq.n	8009360 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092b2:	e099      	b.n	80093e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092b4:	4b88      	ldr	r3, [pc, #544]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d02d      	beq.n	800931c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092c0:	4b85      	ldr	r3, [pc, #532]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	08db      	lsrs	r3, r3, #3
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	4a84      	ldr	r2, [pc, #528]	; (80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
 80092d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	ee07 3a90 	vmov	s15, r3
 80092d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ea:	4b7b      	ldr	r3, [pc, #492]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80092fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800930e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009316:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800931a:	e087      	b.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800932a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800932e:	4b6a      	ldr	r3, [pc, #424]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009342:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800934a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800934e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800935e:	e065      	b.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800936e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009372:	4b59      	ldr	r3, [pc, #356]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009382:	ed97 6a03 	vldr	s12, [r7, #12]
 8009386:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800938a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093a2:	e043      	b.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b6:	4b48      	ldr	r3, [pc, #288]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093e6:	e021      	b.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80093f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fa:	4b37      	ldr	r3, [pc, #220]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940a:	ed97 6a03 	vldr	s12, [r7, #12]
 800940e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800941e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800942a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800942c:	4b2a      	ldr	r3, [pc, #168]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800942e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009430:	0a5b      	lsrs	r3, r3, #9
 8009432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009446:	edd7 6a07 	vldr	s13, [r7, #28]
 800944a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800944e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009452:	ee17 2a90 	vmov	r2, s15
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800945a:	4b1f      	ldr	r3, [pc, #124]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	0c1b      	lsrs	r3, r3, #16
 8009460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009474:	edd7 6a07 	vldr	s13, [r7, #28]
 8009478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800947c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009480:	ee17 2a90 	vmov	r2, s15
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009488:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	0e1b      	lsrs	r3, r3, #24
 800948e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800949e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ae:	ee17 2a90 	vmov	r2, s15
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094b6:	e008      	b.n	80094ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	609a      	str	r2, [r3, #8]
}
 80094ca:	bf00      	nop
 80094cc:	3724      	adds	r7, #36	; 0x24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	58024400 	.word	0x58024400
 80094dc:	03d09000 	.word	0x03d09000
 80094e0:	46000000 	.word	0x46000000
 80094e4:	4c742400 	.word	0x4c742400
 80094e8:	4a742400 	.word	0x4a742400
 80094ec:	4bbebc20 	.word	0x4bbebc20

080094f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b089      	sub	sp, #36	; 0x24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094f8:	4ba0      	ldr	r3, [pc, #640]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	f003 0303 	and.w	r3, r3, #3
 8009500:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009502:	4b9e      	ldr	r3, [pc, #632]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	091b      	lsrs	r3, r3, #4
 8009508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800950c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800950e:	4b9b      	ldr	r3, [pc, #620]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009518:	4b98      	ldr	r3, [pc, #608]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800951a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951c:	08db      	lsrs	r3, r3, #3
 800951e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	fb02 f303 	mul.w	r3, r2, r3
 8009528:	ee07 3a90 	vmov	s15, r3
 800952c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009530:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 8111 	beq.w	800975e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	2b02      	cmp	r3, #2
 8009540:	f000 8083 	beq.w	800964a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	2b02      	cmp	r3, #2
 8009548:	f200 80a1 	bhi.w	800968e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d056      	beq.n	8009606 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009558:	e099      	b.n	800968e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800955a:	4b88      	ldr	r3, [pc, #544]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d02d      	beq.n	80095c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009566:	4b85      	ldr	r3, [pc, #532]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	08db      	lsrs	r3, r3, #3
 800956c:	f003 0303 	and.w	r3, r3, #3
 8009570:	4a83      	ldr	r2, [pc, #524]	; (8009780 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009572:	fa22 f303 	lsr.w	r3, r2, r3
 8009576:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	ee07 3a90 	vmov	s15, r3
 8009588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009590:	4b7a      	ldr	r3, [pc, #488]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009598:	ee07 3a90 	vmov	s15, r3
 800959c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009784 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095c0:	e087      	b.n	80096d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80095d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d4:	4b69      	ldr	r3, [pc, #420]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095dc:	ee07 3a90 	vmov	s15, r3
 80095e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009784 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009600:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009604:	e065      	b.n	80096d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009610:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800978c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009618:	4b58      	ldr	r3, [pc, #352]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009620:	ee07 3a90 	vmov	s15, r3
 8009624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009628:	ed97 6a03 	vldr	s12, [r7, #12]
 800962c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009784 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009648:	e043      	b.n	80096d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009654:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965c:	4b47      	ldr	r3, [pc, #284]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009664:	ee07 3a90 	vmov	s15, r3
 8009668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009670:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009784 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009688:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800968c:	e021      	b.n	80096d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	ee07 3a90 	vmov	s15, r3
 8009694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009698:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800969c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a0:	4b36      	ldr	r3, [pc, #216]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a8:	ee07 3a90 	vmov	s15, r3
 80096ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009784 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80096d2:	4b2a      	ldr	r3, [pc, #168]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d6:	0a5b      	lsrs	r3, r3, #9
 80096d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80096f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f8:	ee17 2a90 	vmov	r2, s15
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009700:	4b1e      	ldr	r3, [pc, #120]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	0c1b      	lsrs	r3, r3, #16
 8009706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800971a:	edd7 6a07 	vldr	s13, [r7, #28]
 800971e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009726:	ee17 2a90 	vmov	r2, s15
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800972e:	4b13      	ldr	r3, [pc, #76]	; (800977c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	0e1b      	lsrs	r3, r3, #24
 8009734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009738:	ee07 3a90 	vmov	s15, r3
 800973c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009744:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009748:	edd7 6a07 	vldr	s13, [r7, #28]
 800974c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009754:	ee17 2a90 	vmov	r2, s15
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800975c:	e008      	b.n	8009770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	609a      	str	r2, [r3, #8]
}
 8009770:	bf00      	nop
 8009772:	3724      	adds	r7, #36	; 0x24
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	58024400 	.word	0x58024400
 8009780:	03d09000 	.word	0x03d09000
 8009784:	46000000 	.word	0x46000000
 8009788:	4c742400 	.word	0x4c742400
 800978c:	4a742400 	.word	0x4a742400
 8009790:	4bbebc20 	.word	0x4bbebc20

08009794 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097a2:	4b53      	ldr	r3, [pc, #332]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80097a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a6:	f003 0303 	and.w	r3, r3, #3
 80097aa:	2b03      	cmp	r3, #3
 80097ac:	d101      	bne.n	80097b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e099      	b.n	80098e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097b2:	4b4f      	ldr	r3, [pc, #316]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a4e      	ldr	r2, [pc, #312]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80097b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097be:	f7f9 f96d 	bl	8002a9c <HAL_GetTick>
 80097c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097c4:	e008      	b.n	80097d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097c6:	f7f9 f969 	bl	8002a9c <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d901      	bls.n	80097d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e086      	b.n	80098e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097d8:	4b45      	ldr	r3, [pc, #276]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1f0      	bne.n	80097c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097e4:	4b42      	ldr	r3, [pc, #264]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80097e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	031b      	lsls	r3, r3, #12
 80097f2:	493f      	ldr	r1, [pc, #252]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	628b      	str	r3, [r1, #40]	; 0x28
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	3b01      	subs	r3, #1
 8009808:	025b      	lsls	r3, r3, #9
 800980a:	b29b      	uxth	r3, r3
 800980c:	431a      	orrs	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	3b01      	subs	r3, #1
 8009814:	041b      	lsls	r3, r3, #16
 8009816:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800981a:	431a      	orrs	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	3b01      	subs	r3, #1
 8009822:	061b      	lsls	r3, r3, #24
 8009824:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009828:	4931      	ldr	r1, [pc, #196]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 800982a:	4313      	orrs	r3, r2
 800982c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800982e:	4b30      	ldr	r3, [pc, #192]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 8009830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009832:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	492d      	ldr	r1, [pc, #180]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 800983c:	4313      	orrs	r3, r2
 800983e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009840:	4b2b      	ldr	r3, [pc, #172]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 8009842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009844:	f023 0220 	bic.w	r2, r3, #32
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	4928      	ldr	r1, [pc, #160]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 800984e:	4313      	orrs	r3, r2
 8009850:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009852:	4b27      	ldr	r3, [pc, #156]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	4a26      	ldr	r2, [pc, #152]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 8009858:	f023 0310 	bic.w	r3, r3, #16
 800985c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800985e:	4b24      	ldr	r3, [pc, #144]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 8009860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009862:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <RCCEx_PLL2_Config+0x160>)
 8009864:	4013      	ands	r3, r2
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	69d2      	ldr	r2, [r2, #28]
 800986a:	00d2      	lsls	r2, r2, #3
 800986c:	4920      	ldr	r1, [pc, #128]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 800986e:	4313      	orrs	r3, r2
 8009870:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009872:	4b1f      	ldr	r3, [pc, #124]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 8009874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009876:	4a1e      	ldr	r2, [pc, #120]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 8009878:	f043 0310 	orr.w	r3, r3, #16
 800987c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009884:	4b1a      	ldr	r3, [pc, #104]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	4a19      	ldr	r2, [pc, #100]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 800988a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800988e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009890:	e00f      	b.n	80098b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d106      	bne.n	80098a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009898:	4b15      	ldr	r3, [pc, #84]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	4a14      	ldr	r2, [pc, #80]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 800989e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80098a4:	e005      	b.n	80098b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098a6:	4b12      	ldr	r3, [pc, #72]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80098a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098aa:	4a11      	ldr	r2, [pc, #68]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80098ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098b2:	4b0f      	ldr	r3, [pc, #60]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a0e      	ldr	r2, [pc, #56]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80098b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098be:	f7f9 f8ed 	bl	8002a9c <HAL_GetTick>
 80098c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098c4:	e008      	b.n	80098d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098c6:	f7f9 f8e9 	bl	8002a9c <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d901      	bls.n	80098d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e006      	b.n	80098e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098d8:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <RCCEx_PLL2_Config+0x15c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0f0      	beq.n	80098c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	58024400 	.word	0x58024400
 80098f4:	ffff0007 	.word	0xffff0007

080098f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009906:	4b53      	ldr	r3, [pc, #332]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	2b03      	cmp	r3, #3
 8009910:	d101      	bne.n	8009916 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e099      	b.n	8009a4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009916:	4b4f      	ldr	r3, [pc, #316]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a4e      	ldr	r2, [pc, #312]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 800991c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009922:	f7f9 f8bb 	bl	8002a9c <HAL_GetTick>
 8009926:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009928:	e008      	b.n	800993c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800992a:	f7f9 f8b7 	bl	8002a9c <HAL_GetTick>
 800992e:	4602      	mov	r2, r0
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	2b02      	cmp	r3, #2
 8009936:	d901      	bls.n	800993c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e086      	b.n	8009a4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800993c:	4b45      	ldr	r3, [pc, #276]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1f0      	bne.n	800992a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009948:	4b42      	ldr	r3, [pc, #264]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 800994a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	051b      	lsls	r3, r3, #20
 8009956:	493f      	ldr	r1, [pc, #252]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009958:	4313      	orrs	r3, r2
 800995a:	628b      	str	r3, [r1, #40]	; 0x28
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	3b01      	subs	r3, #1
 8009962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	3b01      	subs	r3, #1
 800996c:	025b      	lsls	r3, r3, #9
 800996e:	b29b      	uxth	r3, r3
 8009970:	431a      	orrs	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	3b01      	subs	r3, #1
 8009978:	041b      	lsls	r3, r3, #16
 800997a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800997e:	431a      	orrs	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	3b01      	subs	r3, #1
 8009986:	061b      	lsls	r3, r3, #24
 8009988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800998c:	4931      	ldr	r1, [pc, #196]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 800998e:	4313      	orrs	r3, r2
 8009990:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009992:	4b30      	ldr	r3, [pc, #192]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	492d      	ldr	r1, [pc, #180]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099a4:	4b2b      	ldr	r3, [pc, #172]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	4928      	ldr	r1, [pc, #160]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099b6:	4b27      	ldr	r3, [pc, #156]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	4a26      	ldr	r2, [pc, #152]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099c2:	4b24      	ldr	r3, [pc, #144]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099c6:	4b24      	ldr	r3, [pc, #144]	; (8009a58 <RCCEx_PLL3_Config+0x160>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	69d2      	ldr	r2, [r2, #28]
 80099ce:	00d2      	lsls	r2, r2, #3
 80099d0:	4920      	ldr	r1, [pc, #128]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099d6:	4b1f      	ldr	r3, [pc, #124]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099da:	4a1e      	ldr	r2, [pc, #120]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d106      	bne.n	80099f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099e8:	4b1a      	ldr	r3, [pc, #104]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ec:	4a19      	ldr	r2, [pc, #100]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099f4:	e00f      	b.n	8009a16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d106      	bne.n	8009a0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099fc:	4b15      	ldr	r3, [pc, #84]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 80099fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a00:	4a14      	ldr	r2, [pc, #80]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009a02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a08:	e005      	b.n	8009a16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a0a:	4b12      	ldr	r3, [pc, #72]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	4a11      	ldr	r2, [pc, #68]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a16:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a0e      	ldr	r2, [pc, #56]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a22:	f7f9 f83b 	bl	8002a9c <HAL_GetTick>
 8009a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a28:	e008      	b.n	8009a3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a2a:	f7f9 f837 	bl	8002a9c <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d901      	bls.n	8009a3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e006      	b.n	8009a4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a3c:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <RCCEx_PLL3_Config+0x15c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0f0      	beq.n	8009a2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	58024400 	.word	0x58024400
 8009a58:	ffff0007 	.word	0xffff0007

08009a5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d071      	beq.n	8009b52 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d106      	bne.n	8009a88 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7f8 fb26 	bl	80020d4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	f003 0310 	and.w	r3, r3, #16
 8009a9a:	2b10      	cmp	r3, #16
 8009a9c:	d050      	beq.n	8009b40 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	22ca      	movs	r2, #202	; 0xca
 8009aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2253      	movs	r2, #83	; 0x53
 8009aac:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f87a 	bl	8009ba8 <RTC_EnterInitMode>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d124      	bne.n	8009b08 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6899      	ldr	r1, [r3, #8]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	4b24      	ldr	r3, [pc, #144]	; (8009b5c <HAL_RTC_Init+0x100>)
 8009aca:	400b      	ands	r3, r1
 8009acc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6899      	ldr	r1, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	431a      	orrs	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	0419      	lsls	r1, r3, #16
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	430a      	orrs	r2, r1
 8009afc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f886 	bl	8009c10 <RTC_ExitInitMode>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d113      	bne.n	8009b36 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f022 0203 	bic.w	r2, r2, #3
 8009b1c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	69da      	ldr	r2, [r3, #28]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	22ff      	movs	r2, #255	; 0xff
 8009b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8009b3e:	e001      	b.n	8009b44 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d103      	bne.n	8009b52 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	ff8fffbf 	.word	0xff8fffbf

08009b60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a0d      	ldr	r2, [pc, #52]	; (8009ba4 <HAL_RTC_WaitForSynchro+0x44>)
 8009b6e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009b70:	f7f8 ff94 	bl	8002a9c <HAL_GetTick>
 8009b74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b76:	e009      	b.n	8009b8c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b78:	f7f8 ff90 	bl	8002a9c <HAL_GetTick>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b86:	d901      	bls.n	8009b8c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e007      	b.n	8009b9c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	f003 0320 	and.w	r3, r3, #32
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0ee      	beq.n	8009b78 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	0003ff5f 	.word	0x0003ff5f

08009ba8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d120      	bne.n	8009c04 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009bcc:	f7f8 ff66 	bl	8002a9c <HAL_GetTick>
 8009bd0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009bd2:	e00d      	b.n	8009bf0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009bd4:	f7f8 ff62 	bl	8002a9c <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009be2:	d905      	bls.n	8009bf0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2203      	movs	r2, #3
 8009bec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d102      	bne.n	8009c04 <RTC_EnterInitMode+0x5c>
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d1e7      	bne.n	8009bd4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009c1c:	4b1a      	ldr	r3, [pc, #104]	; (8009c88 <RTC_ExitInitMode+0x78>)
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	4a19      	ldr	r2, [pc, #100]	; (8009c88 <RTC_ExitInitMode+0x78>)
 8009c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c26:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009c28:	4b17      	ldr	r3, [pc, #92]	; (8009c88 <RTC_ExitInitMode+0x78>)
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f003 0320 	and.w	r3, r3, #32
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10c      	bne.n	8009c4e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff ff93 	bl	8009b60 <HAL_RTC_WaitForSynchro>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01e      	beq.n	8009c7e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2203      	movs	r2, #3
 8009c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	73fb      	strb	r3, [r7, #15]
 8009c4c:	e017      	b.n	8009c7e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009c4e:	4b0e      	ldr	r3, [pc, #56]	; (8009c88 <RTC_ExitInitMode+0x78>)
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	4a0d      	ldr	r2, [pc, #52]	; (8009c88 <RTC_ExitInitMode+0x78>)
 8009c54:	f023 0320 	bic.w	r3, r3, #32
 8009c58:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff ff80 	bl	8009b60 <HAL_RTC_WaitForSynchro>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2203      	movs	r2, #3
 8009c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009c72:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <RTC_ExitInitMode+0x78>)
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	4a04      	ldr	r2, [pc, #16]	; (8009c88 <RTC_ExitInitMode+0x78>)
 8009c78:	f043 0320 	orr.w	r3, r3, #32
 8009c7c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	58004000 	.word	0x58004000

08009c8c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08a      	sub	sp, #40	; 0x28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e28e      	b.n	800a1bc <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009c9e:	f7f8 ff2d 	bl	8002afc <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d113      	bne.n	8009cd4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a96      	ldr	r2, [pc, #600]	; (8009f0c <HAL_SAI_Init+0x280>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d004      	beq.n	8009cc0 <HAL_SAI_Init+0x34>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a95      	ldr	r2, [pc, #596]	; (8009f10 <HAL_SAI_Init+0x284>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d107      	bne.n	8009cd0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d103      	bne.n	8009cd0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e273      	b.n	800a1bc <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a8c      	ldr	r2, [pc, #560]	; (8009f0c <HAL_SAI_Init+0x280>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d004      	beq.n	8009ce8 <HAL_SAI_Init+0x5c>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a8c      	ldr	r2, [pc, #560]	; (8009f14 <HAL_SAI_Init+0x288>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d102      	bne.n	8009cee <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009ce8:	4b8b      	ldr	r3, [pc, #556]	; (8009f18 <HAL_SAI_Init+0x28c>)
 8009cea:	61bb      	str	r3, [r7, #24]
 8009cec:	e028      	b.n	8009d40 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a8a      	ldr	r2, [pc, #552]	; (8009f1c <HAL_SAI_Init+0x290>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d004      	beq.n	8009d02 <HAL_SAI_Init+0x76>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a88      	ldr	r2, [pc, #544]	; (8009f20 <HAL_SAI_Init+0x294>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d102      	bne.n	8009d08 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009d02:	4b88      	ldr	r3, [pc, #544]	; (8009f24 <HAL_SAI_Init+0x298>)
 8009d04:	61bb      	str	r3, [r7, #24]
 8009d06:	e01b      	b.n	8009d40 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a86      	ldr	r2, [pc, #536]	; (8009f28 <HAL_SAI_Init+0x29c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d004      	beq.n	8009d1c <HAL_SAI_Init+0x90>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a85      	ldr	r2, [pc, #532]	; (8009f2c <HAL_SAI_Init+0x2a0>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d102      	bne.n	8009d22 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009d1c:	4b84      	ldr	r3, [pc, #528]	; (8009f30 <HAL_SAI_Init+0x2a4>)
 8009d1e:	61bb      	str	r3, [r7, #24]
 8009d20:	e00e      	b.n	8009d40 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a7a      	ldr	r2, [pc, #488]	; (8009f10 <HAL_SAI_Init+0x284>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d004      	beq.n	8009d36 <HAL_SAI_Init+0xaa>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a80      	ldr	r2, [pc, #512]	; (8009f34 <HAL_SAI_Init+0x2a8>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d102      	bne.n	8009d3c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8009d36:	4b80      	ldr	r3, [pc, #512]	; (8009f38 <HAL_SAI_Init+0x2ac>)
 8009d38:	61bb      	str	r3, [r7, #24]
 8009d3a:	e001      	b.n	8009d40 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e23d      	b.n	800a1bc <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d106      	bne.n	8009d5a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7f8 fc65 	bl	8002624 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa40 	bl	800a1e0 <SAI_Disable>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e228      	b.n	800a1bc <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2202      	movs	r2, #2
 8009d6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d00c      	beq.n	8009d94 <HAL_SAI_Init+0x108>
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d80d      	bhi.n	8009d9a <HAL_SAI_Init+0x10e>
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <HAL_SAI_Init+0xfc>
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d003      	beq.n	8009d8e <HAL_SAI_Init+0x102>
 8009d86:	e008      	b.n	8009d9a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009d8c:	e008      	b.n	8009da0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009d8e:	2310      	movs	r3, #16
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009d92:	e005      	b.n	8009da0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009d94:	2320      	movs	r3, #32
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009d98:	e002      	b.n	8009da0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009d9e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	2b05      	cmp	r3, #5
 8009da6:	d832      	bhi.n	8009e0e <HAL_SAI_Init+0x182>
 8009da8:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <HAL_SAI_Init+0x124>)
 8009daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dae:	bf00      	nop
 8009db0:	08009dc9 	.word	0x08009dc9
 8009db4:	08009dcf 	.word	0x08009dcf
 8009db8:	08009dd7 	.word	0x08009dd7
 8009dbc:	08009ddf 	.word	0x08009ddf
 8009dc0:	08009def 	.word	0x08009def
 8009dc4:	08009dff 	.word	0x08009dff
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	61fb      	str	r3, [r7, #28]
      break;
 8009dcc:	e022      	b.n	8009e14 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dd2:	61fb      	str	r3, [r7, #28]
      break;
 8009dd4:	e01e      	b.n	8009e14 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dda:	61fb      	str	r3, [r7, #28]
      break;
 8009ddc:	e01a      	b.n	8009e14 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009de2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	f043 0301 	orr.w	r3, r3, #1
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009dec:	e012      	b.n	8009e14 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009df2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	f043 0302 	orr.w	r3, r3, #2
 8009dfa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009dfc:	e00a      	b.n	8009e14 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e02:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	f043 0303 	orr.w	r3, r3, #3
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009e0c:	e002      	b.n	8009e14 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61fb      	str	r3, [r7, #28]
      break;
 8009e12:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e18:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 80c5 	beq.w	8009fae <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a37      	ldr	r2, [pc, #220]	; (8009f0c <HAL_SAI_Init+0x280>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d004      	beq.n	8009e3c <HAL_SAI_Init+0x1b0>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a37      	ldr	r2, [pc, #220]	; (8009f14 <HAL_SAI_Init+0x288>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d106      	bne.n	8009e4a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009e3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009e40:	f04f 0100 	mov.w	r1, #0
 8009e44:	f7fe fb16 	bl	8008474 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e48:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a33      	ldr	r2, [pc, #204]	; (8009f1c <HAL_SAI_Init+0x290>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d004      	beq.n	8009e5e <HAL_SAI_Init+0x1d2>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a31      	ldr	r2, [pc, #196]	; (8009f20 <HAL_SAI_Init+0x294>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d106      	bne.n	8009e6c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009e5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009e62:	f04f 0100 	mov.w	r1, #0
 8009e66:	f7fe fb05 	bl	8008474 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e6a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a2d      	ldr	r2, [pc, #180]	; (8009f28 <HAL_SAI_Init+0x29c>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d004      	beq.n	8009e80 <HAL_SAI_Init+0x1f4>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a2c      	ldr	r2, [pc, #176]	; (8009f2c <HAL_SAI_Init+0x2a0>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d106      	bne.n	8009e8e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009e80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009e84:	f04f 0100 	mov.w	r1, #0
 8009e88:	f7fe faf4 	bl	8008474 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e8c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a1f      	ldr	r2, [pc, #124]	; (8009f10 <HAL_SAI_Init+0x284>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d106      	bne.n	8009ea6 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009e98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009e9c:	f04f 0100 	mov.w	r1, #0
 8009ea0:	f7fe fae8 	bl	8008474 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ea4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a22      	ldr	r2, [pc, #136]	; (8009f34 <HAL_SAI_Init+0x2a8>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d106      	bne.n	8009ebe <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009eb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009eb4:	f04f 0100 	mov.w	r1, #0
 8009eb8:	f7fe fadc 	bl	8008474 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ebc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ec6:	d139      	bne.n	8009f3c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ecc:	2b04      	cmp	r3, #4
 8009ece:	d102      	bne.n	8009ed6 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009ed0:	2340      	movs	r3, #64	; 0x40
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e00a      	b.n	8009eec <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eda:	2b08      	cmp	r3, #8
 8009edc:	d103      	bne.n	8009ee6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	e002      	b.n	8009eec <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eea:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	fb02 f303 	mul.w	r3, r2, r3
 8009f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f06:	613b      	str	r3, [r7, #16]
 8009f08:	e030      	b.n	8009f6c <HAL_SAI_Init+0x2e0>
 8009f0a:	bf00      	nop
 8009f0c:	40015804 	.word	0x40015804
 8009f10:	58005404 	.word	0x58005404
 8009f14:	40015824 	.word	0x40015824
 8009f18:	40015800 	.word	0x40015800
 8009f1c:	40015c04 	.word	0x40015c04
 8009f20:	40015c24 	.word	0x40015c24
 8009f24:	40015c00 	.word	0x40015c00
 8009f28:	40016004 	.word	0x40016004
 8009f2c:	40016024 	.word	0x40016024
 8009f30:	40016000 	.word	0x40016000
 8009f34:	58005424 	.word	0x58005424
 8009f38:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f44:	d101      	bne.n	8009f4a <HAL_SAI_Init+0x2be>
 8009f46:	2302      	movs	r3, #2
 8009f48:	e000      	b.n	8009f4c <HAL_SAI_Init+0x2c0>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	4613      	mov	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	005b      	lsls	r3, r3, #1
 8009f58:	4619      	mov	r1, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	fb02 f303 	mul.w	r3, r2, r3
 8009f64:	021b      	lsls	r3, r3, #8
 8009f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f6a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	4a95      	ldr	r2, [pc, #596]	; (800a1c4 <HAL_SAI_Init+0x538>)
 8009f70:	fba2 2303 	umull	r2, r3, r2, r3
 8009f74:	08da      	lsrs	r2, r3, #3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009f7a:	6939      	ldr	r1, [r7, #16]
 8009f7c:	4b91      	ldr	r3, [pc, #580]	; (800a1c4 <HAL_SAI_Init+0x538>)
 8009f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8009f82:	08da      	lsrs	r2, r3, #3
 8009f84:	4613      	mov	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	1aca      	subs	r2, r1, r3
 8009f8e:	2a08      	cmp	r2, #8
 8009f90:	d904      	bls.n	8009f9c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	d104      	bne.n	8009fae <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	085a      	lsrs	r2, r3, #1
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <HAL_SAI_Init+0x332>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d109      	bne.n	8009fd2 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d101      	bne.n	8009fca <HAL_SAI_Init+0x33e>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e001      	b.n	8009fce <HAL_SAI_Init+0x342>
 8009fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fce:	623b      	str	r3, [r7, #32]
 8009fd0:	e008      	b.n	8009fe4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d102      	bne.n	8009fe0 <HAL_SAI_Init+0x354>
 8009fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fde:	e000      	b.n	8009fe2 <HAL_SAI_Init+0x356>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009fe4:	f7f8 fd8a 	bl	8002afc <HAL_GetREVID>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fee:	d331      	bcc.n	800a054 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6819      	ldr	r1, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	4b73      	ldr	r3, [pc, #460]	; (800a1c8 <HAL_SAI_Init+0x53c>)
 8009ffc:	400b      	ands	r3, r1
 8009ffe:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6819      	ldr	r1, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a014:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a01a:	431a      	orrs	r2, r3
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a028:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a034:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	051b      	lsls	r3, r3, #20
 800a03c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a042:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	e02d      	b.n	800a0b0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6819      	ldr	r1, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4b5b      	ldr	r3, [pc, #364]	; (800a1cc <HAL_SAI_Init+0x540>)
 800a060:	400b      	ands	r3, r1
 800a062:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6819      	ldr	r1, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a072:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a078:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a07e:	431a      	orrs	r2, r3
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a08c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a098:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	051b      	lsls	r3, r3, #20
 800a0a0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a0a6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6859      	ldr	r1, [r3, #4]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	4b45      	ldr	r3, [pc, #276]	; (800a1d0 <HAL_SAI_Init+0x544>)
 800a0bc:	400b      	ands	r3, r1
 800a0be:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6859      	ldr	r1, [r3, #4]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	69da      	ldr	r2, [r3, #28]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ce:	431a      	orrs	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d4:	431a      	orrs	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	6899      	ldr	r1, [r3, #8]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	4b3a      	ldr	r3, [pc, #232]	; (800a1d4 <HAL_SAI_Init+0x548>)
 800a0ea:	400b      	ands	r3, r1
 800a0ec:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6899      	ldr	r1, [r3, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a0fe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a104:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a10a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a110:	3b01      	subs	r3, #1
 800a112:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a114:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68d9      	ldr	r1, [r3, #12]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a12c:	400b      	ands	r3, r1
 800a12e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68d9      	ldr	r1, [r3, #12]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a13e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a144:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a146:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14c:	3b01      	subs	r3, #1
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <HAL_SAI_Init+0x54c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d004      	beq.n	800a16e <HAL_SAI_Init+0x4e2>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1c      	ldr	r2, [pc, #112]	; (800a1dc <HAL_SAI_Init+0x550>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d119      	bne.n	800a1a2 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a172:	f023 0201 	bic.w	r2, r3, #1
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a180:	2b01      	cmp	r3, #1
 800a182:	d10e      	bne.n	800a1a2 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18c:	3b01      	subs	r3, #1
 800a18e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a190:	431a      	orrs	r2, r3
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a19a:	f043 0201 	orr.w	r2, r3, #1
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3728      	adds	r7, #40	; 0x28
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	cccccccd 	.word	0xcccccccd
 800a1c8:	f005c010 	.word	0xf005c010
 800a1cc:	f805c010 	.word	0xf805c010
 800a1d0:	ffff1ff0 	.word	0xffff1ff0
 800a1d4:	fff88000 	.word	0xfff88000
 800a1d8:	40015804 	.word	0x40015804
 800a1dc:	58005404 	.word	0x58005404

0800a1e0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a1e8:	4b18      	ldr	r3, [pc, #96]	; (800a24c <SAI_Disable+0x6c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a18      	ldr	r2, [pc, #96]	; (800a250 <SAI_Disable+0x70>)
 800a1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f2:	0b1b      	lsrs	r3, r3, #12
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a20a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10a      	bne.n	800a228 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a218:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	72fb      	strb	r3, [r7, #11]
      break;
 800a226:	e009      	b.n	800a23c <SAI_Disable+0x5c>
    }
    count--;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e7      	bne.n	800a20c <SAI_Disable+0x2c>

  return status;
 800a23c:	7afb      	ldrb	r3, [r7, #11]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	24000000 	.word	0x24000000
 800a250:	95cbec1b 	.word	0x95cbec1b

0800a254 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e02b      	b.n	800a2c0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7f8 f9c7 	bl	8002610 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2202      	movs	r2, #2
 800a286:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3304      	adds	r3, #4
 800a292:	4619      	mov	r1, r3
 800a294:	4610      	mov	r0, r2
 800a296:	f001 fabd 	bl	800b814 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	f001 fb11 	bl	800b8cc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a2aa:	4b07      	ldr	r3, [pc, #28]	; (800a2c8 <HAL_SDRAM_Init+0x74>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a06      	ldr	r2, [pc, #24]	; (800a2c8 <HAL_SDRAM_Init+0x74>)
 800a2b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2b4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	52004000 	.word	0x52004000

0800a2cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e10f      	b.n	800a4fe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a87      	ldr	r2, [pc, #540]	; (800a508 <HAL_SPI_Init+0x23c>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d00f      	beq.n	800a30e <HAL_SPI_Init+0x42>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a86      	ldr	r2, [pc, #536]	; (800a50c <HAL_SPI_Init+0x240>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d00a      	beq.n	800a30e <HAL_SPI_Init+0x42>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a84      	ldr	r2, [pc, #528]	; (800a510 <HAL_SPI_Init+0x244>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d005      	beq.n	800a30e <HAL_SPI_Init+0x42>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	2b0f      	cmp	r3, #15
 800a308:	d901      	bls.n	800a30e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e0f7      	b.n	800a4fe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f900 	bl	800a514 <SPI_GetPacketSize>
 800a314:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a7b      	ldr	r2, [pc, #492]	; (800a508 <HAL_SPI_Init+0x23c>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d00c      	beq.n	800a33a <HAL_SPI_Init+0x6e>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a79      	ldr	r2, [pc, #484]	; (800a50c <HAL_SPI_Init+0x240>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d007      	beq.n	800a33a <HAL_SPI_Init+0x6e>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a78      	ldr	r2, [pc, #480]	; (800a510 <HAL_SPI_Init+0x244>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d002      	beq.n	800a33a <HAL_SPI_Init+0x6e>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b08      	cmp	r3, #8
 800a338:	d811      	bhi.n	800a35e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a33e:	4a72      	ldr	r2, [pc, #456]	; (800a508 <HAL_SPI_Init+0x23c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d009      	beq.n	800a358 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a70      	ldr	r2, [pc, #448]	; (800a50c <HAL_SPI_Init+0x240>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d004      	beq.n	800a358 <HAL_SPI_Init+0x8c>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a6f      	ldr	r2, [pc, #444]	; (800a510 <HAL_SPI_Init+0x244>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d104      	bne.n	800a362 <HAL_SPI_Init+0x96>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b10      	cmp	r3, #16
 800a35c:	d901      	bls.n	800a362 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e0cd      	b.n	800a4fe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d106      	bne.n	800a37c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7f7 fede 	bl	8002138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2202      	movs	r2, #2
 800a380:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 0201 	bic.w	r2, r2, #1
 800a392:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a39e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3a8:	d119      	bne.n	800a3de <HAL_SPI_Init+0x112>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3b2:	d103      	bne.n	800a3bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d008      	beq.n	800a3ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10c      	bne.n	800a3de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3cc:	d107      	bne.n	800a3de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00f      	beq.n	800a40a <HAL_SPI_Init+0x13e>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	2b06      	cmp	r3, #6
 800a3f0:	d90b      	bls.n	800a40a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	e007      	b.n	800a41a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a418:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	69da      	ldr	r2, [r3, #28]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a422:	431a      	orrs	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42c:	ea42 0103 	orr.w	r1, r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68da      	ldr	r2, [r3, #12]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	431a      	orrs	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	431a      	orrs	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	431a      	orrs	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	431a      	orrs	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	431a      	orrs	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	431a      	orrs	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	431a      	orrs	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a47a:	ea42 0103 	orr.w	r1, r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	430a      	orrs	r2, r1
 800a488:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d113      	bne.n	800a4ba <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0201 	bic.w	r2, r2, #1
 800a4c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	40013000 	.word	0x40013000
 800a50c:	40003800 	.word	0x40003800
 800a510:	40003c00 	.word	0x40003c00

0800a514 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a520:	095b      	lsrs	r3, r3, #5
 800a522:	3301      	adds	r3, #1
 800a524:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	3301      	adds	r3, #1
 800a52c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	3307      	adds	r3, #7
 800a532:	08db      	lsrs	r3, r3, #3
 800a534:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e042      	b.n	800a5e2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a562:	2b00      	cmp	r3, #0
 800a564:	d106      	bne.n	800a574 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7f7 feac 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2224      	movs	r2, #36	; 0x24
 800a578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 0201 	bic.w	r2, r2, #1
 800a58a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f8bb 	bl	800a708 <UART_SetConfig>
 800a592:	4603      	mov	r3, r0
 800a594:	2b01      	cmp	r3, #1
 800a596:	d101      	bne.n	800a59c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e022      	b.n	800a5e2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fe17 	bl	800b1d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	689a      	ldr	r2, [r3, #8]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f042 0201 	orr.w	r2, r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fe9e 	bl	800b31c <UART_CheckIdleState>
 800a5e0:	4603      	mov	r3, r0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b08a      	sub	sp, #40	; 0x28
 800a5ee:	af02      	add	r7, sp, #8
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	603b      	str	r3, [r7, #0]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a600:	2b20      	cmp	r3, #32
 800a602:	d17b      	bne.n	800a6fc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <HAL_UART_Transmit+0x26>
 800a60a:	88fb      	ldrh	r3, [r7, #6]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e074      	b.n	800a6fe <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2221      	movs	r2, #33	; 0x21
 800a620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a624:	f7f8 fa3a 	bl	8002a9c <HAL_GetTick>
 800a628:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	88fa      	ldrh	r2, [r7, #6]
 800a62e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	88fa      	ldrh	r2, [r7, #6]
 800a636:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a642:	d108      	bne.n	800a656 <HAL_UART_Transmit+0x6c>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d104      	bne.n	800a656 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	61bb      	str	r3, [r7, #24]
 800a654:	e003      	b.n	800a65e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a65e:	e030      	b.n	800a6c2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2200      	movs	r2, #0
 800a668:	2180      	movs	r1, #128	; 0x80
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 ff00 	bl	800b470 <UART_WaitOnFlagUntilTimeout>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d005      	beq.n	800a682 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2220      	movs	r2, #32
 800a67a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e03d      	b.n	800a6fe <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10b      	bne.n	800a6a0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a696:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	3302      	adds	r3, #2
 800a69c:	61bb      	str	r3, [r7, #24]
 800a69e:	e007      	b.n	800a6b0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	781a      	ldrb	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1c8      	bne.n	800a660 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2140      	movs	r1, #64	; 0x40
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 fec9 	bl	800b470 <UART_WaitOnFlagUntilTimeout>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e006      	b.n	800a6fe <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e000      	b.n	800a6fe <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a6fc:	2302      	movs	r3, #2
  }
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3720      	adds	r7, #32
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a70c:	b092      	sub	sp, #72	; 0x48
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	431a      	orrs	r2, r3
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	431a      	orrs	r2, r3
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	69db      	ldr	r3, [r3, #28]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	4bbe      	ldr	r3, [pc, #760]	; (800aa30 <UART_SetConfig+0x328>)
 800a738:	4013      	ands	r3, r2
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	6812      	ldr	r2, [r2, #0]
 800a73e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a740:	430b      	orrs	r3, r1
 800a742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	68da      	ldr	r2, [r3, #12]
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4ab3      	ldr	r2, [pc, #716]	; (800aa34 <UART_SetConfig+0x32c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d004      	beq.n	800a774 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a770:	4313      	orrs	r3, r2
 800a772:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	689a      	ldr	r2, [r3, #8]
 800a77a:	4baf      	ldr	r3, [pc, #700]	; (800aa38 <UART_SetConfig+0x330>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	6812      	ldr	r2, [r2, #0]
 800a782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a784:	430b      	orrs	r3, r1
 800a786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	f023 010f 	bic.w	r1, r3, #15
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4aa6      	ldr	r2, [pc, #664]	; (800aa3c <UART_SetConfig+0x334>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d177      	bne.n	800a898 <UART_SetConfig+0x190>
 800a7a8:	4ba5      	ldr	r3, [pc, #660]	; (800aa40 <UART_SetConfig+0x338>)
 800a7aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7b0:	2b28      	cmp	r3, #40	; 0x28
 800a7b2:	d86d      	bhi.n	800a890 <UART_SetConfig+0x188>
 800a7b4:	a201      	add	r2, pc, #4	; (adr r2, 800a7bc <UART_SetConfig+0xb4>)
 800a7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ba:	bf00      	nop
 800a7bc:	0800a861 	.word	0x0800a861
 800a7c0:	0800a891 	.word	0x0800a891
 800a7c4:	0800a891 	.word	0x0800a891
 800a7c8:	0800a891 	.word	0x0800a891
 800a7cc:	0800a891 	.word	0x0800a891
 800a7d0:	0800a891 	.word	0x0800a891
 800a7d4:	0800a891 	.word	0x0800a891
 800a7d8:	0800a891 	.word	0x0800a891
 800a7dc:	0800a869 	.word	0x0800a869
 800a7e0:	0800a891 	.word	0x0800a891
 800a7e4:	0800a891 	.word	0x0800a891
 800a7e8:	0800a891 	.word	0x0800a891
 800a7ec:	0800a891 	.word	0x0800a891
 800a7f0:	0800a891 	.word	0x0800a891
 800a7f4:	0800a891 	.word	0x0800a891
 800a7f8:	0800a891 	.word	0x0800a891
 800a7fc:	0800a871 	.word	0x0800a871
 800a800:	0800a891 	.word	0x0800a891
 800a804:	0800a891 	.word	0x0800a891
 800a808:	0800a891 	.word	0x0800a891
 800a80c:	0800a891 	.word	0x0800a891
 800a810:	0800a891 	.word	0x0800a891
 800a814:	0800a891 	.word	0x0800a891
 800a818:	0800a891 	.word	0x0800a891
 800a81c:	0800a879 	.word	0x0800a879
 800a820:	0800a891 	.word	0x0800a891
 800a824:	0800a891 	.word	0x0800a891
 800a828:	0800a891 	.word	0x0800a891
 800a82c:	0800a891 	.word	0x0800a891
 800a830:	0800a891 	.word	0x0800a891
 800a834:	0800a891 	.word	0x0800a891
 800a838:	0800a891 	.word	0x0800a891
 800a83c:	0800a881 	.word	0x0800a881
 800a840:	0800a891 	.word	0x0800a891
 800a844:	0800a891 	.word	0x0800a891
 800a848:	0800a891 	.word	0x0800a891
 800a84c:	0800a891 	.word	0x0800a891
 800a850:	0800a891 	.word	0x0800a891
 800a854:	0800a891 	.word	0x0800a891
 800a858:	0800a891 	.word	0x0800a891
 800a85c:	0800a889 	.word	0x0800a889
 800a860:	2301      	movs	r3, #1
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a866:	e222      	b.n	800acae <UART_SetConfig+0x5a6>
 800a868:	2304      	movs	r3, #4
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86e:	e21e      	b.n	800acae <UART_SetConfig+0x5a6>
 800a870:	2308      	movs	r3, #8
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a876:	e21a      	b.n	800acae <UART_SetConfig+0x5a6>
 800a878:	2310      	movs	r3, #16
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87e:	e216      	b.n	800acae <UART_SetConfig+0x5a6>
 800a880:	2320      	movs	r3, #32
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a886:	e212      	b.n	800acae <UART_SetConfig+0x5a6>
 800a888:	2340      	movs	r3, #64	; 0x40
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a88e:	e20e      	b.n	800acae <UART_SetConfig+0x5a6>
 800a890:	2380      	movs	r3, #128	; 0x80
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a896:	e20a      	b.n	800acae <UART_SetConfig+0x5a6>
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a69      	ldr	r2, [pc, #420]	; (800aa44 <UART_SetConfig+0x33c>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d130      	bne.n	800a904 <UART_SetConfig+0x1fc>
 800a8a2:	4b67      	ldr	r3, [pc, #412]	; (800aa40 <UART_SetConfig+0x338>)
 800a8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a6:	f003 0307 	and.w	r3, r3, #7
 800a8aa:	2b05      	cmp	r3, #5
 800a8ac:	d826      	bhi.n	800a8fc <UART_SetConfig+0x1f4>
 800a8ae:	a201      	add	r2, pc, #4	; (adr r2, 800a8b4 <UART_SetConfig+0x1ac>)
 800a8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b4:	0800a8cd 	.word	0x0800a8cd
 800a8b8:	0800a8d5 	.word	0x0800a8d5
 800a8bc:	0800a8dd 	.word	0x0800a8dd
 800a8c0:	0800a8e5 	.word	0x0800a8e5
 800a8c4:	0800a8ed 	.word	0x0800a8ed
 800a8c8:	0800a8f5 	.word	0x0800a8f5
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d2:	e1ec      	b.n	800acae <UART_SetConfig+0x5a6>
 800a8d4:	2304      	movs	r3, #4
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8da:	e1e8      	b.n	800acae <UART_SetConfig+0x5a6>
 800a8dc:	2308      	movs	r3, #8
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e2:	e1e4      	b.n	800acae <UART_SetConfig+0x5a6>
 800a8e4:	2310      	movs	r3, #16
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ea:	e1e0      	b.n	800acae <UART_SetConfig+0x5a6>
 800a8ec:	2320      	movs	r3, #32
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8f2:	e1dc      	b.n	800acae <UART_SetConfig+0x5a6>
 800a8f4:	2340      	movs	r3, #64	; 0x40
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fa:	e1d8      	b.n	800acae <UART_SetConfig+0x5a6>
 800a8fc:	2380      	movs	r3, #128	; 0x80
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a902:	e1d4      	b.n	800acae <UART_SetConfig+0x5a6>
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a4f      	ldr	r2, [pc, #316]	; (800aa48 <UART_SetConfig+0x340>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d130      	bne.n	800a970 <UART_SetConfig+0x268>
 800a90e:	4b4c      	ldr	r3, [pc, #304]	; (800aa40 <UART_SetConfig+0x338>)
 800a910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a912:	f003 0307 	and.w	r3, r3, #7
 800a916:	2b05      	cmp	r3, #5
 800a918:	d826      	bhi.n	800a968 <UART_SetConfig+0x260>
 800a91a:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <UART_SetConfig+0x218>)
 800a91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a920:	0800a939 	.word	0x0800a939
 800a924:	0800a941 	.word	0x0800a941
 800a928:	0800a949 	.word	0x0800a949
 800a92c:	0800a951 	.word	0x0800a951
 800a930:	0800a959 	.word	0x0800a959
 800a934:	0800a961 	.word	0x0800a961
 800a938:	2300      	movs	r3, #0
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93e:	e1b6      	b.n	800acae <UART_SetConfig+0x5a6>
 800a940:	2304      	movs	r3, #4
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a946:	e1b2      	b.n	800acae <UART_SetConfig+0x5a6>
 800a948:	2308      	movs	r3, #8
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94e:	e1ae      	b.n	800acae <UART_SetConfig+0x5a6>
 800a950:	2310      	movs	r3, #16
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a956:	e1aa      	b.n	800acae <UART_SetConfig+0x5a6>
 800a958:	2320      	movs	r3, #32
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95e:	e1a6      	b.n	800acae <UART_SetConfig+0x5a6>
 800a960:	2340      	movs	r3, #64	; 0x40
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a966:	e1a2      	b.n	800acae <UART_SetConfig+0x5a6>
 800a968:	2380      	movs	r3, #128	; 0x80
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a96e:	e19e      	b.n	800acae <UART_SetConfig+0x5a6>
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a35      	ldr	r2, [pc, #212]	; (800aa4c <UART_SetConfig+0x344>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d130      	bne.n	800a9dc <UART_SetConfig+0x2d4>
 800a97a:	4b31      	ldr	r3, [pc, #196]	; (800aa40 <UART_SetConfig+0x338>)
 800a97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a97e:	f003 0307 	and.w	r3, r3, #7
 800a982:	2b05      	cmp	r3, #5
 800a984:	d826      	bhi.n	800a9d4 <UART_SetConfig+0x2cc>
 800a986:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <UART_SetConfig+0x284>)
 800a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98c:	0800a9a5 	.word	0x0800a9a5
 800a990:	0800a9ad 	.word	0x0800a9ad
 800a994:	0800a9b5 	.word	0x0800a9b5
 800a998:	0800a9bd 	.word	0x0800a9bd
 800a99c:	0800a9c5 	.word	0x0800a9c5
 800a9a0:	0800a9cd 	.word	0x0800a9cd
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9aa:	e180      	b.n	800acae <UART_SetConfig+0x5a6>
 800a9ac:	2304      	movs	r3, #4
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b2:	e17c      	b.n	800acae <UART_SetConfig+0x5a6>
 800a9b4:	2308      	movs	r3, #8
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ba:	e178      	b.n	800acae <UART_SetConfig+0x5a6>
 800a9bc:	2310      	movs	r3, #16
 800a9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9c2:	e174      	b.n	800acae <UART_SetConfig+0x5a6>
 800a9c4:	2320      	movs	r3, #32
 800a9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ca:	e170      	b.n	800acae <UART_SetConfig+0x5a6>
 800a9cc:	2340      	movs	r3, #64	; 0x40
 800a9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d2:	e16c      	b.n	800acae <UART_SetConfig+0x5a6>
 800a9d4:	2380      	movs	r3, #128	; 0x80
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9da:	e168      	b.n	800acae <UART_SetConfig+0x5a6>
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a1b      	ldr	r2, [pc, #108]	; (800aa50 <UART_SetConfig+0x348>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d142      	bne.n	800aa6c <UART_SetConfig+0x364>
 800a9e6:	4b16      	ldr	r3, [pc, #88]	; (800aa40 <UART_SetConfig+0x338>)
 800a9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	2b05      	cmp	r3, #5
 800a9f0:	d838      	bhi.n	800aa64 <UART_SetConfig+0x35c>
 800a9f2:	a201      	add	r2, pc, #4	; (adr r2, 800a9f8 <UART_SetConfig+0x2f0>)
 800a9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f8:	0800aa11 	.word	0x0800aa11
 800a9fc:	0800aa19 	.word	0x0800aa19
 800aa00:	0800aa21 	.word	0x0800aa21
 800aa04:	0800aa29 	.word	0x0800aa29
 800aa08:	0800aa55 	.word	0x0800aa55
 800aa0c:	0800aa5d 	.word	0x0800aa5d
 800aa10:	2300      	movs	r3, #0
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa16:	e14a      	b.n	800acae <UART_SetConfig+0x5a6>
 800aa18:	2304      	movs	r3, #4
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1e:	e146      	b.n	800acae <UART_SetConfig+0x5a6>
 800aa20:	2308      	movs	r3, #8
 800aa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa26:	e142      	b.n	800acae <UART_SetConfig+0x5a6>
 800aa28:	2310      	movs	r3, #16
 800aa2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa2e:	e13e      	b.n	800acae <UART_SetConfig+0x5a6>
 800aa30:	cfff69f3 	.word	0xcfff69f3
 800aa34:	58000c00 	.word	0x58000c00
 800aa38:	11fff4ff 	.word	0x11fff4ff
 800aa3c:	40011000 	.word	0x40011000
 800aa40:	58024400 	.word	0x58024400
 800aa44:	40004400 	.word	0x40004400
 800aa48:	40004800 	.word	0x40004800
 800aa4c:	40004c00 	.word	0x40004c00
 800aa50:	40005000 	.word	0x40005000
 800aa54:	2320      	movs	r3, #32
 800aa56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5a:	e128      	b.n	800acae <UART_SetConfig+0x5a6>
 800aa5c:	2340      	movs	r3, #64	; 0x40
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa62:	e124      	b.n	800acae <UART_SetConfig+0x5a6>
 800aa64:	2380      	movs	r3, #128	; 0x80
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6a:	e120      	b.n	800acae <UART_SetConfig+0x5a6>
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4acb      	ldr	r2, [pc, #812]	; (800ada0 <UART_SetConfig+0x698>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d176      	bne.n	800ab64 <UART_SetConfig+0x45c>
 800aa76:	4bcb      	ldr	r3, [pc, #812]	; (800ada4 <UART_SetConfig+0x69c>)
 800aa78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa7e:	2b28      	cmp	r3, #40	; 0x28
 800aa80:	d86c      	bhi.n	800ab5c <UART_SetConfig+0x454>
 800aa82:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <UART_SetConfig+0x380>)
 800aa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa88:	0800ab2d 	.word	0x0800ab2d
 800aa8c:	0800ab5d 	.word	0x0800ab5d
 800aa90:	0800ab5d 	.word	0x0800ab5d
 800aa94:	0800ab5d 	.word	0x0800ab5d
 800aa98:	0800ab5d 	.word	0x0800ab5d
 800aa9c:	0800ab5d 	.word	0x0800ab5d
 800aaa0:	0800ab5d 	.word	0x0800ab5d
 800aaa4:	0800ab5d 	.word	0x0800ab5d
 800aaa8:	0800ab35 	.word	0x0800ab35
 800aaac:	0800ab5d 	.word	0x0800ab5d
 800aab0:	0800ab5d 	.word	0x0800ab5d
 800aab4:	0800ab5d 	.word	0x0800ab5d
 800aab8:	0800ab5d 	.word	0x0800ab5d
 800aabc:	0800ab5d 	.word	0x0800ab5d
 800aac0:	0800ab5d 	.word	0x0800ab5d
 800aac4:	0800ab5d 	.word	0x0800ab5d
 800aac8:	0800ab3d 	.word	0x0800ab3d
 800aacc:	0800ab5d 	.word	0x0800ab5d
 800aad0:	0800ab5d 	.word	0x0800ab5d
 800aad4:	0800ab5d 	.word	0x0800ab5d
 800aad8:	0800ab5d 	.word	0x0800ab5d
 800aadc:	0800ab5d 	.word	0x0800ab5d
 800aae0:	0800ab5d 	.word	0x0800ab5d
 800aae4:	0800ab5d 	.word	0x0800ab5d
 800aae8:	0800ab45 	.word	0x0800ab45
 800aaec:	0800ab5d 	.word	0x0800ab5d
 800aaf0:	0800ab5d 	.word	0x0800ab5d
 800aaf4:	0800ab5d 	.word	0x0800ab5d
 800aaf8:	0800ab5d 	.word	0x0800ab5d
 800aafc:	0800ab5d 	.word	0x0800ab5d
 800ab00:	0800ab5d 	.word	0x0800ab5d
 800ab04:	0800ab5d 	.word	0x0800ab5d
 800ab08:	0800ab4d 	.word	0x0800ab4d
 800ab0c:	0800ab5d 	.word	0x0800ab5d
 800ab10:	0800ab5d 	.word	0x0800ab5d
 800ab14:	0800ab5d 	.word	0x0800ab5d
 800ab18:	0800ab5d 	.word	0x0800ab5d
 800ab1c:	0800ab5d 	.word	0x0800ab5d
 800ab20:	0800ab5d 	.word	0x0800ab5d
 800ab24:	0800ab5d 	.word	0x0800ab5d
 800ab28:	0800ab55 	.word	0x0800ab55
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab32:	e0bc      	b.n	800acae <UART_SetConfig+0x5a6>
 800ab34:	2304      	movs	r3, #4
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3a:	e0b8      	b.n	800acae <UART_SetConfig+0x5a6>
 800ab3c:	2308      	movs	r3, #8
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab42:	e0b4      	b.n	800acae <UART_SetConfig+0x5a6>
 800ab44:	2310      	movs	r3, #16
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4a:	e0b0      	b.n	800acae <UART_SetConfig+0x5a6>
 800ab4c:	2320      	movs	r3, #32
 800ab4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab52:	e0ac      	b.n	800acae <UART_SetConfig+0x5a6>
 800ab54:	2340      	movs	r3, #64	; 0x40
 800ab56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab5a:	e0a8      	b.n	800acae <UART_SetConfig+0x5a6>
 800ab5c:	2380      	movs	r3, #128	; 0x80
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab62:	e0a4      	b.n	800acae <UART_SetConfig+0x5a6>
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a8f      	ldr	r2, [pc, #572]	; (800ada8 <UART_SetConfig+0x6a0>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d130      	bne.n	800abd0 <UART_SetConfig+0x4c8>
 800ab6e:	4b8d      	ldr	r3, [pc, #564]	; (800ada4 <UART_SetConfig+0x69c>)
 800ab70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b05      	cmp	r3, #5
 800ab78:	d826      	bhi.n	800abc8 <UART_SetConfig+0x4c0>
 800ab7a:	a201      	add	r2, pc, #4	; (adr r2, 800ab80 <UART_SetConfig+0x478>)
 800ab7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab80:	0800ab99 	.word	0x0800ab99
 800ab84:	0800aba1 	.word	0x0800aba1
 800ab88:	0800aba9 	.word	0x0800aba9
 800ab8c:	0800abb1 	.word	0x0800abb1
 800ab90:	0800abb9 	.word	0x0800abb9
 800ab94:	0800abc1 	.word	0x0800abc1
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab9e:	e086      	b.n	800acae <UART_SetConfig+0x5a6>
 800aba0:	2304      	movs	r3, #4
 800aba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba6:	e082      	b.n	800acae <UART_SetConfig+0x5a6>
 800aba8:	2308      	movs	r3, #8
 800abaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abae:	e07e      	b.n	800acae <UART_SetConfig+0x5a6>
 800abb0:	2310      	movs	r3, #16
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abb6:	e07a      	b.n	800acae <UART_SetConfig+0x5a6>
 800abb8:	2320      	movs	r3, #32
 800abba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abbe:	e076      	b.n	800acae <UART_SetConfig+0x5a6>
 800abc0:	2340      	movs	r3, #64	; 0x40
 800abc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abc6:	e072      	b.n	800acae <UART_SetConfig+0x5a6>
 800abc8:	2380      	movs	r3, #128	; 0x80
 800abca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abce:	e06e      	b.n	800acae <UART_SetConfig+0x5a6>
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a75      	ldr	r2, [pc, #468]	; (800adac <UART_SetConfig+0x6a4>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d130      	bne.n	800ac3c <UART_SetConfig+0x534>
 800abda:	4b72      	ldr	r3, [pc, #456]	; (800ada4 <UART_SetConfig+0x69c>)
 800abdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abde:	f003 0307 	and.w	r3, r3, #7
 800abe2:	2b05      	cmp	r3, #5
 800abe4:	d826      	bhi.n	800ac34 <UART_SetConfig+0x52c>
 800abe6:	a201      	add	r2, pc, #4	; (adr r2, 800abec <UART_SetConfig+0x4e4>)
 800abe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abec:	0800ac05 	.word	0x0800ac05
 800abf0:	0800ac0d 	.word	0x0800ac0d
 800abf4:	0800ac15 	.word	0x0800ac15
 800abf8:	0800ac1d 	.word	0x0800ac1d
 800abfc:	0800ac25 	.word	0x0800ac25
 800ac00:	0800ac2d 	.word	0x0800ac2d
 800ac04:	2300      	movs	r3, #0
 800ac06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac0a:	e050      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac0c:	2304      	movs	r3, #4
 800ac0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac12:	e04c      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac14:	2308      	movs	r3, #8
 800ac16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac1a:	e048      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac1c:	2310      	movs	r3, #16
 800ac1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac22:	e044      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac24:	2320      	movs	r3, #32
 800ac26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac2a:	e040      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac2c:	2340      	movs	r3, #64	; 0x40
 800ac2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac32:	e03c      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac34:	2380      	movs	r3, #128	; 0x80
 800ac36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac3a:	e038      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a5b      	ldr	r2, [pc, #364]	; (800adb0 <UART_SetConfig+0x6a8>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d130      	bne.n	800aca8 <UART_SetConfig+0x5a0>
 800ac46:	4b57      	ldr	r3, [pc, #348]	; (800ada4 <UART_SetConfig+0x69c>)
 800ac48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac4a:	f003 0307 	and.w	r3, r3, #7
 800ac4e:	2b05      	cmp	r3, #5
 800ac50:	d826      	bhi.n	800aca0 <UART_SetConfig+0x598>
 800ac52:	a201      	add	r2, pc, #4	; (adr r2, 800ac58 <UART_SetConfig+0x550>)
 800ac54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac58:	0800ac71 	.word	0x0800ac71
 800ac5c:	0800ac79 	.word	0x0800ac79
 800ac60:	0800ac81 	.word	0x0800ac81
 800ac64:	0800ac89 	.word	0x0800ac89
 800ac68:	0800ac91 	.word	0x0800ac91
 800ac6c:	0800ac99 	.word	0x0800ac99
 800ac70:	2302      	movs	r3, #2
 800ac72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac76:	e01a      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac78:	2304      	movs	r3, #4
 800ac7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac7e:	e016      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac80:	2308      	movs	r3, #8
 800ac82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac86:	e012      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac88:	2310      	movs	r3, #16
 800ac8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac8e:	e00e      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac90:	2320      	movs	r3, #32
 800ac92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac96:	e00a      	b.n	800acae <UART_SetConfig+0x5a6>
 800ac98:	2340      	movs	r3, #64	; 0x40
 800ac9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac9e:	e006      	b.n	800acae <UART_SetConfig+0x5a6>
 800aca0:	2380      	movs	r3, #128	; 0x80
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aca6:	e002      	b.n	800acae <UART_SetConfig+0x5a6>
 800aca8:	2380      	movs	r3, #128	; 0x80
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a3f      	ldr	r2, [pc, #252]	; (800adb0 <UART_SetConfig+0x6a8>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	f040 80f8 	bne.w	800aeaa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800acbe:	2b20      	cmp	r3, #32
 800acc0:	dc46      	bgt.n	800ad50 <UART_SetConfig+0x648>
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	f2c0 8082 	blt.w	800adcc <UART_SetConfig+0x6c4>
 800acc8:	3b02      	subs	r3, #2
 800acca:	2b1e      	cmp	r3, #30
 800accc:	d87e      	bhi.n	800adcc <UART_SetConfig+0x6c4>
 800acce:	a201      	add	r2, pc, #4	; (adr r2, 800acd4 <UART_SetConfig+0x5cc>)
 800acd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd4:	0800ad57 	.word	0x0800ad57
 800acd8:	0800adcd 	.word	0x0800adcd
 800acdc:	0800ad5f 	.word	0x0800ad5f
 800ace0:	0800adcd 	.word	0x0800adcd
 800ace4:	0800adcd 	.word	0x0800adcd
 800ace8:	0800adcd 	.word	0x0800adcd
 800acec:	0800ad6f 	.word	0x0800ad6f
 800acf0:	0800adcd 	.word	0x0800adcd
 800acf4:	0800adcd 	.word	0x0800adcd
 800acf8:	0800adcd 	.word	0x0800adcd
 800acfc:	0800adcd 	.word	0x0800adcd
 800ad00:	0800adcd 	.word	0x0800adcd
 800ad04:	0800adcd 	.word	0x0800adcd
 800ad08:	0800adcd 	.word	0x0800adcd
 800ad0c:	0800ad7f 	.word	0x0800ad7f
 800ad10:	0800adcd 	.word	0x0800adcd
 800ad14:	0800adcd 	.word	0x0800adcd
 800ad18:	0800adcd 	.word	0x0800adcd
 800ad1c:	0800adcd 	.word	0x0800adcd
 800ad20:	0800adcd 	.word	0x0800adcd
 800ad24:	0800adcd 	.word	0x0800adcd
 800ad28:	0800adcd 	.word	0x0800adcd
 800ad2c:	0800adcd 	.word	0x0800adcd
 800ad30:	0800adcd 	.word	0x0800adcd
 800ad34:	0800adcd 	.word	0x0800adcd
 800ad38:	0800adcd 	.word	0x0800adcd
 800ad3c:	0800adcd 	.word	0x0800adcd
 800ad40:	0800adcd 	.word	0x0800adcd
 800ad44:	0800adcd 	.word	0x0800adcd
 800ad48:	0800adcd 	.word	0x0800adcd
 800ad4c:	0800adbf 	.word	0x0800adbf
 800ad50:	2b40      	cmp	r3, #64	; 0x40
 800ad52:	d037      	beq.n	800adc4 <UART_SetConfig+0x6bc>
 800ad54:	e03a      	b.n	800adcc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ad56:	f7fe f90d 	bl	8008f74 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad5c:	e03c      	b.n	800add8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe f91c 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad6c:	e034      	b.n	800add8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad6e:	f107 0318 	add.w	r3, r7, #24
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe fa68 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad7c:	e02c      	b.n	800add8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad7e:	4b09      	ldr	r3, [pc, #36]	; (800ada4 <UART_SetConfig+0x69c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0320 	and.w	r3, r3, #32
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d016      	beq.n	800adb8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad8a:	4b06      	ldr	r3, [pc, #24]	; (800ada4 <UART_SetConfig+0x69c>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	08db      	lsrs	r3, r3, #3
 800ad90:	f003 0303 	and.w	r3, r3, #3
 800ad94:	4a07      	ldr	r2, [pc, #28]	; (800adb4 <UART_SetConfig+0x6ac>)
 800ad96:	fa22 f303 	lsr.w	r3, r2, r3
 800ad9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad9c:	e01c      	b.n	800add8 <UART_SetConfig+0x6d0>
 800ad9e:	bf00      	nop
 800ada0:	40011400 	.word	0x40011400
 800ada4:	58024400 	.word	0x58024400
 800ada8:	40007800 	.word	0x40007800
 800adac:	40007c00 	.word	0x40007c00
 800adb0:	58000c00 	.word	0x58000c00
 800adb4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800adb8:	4b9d      	ldr	r3, [pc, #628]	; (800b030 <UART_SetConfig+0x928>)
 800adba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adbc:	e00c      	b.n	800add8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800adbe:	4b9d      	ldr	r3, [pc, #628]	; (800b034 <UART_SetConfig+0x92c>)
 800adc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc2:	e009      	b.n	800add8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adca:	e005      	b.n	800add8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800adcc:	2300      	movs	r3, #0
 800adce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800add6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800add8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 81de 	beq.w	800b19c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade4:	4a94      	ldr	r2, [pc, #592]	; (800b038 <UART_SetConfig+0x930>)
 800ade6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adea:	461a      	mov	r2, r3
 800adec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adee:	fbb3 f3f2 	udiv	r3, r3, r2
 800adf2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	4613      	mov	r3, r2
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	4413      	add	r3, r2
 800adfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d305      	bcc.n	800ae10 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d903      	bls.n	800ae18 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ae16:	e1c1      	b.n	800b19c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	60bb      	str	r3, [r7, #8]
 800ae1e:	60fa      	str	r2, [r7, #12]
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae24:	4a84      	ldr	r2, [pc, #528]	; (800b038 <UART_SetConfig+0x930>)
 800ae26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	603b      	str	r3, [r7, #0]
 800ae30:	607a      	str	r2, [r7, #4]
 800ae32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae3a:	f7f5 faa9 	bl	8000390 <__aeabi_uldivmod>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	460b      	mov	r3, r1
 800ae42:	4610      	mov	r0, r2
 800ae44:	4619      	mov	r1, r3
 800ae46:	f04f 0200 	mov.w	r2, #0
 800ae4a:	f04f 0300 	mov.w	r3, #0
 800ae4e:	020b      	lsls	r3, r1, #8
 800ae50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae54:	0202      	lsls	r2, r0, #8
 800ae56:	6979      	ldr	r1, [r7, #20]
 800ae58:	6849      	ldr	r1, [r1, #4]
 800ae5a:	0849      	lsrs	r1, r1, #1
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	460c      	mov	r4, r1
 800ae60:	4605      	mov	r5, r0
 800ae62:	eb12 0804 	adds.w	r8, r2, r4
 800ae66:	eb43 0905 	adc.w	r9, r3, r5
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	469a      	mov	sl, r3
 800ae72:	4693      	mov	fp, r2
 800ae74:	4652      	mov	r2, sl
 800ae76:	465b      	mov	r3, fp
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	f7f5 fa88 	bl	8000390 <__aeabi_uldivmod>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4613      	mov	r3, r2
 800ae86:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae8e:	d308      	bcc.n	800aea2 <UART_SetConfig+0x79a>
 800ae90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae96:	d204      	bcs.n	800aea2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae9e:	60da      	str	r2, [r3, #12]
 800aea0:	e17c      	b.n	800b19c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aea8:	e178      	b.n	800b19c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeb2:	f040 80c5 	bne.w	800b040 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aeb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aeba:	2b20      	cmp	r3, #32
 800aebc:	dc48      	bgt.n	800af50 <UART_SetConfig+0x848>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	db7b      	blt.n	800afba <UART_SetConfig+0x8b2>
 800aec2:	2b20      	cmp	r3, #32
 800aec4:	d879      	bhi.n	800afba <UART_SetConfig+0x8b2>
 800aec6:	a201      	add	r2, pc, #4	; (adr r2, 800aecc <UART_SetConfig+0x7c4>)
 800aec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aecc:	0800af57 	.word	0x0800af57
 800aed0:	0800af5f 	.word	0x0800af5f
 800aed4:	0800afbb 	.word	0x0800afbb
 800aed8:	0800afbb 	.word	0x0800afbb
 800aedc:	0800af67 	.word	0x0800af67
 800aee0:	0800afbb 	.word	0x0800afbb
 800aee4:	0800afbb 	.word	0x0800afbb
 800aee8:	0800afbb 	.word	0x0800afbb
 800aeec:	0800af77 	.word	0x0800af77
 800aef0:	0800afbb 	.word	0x0800afbb
 800aef4:	0800afbb 	.word	0x0800afbb
 800aef8:	0800afbb 	.word	0x0800afbb
 800aefc:	0800afbb 	.word	0x0800afbb
 800af00:	0800afbb 	.word	0x0800afbb
 800af04:	0800afbb 	.word	0x0800afbb
 800af08:	0800afbb 	.word	0x0800afbb
 800af0c:	0800af87 	.word	0x0800af87
 800af10:	0800afbb 	.word	0x0800afbb
 800af14:	0800afbb 	.word	0x0800afbb
 800af18:	0800afbb 	.word	0x0800afbb
 800af1c:	0800afbb 	.word	0x0800afbb
 800af20:	0800afbb 	.word	0x0800afbb
 800af24:	0800afbb 	.word	0x0800afbb
 800af28:	0800afbb 	.word	0x0800afbb
 800af2c:	0800afbb 	.word	0x0800afbb
 800af30:	0800afbb 	.word	0x0800afbb
 800af34:	0800afbb 	.word	0x0800afbb
 800af38:	0800afbb 	.word	0x0800afbb
 800af3c:	0800afbb 	.word	0x0800afbb
 800af40:	0800afbb 	.word	0x0800afbb
 800af44:	0800afbb 	.word	0x0800afbb
 800af48:	0800afbb 	.word	0x0800afbb
 800af4c:	0800afad 	.word	0x0800afad
 800af50:	2b40      	cmp	r3, #64	; 0x40
 800af52:	d02e      	beq.n	800afb2 <UART_SetConfig+0x8aa>
 800af54:	e031      	b.n	800afba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af56:	f7fc f857 	bl	8007008 <HAL_RCC_GetPCLK1Freq>
 800af5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af5c:	e033      	b.n	800afc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af5e:	f7fc f869 	bl	8007034 <HAL_RCC_GetPCLK2Freq>
 800af62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af64:	e02f      	b.n	800afc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fe f818 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af74:	e027      	b.n	800afc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af76:	f107 0318 	add.w	r3, r7, #24
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe f964 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af84:	e01f      	b.n	800afc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af86:	4b2d      	ldr	r3, [pc, #180]	; (800b03c <UART_SetConfig+0x934>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0320 	and.w	r3, r3, #32
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d009      	beq.n	800afa6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af92:	4b2a      	ldr	r3, [pc, #168]	; (800b03c <UART_SetConfig+0x934>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	08db      	lsrs	r3, r3, #3
 800af98:	f003 0303 	and.w	r3, r3, #3
 800af9c:	4a24      	ldr	r2, [pc, #144]	; (800b030 <UART_SetConfig+0x928>)
 800af9e:	fa22 f303 	lsr.w	r3, r2, r3
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afa4:	e00f      	b.n	800afc6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800afa6:	4b22      	ldr	r3, [pc, #136]	; (800b030 <UART_SetConfig+0x928>)
 800afa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afaa:	e00c      	b.n	800afc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afac:	4b21      	ldr	r3, [pc, #132]	; (800b034 <UART_SetConfig+0x92c>)
 800afae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb0:	e009      	b.n	800afc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb8:	e005      	b.n	800afc6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800afc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800afc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 80e7 	beq.w	800b19c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	4a19      	ldr	r2, [pc, #100]	; (800b038 <UART_SetConfig+0x930>)
 800afd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afd8:	461a      	mov	r2, r3
 800afda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afdc:	fbb3 f3f2 	udiv	r3, r3, r2
 800afe0:	005a      	lsls	r2, r3, #1
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	085b      	lsrs	r3, r3, #1
 800afe8:	441a      	add	r2, r3
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff6:	2b0f      	cmp	r3, #15
 800aff8:	d916      	bls.n	800b028 <UART_SetConfig+0x920>
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b000:	d212      	bcs.n	800b028 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	b29b      	uxth	r3, r3
 800b006:	f023 030f 	bic.w	r3, r3, #15
 800b00a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	085b      	lsrs	r3, r3, #1
 800b010:	b29b      	uxth	r3, r3
 800b012:	f003 0307 	and.w	r3, r3, #7
 800b016:	b29a      	uxth	r2, r3
 800b018:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b01a:	4313      	orrs	r3, r2
 800b01c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b024:	60da      	str	r2, [r3, #12]
 800b026:	e0b9      	b.n	800b19c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b02e:	e0b5      	b.n	800b19c <UART_SetConfig+0xa94>
 800b030:	03d09000 	.word	0x03d09000
 800b034:	003d0900 	.word	0x003d0900
 800b038:	0800c9b4 	.word	0x0800c9b4
 800b03c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b044:	2b20      	cmp	r3, #32
 800b046:	dc49      	bgt.n	800b0dc <UART_SetConfig+0x9d4>
 800b048:	2b00      	cmp	r3, #0
 800b04a:	db7c      	blt.n	800b146 <UART_SetConfig+0xa3e>
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	d87a      	bhi.n	800b146 <UART_SetConfig+0xa3e>
 800b050:	a201      	add	r2, pc, #4	; (adr r2, 800b058 <UART_SetConfig+0x950>)
 800b052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b056:	bf00      	nop
 800b058:	0800b0e3 	.word	0x0800b0e3
 800b05c:	0800b0eb 	.word	0x0800b0eb
 800b060:	0800b147 	.word	0x0800b147
 800b064:	0800b147 	.word	0x0800b147
 800b068:	0800b0f3 	.word	0x0800b0f3
 800b06c:	0800b147 	.word	0x0800b147
 800b070:	0800b147 	.word	0x0800b147
 800b074:	0800b147 	.word	0x0800b147
 800b078:	0800b103 	.word	0x0800b103
 800b07c:	0800b147 	.word	0x0800b147
 800b080:	0800b147 	.word	0x0800b147
 800b084:	0800b147 	.word	0x0800b147
 800b088:	0800b147 	.word	0x0800b147
 800b08c:	0800b147 	.word	0x0800b147
 800b090:	0800b147 	.word	0x0800b147
 800b094:	0800b147 	.word	0x0800b147
 800b098:	0800b113 	.word	0x0800b113
 800b09c:	0800b147 	.word	0x0800b147
 800b0a0:	0800b147 	.word	0x0800b147
 800b0a4:	0800b147 	.word	0x0800b147
 800b0a8:	0800b147 	.word	0x0800b147
 800b0ac:	0800b147 	.word	0x0800b147
 800b0b0:	0800b147 	.word	0x0800b147
 800b0b4:	0800b147 	.word	0x0800b147
 800b0b8:	0800b147 	.word	0x0800b147
 800b0bc:	0800b147 	.word	0x0800b147
 800b0c0:	0800b147 	.word	0x0800b147
 800b0c4:	0800b147 	.word	0x0800b147
 800b0c8:	0800b147 	.word	0x0800b147
 800b0cc:	0800b147 	.word	0x0800b147
 800b0d0:	0800b147 	.word	0x0800b147
 800b0d4:	0800b147 	.word	0x0800b147
 800b0d8:	0800b139 	.word	0x0800b139
 800b0dc:	2b40      	cmp	r3, #64	; 0x40
 800b0de:	d02e      	beq.n	800b13e <UART_SetConfig+0xa36>
 800b0e0:	e031      	b.n	800b146 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0e2:	f7fb ff91 	bl	8007008 <HAL_RCC_GetPCLK1Freq>
 800b0e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b0e8:	e033      	b.n	800b152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0ea:	f7fb ffa3 	bl	8007034 <HAL_RCC_GetPCLK2Freq>
 800b0ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b0f0:	e02f      	b.n	800b152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fd ff52 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b100:	e027      	b.n	800b152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b102:	f107 0318 	add.w	r3, r7, #24
 800b106:	4618      	mov	r0, r3
 800b108:	f7fe f89e 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b110:	e01f      	b.n	800b152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b112:	4b2d      	ldr	r3, [pc, #180]	; (800b1c8 <UART_SetConfig+0xac0>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0320 	and.w	r3, r3, #32
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d009      	beq.n	800b132 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b11e:	4b2a      	ldr	r3, [pc, #168]	; (800b1c8 <UART_SetConfig+0xac0>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	08db      	lsrs	r3, r3, #3
 800b124:	f003 0303 	and.w	r3, r3, #3
 800b128:	4a28      	ldr	r2, [pc, #160]	; (800b1cc <UART_SetConfig+0xac4>)
 800b12a:	fa22 f303 	lsr.w	r3, r2, r3
 800b12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b130:	e00f      	b.n	800b152 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b132:	4b26      	ldr	r3, [pc, #152]	; (800b1cc <UART_SetConfig+0xac4>)
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b136:	e00c      	b.n	800b152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b138:	4b25      	ldr	r3, [pc, #148]	; (800b1d0 <UART_SetConfig+0xac8>)
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b13c:	e009      	b.n	800b152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b13e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b144:	e005      	b.n	800b152 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b146:	2300      	movs	r3, #0
 800b148:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b150:	bf00      	nop
    }

    if (pclk != 0U)
 800b152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b154:	2b00      	cmp	r3, #0
 800b156:	d021      	beq.n	800b19c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	4a1d      	ldr	r2, [pc, #116]	; (800b1d4 <UART_SetConfig+0xacc>)
 800b15e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b162:	461a      	mov	r2, r3
 800b164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b166:	fbb3 f2f2 	udiv	r2, r3, r2
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	085b      	lsrs	r3, r3, #1
 800b170:	441a      	add	r2, r3
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	fbb2 f3f3 	udiv	r3, r2, r3
 800b17a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	2b0f      	cmp	r3, #15
 800b180:	d909      	bls.n	800b196 <UART_SetConfig+0xa8e>
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b188:	d205      	bcs.n	800b196 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	60da      	str	r2, [r3, #12]
 800b194:	e002      	b.n	800b19c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b1b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3748      	adds	r7, #72	; 0x48
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1c6:	bf00      	nop
 800b1c8:	58024400 	.word	0x58024400
 800b1cc:	03d09000 	.word	0x03d09000
 800b1d0:	003d0900 	.word	0x003d0900
 800b1d4:	0800c9b4 	.word	0x0800c9b4

0800b1d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00a      	beq.n	800b202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b206:	f003 0302 	and.w	r3, r3, #2
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00a      	beq.n	800b224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	430a      	orrs	r2, r1
 800b222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00a      	beq.n	800b246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24a:	f003 0308 	and.w	r3, r3, #8
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00a      	beq.n	800b268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	430a      	orrs	r2, r1
 800b266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26c:	f003 0310 	and.w	r3, r3, #16
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00a      	beq.n	800b28a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28e:	f003 0320 	and.w	r3, r3, #32
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d01a      	beq.n	800b2ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2d6:	d10a      	bne.n	800b2ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00a      	beq.n	800b310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	430a      	orrs	r2, r1
 800b30e:	605a      	str	r2, [r3, #4]
  }
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b098      	sub	sp, #96	; 0x60
 800b320:	af02      	add	r7, sp, #8
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b32c:	f7f7 fbb6 	bl	8002a9c <HAL_GetTick>
 800b330:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0308 	and.w	r3, r3, #8
 800b33c:	2b08      	cmp	r3, #8
 800b33e:	d12f      	bne.n	800b3a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b348:	2200      	movs	r2, #0
 800b34a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f88e 	bl	800b470 <UART_WaitOnFlagUntilTimeout>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d022      	beq.n	800b3a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b362:	e853 3f00 	ldrex	r3, [r3]
 800b366:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b36e:	653b      	str	r3, [r7, #80]	; 0x50
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b378:	647b      	str	r3, [r7, #68]	; 0x44
 800b37a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b37e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b380:	e841 2300 	strex	r3, r2, [r1]
 800b384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e6      	bne.n	800b35a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2220      	movs	r2, #32
 800b390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b39c:	2303      	movs	r3, #3
 800b39e:	e063      	b.n	800b468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0304 	and.w	r3, r3, #4
 800b3aa:	2b04      	cmp	r3, #4
 800b3ac:	d149      	bne.n	800b442 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f857 	bl	800b470 <UART_WaitOnFlagUntilTimeout>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d03c      	beq.n	800b442 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e6:	633b      	str	r3, [r7, #48]	; 0x30
 800b3e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ee:	e841 2300 	strex	r3, r2, [r1]
 800b3f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1e6      	bne.n	800b3c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3308      	adds	r3, #8
 800b400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	60fb      	str	r3, [r7, #12]
   return(result);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f023 0301 	bic.w	r3, r3, #1
 800b410:	64bb      	str	r3, [r7, #72]	; 0x48
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3308      	adds	r3, #8
 800b418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b41a:	61fa      	str	r2, [r7, #28]
 800b41c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41e:	69b9      	ldr	r1, [r7, #24]
 800b420:	69fa      	ldr	r2, [r7, #28]
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	617b      	str	r3, [r7, #20]
   return(result);
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e5      	bne.n	800b3fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e012      	b.n	800b468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2220      	movs	r2, #32
 800b446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2220      	movs	r2, #32
 800b44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3758      	adds	r7, #88	; 0x58
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	603b      	str	r3, [r7, #0]
 800b47c:	4613      	mov	r3, r2
 800b47e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b480:	e049      	b.n	800b516 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b488:	d045      	beq.n	800b516 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b48a:	f7f7 fb07 	bl	8002a9c <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	69ba      	ldr	r2, [r7, #24]
 800b496:	429a      	cmp	r2, r3
 800b498:	d302      	bcc.n	800b4a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	e048      	b.n	800b536 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0304 	and.w	r3, r3, #4
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d031      	beq.n	800b516 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	69db      	ldr	r3, [r3, #28]
 800b4b8:	f003 0308 	and.w	r3, r3, #8
 800b4bc:	2b08      	cmp	r3, #8
 800b4be:	d110      	bne.n	800b4e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2208      	movs	r2, #8
 800b4c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 f839 	bl	800b540 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e029      	b.n	800b536 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4f0:	d111      	bne.n	800b516 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f000 f81f 	bl	800b540 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2220      	movs	r2, #32
 800b506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b512:	2303      	movs	r3, #3
 800b514:	e00f      	b.n	800b536 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	69da      	ldr	r2, [r3, #28]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	4013      	ands	r3, r2
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	429a      	cmp	r2, r3
 800b524:	bf0c      	ite	eq
 800b526:	2301      	moveq	r3, #1
 800b528:	2300      	movne	r3, #0
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	461a      	mov	r2, r3
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	429a      	cmp	r2, r3
 800b532:	d0a6      	beq.n	800b482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
	...

0800b540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b540:	b480      	push	{r7}
 800b542:	b095      	sub	sp, #84	; 0x54
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b55c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b566:	643b      	str	r3, [r7, #64]	; 0x40
 800b568:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b56c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b56e:	e841 2300 	strex	r3, r2, [r1]
 800b572:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e6      	bne.n	800b548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3308      	adds	r3, #8
 800b580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	e853 3f00 	ldrex	r3, [r3]
 800b588:	61fb      	str	r3, [r7, #28]
   return(result);
 800b58a:	69fa      	ldr	r2, [r7, #28]
 800b58c:	4b1e      	ldr	r3, [pc, #120]	; (800b608 <UART_EndRxTransfer+0xc8>)
 800b58e:	4013      	ands	r3, r2
 800b590:	64bb      	str	r3, [r7, #72]	; 0x48
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3308      	adds	r3, #8
 800b598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b59a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b59c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5a2:	e841 2300 	strex	r3, r2, [r1]
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1e5      	bne.n	800b57a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d118      	bne.n	800b5e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	e853 3f00 	ldrex	r3, [r3]
 800b5c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	f023 0310 	bic.w	r3, r3, #16
 800b5ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5d4:	61bb      	str	r3, [r7, #24]
 800b5d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d8:	6979      	ldr	r1, [r7, #20]
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	e841 2300 	strex	r3, r2, [r1]
 800b5e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e6      	bne.n	800b5b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2220      	movs	r2, #32
 800b5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b5fc:	bf00      	nop
 800b5fe:	3754      	adds	r7, #84	; 0x54
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	effffffe 	.word	0xeffffffe

0800b60c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d101      	bne.n	800b622 <HAL_UARTEx_DisableFifoMode+0x16>
 800b61e:	2302      	movs	r3, #2
 800b620:	e027      	b.n	800b672 <HAL_UARTEx_DisableFifoMode+0x66>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2224      	movs	r2, #36	; 0x24
 800b62e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 0201 	bic.w	r2, r2, #1
 800b648:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b650:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2220      	movs	r2, #32
 800b664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d101      	bne.n	800b696 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b692:	2302      	movs	r3, #2
 800b694:	e02d      	b.n	800b6f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2224      	movs	r2, #36	; 0x24
 800b6a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f022 0201 	bic.w	r2, r2, #1
 800b6bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f850 	bl	800b778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d101      	bne.n	800b712 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b70e:	2302      	movs	r3, #2
 800b710:	e02d      	b.n	800b76e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2224      	movs	r2, #36	; 0x24
 800b71e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f022 0201 	bic.w	r2, r2, #1
 800b738:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f812 	bl	800b778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2220      	movs	r2, #32
 800b760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
	...

0800b778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b784:	2b00      	cmp	r3, #0
 800b786:	d108      	bne.n	800b79a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b798:	e031      	b.n	800b7fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b79a:	2310      	movs	r3, #16
 800b79c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b79e:	2310      	movs	r3, #16
 800b7a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	0e5b      	lsrs	r3, r3, #25
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	f003 0307 	and.w	r3, r3, #7
 800b7b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	0f5b      	lsrs	r3, r3, #29
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	f003 0307 	and.w	r3, r3, #7
 800b7c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
 800b7c4:	7b3a      	ldrb	r2, [r7, #12]
 800b7c6:	4911      	ldr	r1, [pc, #68]	; (800b80c <UARTEx_SetNbDataToProcess+0x94>)
 800b7c8:	5c8a      	ldrb	r2, [r1, r2]
 800b7ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7ce:	7b3a      	ldrb	r2, [r7, #12]
 800b7d0:	490f      	ldr	r1, [pc, #60]	; (800b810 <UARTEx_SetNbDataToProcess+0x98>)
 800b7d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	7b7a      	ldrb	r2, [r7, #13]
 800b7e4:	4909      	ldr	r1, [pc, #36]	; (800b80c <UARTEx_SetNbDataToProcess+0x94>)
 800b7e6:	5c8a      	ldrb	r2, [r1, r2]
 800b7e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b7ec:	7b7a      	ldrb	r2, [r7, #13]
 800b7ee:	4908      	ldr	r1, [pc, #32]	; (800b810 <UARTEx_SetNbDataToProcess+0x98>)
 800b7f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b7fe:	bf00      	nop
 800b800:	3714      	adds	r7, #20
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	0800c9cc 	.word	0x0800c9cc
 800b810:	0800c9d4 	.word	0x0800c9d4

0800b814 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d121      	bne.n	800b86a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	4b27      	ldr	r3, [pc, #156]	; (800b8c8 <FMC_SDRAM_Init+0xb4>)
 800b82c:	4013      	ands	r3, r2
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	6851      	ldr	r1, [r2, #4]
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	6892      	ldr	r2, [r2, #8]
 800b836:	4311      	orrs	r1, r2
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	68d2      	ldr	r2, [r2, #12]
 800b83c:	4311      	orrs	r1, r2
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	6912      	ldr	r2, [r2, #16]
 800b842:	4311      	orrs	r1, r2
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	6952      	ldr	r2, [r2, #20]
 800b848:	4311      	orrs	r1, r2
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	6992      	ldr	r2, [r2, #24]
 800b84e:	4311      	orrs	r1, r2
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	69d2      	ldr	r2, [r2, #28]
 800b854:	4311      	orrs	r1, r2
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	6a12      	ldr	r2, [r2, #32]
 800b85a:	4311      	orrs	r1, r2
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b860:	430a      	orrs	r2, r1
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	601a      	str	r2, [r3, #0]
 800b868:	e026      	b.n	800b8b8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	69d9      	ldr	r1, [r3, #28]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	4319      	orrs	r1, r3
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	430b      	orrs	r3, r1
 800b882:	431a      	orrs	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <FMC_SDRAM_Init+0xb4>)
 800b88e:	4013      	ands	r3, r2
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	6851      	ldr	r1, [r2, #4]
 800b894:	683a      	ldr	r2, [r7, #0]
 800b896:	6892      	ldr	r2, [r2, #8]
 800b898:	4311      	orrs	r1, r2
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	68d2      	ldr	r2, [r2, #12]
 800b89e:	4311      	orrs	r1, r2
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	6912      	ldr	r2, [r2, #16]
 800b8a4:	4311      	orrs	r1, r2
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	6952      	ldr	r2, [r2, #20]
 800b8aa:	4311      	orrs	r1, r2
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	6992      	ldr	r2, [r2, #24]
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	ffff8000 	.word	0xffff8000

0800b8cc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d128      	bne.n	800b930 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	1e59      	subs	r1, r3, #1
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	011b      	lsls	r3, r3, #4
 800b8f4:	4319      	orrs	r1, r3
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	4319      	orrs	r1, r3
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	3b01      	subs	r3, #1
 800b906:	031b      	lsls	r3, r3, #12
 800b908:	4319      	orrs	r1, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	3b01      	subs	r3, #1
 800b910:	041b      	lsls	r3, r3, #16
 800b912:	4319      	orrs	r1, r3
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	3b01      	subs	r3, #1
 800b91a:	051b      	lsls	r3, r3, #20
 800b91c:	4319      	orrs	r1, r3
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	699b      	ldr	r3, [r3, #24]
 800b922:	3b01      	subs	r3, #1
 800b924:	061b      	lsls	r3, r3, #24
 800b926:	430b      	orrs	r3, r1
 800b928:	431a      	orrs	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	609a      	str	r2, [r3, #8]
 800b92e:	e02d      	b.n	800b98c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	689a      	ldr	r2, [r3, #8]
 800b934:	4b19      	ldr	r3, [pc, #100]	; (800b99c <FMC_SDRAM_Timing_Init+0xd0>)
 800b936:	4013      	ands	r3, r2
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	68d2      	ldr	r2, [r2, #12]
 800b93c:	3a01      	subs	r2, #1
 800b93e:	0311      	lsls	r1, r2, #12
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	6952      	ldr	r2, [r2, #20]
 800b944:	3a01      	subs	r2, #1
 800b946:	0512      	lsls	r2, r2, #20
 800b948:	430a      	orrs	r2, r1
 800b94a:	431a      	orrs	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	1e59      	subs	r1, r3, #1
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	3b01      	subs	r3, #1
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	4319      	orrs	r1, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	021b      	lsls	r3, r3, #8
 800b970:	4319      	orrs	r1, r3
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	3b01      	subs	r3, #1
 800b978:	041b      	lsls	r3, r3, #16
 800b97a:	4319      	orrs	r1, r3
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	3b01      	subs	r3, #1
 800b982:	061b      	lsls	r3, r3, #24
 800b984:	430b      	orrs	r3, r1
 800b986:	431a      	orrs	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	ff0f0fff 	.word	0xff0f0fff

0800b9a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9a0:	b084      	sub	sp, #16
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	f107 001c 	add.w	r0, r7, #28
 800b9ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d120      	bne.n	800b9fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68da      	ldr	r2, [r3, #12]
 800b9c8:	4b2a      	ldr	r3, [pc, #168]	; (800ba74 <USB_CoreInit+0xd4>)
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d105      	bne.n	800b9ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 faac 	bl	800bf4c <USB_CoreReset>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
 800b9f8:	e01a      	b.n	800ba30 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 faa0 	bl	800bf4c <USB_CoreReset>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38
 800ba22:	e005      	b.n	800ba30 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d116      	bne.n	800ba64 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ba44:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <USB_CoreInit+0xd8>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	f043 0206 	orr.w	r2, r3, #6
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	f043 0220 	orr.w	r2, r3, #32
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba70:	b004      	add	sp, #16
 800ba72:	4770      	bx	lr
 800ba74:	ffbdffbf 	.word	0xffbdffbf
 800ba78:	03ee0000 	.word	0x03ee0000

0800ba7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f023 0201 	bic.w	r2, r3, #1
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800baba:	78fb      	ldrb	r3, [r7, #3]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d115      	bne.n	800baec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bacc:	2001      	movs	r0, #1
 800bace:	f7f6 fff1 	bl	8002ab4 <HAL_Delay>
      ms++;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3301      	adds	r3, #1
 800bad6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fa29 	bl	800bf30 <USB_GetMode>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d01e      	beq.n	800bb22 <USB_SetCurrentMode+0x84>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b31      	cmp	r3, #49	; 0x31
 800bae8:	d9f0      	bls.n	800bacc <USB_SetCurrentMode+0x2e>
 800baea:	e01a      	b.n	800bb22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d115      	bne.n	800bb1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bafe:	2001      	movs	r0, #1
 800bb00:	f7f6 ffd8 	bl	8002ab4 <HAL_Delay>
      ms++;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	3301      	adds	r3, #1
 800bb08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fa10 	bl	800bf30 <USB_GetMode>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <USB_SetCurrentMode+0x84>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b31      	cmp	r3, #49	; 0x31
 800bb1a:	d9f0      	bls.n	800bafe <USB_SetCurrentMode+0x60>
 800bb1c:	e001      	b.n	800bb22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e005      	b.n	800bb2e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2b32      	cmp	r3, #50	; 0x32
 800bb26:	d101      	bne.n	800bb2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e000      	b.n	800bb2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb38:	b084      	sub	sp, #16
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b086      	sub	sp, #24
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bb46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb52:	2300      	movs	r3, #0
 800bb54:	613b      	str	r3, [r7, #16]
 800bb56:	e009      	b.n	800bb6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	3340      	adds	r3, #64	; 0x40
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	4413      	add	r3, r2
 800bb62:	2200      	movs	r2, #0
 800bb64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	613b      	str	r3, [r7, #16]
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	2b0e      	cmp	r3, #14
 800bb70:	d9f2      	bls.n	800bb58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d11c      	bne.n	800bbb2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb86:	f043 0302 	orr.w	r3, r3, #2
 800bb8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	e005      	b.n	800bbbe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd8:	461a      	mov	r2, r3
 800bbda:	680b      	ldr	r3, [r1, #0]
 800bbdc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d10c      	bne.n	800bbfe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d104      	bne.n	800bbf4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bbea:	2100      	movs	r1, #0
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f965 	bl	800bebc <USB_SetDevSpeed>
 800bbf2:	e008      	b.n	800bc06 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f960 	bl	800bebc <USB_SetDevSpeed>
 800bbfc:	e003      	b.n	800bc06 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bbfe:	2103      	movs	r1, #3
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f95b 	bl	800bebc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc06:	2110      	movs	r1, #16
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f8f3 	bl	800bdf4 <USB_FlushTxFifo>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 f91f 	bl	800be5c <USB_FlushRxFifo>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2e:	461a      	mov	r2, r3
 800bc30:	2300      	movs	r3, #0
 800bc32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc46:	461a      	mov	r2, r3
 800bc48:	2300      	movs	r3, #0
 800bc4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	613b      	str	r3, [r7, #16]
 800bc50:	e043      	b.n	800bcda <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	015a      	lsls	r2, r3, #5
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc68:	d118      	bne.n	800bc9c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10a      	bne.n	800bc86 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc82:	6013      	str	r3, [r2, #0]
 800bc84:	e013      	b.n	800bcae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc92:	461a      	mov	r2, r3
 800bc94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	e008      	b.n	800bcae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca8:	461a      	mov	r2, r3
 800bcaa:	2300      	movs	r3, #0
 800bcac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	015a      	lsls	r2, r3, #5
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcba:	461a      	mov	r2, r3
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	015a      	lsls	r2, r3, #5
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bccc:	461a      	mov	r2, r3
 800bcce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bcd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	613b      	str	r3, [r7, #16]
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcdc:	693a      	ldr	r2, [r7, #16]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d3b7      	bcc.n	800bc52 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bce2:	2300      	movs	r3, #0
 800bce4:	613b      	str	r3, [r7, #16]
 800bce6:	e043      	b.n	800bd70 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	015a      	lsls	r2, r3, #5
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4413      	add	r3, r2
 800bcf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcfe:	d118      	bne.n	800bd32 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10a      	bne.n	800bd1c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd12:	461a      	mov	r2, r3
 800bd14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd18:	6013      	str	r3, [r2, #0]
 800bd1a:	e013      	b.n	800bd44 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	015a      	lsls	r2, r3, #5
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd28:	461a      	mov	r2, r3
 800bd2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	e008      	b.n	800bd44 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	015a      	lsls	r2, r3, #5
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	4413      	add	r3, r2
 800bd3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3e:	461a      	mov	r2, r3
 800bd40:	2300      	movs	r3, #0
 800bd42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	015a      	lsls	r2, r3, #5
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd50:	461a      	mov	r2, r3
 800bd52:	2300      	movs	r3, #0
 800bd54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd62:	461a      	mov	r2, r3
 800bd64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	613b      	str	r3, [r7, #16]
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d3b7      	bcc.n	800bce8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bd98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d105      	bne.n	800bdac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	f043 0210 	orr.w	r2, r3, #16
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	699a      	ldr	r2, [r3, #24]
 800bdb0:	4b0e      	ldr	r3, [pc, #56]	; (800bdec <USB_DevInit+0x2b4>)
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d005      	beq.n	800bdca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	f043 0208 	orr.w	r2, r3, #8
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bdca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d105      	bne.n	800bddc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	699a      	ldr	r2, [r3, #24]
 800bdd4:	4b06      	ldr	r3, [pc, #24]	; (800bdf0 <USB_DevInit+0x2b8>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bde8:	b004      	add	sp, #16
 800bdea:	4770      	bx	lr
 800bdec:	803c3800 	.word	0x803c3800
 800bdf0:	40000004 	.word	0x40000004

0800bdf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bdfe:	2300      	movs	r3, #0
 800be00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3301      	adds	r3, #1
 800be06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4a13      	ldr	r2, [pc, #76]	; (800be58 <USB_FlushTxFifo+0x64>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d901      	bls.n	800be14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be10:	2303      	movs	r3, #3
 800be12:	e01b      	b.n	800be4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	daf2      	bge.n	800be02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	019b      	lsls	r3, r3, #6
 800be24:	f043 0220 	orr.w	r2, r3, #32
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	3301      	adds	r3, #1
 800be30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	4a08      	ldr	r2, [pc, #32]	; (800be58 <USB_FlushTxFifo+0x64>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d901      	bls.n	800be3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e006      	b.n	800be4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	f003 0320 	and.w	r3, r3, #32
 800be46:	2b20      	cmp	r3, #32
 800be48:	d0f0      	beq.n	800be2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	00030d40 	.word	0x00030d40

0800be5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	3301      	adds	r3, #1
 800be6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	4a11      	ldr	r2, [pc, #68]	; (800beb8 <USB_FlushRxFifo+0x5c>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d901      	bls.n	800be7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be76:	2303      	movs	r3, #3
 800be78:	e018      	b.n	800beac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	daf2      	bge.n	800be68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be82:	2300      	movs	r3, #0
 800be84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2210      	movs	r2, #16
 800be8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3301      	adds	r3, #1
 800be90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	4a08      	ldr	r2, [pc, #32]	; (800beb8 <USB_FlushRxFifo+0x5c>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d901      	bls.n	800be9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be9a:	2303      	movs	r3, #3
 800be9c:	e006      	b.n	800beac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	f003 0310 	and.w	r3, r3, #16
 800bea6:	2b10      	cmp	r3, #16
 800bea8:	d0f0      	beq.n	800be8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	00030d40 	.word	0x00030d40

0800bebc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	78fb      	ldrb	r3, [r7, #3]
 800bed6:	68f9      	ldr	r1, [r7, #12]
 800bed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bedc:	4313      	orrs	r3, r2
 800bede:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800beee:	b480      	push	{r7}
 800bef0:	b085      	sub	sp, #20
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf08:	f023 0303 	bic.w	r3, r3, #3
 800bf0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf1c:	f043 0302 	orr.w	r3, r3, #2
 800bf20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	4a13      	ldr	r2, [pc, #76]	; (800bfb0 <USB_CoreReset+0x64>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d901      	bls.n	800bf6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e01b      	b.n	800bfa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	daf2      	bge.n	800bf58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bf72:	2300      	movs	r3, #0
 800bf74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	f043 0201 	orr.w	r2, r3, #1
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	3301      	adds	r3, #1
 800bf86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4a09      	ldr	r2, [pc, #36]	; (800bfb0 <USB_CoreReset+0x64>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d901      	bls.n	800bf94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e006      	b.n	800bfa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d0f0      	beq.n	800bf82 <USB_CoreReset+0x36>

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3714      	adds	r7, #20
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	00030d40 	.word	0x00030d40

0800bfb4 <__errno>:
 800bfb4:	4b01      	ldr	r3, [pc, #4]	; (800bfbc <__errno+0x8>)
 800bfb6:	6818      	ldr	r0, [r3, #0]
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	24000010 	.word	0x24000010

0800bfc0 <__libc_init_array>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	4d0d      	ldr	r5, [pc, #52]	; (800bff8 <__libc_init_array+0x38>)
 800bfc4:	4c0d      	ldr	r4, [pc, #52]	; (800bffc <__libc_init_array+0x3c>)
 800bfc6:	1b64      	subs	r4, r4, r5
 800bfc8:	10a4      	asrs	r4, r4, #2
 800bfca:	2600      	movs	r6, #0
 800bfcc:	42a6      	cmp	r6, r4
 800bfce:	d109      	bne.n	800bfe4 <__libc_init_array+0x24>
 800bfd0:	4d0b      	ldr	r5, [pc, #44]	; (800c000 <__libc_init_array+0x40>)
 800bfd2:	4c0c      	ldr	r4, [pc, #48]	; (800c004 <__libc_init_array+0x44>)
 800bfd4:	f000 fca2 	bl	800c91c <_init>
 800bfd8:	1b64      	subs	r4, r4, r5
 800bfda:	10a4      	asrs	r4, r4, #2
 800bfdc:	2600      	movs	r6, #0
 800bfde:	42a6      	cmp	r6, r4
 800bfe0:	d105      	bne.n	800bfee <__libc_init_array+0x2e>
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}
 800bfe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe8:	4798      	blx	r3
 800bfea:	3601      	adds	r6, #1
 800bfec:	e7ee      	b.n	800bfcc <__libc_init_array+0xc>
 800bfee:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff2:	4798      	blx	r3
 800bff4:	3601      	adds	r6, #1
 800bff6:	e7f2      	b.n	800bfde <__libc_init_array+0x1e>
 800bff8:	0800ca18 	.word	0x0800ca18
 800bffc:	0800ca18 	.word	0x0800ca18
 800c000:	0800ca18 	.word	0x0800ca18
 800c004:	0800ca1c 	.word	0x0800ca1c

0800c008 <memcpy>:
 800c008:	440a      	add	r2, r1
 800c00a:	4291      	cmp	r1, r2
 800c00c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c010:	d100      	bne.n	800c014 <memcpy+0xc>
 800c012:	4770      	bx	lr
 800c014:	b510      	push	{r4, lr}
 800c016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c01e:	4291      	cmp	r1, r2
 800c020:	d1f9      	bne.n	800c016 <memcpy+0xe>
 800c022:	bd10      	pop	{r4, pc}

0800c024 <memset>:
 800c024:	4402      	add	r2, r0
 800c026:	4603      	mov	r3, r0
 800c028:	4293      	cmp	r3, r2
 800c02a:	d100      	bne.n	800c02e <memset+0xa>
 800c02c:	4770      	bx	lr
 800c02e:	f803 1b01 	strb.w	r1, [r3], #1
 800c032:	e7f9      	b.n	800c028 <memset+0x4>

0800c034 <sniprintf>:
 800c034:	b40c      	push	{r2, r3}
 800c036:	b530      	push	{r4, r5, lr}
 800c038:	4b17      	ldr	r3, [pc, #92]	; (800c098 <sniprintf+0x64>)
 800c03a:	1e0c      	subs	r4, r1, #0
 800c03c:	681d      	ldr	r5, [r3, #0]
 800c03e:	b09d      	sub	sp, #116	; 0x74
 800c040:	da08      	bge.n	800c054 <sniprintf+0x20>
 800c042:	238b      	movs	r3, #139	; 0x8b
 800c044:	602b      	str	r3, [r5, #0]
 800c046:	f04f 30ff 	mov.w	r0, #4294967295
 800c04a:	b01d      	add	sp, #116	; 0x74
 800c04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c050:	b002      	add	sp, #8
 800c052:	4770      	bx	lr
 800c054:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c058:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c05c:	bf14      	ite	ne
 800c05e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c062:	4623      	moveq	r3, r4
 800c064:	9304      	str	r3, [sp, #16]
 800c066:	9307      	str	r3, [sp, #28]
 800c068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c06c:	9002      	str	r0, [sp, #8]
 800c06e:	9006      	str	r0, [sp, #24]
 800c070:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c074:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c076:	ab21      	add	r3, sp, #132	; 0x84
 800c078:	a902      	add	r1, sp, #8
 800c07a:	4628      	mov	r0, r5
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	f000 f869 	bl	800c154 <_svfiprintf_r>
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	bfbc      	itt	lt
 800c086:	238b      	movlt	r3, #139	; 0x8b
 800c088:	602b      	strlt	r3, [r5, #0]
 800c08a:	2c00      	cmp	r4, #0
 800c08c:	d0dd      	beq.n	800c04a <sniprintf+0x16>
 800c08e:	9b02      	ldr	r3, [sp, #8]
 800c090:	2200      	movs	r2, #0
 800c092:	701a      	strb	r2, [r3, #0]
 800c094:	e7d9      	b.n	800c04a <sniprintf+0x16>
 800c096:	bf00      	nop
 800c098:	24000010 	.word	0x24000010

0800c09c <__ssputs_r>:
 800c09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a0:	688e      	ldr	r6, [r1, #8]
 800c0a2:	429e      	cmp	r6, r3
 800c0a4:	4682      	mov	sl, r0
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	4690      	mov	r8, r2
 800c0aa:	461f      	mov	r7, r3
 800c0ac:	d838      	bhi.n	800c120 <__ssputs_r+0x84>
 800c0ae:	898a      	ldrh	r2, [r1, #12]
 800c0b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0b4:	d032      	beq.n	800c11c <__ssputs_r+0x80>
 800c0b6:	6825      	ldr	r5, [r4, #0]
 800c0b8:	6909      	ldr	r1, [r1, #16]
 800c0ba:	eba5 0901 	sub.w	r9, r5, r1
 800c0be:	6965      	ldr	r5, [r4, #20]
 800c0c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	444b      	add	r3, r9
 800c0cc:	106d      	asrs	r5, r5, #1
 800c0ce:	429d      	cmp	r5, r3
 800c0d0:	bf38      	it	cc
 800c0d2:	461d      	movcc	r5, r3
 800c0d4:	0553      	lsls	r3, r2, #21
 800c0d6:	d531      	bpl.n	800c13c <__ssputs_r+0xa0>
 800c0d8:	4629      	mov	r1, r5
 800c0da:	f000 fb55 	bl	800c788 <_malloc_r>
 800c0de:	4606      	mov	r6, r0
 800c0e0:	b950      	cbnz	r0, 800c0f8 <__ssputs_r+0x5c>
 800c0e2:	230c      	movs	r3, #12
 800c0e4:	f8ca 3000 	str.w	r3, [sl]
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ee:	81a3      	strh	r3, [r4, #12]
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f8:	6921      	ldr	r1, [r4, #16]
 800c0fa:	464a      	mov	r2, r9
 800c0fc:	f7ff ff84 	bl	800c008 <memcpy>
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c10a:	81a3      	strh	r3, [r4, #12]
 800c10c:	6126      	str	r6, [r4, #16]
 800c10e:	6165      	str	r5, [r4, #20]
 800c110:	444e      	add	r6, r9
 800c112:	eba5 0509 	sub.w	r5, r5, r9
 800c116:	6026      	str	r6, [r4, #0]
 800c118:	60a5      	str	r5, [r4, #8]
 800c11a:	463e      	mov	r6, r7
 800c11c:	42be      	cmp	r6, r7
 800c11e:	d900      	bls.n	800c122 <__ssputs_r+0x86>
 800c120:	463e      	mov	r6, r7
 800c122:	6820      	ldr	r0, [r4, #0]
 800c124:	4632      	mov	r2, r6
 800c126:	4641      	mov	r1, r8
 800c128:	f000 faa8 	bl	800c67c <memmove>
 800c12c:	68a3      	ldr	r3, [r4, #8]
 800c12e:	1b9b      	subs	r3, r3, r6
 800c130:	60a3      	str	r3, [r4, #8]
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	4433      	add	r3, r6
 800c136:	6023      	str	r3, [r4, #0]
 800c138:	2000      	movs	r0, #0
 800c13a:	e7db      	b.n	800c0f4 <__ssputs_r+0x58>
 800c13c:	462a      	mov	r2, r5
 800c13e:	f000 fb97 	bl	800c870 <_realloc_r>
 800c142:	4606      	mov	r6, r0
 800c144:	2800      	cmp	r0, #0
 800c146:	d1e1      	bne.n	800c10c <__ssputs_r+0x70>
 800c148:	6921      	ldr	r1, [r4, #16]
 800c14a:	4650      	mov	r0, sl
 800c14c:	f000 fab0 	bl	800c6b0 <_free_r>
 800c150:	e7c7      	b.n	800c0e2 <__ssputs_r+0x46>
	...

0800c154 <_svfiprintf_r>:
 800c154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c158:	4698      	mov	r8, r3
 800c15a:	898b      	ldrh	r3, [r1, #12]
 800c15c:	061b      	lsls	r3, r3, #24
 800c15e:	b09d      	sub	sp, #116	; 0x74
 800c160:	4607      	mov	r7, r0
 800c162:	460d      	mov	r5, r1
 800c164:	4614      	mov	r4, r2
 800c166:	d50e      	bpl.n	800c186 <_svfiprintf_r+0x32>
 800c168:	690b      	ldr	r3, [r1, #16]
 800c16a:	b963      	cbnz	r3, 800c186 <_svfiprintf_r+0x32>
 800c16c:	2140      	movs	r1, #64	; 0x40
 800c16e:	f000 fb0b 	bl	800c788 <_malloc_r>
 800c172:	6028      	str	r0, [r5, #0]
 800c174:	6128      	str	r0, [r5, #16]
 800c176:	b920      	cbnz	r0, 800c182 <_svfiprintf_r+0x2e>
 800c178:	230c      	movs	r3, #12
 800c17a:	603b      	str	r3, [r7, #0]
 800c17c:	f04f 30ff 	mov.w	r0, #4294967295
 800c180:	e0d1      	b.n	800c326 <_svfiprintf_r+0x1d2>
 800c182:	2340      	movs	r3, #64	; 0x40
 800c184:	616b      	str	r3, [r5, #20]
 800c186:	2300      	movs	r3, #0
 800c188:	9309      	str	r3, [sp, #36]	; 0x24
 800c18a:	2320      	movs	r3, #32
 800c18c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c190:	f8cd 800c 	str.w	r8, [sp, #12]
 800c194:	2330      	movs	r3, #48	; 0x30
 800c196:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c340 <_svfiprintf_r+0x1ec>
 800c19a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c19e:	f04f 0901 	mov.w	r9, #1
 800c1a2:	4623      	mov	r3, r4
 800c1a4:	469a      	mov	sl, r3
 800c1a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1aa:	b10a      	cbz	r2, 800c1b0 <_svfiprintf_r+0x5c>
 800c1ac:	2a25      	cmp	r2, #37	; 0x25
 800c1ae:	d1f9      	bne.n	800c1a4 <_svfiprintf_r+0x50>
 800c1b0:	ebba 0b04 	subs.w	fp, sl, r4
 800c1b4:	d00b      	beq.n	800c1ce <_svfiprintf_r+0x7a>
 800c1b6:	465b      	mov	r3, fp
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	4638      	mov	r0, r7
 800c1be:	f7ff ff6d 	bl	800c09c <__ssputs_r>
 800c1c2:	3001      	adds	r0, #1
 800c1c4:	f000 80aa 	beq.w	800c31c <_svfiprintf_r+0x1c8>
 800c1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1ca:	445a      	add	r2, fp
 800c1cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 80a2 	beq.w	800c31c <_svfiprintf_r+0x1c8>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	f04f 32ff 	mov.w	r2, #4294967295
 800c1de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1e2:	f10a 0a01 	add.w	sl, sl, #1
 800c1e6:	9304      	str	r3, [sp, #16]
 800c1e8:	9307      	str	r3, [sp, #28]
 800c1ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1ee:	931a      	str	r3, [sp, #104]	; 0x68
 800c1f0:	4654      	mov	r4, sl
 800c1f2:	2205      	movs	r2, #5
 800c1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f8:	4851      	ldr	r0, [pc, #324]	; (800c340 <_svfiprintf_r+0x1ec>)
 800c1fa:	f7f4 f879 	bl	80002f0 <memchr>
 800c1fe:	9a04      	ldr	r2, [sp, #16]
 800c200:	b9d8      	cbnz	r0, 800c23a <_svfiprintf_r+0xe6>
 800c202:	06d0      	lsls	r0, r2, #27
 800c204:	bf44      	itt	mi
 800c206:	2320      	movmi	r3, #32
 800c208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c20c:	0711      	lsls	r1, r2, #28
 800c20e:	bf44      	itt	mi
 800c210:	232b      	movmi	r3, #43	; 0x2b
 800c212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c216:	f89a 3000 	ldrb.w	r3, [sl]
 800c21a:	2b2a      	cmp	r3, #42	; 0x2a
 800c21c:	d015      	beq.n	800c24a <_svfiprintf_r+0xf6>
 800c21e:	9a07      	ldr	r2, [sp, #28]
 800c220:	4654      	mov	r4, sl
 800c222:	2000      	movs	r0, #0
 800c224:	f04f 0c0a 	mov.w	ip, #10
 800c228:	4621      	mov	r1, r4
 800c22a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c22e:	3b30      	subs	r3, #48	; 0x30
 800c230:	2b09      	cmp	r3, #9
 800c232:	d94e      	bls.n	800c2d2 <_svfiprintf_r+0x17e>
 800c234:	b1b0      	cbz	r0, 800c264 <_svfiprintf_r+0x110>
 800c236:	9207      	str	r2, [sp, #28]
 800c238:	e014      	b.n	800c264 <_svfiprintf_r+0x110>
 800c23a:	eba0 0308 	sub.w	r3, r0, r8
 800c23e:	fa09 f303 	lsl.w	r3, r9, r3
 800c242:	4313      	orrs	r3, r2
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	46a2      	mov	sl, r4
 800c248:	e7d2      	b.n	800c1f0 <_svfiprintf_r+0x9c>
 800c24a:	9b03      	ldr	r3, [sp, #12]
 800c24c:	1d19      	adds	r1, r3, #4
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	9103      	str	r1, [sp, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	bfbb      	ittet	lt
 800c256:	425b      	neglt	r3, r3
 800c258:	f042 0202 	orrlt.w	r2, r2, #2
 800c25c:	9307      	strge	r3, [sp, #28]
 800c25e:	9307      	strlt	r3, [sp, #28]
 800c260:	bfb8      	it	lt
 800c262:	9204      	strlt	r2, [sp, #16]
 800c264:	7823      	ldrb	r3, [r4, #0]
 800c266:	2b2e      	cmp	r3, #46	; 0x2e
 800c268:	d10c      	bne.n	800c284 <_svfiprintf_r+0x130>
 800c26a:	7863      	ldrb	r3, [r4, #1]
 800c26c:	2b2a      	cmp	r3, #42	; 0x2a
 800c26e:	d135      	bne.n	800c2dc <_svfiprintf_r+0x188>
 800c270:	9b03      	ldr	r3, [sp, #12]
 800c272:	1d1a      	adds	r2, r3, #4
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	9203      	str	r2, [sp, #12]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	bfb8      	it	lt
 800c27c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c280:	3402      	adds	r4, #2
 800c282:	9305      	str	r3, [sp, #20]
 800c284:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c350 <_svfiprintf_r+0x1fc>
 800c288:	7821      	ldrb	r1, [r4, #0]
 800c28a:	2203      	movs	r2, #3
 800c28c:	4650      	mov	r0, sl
 800c28e:	f7f4 f82f 	bl	80002f0 <memchr>
 800c292:	b140      	cbz	r0, 800c2a6 <_svfiprintf_r+0x152>
 800c294:	2340      	movs	r3, #64	; 0x40
 800c296:	eba0 000a 	sub.w	r0, r0, sl
 800c29a:	fa03 f000 	lsl.w	r0, r3, r0
 800c29e:	9b04      	ldr	r3, [sp, #16]
 800c2a0:	4303      	orrs	r3, r0
 800c2a2:	3401      	adds	r4, #1
 800c2a4:	9304      	str	r3, [sp, #16]
 800c2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2aa:	4826      	ldr	r0, [pc, #152]	; (800c344 <_svfiprintf_r+0x1f0>)
 800c2ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2b0:	2206      	movs	r2, #6
 800c2b2:	f7f4 f81d 	bl	80002f0 <memchr>
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	d038      	beq.n	800c32c <_svfiprintf_r+0x1d8>
 800c2ba:	4b23      	ldr	r3, [pc, #140]	; (800c348 <_svfiprintf_r+0x1f4>)
 800c2bc:	bb1b      	cbnz	r3, 800c306 <_svfiprintf_r+0x1b2>
 800c2be:	9b03      	ldr	r3, [sp, #12]
 800c2c0:	3307      	adds	r3, #7
 800c2c2:	f023 0307 	bic.w	r3, r3, #7
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	9303      	str	r3, [sp, #12]
 800c2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2cc:	4433      	add	r3, r6
 800c2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d0:	e767      	b.n	800c1a2 <_svfiprintf_r+0x4e>
 800c2d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	2001      	movs	r0, #1
 800c2da:	e7a5      	b.n	800c228 <_svfiprintf_r+0xd4>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	3401      	adds	r4, #1
 800c2e0:	9305      	str	r3, [sp, #20]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	f04f 0c0a 	mov.w	ip, #10
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2ee:	3a30      	subs	r2, #48	; 0x30
 800c2f0:	2a09      	cmp	r2, #9
 800c2f2:	d903      	bls.n	800c2fc <_svfiprintf_r+0x1a8>
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d0c5      	beq.n	800c284 <_svfiprintf_r+0x130>
 800c2f8:	9105      	str	r1, [sp, #20]
 800c2fa:	e7c3      	b.n	800c284 <_svfiprintf_r+0x130>
 800c2fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c300:	4604      	mov	r4, r0
 800c302:	2301      	movs	r3, #1
 800c304:	e7f0      	b.n	800c2e8 <_svfiprintf_r+0x194>
 800c306:	ab03      	add	r3, sp, #12
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	462a      	mov	r2, r5
 800c30c:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <_svfiprintf_r+0x1f8>)
 800c30e:	a904      	add	r1, sp, #16
 800c310:	4638      	mov	r0, r7
 800c312:	f3af 8000 	nop.w
 800c316:	1c42      	adds	r2, r0, #1
 800c318:	4606      	mov	r6, r0
 800c31a:	d1d6      	bne.n	800c2ca <_svfiprintf_r+0x176>
 800c31c:	89ab      	ldrh	r3, [r5, #12]
 800c31e:	065b      	lsls	r3, r3, #25
 800c320:	f53f af2c 	bmi.w	800c17c <_svfiprintf_r+0x28>
 800c324:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c326:	b01d      	add	sp, #116	; 0x74
 800c328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32c:	ab03      	add	r3, sp, #12
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	462a      	mov	r2, r5
 800c332:	4b06      	ldr	r3, [pc, #24]	; (800c34c <_svfiprintf_r+0x1f8>)
 800c334:	a904      	add	r1, sp, #16
 800c336:	4638      	mov	r0, r7
 800c338:	f000 f87a 	bl	800c430 <_printf_i>
 800c33c:	e7eb      	b.n	800c316 <_svfiprintf_r+0x1c2>
 800c33e:	bf00      	nop
 800c340:	0800c9dc 	.word	0x0800c9dc
 800c344:	0800c9e6 	.word	0x0800c9e6
 800c348:	00000000 	.word	0x00000000
 800c34c:	0800c09d 	.word	0x0800c09d
 800c350:	0800c9e2 	.word	0x0800c9e2

0800c354 <_printf_common>:
 800c354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c358:	4616      	mov	r6, r2
 800c35a:	4699      	mov	r9, r3
 800c35c:	688a      	ldr	r2, [r1, #8]
 800c35e:	690b      	ldr	r3, [r1, #16]
 800c360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c364:	4293      	cmp	r3, r2
 800c366:	bfb8      	it	lt
 800c368:	4613      	movlt	r3, r2
 800c36a:	6033      	str	r3, [r6, #0]
 800c36c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c370:	4607      	mov	r7, r0
 800c372:	460c      	mov	r4, r1
 800c374:	b10a      	cbz	r2, 800c37a <_printf_common+0x26>
 800c376:	3301      	adds	r3, #1
 800c378:	6033      	str	r3, [r6, #0]
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	0699      	lsls	r1, r3, #26
 800c37e:	bf42      	ittt	mi
 800c380:	6833      	ldrmi	r3, [r6, #0]
 800c382:	3302      	addmi	r3, #2
 800c384:	6033      	strmi	r3, [r6, #0]
 800c386:	6825      	ldr	r5, [r4, #0]
 800c388:	f015 0506 	ands.w	r5, r5, #6
 800c38c:	d106      	bne.n	800c39c <_printf_common+0x48>
 800c38e:	f104 0a19 	add.w	sl, r4, #25
 800c392:	68e3      	ldr	r3, [r4, #12]
 800c394:	6832      	ldr	r2, [r6, #0]
 800c396:	1a9b      	subs	r3, r3, r2
 800c398:	42ab      	cmp	r3, r5
 800c39a:	dc26      	bgt.n	800c3ea <_printf_common+0x96>
 800c39c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3a0:	1e13      	subs	r3, r2, #0
 800c3a2:	6822      	ldr	r2, [r4, #0]
 800c3a4:	bf18      	it	ne
 800c3a6:	2301      	movne	r3, #1
 800c3a8:	0692      	lsls	r2, r2, #26
 800c3aa:	d42b      	bmi.n	800c404 <_printf_common+0xb0>
 800c3ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	47c0      	blx	r8
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	d01e      	beq.n	800c3f8 <_printf_common+0xa4>
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	68e5      	ldr	r5, [r4, #12]
 800c3be:	6832      	ldr	r2, [r6, #0]
 800c3c0:	f003 0306 	and.w	r3, r3, #6
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	bf08      	it	eq
 800c3c8:	1aad      	subeq	r5, r5, r2
 800c3ca:	68a3      	ldr	r3, [r4, #8]
 800c3cc:	6922      	ldr	r2, [r4, #16]
 800c3ce:	bf0c      	ite	eq
 800c3d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3d4:	2500      	movne	r5, #0
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	bfc4      	itt	gt
 800c3da:	1a9b      	subgt	r3, r3, r2
 800c3dc:	18ed      	addgt	r5, r5, r3
 800c3de:	2600      	movs	r6, #0
 800c3e0:	341a      	adds	r4, #26
 800c3e2:	42b5      	cmp	r5, r6
 800c3e4:	d11a      	bne.n	800c41c <_printf_common+0xc8>
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	e008      	b.n	800c3fc <_printf_common+0xa8>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	4652      	mov	r2, sl
 800c3ee:	4649      	mov	r1, r9
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	47c0      	blx	r8
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	d103      	bne.n	800c400 <_printf_common+0xac>
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c400:	3501      	adds	r5, #1
 800c402:	e7c6      	b.n	800c392 <_printf_common+0x3e>
 800c404:	18e1      	adds	r1, r4, r3
 800c406:	1c5a      	adds	r2, r3, #1
 800c408:	2030      	movs	r0, #48	; 0x30
 800c40a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c40e:	4422      	add	r2, r4
 800c410:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c414:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c418:	3302      	adds	r3, #2
 800c41a:	e7c7      	b.n	800c3ac <_printf_common+0x58>
 800c41c:	2301      	movs	r3, #1
 800c41e:	4622      	mov	r2, r4
 800c420:	4649      	mov	r1, r9
 800c422:	4638      	mov	r0, r7
 800c424:	47c0      	blx	r8
 800c426:	3001      	adds	r0, #1
 800c428:	d0e6      	beq.n	800c3f8 <_printf_common+0xa4>
 800c42a:	3601      	adds	r6, #1
 800c42c:	e7d9      	b.n	800c3e2 <_printf_common+0x8e>
	...

0800c430 <_printf_i>:
 800c430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c434:	7e0f      	ldrb	r7, [r1, #24]
 800c436:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c438:	2f78      	cmp	r7, #120	; 0x78
 800c43a:	4691      	mov	r9, r2
 800c43c:	4680      	mov	r8, r0
 800c43e:	460c      	mov	r4, r1
 800c440:	469a      	mov	sl, r3
 800c442:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c446:	d807      	bhi.n	800c458 <_printf_i+0x28>
 800c448:	2f62      	cmp	r7, #98	; 0x62
 800c44a:	d80a      	bhi.n	800c462 <_printf_i+0x32>
 800c44c:	2f00      	cmp	r7, #0
 800c44e:	f000 80d8 	beq.w	800c602 <_printf_i+0x1d2>
 800c452:	2f58      	cmp	r7, #88	; 0x58
 800c454:	f000 80a3 	beq.w	800c59e <_printf_i+0x16e>
 800c458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c45c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c460:	e03a      	b.n	800c4d8 <_printf_i+0xa8>
 800c462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c466:	2b15      	cmp	r3, #21
 800c468:	d8f6      	bhi.n	800c458 <_printf_i+0x28>
 800c46a:	a101      	add	r1, pc, #4	; (adr r1, 800c470 <_printf_i+0x40>)
 800c46c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c470:	0800c4c9 	.word	0x0800c4c9
 800c474:	0800c4dd 	.word	0x0800c4dd
 800c478:	0800c459 	.word	0x0800c459
 800c47c:	0800c459 	.word	0x0800c459
 800c480:	0800c459 	.word	0x0800c459
 800c484:	0800c459 	.word	0x0800c459
 800c488:	0800c4dd 	.word	0x0800c4dd
 800c48c:	0800c459 	.word	0x0800c459
 800c490:	0800c459 	.word	0x0800c459
 800c494:	0800c459 	.word	0x0800c459
 800c498:	0800c459 	.word	0x0800c459
 800c49c:	0800c5e9 	.word	0x0800c5e9
 800c4a0:	0800c50d 	.word	0x0800c50d
 800c4a4:	0800c5cb 	.word	0x0800c5cb
 800c4a8:	0800c459 	.word	0x0800c459
 800c4ac:	0800c459 	.word	0x0800c459
 800c4b0:	0800c60b 	.word	0x0800c60b
 800c4b4:	0800c459 	.word	0x0800c459
 800c4b8:	0800c50d 	.word	0x0800c50d
 800c4bc:	0800c459 	.word	0x0800c459
 800c4c0:	0800c459 	.word	0x0800c459
 800c4c4:	0800c5d3 	.word	0x0800c5d3
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	1d1a      	adds	r2, r3, #4
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	602a      	str	r2, [r5, #0]
 800c4d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e0a3      	b.n	800c624 <_printf_i+0x1f4>
 800c4dc:	6820      	ldr	r0, [r4, #0]
 800c4de:	6829      	ldr	r1, [r5, #0]
 800c4e0:	0606      	lsls	r6, r0, #24
 800c4e2:	f101 0304 	add.w	r3, r1, #4
 800c4e6:	d50a      	bpl.n	800c4fe <_printf_i+0xce>
 800c4e8:	680e      	ldr	r6, [r1, #0]
 800c4ea:	602b      	str	r3, [r5, #0]
 800c4ec:	2e00      	cmp	r6, #0
 800c4ee:	da03      	bge.n	800c4f8 <_printf_i+0xc8>
 800c4f0:	232d      	movs	r3, #45	; 0x2d
 800c4f2:	4276      	negs	r6, r6
 800c4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4f8:	485e      	ldr	r0, [pc, #376]	; (800c674 <_printf_i+0x244>)
 800c4fa:	230a      	movs	r3, #10
 800c4fc:	e019      	b.n	800c532 <_printf_i+0x102>
 800c4fe:	680e      	ldr	r6, [r1, #0]
 800c500:	602b      	str	r3, [r5, #0]
 800c502:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c506:	bf18      	it	ne
 800c508:	b236      	sxthne	r6, r6
 800c50a:	e7ef      	b.n	800c4ec <_printf_i+0xbc>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	6820      	ldr	r0, [r4, #0]
 800c510:	1d19      	adds	r1, r3, #4
 800c512:	6029      	str	r1, [r5, #0]
 800c514:	0601      	lsls	r1, r0, #24
 800c516:	d501      	bpl.n	800c51c <_printf_i+0xec>
 800c518:	681e      	ldr	r6, [r3, #0]
 800c51a:	e002      	b.n	800c522 <_printf_i+0xf2>
 800c51c:	0646      	lsls	r6, r0, #25
 800c51e:	d5fb      	bpl.n	800c518 <_printf_i+0xe8>
 800c520:	881e      	ldrh	r6, [r3, #0]
 800c522:	4854      	ldr	r0, [pc, #336]	; (800c674 <_printf_i+0x244>)
 800c524:	2f6f      	cmp	r7, #111	; 0x6f
 800c526:	bf0c      	ite	eq
 800c528:	2308      	moveq	r3, #8
 800c52a:	230a      	movne	r3, #10
 800c52c:	2100      	movs	r1, #0
 800c52e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c532:	6865      	ldr	r5, [r4, #4]
 800c534:	60a5      	str	r5, [r4, #8]
 800c536:	2d00      	cmp	r5, #0
 800c538:	bfa2      	ittt	ge
 800c53a:	6821      	ldrge	r1, [r4, #0]
 800c53c:	f021 0104 	bicge.w	r1, r1, #4
 800c540:	6021      	strge	r1, [r4, #0]
 800c542:	b90e      	cbnz	r6, 800c548 <_printf_i+0x118>
 800c544:	2d00      	cmp	r5, #0
 800c546:	d04d      	beq.n	800c5e4 <_printf_i+0x1b4>
 800c548:	4615      	mov	r5, r2
 800c54a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c54e:	fb03 6711 	mls	r7, r3, r1, r6
 800c552:	5dc7      	ldrb	r7, [r0, r7]
 800c554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c558:	4637      	mov	r7, r6
 800c55a:	42bb      	cmp	r3, r7
 800c55c:	460e      	mov	r6, r1
 800c55e:	d9f4      	bls.n	800c54a <_printf_i+0x11a>
 800c560:	2b08      	cmp	r3, #8
 800c562:	d10b      	bne.n	800c57c <_printf_i+0x14c>
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	07de      	lsls	r6, r3, #31
 800c568:	d508      	bpl.n	800c57c <_printf_i+0x14c>
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	6861      	ldr	r1, [r4, #4]
 800c56e:	4299      	cmp	r1, r3
 800c570:	bfde      	ittt	le
 800c572:	2330      	movle	r3, #48	; 0x30
 800c574:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c578:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c57c:	1b52      	subs	r2, r2, r5
 800c57e:	6122      	str	r2, [r4, #16]
 800c580:	f8cd a000 	str.w	sl, [sp]
 800c584:	464b      	mov	r3, r9
 800c586:	aa03      	add	r2, sp, #12
 800c588:	4621      	mov	r1, r4
 800c58a:	4640      	mov	r0, r8
 800c58c:	f7ff fee2 	bl	800c354 <_printf_common>
 800c590:	3001      	adds	r0, #1
 800c592:	d14c      	bne.n	800c62e <_printf_i+0x1fe>
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	b004      	add	sp, #16
 800c59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c59e:	4835      	ldr	r0, [pc, #212]	; (800c674 <_printf_i+0x244>)
 800c5a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5a4:	6829      	ldr	r1, [r5, #0]
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5ac:	6029      	str	r1, [r5, #0]
 800c5ae:	061d      	lsls	r5, r3, #24
 800c5b0:	d514      	bpl.n	800c5dc <_printf_i+0x1ac>
 800c5b2:	07df      	lsls	r7, r3, #31
 800c5b4:	bf44      	itt	mi
 800c5b6:	f043 0320 	orrmi.w	r3, r3, #32
 800c5ba:	6023      	strmi	r3, [r4, #0]
 800c5bc:	b91e      	cbnz	r6, 800c5c6 <_printf_i+0x196>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	f023 0320 	bic.w	r3, r3, #32
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	2310      	movs	r3, #16
 800c5c8:	e7b0      	b.n	800c52c <_printf_i+0xfc>
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	f043 0320 	orr.w	r3, r3, #32
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	2378      	movs	r3, #120	; 0x78
 800c5d4:	4828      	ldr	r0, [pc, #160]	; (800c678 <_printf_i+0x248>)
 800c5d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5da:	e7e3      	b.n	800c5a4 <_printf_i+0x174>
 800c5dc:	0659      	lsls	r1, r3, #25
 800c5de:	bf48      	it	mi
 800c5e0:	b2b6      	uxthmi	r6, r6
 800c5e2:	e7e6      	b.n	800c5b2 <_printf_i+0x182>
 800c5e4:	4615      	mov	r5, r2
 800c5e6:	e7bb      	b.n	800c560 <_printf_i+0x130>
 800c5e8:	682b      	ldr	r3, [r5, #0]
 800c5ea:	6826      	ldr	r6, [r4, #0]
 800c5ec:	6961      	ldr	r1, [r4, #20]
 800c5ee:	1d18      	adds	r0, r3, #4
 800c5f0:	6028      	str	r0, [r5, #0]
 800c5f2:	0635      	lsls	r5, r6, #24
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	d501      	bpl.n	800c5fc <_printf_i+0x1cc>
 800c5f8:	6019      	str	r1, [r3, #0]
 800c5fa:	e002      	b.n	800c602 <_printf_i+0x1d2>
 800c5fc:	0670      	lsls	r0, r6, #25
 800c5fe:	d5fb      	bpl.n	800c5f8 <_printf_i+0x1c8>
 800c600:	8019      	strh	r1, [r3, #0]
 800c602:	2300      	movs	r3, #0
 800c604:	6123      	str	r3, [r4, #16]
 800c606:	4615      	mov	r5, r2
 800c608:	e7ba      	b.n	800c580 <_printf_i+0x150>
 800c60a:	682b      	ldr	r3, [r5, #0]
 800c60c:	1d1a      	adds	r2, r3, #4
 800c60e:	602a      	str	r2, [r5, #0]
 800c610:	681d      	ldr	r5, [r3, #0]
 800c612:	6862      	ldr	r2, [r4, #4]
 800c614:	2100      	movs	r1, #0
 800c616:	4628      	mov	r0, r5
 800c618:	f7f3 fe6a 	bl	80002f0 <memchr>
 800c61c:	b108      	cbz	r0, 800c622 <_printf_i+0x1f2>
 800c61e:	1b40      	subs	r0, r0, r5
 800c620:	6060      	str	r0, [r4, #4]
 800c622:	6863      	ldr	r3, [r4, #4]
 800c624:	6123      	str	r3, [r4, #16]
 800c626:	2300      	movs	r3, #0
 800c628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c62c:	e7a8      	b.n	800c580 <_printf_i+0x150>
 800c62e:	6923      	ldr	r3, [r4, #16]
 800c630:	462a      	mov	r2, r5
 800c632:	4649      	mov	r1, r9
 800c634:	4640      	mov	r0, r8
 800c636:	47d0      	blx	sl
 800c638:	3001      	adds	r0, #1
 800c63a:	d0ab      	beq.n	800c594 <_printf_i+0x164>
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	079b      	lsls	r3, r3, #30
 800c640:	d413      	bmi.n	800c66a <_printf_i+0x23a>
 800c642:	68e0      	ldr	r0, [r4, #12]
 800c644:	9b03      	ldr	r3, [sp, #12]
 800c646:	4298      	cmp	r0, r3
 800c648:	bfb8      	it	lt
 800c64a:	4618      	movlt	r0, r3
 800c64c:	e7a4      	b.n	800c598 <_printf_i+0x168>
 800c64e:	2301      	movs	r3, #1
 800c650:	4632      	mov	r2, r6
 800c652:	4649      	mov	r1, r9
 800c654:	4640      	mov	r0, r8
 800c656:	47d0      	blx	sl
 800c658:	3001      	adds	r0, #1
 800c65a:	d09b      	beq.n	800c594 <_printf_i+0x164>
 800c65c:	3501      	adds	r5, #1
 800c65e:	68e3      	ldr	r3, [r4, #12]
 800c660:	9903      	ldr	r1, [sp, #12]
 800c662:	1a5b      	subs	r3, r3, r1
 800c664:	42ab      	cmp	r3, r5
 800c666:	dcf2      	bgt.n	800c64e <_printf_i+0x21e>
 800c668:	e7eb      	b.n	800c642 <_printf_i+0x212>
 800c66a:	2500      	movs	r5, #0
 800c66c:	f104 0619 	add.w	r6, r4, #25
 800c670:	e7f5      	b.n	800c65e <_printf_i+0x22e>
 800c672:	bf00      	nop
 800c674:	0800c9ed 	.word	0x0800c9ed
 800c678:	0800c9fe 	.word	0x0800c9fe

0800c67c <memmove>:
 800c67c:	4288      	cmp	r0, r1
 800c67e:	b510      	push	{r4, lr}
 800c680:	eb01 0402 	add.w	r4, r1, r2
 800c684:	d902      	bls.n	800c68c <memmove+0x10>
 800c686:	4284      	cmp	r4, r0
 800c688:	4623      	mov	r3, r4
 800c68a:	d807      	bhi.n	800c69c <memmove+0x20>
 800c68c:	1e43      	subs	r3, r0, #1
 800c68e:	42a1      	cmp	r1, r4
 800c690:	d008      	beq.n	800c6a4 <memmove+0x28>
 800c692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c69a:	e7f8      	b.n	800c68e <memmove+0x12>
 800c69c:	4402      	add	r2, r0
 800c69e:	4601      	mov	r1, r0
 800c6a0:	428a      	cmp	r2, r1
 800c6a2:	d100      	bne.n	800c6a6 <memmove+0x2a>
 800c6a4:	bd10      	pop	{r4, pc}
 800c6a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6ae:	e7f7      	b.n	800c6a0 <memmove+0x24>

0800c6b0 <_free_r>:
 800c6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6b2:	2900      	cmp	r1, #0
 800c6b4:	d044      	beq.n	800c740 <_free_r+0x90>
 800c6b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ba:	9001      	str	r0, [sp, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f1a1 0404 	sub.w	r4, r1, #4
 800c6c2:	bfb8      	it	lt
 800c6c4:	18e4      	addlt	r4, r4, r3
 800c6c6:	f000 f913 	bl	800c8f0 <__malloc_lock>
 800c6ca:	4a1e      	ldr	r2, [pc, #120]	; (800c744 <_free_r+0x94>)
 800c6cc:	9801      	ldr	r0, [sp, #4]
 800c6ce:	6813      	ldr	r3, [r2, #0]
 800c6d0:	b933      	cbnz	r3, 800c6e0 <_free_r+0x30>
 800c6d2:	6063      	str	r3, [r4, #4]
 800c6d4:	6014      	str	r4, [r2, #0]
 800c6d6:	b003      	add	sp, #12
 800c6d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6dc:	f000 b90e 	b.w	800c8fc <__malloc_unlock>
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	d908      	bls.n	800c6f6 <_free_r+0x46>
 800c6e4:	6825      	ldr	r5, [r4, #0]
 800c6e6:	1961      	adds	r1, r4, r5
 800c6e8:	428b      	cmp	r3, r1
 800c6ea:	bf01      	itttt	eq
 800c6ec:	6819      	ldreq	r1, [r3, #0]
 800c6ee:	685b      	ldreq	r3, [r3, #4]
 800c6f0:	1949      	addeq	r1, r1, r5
 800c6f2:	6021      	streq	r1, [r4, #0]
 800c6f4:	e7ed      	b.n	800c6d2 <_free_r+0x22>
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	b10b      	cbz	r3, 800c700 <_free_r+0x50>
 800c6fc:	42a3      	cmp	r3, r4
 800c6fe:	d9fa      	bls.n	800c6f6 <_free_r+0x46>
 800c700:	6811      	ldr	r1, [r2, #0]
 800c702:	1855      	adds	r5, r2, r1
 800c704:	42a5      	cmp	r5, r4
 800c706:	d10b      	bne.n	800c720 <_free_r+0x70>
 800c708:	6824      	ldr	r4, [r4, #0]
 800c70a:	4421      	add	r1, r4
 800c70c:	1854      	adds	r4, r2, r1
 800c70e:	42a3      	cmp	r3, r4
 800c710:	6011      	str	r1, [r2, #0]
 800c712:	d1e0      	bne.n	800c6d6 <_free_r+0x26>
 800c714:	681c      	ldr	r4, [r3, #0]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	6053      	str	r3, [r2, #4]
 800c71a:	4421      	add	r1, r4
 800c71c:	6011      	str	r1, [r2, #0]
 800c71e:	e7da      	b.n	800c6d6 <_free_r+0x26>
 800c720:	d902      	bls.n	800c728 <_free_r+0x78>
 800c722:	230c      	movs	r3, #12
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	e7d6      	b.n	800c6d6 <_free_r+0x26>
 800c728:	6825      	ldr	r5, [r4, #0]
 800c72a:	1961      	adds	r1, r4, r5
 800c72c:	428b      	cmp	r3, r1
 800c72e:	bf04      	itt	eq
 800c730:	6819      	ldreq	r1, [r3, #0]
 800c732:	685b      	ldreq	r3, [r3, #4]
 800c734:	6063      	str	r3, [r4, #4]
 800c736:	bf04      	itt	eq
 800c738:	1949      	addeq	r1, r1, r5
 800c73a:	6021      	streq	r1, [r4, #0]
 800c73c:	6054      	str	r4, [r2, #4]
 800c73e:	e7ca      	b.n	800c6d6 <_free_r+0x26>
 800c740:	b003      	add	sp, #12
 800c742:	bd30      	pop	{r4, r5, pc}
 800c744:	24000e74 	.word	0x24000e74

0800c748 <sbrk_aligned>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	4e0e      	ldr	r6, [pc, #56]	; (800c784 <sbrk_aligned+0x3c>)
 800c74c:	460c      	mov	r4, r1
 800c74e:	6831      	ldr	r1, [r6, #0]
 800c750:	4605      	mov	r5, r0
 800c752:	b911      	cbnz	r1, 800c75a <sbrk_aligned+0x12>
 800c754:	f000 f8bc 	bl	800c8d0 <_sbrk_r>
 800c758:	6030      	str	r0, [r6, #0]
 800c75a:	4621      	mov	r1, r4
 800c75c:	4628      	mov	r0, r5
 800c75e:	f000 f8b7 	bl	800c8d0 <_sbrk_r>
 800c762:	1c43      	adds	r3, r0, #1
 800c764:	d00a      	beq.n	800c77c <sbrk_aligned+0x34>
 800c766:	1cc4      	adds	r4, r0, #3
 800c768:	f024 0403 	bic.w	r4, r4, #3
 800c76c:	42a0      	cmp	r0, r4
 800c76e:	d007      	beq.n	800c780 <sbrk_aligned+0x38>
 800c770:	1a21      	subs	r1, r4, r0
 800c772:	4628      	mov	r0, r5
 800c774:	f000 f8ac 	bl	800c8d0 <_sbrk_r>
 800c778:	3001      	adds	r0, #1
 800c77a:	d101      	bne.n	800c780 <sbrk_aligned+0x38>
 800c77c:	f04f 34ff 	mov.w	r4, #4294967295
 800c780:	4620      	mov	r0, r4
 800c782:	bd70      	pop	{r4, r5, r6, pc}
 800c784:	24000e78 	.word	0x24000e78

0800c788 <_malloc_r>:
 800c788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78c:	1ccd      	adds	r5, r1, #3
 800c78e:	f025 0503 	bic.w	r5, r5, #3
 800c792:	3508      	adds	r5, #8
 800c794:	2d0c      	cmp	r5, #12
 800c796:	bf38      	it	cc
 800c798:	250c      	movcc	r5, #12
 800c79a:	2d00      	cmp	r5, #0
 800c79c:	4607      	mov	r7, r0
 800c79e:	db01      	blt.n	800c7a4 <_malloc_r+0x1c>
 800c7a0:	42a9      	cmp	r1, r5
 800c7a2:	d905      	bls.n	800c7b0 <_malloc_r+0x28>
 800c7a4:	230c      	movs	r3, #12
 800c7a6:	603b      	str	r3, [r7, #0]
 800c7a8:	2600      	movs	r6, #0
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b0:	4e2e      	ldr	r6, [pc, #184]	; (800c86c <_malloc_r+0xe4>)
 800c7b2:	f000 f89d 	bl	800c8f0 <__malloc_lock>
 800c7b6:	6833      	ldr	r3, [r6, #0]
 800c7b8:	461c      	mov	r4, r3
 800c7ba:	bb34      	cbnz	r4, 800c80a <_malloc_r+0x82>
 800c7bc:	4629      	mov	r1, r5
 800c7be:	4638      	mov	r0, r7
 800c7c0:	f7ff ffc2 	bl	800c748 <sbrk_aligned>
 800c7c4:	1c43      	adds	r3, r0, #1
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	d14d      	bne.n	800c866 <_malloc_r+0xde>
 800c7ca:	6834      	ldr	r4, [r6, #0]
 800c7cc:	4626      	mov	r6, r4
 800c7ce:	2e00      	cmp	r6, #0
 800c7d0:	d140      	bne.n	800c854 <_malloc_r+0xcc>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	4631      	mov	r1, r6
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	eb04 0803 	add.w	r8, r4, r3
 800c7dc:	f000 f878 	bl	800c8d0 <_sbrk_r>
 800c7e0:	4580      	cmp	r8, r0
 800c7e2:	d13a      	bne.n	800c85a <_malloc_r+0xd2>
 800c7e4:	6821      	ldr	r1, [r4, #0]
 800c7e6:	3503      	adds	r5, #3
 800c7e8:	1a6d      	subs	r5, r5, r1
 800c7ea:	f025 0503 	bic.w	r5, r5, #3
 800c7ee:	3508      	adds	r5, #8
 800c7f0:	2d0c      	cmp	r5, #12
 800c7f2:	bf38      	it	cc
 800c7f4:	250c      	movcc	r5, #12
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f7ff ffa5 	bl	800c748 <sbrk_aligned>
 800c7fe:	3001      	adds	r0, #1
 800c800:	d02b      	beq.n	800c85a <_malloc_r+0xd2>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	442b      	add	r3, r5
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	e00e      	b.n	800c828 <_malloc_r+0xa0>
 800c80a:	6822      	ldr	r2, [r4, #0]
 800c80c:	1b52      	subs	r2, r2, r5
 800c80e:	d41e      	bmi.n	800c84e <_malloc_r+0xc6>
 800c810:	2a0b      	cmp	r2, #11
 800c812:	d916      	bls.n	800c842 <_malloc_r+0xba>
 800c814:	1961      	adds	r1, r4, r5
 800c816:	42a3      	cmp	r3, r4
 800c818:	6025      	str	r5, [r4, #0]
 800c81a:	bf18      	it	ne
 800c81c:	6059      	strne	r1, [r3, #4]
 800c81e:	6863      	ldr	r3, [r4, #4]
 800c820:	bf08      	it	eq
 800c822:	6031      	streq	r1, [r6, #0]
 800c824:	5162      	str	r2, [r4, r5]
 800c826:	604b      	str	r3, [r1, #4]
 800c828:	4638      	mov	r0, r7
 800c82a:	f104 060b 	add.w	r6, r4, #11
 800c82e:	f000 f865 	bl	800c8fc <__malloc_unlock>
 800c832:	f026 0607 	bic.w	r6, r6, #7
 800c836:	1d23      	adds	r3, r4, #4
 800c838:	1af2      	subs	r2, r6, r3
 800c83a:	d0b6      	beq.n	800c7aa <_malloc_r+0x22>
 800c83c:	1b9b      	subs	r3, r3, r6
 800c83e:	50a3      	str	r3, [r4, r2]
 800c840:	e7b3      	b.n	800c7aa <_malloc_r+0x22>
 800c842:	6862      	ldr	r2, [r4, #4]
 800c844:	42a3      	cmp	r3, r4
 800c846:	bf0c      	ite	eq
 800c848:	6032      	streq	r2, [r6, #0]
 800c84a:	605a      	strne	r2, [r3, #4]
 800c84c:	e7ec      	b.n	800c828 <_malloc_r+0xa0>
 800c84e:	4623      	mov	r3, r4
 800c850:	6864      	ldr	r4, [r4, #4]
 800c852:	e7b2      	b.n	800c7ba <_malloc_r+0x32>
 800c854:	4634      	mov	r4, r6
 800c856:	6876      	ldr	r6, [r6, #4]
 800c858:	e7b9      	b.n	800c7ce <_malloc_r+0x46>
 800c85a:	230c      	movs	r3, #12
 800c85c:	603b      	str	r3, [r7, #0]
 800c85e:	4638      	mov	r0, r7
 800c860:	f000 f84c 	bl	800c8fc <__malloc_unlock>
 800c864:	e7a1      	b.n	800c7aa <_malloc_r+0x22>
 800c866:	6025      	str	r5, [r4, #0]
 800c868:	e7de      	b.n	800c828 <_malloc_r+0xa0>
 800c86a:	bf00      	nop
 800c86c:	24000e74 	.word	0x24000e74

0800c870 <_realloc_r>:
 800c870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c874:	4680      	mov	r8, r0
 800c876:	4614      	mov	r4, r2
 800c878:	460e      	mov	r6, r1
 800c87a:	b921      	cbnz	r1, 800c886 <_realloc_r+0x16>
 800c87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c880:	4611      	mov	r1, r2
 800c882:	f7ff bf81 	b.w	800c788 <_malloc_r>
 800c886:	b92a      	cbnz	r2, 800c894 <_realloc_r+0x24>
 800c888:	f7ff ff12 	bl	800c6b0 <_free_r>
 800c88c:	4625      	mov	r5, r4
 800c88e:	4628      	mov	r0, r5
 800c890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c894:	f000 f838 	bl	800c908 <_malloc_usable_size_r>
 800c898:	4284      	cmp	r4, r0
 800c89a:	4607      	mov	r7, r0
 800c89c:	d802      	bhi.n	800c8a4 <_realloc_r+0x34>
 800c89e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8a2:	d812      	bhi.n	800c8ca <_realloc_r+0x5a>
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	f7ff ff6e 	bl	800c788 <_malloc_r>
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d0ed      	beq.n	800c88e <_realloc_r+0x1e>
 800c8b2:	42bc      	cmp	r4, r7
 800c8b4:	4622      	mov	r2, r4
 800c8b6:	4631      	mov	r1, r6
 800c8b8:	bf28      	it	cs
 800c8ba:	463a      	movcs	r2, r7
 800c8bc:	f7ff fba4 	bl	800c008 <memcpy>
 800c8c0:	4631      	mov	r1, r6
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	f7ff fef4 	bl	800c6b0 <_free_r>
 800c8c8:	e7e1      	b.n	800c88e <_realloc_r+0x1e>
 800c8ca:	4635      	mov	r5, r6
 800c8cc:	e7df      	b.n	800c88e <_realloc_r+0x1e>
	...

0800c8d0 <_sbrk_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d06      	ldr	r5, [pc, #24]	; (800c8ec <_sbrk_r+0x1c>)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	4608      	mov	r0, r1
 800c8da:	602b      	str	r3, [r5, #0]
 800c8dc:	f7f5 ff70 	bl	80027c0 <_sbrk>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d102      	bne.n	800c8ea <_sbrk_r+0x1a>
 800c8e4:	682b      	ldr	r3, [r5, #0]
 800c8e6:	b103      	cbz	r3, 800c8ea <_sbrk_r+0x1a>
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	bd38      	pop	{r3, r4, r5, pc}
 800c8ec:	24000e7c 	.word	0x24000e7c

0800c8f0 <__malloc_lock>:
 800c8f0:	4801      	ldr	r0, [pc, #4]	; (800c8f8 <__malloc_lock+0x8>)
 800c8f2:	f000 b811 	b.w	800c918 <__retarget_lock_acquire_recursive>
 800c8f6:	bf00      	nop
 800c8f8:	24000e80 	.word	0x24000e80

0800c8fc <__malloc_unlock>:
 800c8fc:	4801      	ldr	r0, [pc, #4]	; (800c904 <__malloc_unlock+0x8>)
 800c8fe:	f000 b80c 	b.w	800c91a <__retarget_lock_release_recursive>
 800c902:	bf00      	nop
 800c904:	24000e80 	.word	0x24000e80

0800c908 <_malloc_usable_size_r>:
 800c908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c90c:	1f18      	subs	r0, r3, #4
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bfbc      	itt	lt
 800c912:	580b      	ldrlt	r3, [r1, r0]
 800c914:	18c0      	addlt	r0, r0, r3
 800c916:	4770      	bx	lr

0800c918 <__retarget_lock_acquire_recursive>:
 800c918:	4770      	bx	lr

0800c91a <__retarget_lock_release_recursive>:
 800c91a:	4770      	bx	lr

0800c91c <_init>:
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	bf00      	nop
 800c920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c922:	bc08      	pop	{r3}
 800c924:	469e      	mov	lr, r3
 800c926:	4770      	bx	lr

0800c928 <_fini>:
 800c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92a:	bf00      	nop
 800c92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92e:	bc08      	pop	{r3}
 800c930:	469e      	mov	lr, r3
 800c932:	4770      	bx	lr
